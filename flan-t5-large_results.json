[{"prompt": "Given \\eta{(a)} = e^{a}, then derive \\frac{d}{d a} \\eta{(a)} = e^{a}, then obtain \\eta{(a)} \\frac{d^{2}}{d a^{2}} \\eta{(a)} = \\eta^{2}{(a)}", "derivation": "\\eta{(a)} = e^{a} and \\frac{d}{d a} \\eta{(a)} = \\frac{d}{d a} e^{a} and \\frac{d}{d a} \\eta{(a)} = e^{a} and \\frac{d}{d a} \\eta{(a)} = \\eta{(a)} and \\eta{(a)} \\frac{d}{d a} \\eta{(a)} = \\eta^{2}{(a)} and \\frac{d}{d a} \\eta{(a)} = \\frac{d^{2}}{d a^{2}} \\eta{(a)} and \\eta{(a)} \\frac{d^{2}}{d a^{2}} \\eta{(a)} = \\eta^{2}{(a)}", "srepr_derivation": [["premise", "Equality(Function('\\\\eta')(Symbol('a', commutative=True)), exp(Symbol('a', commutative=True)))"], [["differentiate", 1, "Symbol('a', commutative=True)"], "Equality(Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Derivative(exp(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), exp(Symbol('a', commutative=True)))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Function('\\\\eta')(Symbol('a', commutative=True)))"], [["times", 4, "Function('\\\\eta')(Symbol('a', commutative=True))"], "Equality(Mul(Function('\\\\eta')(Symbol('a', commutative=True)), Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1)))), Pow(Function('\\\\eta')(Symbol('a', commutative=True)), Integer(2)))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(2))))"], [["substitute_LHS_for_RHS", 5, 6], "Equality(Mul(Function('\\\\eta')(Symbol('a', commutative=True)), Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(2)))), Pow(Function('\\\\eta')(Symbol('a', commutative=True)), Integer(2)))"]], "EE prompt": "Given e^{a} = \\eta{(a)}, then derive e^{a} = \\frac{d}{d a} \\eta{(a)}, then obtain \\eta^{2}{(a)} = \\eta{(a)} \\frac{d^{2}}{d a^{2}} \\eta{(a)}", "EE derivation": "e^{a} = \\eta{(a)} and \\frac{d}{d a} e^{a} = \\frac{d}{d a} \\eta{(a)} and e^{a} = \\frac{d}{d a} \\eta{(a)} and \\eta{(a)} = \\frac{d}{d a} \\eta{(a)} and \\eta^{2}{(a)} = \\eta{(a)} \\frac{d}{d a} \\eta{(a)} and \\frac{d^{2}}{d a^{2}} \\eta{(a)} = \\frac{d}{d a} \\eta{(a)} and \\eta^{2}{(a)} = \\eta{(a)} \\frac{d^{2}}{d a^{2}} \\eta{(a)}", "EE srepr_derivation": [["premise", "Equality(exp(Symbol('a', commutative=True)), Function('\\\\eta')(Symbol('a', commutative=True)))"], [["differentiate", 1, "Symbol('a', commutative=True)"], "Equality(Derivative(exp(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(exp(Symbol('a', commutative=True)), Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Function('\\\\eta')(Symbol('a', commutative=True)), Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))))"], [["times", 4, "Function('\\\\eta')(Symbol('a', commutative=True))"], "Equality(Pow(Function('\\\\eta')(Symbol('a', commutative=True)), Integer(2)), Mul(Function('\\\\eta')(Symbol('a', commutative=True)), Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(2))), Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 5, 6], "Equality(Pow(Function('\\\\eta')(Symbol('a', commutative=True)), Integer(2)), Mul(Function('\\\\eta')(Symbol('a', commutative=True)), Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(2)))))"]], "AG prompt": "Given \\eta{(a)} = e^{a}, then derive \\frac{d}{d a} \\eta{(a)} = e^{a}, then obtain \\frac{d^{2}}{d a^{2}} \\eta{(a)} = \\frac{d^{3}}{d a^{3}} \\eta{(a)}", "AG derivation": "\\eta{(a)} = e^{a} and \\frac{d}{d a} \\eta{(a)} = \\frac{d}{d a} e^{a} and \\frac{d}{d a} \\eta{(a)} = e^{a} and \\frac{d}{d a} \\eta{(a)} = \\eta{(a)} and \\eta{(a)} \\frac{d}{d a} \\eta{(a)} = \\eta^{2}{(a)} and \\frac{d}{d a} \\eta{(a)} = \\frac{d^{2}}{d a^{2}} \\eta{(a)} and \\frac{d^{2}}{d a^{2}} \\eta{(a)} = \\frac{d^{3}}{d a^{3}} \\eta{(a)}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\eta')(Symbol('a', commutative=True)), exp(Symbol('a', commutative=True)))"], [["differentiate", 1, "Symbol('a', commutative=True)"], "Equality(Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Derivative(exp(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), exp(Symbol('a', commutative=True)))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Function('\\\\eta')(Symbol('a', commutative=True)))"], [["times", 4, "Function('\\\\eta')(Symbol('a', commutative=True))"], "Equality(Mul(Function('\\\\eta')(Symbol('a', commutative=True)), Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1)))), Pow(Function('\\\\eta')(Symbol('a', commutative=True)), Integer(2)))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(2))))"], [["substitute_RHS_for_LHS", 6, 4], "Equality(Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(2))), Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(3))))"]], "SR prompt": "Given \\eta{(a)} = e^{a}, then obtain \\eta{(a)} \\frac{d^{2}}{d a^{2}} \\eta{(a)} = \\eta^{2}{(a)}", "SR derivation": "\\eta{(a)} = e^{a} and \\frac{d}{d a} \\eta{(a)} = \\frac{d}{d a} e^{a} and \\frac{d}{d a} \\eta{(a)} = e^{a} and \\frac{d}{d a} \\eta{(a)} = \\eta{(a)} and \\eta{(a)} \\frac{d}{d a} \\eta{(a)} = \\eta^{2}{(a)} and \\frac{d}{d a} \\eta{(a)} = \\frac{d^{2}}{d a^{2}} \\eta{(a)} and \\eta{(a)} \\frac{d^{2}}{d a^{2}} \\eta{(a)} = \\eta^{2}{(a)}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\eta')(Symbol('a', commutative=True)), exp(Symbol('a', commutative=True)))"], [["differentiate", 1, "Symbol('a', commutative=True)"], "Equality(Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Derivative(exp(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), exp(Symbol('a', commutative=True)))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Function('\\\\eta')(Symbol('a', commutative=True)))"], [["times", 4, "Function('\\\\eta')(Symbol('a', commutative=True))"], "Equality(Mul(Function('\\\\eta')(Symbol('a', commutative=True)), Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1)))), Pow(Function('\\\\eta')(Symbol('a', commutative=True)), Integer(2)))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(2))))"], [["substitute_LHS_for_RHS", 5, 6], "Equality(Mul(Function('\\\\eta')(Symbol('a', commutative=True)), Derivative(Function('\\\\eta')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(2)))), Pow(Function('\\\\eta')(Symbol('a', commutative=True)), Integer(2)))"]], "VR prompt": "Given \\beta{(\\iota)} = e^{\\iota}, then derive \\frac{d}{d \\iota} \\beta{(\\iota)} = e^{\\iota}, then obtain \\beta{(\\iota)} \\frac{d^{2}}{d \\iota^{2}} \\beta{(\\iota)} = \\beta^{2}{(\\iota)}", "VR derivation": "\\beta{(\\iota)} = e^{\\iota} and \\frac{d}{d \\iota} \\beta{(\\iota)} = \\frac{d}{d \\iota} e^{\\iota} and \\frac{d}{d \\iota} \\beta{(\\iota)} = e^{\\iota} and \\frac{d}{d \\iota} \\beta{(\\iota)} = \\beta{(\\iota)} and \\beta{(\\iota)} \\frac{d}{d \\iota} \\beta{(\\iota)} = \\beta^{2}{(\\iota)} and \\frac{d}{d \\iota} \\beta{(\\iota)} = \\frac{d^{2}}{d \\iota^{2}} \\beta{(\\iota)} and \\beta{(\\iota)} \\frac{d^{2}}{d \\iota^{2}} \\beta{(\\iota)} = \\beta^{2}{(\\iota)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\beta')(Symbol('\\\\iota', commutative=True)), exp(Symbol('\\\\iota', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\iota', commutative=True)"], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))), Derivative(exp(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))), exp(Symbol('\\\\iota', commutative=True)))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))), Function('\\\\beta')(Symbol('\\\\iota', commutative=True)))"], [["times", 4, "Function('\\\\beta')(Symbol('\\\\iota', commutative=True))"], "Equality(Mul(Function('\\\\beta')(Symbol('\\\\iota', commutative=True)), Derivative(Function('\\\\beta')(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1)))), Pow(Function('\\\\beta')(Symbol('\\\\iota', commutative=True)), Integer(2)))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))), Derivative(Function('\\\\beta')(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(2))))"], [["substitute_LHS_for_RHS", 5, 6], "Equality(Mul(Function('\\\\beta')(Symbol('\\\\iota', commutative=True)), Derivative(Function('\\\\beta')(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(2)))), Pow(Function('\\\\beta')(Symbol('\\\\iota', commutative=True)), Integer(2)))"]], "static_flan-t5-large": "eta { (a) } = e ^ { a } and \\ frac { d } { d a } \\ eta { (a) } = \\ frac { d } { d a } e ^ { a } and \\ frac { d } { d a } \\ eta { (a) } = e ^ { a } and \\ frac { d } { d a } \\ eta { (a) } \\ frac { d } { d a } \\ eta { (a) } = \\ eta { (a) } \\ frac { d } { d a } e ^ { a } and \\ frac { d } { d a } \\ eta { (a) } \\ frac { d } { d a } \\ eta { (a) } = \\ e ^ { a } \\ frac { d } { d a } \\ eta { (a) } and \\ frac { d ^ { 2 } } { d a ^ { 2 } } \\ eta { (a) } = e ^ { a } and \\ eta { (a) } \\ frac { d ^ { 2 } } { d a ^ { 2 } } \\ eta { (a) } = \\ eta ^ { 2 } { (a) }", "VR_flan-t5-large": "beta { ( \\ iota) } = e ^ { \\ iota } and \\ frac { d } { d \\ iota } \\ beta { ( \\ iota) } = \\ frac { d } { d \\ iota } e ^ { \\ iota } and \\ frac { d } { d \\ iota } \\ beta { ( \\ iota) } = e ^ { \\ iota } and \\ frac { d } { d \\ iota } \\ beta { ( \\ iota) } = \\ frac { d ^ { 2 } } { d \\ iota ^ { 2 } } \\ beta { ( \\ iota) } and \\ frac { d } { d \\ iota } e ^ { \\ iota } = e ^ { \\ iota } and \\ frac { d ^ { 2 } } { d \\ iota ^ { 2 } } \\ beta { ( \\ iota) } = \\ frac { d } { d \\ iota } \\ beta { ( \\ iota) } and \\ beta { ( \\ iota) } \\ frac { d ^ { 2 } } { d \\ iota ^ { 2 } } \\ beta { ( \\ iota) } = \\ beta ^ { 2 } { ( \\ iota) }", "EE_flan-t5-large": "e ^ { a } = \\ eta { (a) } and e ^ { a } = \\ frac { d } { d a } \\ eta { (a) } and \\ frac { d } { d a } e ^ { a } = \\ frac { d ^ { 2 } } { d a ^ { 2 } } \\ eta { (a) } and e ^ { a } = \\ frac { d } { d a } \\ eta { (a) } and \\ frac { d } { d a } \\ eta { (a) } = \\ frac { d ^ { 2 } } { d a ^ { 2 } } \\ eta { (a) } and \\ eta ^ { 2 } { (a) } = \\ eta { (a) } \\ frac { d ^ { 2 } } { d a ^ { 2 } } \\ eta { (a) }", "AG_flan-t5-large": "eta { (a) } = e ^ { a } and \\ frac { d } { d a } \\ eta { (a) } = \\ frac { d } { d a } e ^ { a } and \\ frac { d } { d a } \\ eta { (a) } = e ^ { a } and \\ frac { d } { d a } \\ eta { (a) } = \\ e ^ { a } and \\ frac { d ^ { 2 } } { d a ^ { 2 } } \\ eta { (a) } = \\ frac { d ^ { 2 } } { d a ^ { 2 } } e ^ { a } and \\ frac { d ^ { 2 } } { d a ^ { 2 } } \\ eta { (a) } = \\ frac { d ^ { 3 } } { d a ^ { 3 } } \\ eta { (a) }", "SR_flan-t5-large": "eta { (a) } = e ^ { a } and \\ frac { d } { d a } \\ eta { (a) } = \\ frac { d } { d a } e ^ { a } and \\ frac { d ^ { 2 } } { d a ^ { 2 } } \\ eta { (a) } = \\ frac { d ^ { 2 } } { d a ^ { 2 } } e ^ { a } and \\ eta { (a) } \\ frac { d ^ { 2 } } { d a ^ { 2 } } \\ eta { (a) } = \\ eta ^ { 2 } { (a) }", "static_rouge": 0.8622754491017965, "static_bleu": 0.8136057028205682, "static_bleurt": 0.8813397884368896, "static_gleu": 0.8141153081510935, "VR_rouge": -0.013541544362255742, "EE_rouge": 0.019418306244653682, "AG_rouge": 0.02665901074563215, "SR_rouge": 0.1573574163149113, "VR_rouge_abs": 0.01098039215686275, "EE_rouge_abs": 0.1950743099787685, "AG_rouge_abs": 0.17810457516339873, "SR_rouge_abs": 0.38129496402877694, "VR_bleu": -0.07963440447322301, "EE_bleu": 0.023045584691653742, "AG_bleu": 0.04565578663152625, "SR_bleu": 0.29107854369408503, "VR_bleu_abs": 0.032478298253622584, "EE_bleu_abs": 0.3441090470343484, "AG_bleu_abs": 0.2875582231771292, "SR_bleu_abs": 0.6081303123930909, "VR_bleurt": 0.0856485366821289, "EE_bleurt": 0.03583395481109619, "AG_bleurt": 0.25400036573410034, "SR_bleurt": 0.2789071202278137, "VR_bleurt_abs": 0.1535358801484108, "EE_bleurt_abs": 0.2049923539161682, "AG_bleurt_abs": 0.2318207025527954, "SR_bleurt_abs": 0.35097843408584595, "VR_gleu": -0.08001467088454595, "EE_gleu": 0.01434950018856418, "AG_gleu": 0.03621098013287016, "SR_gleu": 0.2251223339122176, "VR_gleu_abs": 0.02853824421889717, "EE_gleu_abs": 0.30920332804112094, "AG_gleu_abs": 0.2571269422191226, "SR_gleu_abs": 0.5039761431411531, "ratio_VR_rouge": 0.9625668449197861, "ratio_VR_bleu": 0.9361536273123802, "ratio_VR_bleurt": 0.4278247561806821, "ratio_VR_gleu": 0.9462076745873962, "ratio_EE_rouge": 0.7939355880505966, "ratio_EE_bleu": 0.6389770284491737, "ratio_EE_bleurt": 0.7427491707156308, "ratio_EE_gleu": 0.6760004390832917, "ratio_AG_rouge": 0.8080985915492958, "ratio_AG_bleu": 0.6897275551512462, "ratio_AG_bleurt": 0.7101307625517517, "ratio_AG_gleu": 0.7226566888594722, "ratio_SR_rouge": 0.6187050359712231, "ratio_SR_bleu": 0.3918696876069091, "ratio_SR_bleurt": 0.594073909138099, "ratio_SR_gleu": 0.4960238568588469}, {"prompt": "Given \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = \\frac{d}{d \\mathbf{s}} \\sin{(\\mathbf{s})}, then derive \\frac{d}{d \\mathbf{s}} \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = - \\sin{(\\mathbf{s})}, then obtain \\frac{d^{2}}{d \\mathbf{s}^{2}} \\sin{(\\mathbf{s})} = - \\sin{(\\mathbf{s})}", "derivation": "\\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = \\frac{d}{d \\mathbf{s}} \\sin{(\\mathbf{s})} and \\frac{d}{d \\mathbf{s}} \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = \\frac{d^{2}}{d \\mathbf{s}^{2}} \\sin{(\\mathbf{s})} and \\frac{d}{d \\mathbf{s}} \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = - \\sin{(\\mathbf{s})} and \\frac{d^{2}}{d \\mathbf{s}^{2}} \\sin{(\\mathbf{s})} = - \\sin{(\\mathbf{s})}", "srepr_derivation": [["premise", "Equality(Function('J_{\\\\varepsilon}')(Symbol('\\\\mathbf{s}', commutative=True)), Derivative(sin(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('\\\\mathbf{s}', commutative=True)"], "Equality(Derivative(Function('J_{\\\\varepsilon}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(2))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('J_{\\\\varepsilon}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('\\\\mathbf{s}', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(sin(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(2))), Mul(Integer(-1), sin(Symbol('\\\\mathbf{s}', commutative=True))))"]], "EE prompt": "Given \\frac{d}{d \\mathbf{s}} \\sin{(\\mathbf{s})} = \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})}, then derive - \\sin{(\\mathbf{s})} = \\frac{d}{d \\mathbf{s}} \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})}, then obtain - \\sin{(\\mathbf{s})} = \\frac{d^{2}}{d \\mathbf{s}^{2}} \\sin{(\\mathbf{s})}", "EE derivation": "\\frac{d}{d \\mathbf{s}} \\sin{(\\mathbf{s})} = \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} and \\frac{d^{2}}{d \\mathbf{s}^{2}} \\sin{(\\mathbf{s})} = \\frac{d}{d \\mathbf{s}} \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} and - \\sin{(\\mathbf{s})} = \\frac{d}{d \\mathbf{s}} \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} and - \\sin{(\\mathbf{s})} = \\frac{d^{2}}{d \\mathbf{s}^{2}} \\sin{(\\mathbf{s})}", "EE srepr_derivation": [["premise", "Equality(Derivative(sin(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(1))), Function('J_{\\\\varepsilon}')(Symbol('\\\\mathbf{s}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\mathbf{s}', commutative=True)"], "Equality(Derivative(sin(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(2))), Derivative(Function('J_{\\\\varepsilon}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Mul(Integer(-1), sin(Symbol('\\\\mathbf{s}', commutative=True))), Derivative(Function('J_{\\\\varepsilon}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 3, 2], "Equality(Mul(Integer(-1), sin(Symbol('\\\\mathbf{s}', commutative=True))), Derivative(sin(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(2))))"]], "AG prompt": "Given \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = \\frac{d}{d \\mathbf{s}} \\sin{(\\mathbf{s})}, then derive \\frac{d}{d \\mathbf{s}} \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = - \\sin{(\\mathbf{s})}, then obtain \\mathbf{s} + \\frac{d}{d \\mathbf{s}} \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = \\mathbf{s} - \\sin{(\\mathbf{s})}", "AG derivation": "\\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = \\frac{d}{d \\mathbf{s}} \\sin{(\\mathbf{s})} and \\frac{d}{d \\mathbf{s}} \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = \\frac{d^{2}}{d \\mathbf{s}^{2}} \\sin{(\\mathbf{s})} and \\frac{d}{d \\mathbf{s}} \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = - \\sin{(\\mathbf{s})} and \\mathbf{s} + \\frac{d}{d \\mathbf{s}} \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = \\mathbf{s} - \\sin{(\\mathbf{s})}", "AG srepr_derivation": [["premise", "Equality(Function('J_{\\\\varepsilon}')(Symbol('\\\\mathbf{s}', commutative=True)), Derivative(sin(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('\\\\mathbf{s}', commutative=True)"], "Equality(Derivative(Function('J_{\\\\varepsilon}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(2))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('J_{\\\\varepsilon}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('\\\\mathbf{s}', commutative=True))))"], [["add", 3, "Symbol('\\\\mathbf{s}', commutative=True)"], "Equality(Add(Symbol('\\\\mathbf{s}', commutative=True), Derivative(Function('J_{\\\\varepsilon}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(1)))), Add(Symbol('\\\\mathbf{s}', commutative=True), Mul(Integer(-1), sin(Symbol('\\\\mathbf{s}', commutative=True)))))"]], "SR prompt": "Given \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = \\frac{d}{d \\mathbf{s}} \\sin{(\\mathbf{s})}, then obtain \\frac{d^{2}}{d \\mathbf{s}^{2}} \\sin{(\\mathbf{s})} = - \\sin{(\\mathbf{s})}", "SR derivation": "\\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = \\frac{d}{d \\mathbf{s}} \\sin{(\\mathbf{s})} and \\frac{d}{d \\mathbf{s}} \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = \\frac{d^{2}}{d \\mathbf{s}^{2}} \\sin{(\\mathbf{s})} and \\frac{d}{d \\mathbf{s}} \\operatorname{J_{\\varepsilon}}{(\\mathbf{s})} = - \\sin{(\\mathbf{s})} and \\frac{d^{2}}{d \\mathbf{s}^{2}} \\sin{(\\mathbf{s})} = - \\sin{(\\mathbf{s})}", "SR srepr_derivation": [["premise", "Equality(Function('J_{\\\\varepsilon}')(Symbol('\\\\mathbf{s}', commutative=True)), Derivative(sin(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('\\\\mathbf{s}', commutative=True)"], "Equality(Derivative(Function('J_{\\\\varepsilon}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(2))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('J_{\\\\varepsilon}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('\\\\mathbf{s}', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(sin(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True), Integer(2))), Mul(Integer(-1), sin(Symbol('\\\\mathbf{s}', commutative=True))))"]], "VR prompt": "Given \\beta{(\\gamma)} = \\frac{d}{d \\gamma} \\sin{(\\gamma)}, then derive \\frac{d}{d \\gamma} \\beta{(\\gamma)} = - \\sin{(\\gamma)}, then obtain \\frac{d^{2}}{d \\gamma^{2}} \\sin{(\\gamma)} = - \\sin{(\\gamma)}", "VR derivation": "\\beta{(\\gamma)} = \\frac{d}{d \\gamma} \\sin{(\\gamma)} and \\frac{d}{d \\gamma} \\beta{(\\gamma)} = \\frac{d^{2}}{d \\gamma^{2}} \\sin{(\\gamma)} and \\frac{d}{d \\gamma} \\beta{(\\gamma)} = - \\sin{(\\gamma)} and \\frac{d^{2}}{d \\gamma^{2}} \\sin{(\\gamma)} = - \\sin{(\\gamma)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\beta')(Symbol('\\\\gamma', commutative=True)), Derivative(sin(Symbol('\\\\gamma', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('\\\\gamma', commutative=True)"], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\gamma', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\gamma', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True), Integer(2))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\gamma', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('\\\\gamma', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(sin(Symbol('\\\\gamma', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True), Integer(2))), Mul(Integer(-1), sin(Symbol('\\\\gamma', commutative=True))))"]], "static_flan-t5-large": "operatorname { J_ { \\ varepsilon } } { ( \\ mathbf { s } ) } = \\ frac { d } { d \\ mathbf { s } } \\ sin { ( \\ mathbf { s } ) } and \\ frac { d } { d \\ mathbf { s } } \\ operatorname { J_ { \\ varepsilon } } { ( \\ mathbf { s } ) } = \\ frac { d ^ { 2 } } { d \\ mathbf { s } ^ { 2 } } \\ sin { ( \\ mathbf { s } ) } and \\ frac { d } { d \\ mathbf { s } } \\ operatorname { J_ { \\ varepsilon } } { ( \\ mathbf { s } ) } = - \\ sin { ( \\ mathbf { s } ) } and \\ frac { d ^ { 2 } } { d \\ mathbf { s } ^ { 2 } } \\ sin { ( \\ mathbf { s } ) } = - \\ sin { ( \\ mathbf { s } ) }", "VR_flan-t5-large": "beta { ( \\ gamma) } = \\ frac { d } { d \\ gamma } \\ sin { ( \\ gamma) } and \\ frac { d } { d \\ gamma } \\ beta { ( \\ gamma) } = \\ frac { d ^ { 2 } } { d \\ gamma ^ { 2 } } \\ sin { ( \\ gamma) } and \\ frac { d } { d \\ gamma } \\ beta { ( \\ gamma) } = - \\ sin { ( \\ gamma) } and \\ frac { d ^ { 2 } } { d \\ gamma ^ { 2 } } \\ sin { ( \\ gamma) } = - \\ sin { ( \\ gamma) }", "EE_flan-t5-large": "frac { d } { d \\ mathbf { s } } \\ sin { ( \\ mathbf { s } ) } = \\ operatorname { J_ { \\ varepsilon } } { ( \\ mathbf { s } ) } and \\ frac { d } { d \\ mathbf { s } } \\ sin { ( \\ mathbf { s } ) } = \\ frac { d ^ { 2 } } { d \\ mathbf { s } ^ { 2 } } \\ sin { ( \\ mathbf { s } ) } and - \\ sin { ( \\ mathbf { s } ) } = \\ frac { d } { d \\ mathbf { s } } \\ operatorname { J_ { \\ varepsilon } } { ( \\ mathbf { s } ) } and - \\ sin { ( \\ mathbf { s } ) } = \\ frac { d ^ { 2 } } { d \\ mathbf { s } ^ { 2 } } \\ sin { ( \\ mathbf { s } ) }", "AG_flan-t5-large": "operatorname { J_ { \\ varepsilon } } { ( \\ mathbf { s } ) } = \\ frac { d } { d \\ mathbf { s } } \\ sin { ( \\ mathbf { s } ) } and \\ frac { d } { d \\ mathbf { s } } \\ operatorname { J_ { \\ varepsilon } } { ( \\ mathbf { s } ) } = \\ frac { d ^ { 2 } } { d \\ mathbf { s } ^ { 2 } } \\ sin { ( \\ mathbf { s } ) } and \\ frac { d } { d \\ mathbf { s } } \\ operatorname { J_ { \\ varepsilon } } { ( \\ mathbf { s } ) } = - \\ sin { ( \\ mathbf { s } ) } and \\ mathbf { s } + \\ frac { d } { d \\ mathbf { s } } \\ operatorname { J_ { \\ varepsilon } } { ( \\ mathbf { s } ) } = \\ mathbf { s } - \\ sin { ( \\ mathbf { s } ) }", "SR_flan-t5-large": "operatorname { J_ { \\ varepsilon } } { ( \\ mathbf { s } ) } = \\ frac { d } { d \\ mathbf { s } } \\ sin { ( \\ mathbf { s } ) } and \\ operatorname { J_ { \\ varepsilon } } { ( \\ mathbf { s } ) } - \\ frac { d } { d \\ mathbf { s } } \\ sin { ( \\ mathbf { s } ) } = 0 and \\ frac { d } { d \\ mathbf { s } } ( \\ operatorname { J_ { \\ varepsilon } } { ( \\ mathbf { s } ) } - \\ frac { d } { d \\ mathbf { s } } \\ sin { ( \\ mathbf { s } ) } ) = \\ frac { d ^ { 2 } } { d \\ mathbf { s } ^ { 2 } } \\ sin { ( \\ mathbf { s } ) } and \\ frac { d ^ { 2 } } { d \\ mathbf { s } ^ { 2 } } \\ sin { ( \\ mathbf { s } ) } = - \\ sin { ( \\ mathbf { s } ) }", "static_rouge": 1.0, "static_bleu": 0.9950372310547487, "static_bleurt": 0.7695362567901611, "static_gleu": 0.9950124688279302, "VR_rouge": 0.0, "EE_rouge": 0.050000000000000044, "AG_rouge": 0.0, "SR_rouge": 0.11450381679389299, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.01775956284153013, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.11450381679389299, "VR_bleu": 0.0022574161810205995, "EE_bleu": 0.053108693219801384, "AG_bleu": -0.0002568952972155092, "SR_bleu": 0.1495412637446223, "VR_bleu_abs": -0.0008907877238831796, "EE_bleu_abs": 0.05347748319092127, "AG_bleu_abs": 0.000557204030025904, "SR_bleu_abs": 0.15555238680416006, "VR_bleurt": -0.06289684772491455, "EE_bleurt": -0.024481773376464844, "AG_bleurt": -0.04982495307922363, "SR_bleurt": 0.1015961766242981, "VR_bleurt_abs": 0.06306302547454834, "EE_bleurt_abs": 0.2285618782043457, "AG_bleurt_abs": -7.069110870361328e-05, "SR_bleurt_abs": 0.10860037803649902, "VR_gleu": 0.0022851961006574717, "EE_gleu": 0.052369077306733125, "AG_gleu": -0.00025939878436298525, "SR_gleu": 0.148858622674084, "VR_gleu_abs": -0.0012218826367664803, "EE_gleu_abs": 0.05278157988487431, "AG_gleu_abs": 0.0005503051947688409, "SR_gleu_abs": 0.15494505494505495, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 1.0019765828243334, "ratio_VR_bleurt": 1.484276225781543, "ratio_VR_gleu": 1.0024746208956736, "ratio_EE_rouge": 0.9809941520467835, "ratio_EE_bleu": 0.944850893968657, "ratio_EE_bleurt": 0.712844783139563, "ratio_EE_gleu": 0.9455901965711193, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9993693101767535, "ratio_AG_bleurt": 1.0000945513395438, "ratio_AG_gleu": 0.9993775959962908, "ratio_SR_rouge": 0.885496183206107, "ratio_SR_bleu": 0.8444476131958399, "ratio_SR_bleurt": 0.8626848758485767, "ratio_SR_gleu": 0.845054945054945}, {"prompt": "Given \\mathbb{I}{(\\Psi_{\\lambda})} = e^{\\Psi_{\\lambda}}, then derive \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} = \\Psi_{\\lambda} + \\chi + e^{\\Psi_{\\lambda}}, then obtain \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} = \\Psi_{\\lambda} + \\chi + \\mathbb{I}{(\\Psi_{\\lambda})}", "derivation": "\\mathbb{I}{(\\Psi_{\\lambda})} = e^{\\Psi_{\\lambda}} and \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} = \\int e^{\\Psi_{\\lambda}} d\\Psi_{\\lambda} and \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} = \\Psi_{\\lambda} + \\int e^{\\Psi_{\\lambda}} d\\Psi_{\\lambda} and \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} = \\Psi_{\\lambda} + \\chi + e^{\\Psi_{\\lambda}} and \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} = \\Psi_{\\lambda} + \\chi + \\mathbb{I}{(\\Psi_{\\lambda})}", "srepr_derivation": [["premise", "Equality(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))"], [["integrate", 1, "Symbol('\\\\Psi_{\\\\lambda}', commutative=True)"], "Equality(Integral(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))), Integral(exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))))"], [["add", 2, "Symbol('\\\\Psi_{\\\\lambda}', commutative=True)"], "Equality(Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))), Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))), Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Symbol('\\\\chi', commutative=True), exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))), Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Symbol('\\\\chi', commutative=True), Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))))"]], "EE prompt": "Given e^{\\Psi_{\\lambda}} = \\mathbb{I}{(\\Psi_{\\lambda})}, then derive \\Psi_{\\lambda} + \\chi + e^{\\Psi_{\\lambda}} = \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda}, then obtain \\Psi_{\\lambda} + \\chi + \\mathbb{I}{(\\Psi_{\\lambda})} = \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda}", "EE derivation": "e^{\\Psi_{\\lambda}} = \\mathbb{I}{(\\Psi_{\\lambda})} and \\int e^{\\Psi_{\\lambda}} d\\Psi_{\\lambda} = \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} and \\Psi_{\\lambda} + \\int e^{\\Psi_{\\lambda}} d\\Psi_{\\lambda} = \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} and \\Psi_{\\lambda} + \\chi + e^{\\Psi_{\\lambda}} = \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} and \\Psi_{\\lambda} + \\chi + \\mathbb{I}{(\\Psi_{\\lambda})} = \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda}", "EE srepr_derivation": [["premise", "Equality(exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))"], [["integrate", 1, "Symbol('\\\\Psi_{\\\\lambda}', commutative=True)"], "Equality(Integral(exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))), Integral(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))))"], [["add", 2, "Symbol('\\\\Psi_{\\\\lambda}', commutative=True)"], "Equality(Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))), Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Symbol('\\\\chi', commutative=True), exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))), Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Symbol('\\\\chi', commutative=True), Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))), Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))))"]], "AG prompt": "Given \\mathbb{I}{(\\Psi_{\\lambda})} = e^{\\Psi_{\\lambda}}, then derive \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} = \\Psi_{\\lambda} + \\chi + e^{\\Psi_{\\lambda}}, then obtain \\Psi_{\\lambda} + \\int e^{\\Psi_{\\lambda}} d\\Psi_{\\lambda} = \\Psi_{\\lambda} + \\chi + e^{\\Psi_{\\lambda}}", "AG derivation": "\\mathbb{I}{(\\Psi_{\\lambda})} = e^{\\Psi_{\\lambda}} and \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} = \\int e^{\\Psi_{\\lambda}} d\\Psi_{\\lambda} and \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} = \\Psi_{\\lambda} + \\int e^{\\Psi_{\\lambda}} d\\Psi_{\\lambda} and \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} = \\Psi_{\\lambda} + \\chi + e^{\\Psi_{\\lambda}} and \\Psi_{\\lambda} + \\int e^{\\Psi_{\\lambda}} d\\Psi_{\\lambda} = \\Psi_{\\lambda} + \\chi + e^{\\Psi_{\\lambda}}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))"], [["integrate", 1, "Symbol('\\\\Psi_{\\\\lambda}', commutative=True)"], "Equality(Integral(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))), Integral(exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))))"], [["add", 2, "Symbol('\\\\Psi_{\\\\lambda}', commutative=True)"], "Equality(Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))), Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))), Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Symbol('\\\\chi', commutative=True), exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))), Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Symbol('\\\\chi', commutative=True), exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))))"]], "SR prompt": "Given \\mathbb{I}{(\\Psi_{\\lambda})} = e^{\\Psi_{\\lambda}}, then obtain \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} = \\Psi_{\\lambda} + \\chi + \\mathbb{I}{(\\Psi_{\\lambda})}", "SR derivation": "\\mathbb{I}{(\\Psi_{\\lambda})} = e^{\\Psi_{\\lambda}} and \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} = \\int e^{\\Psi_{\\lambda}} d\\Psi_{\\lambda} and \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} = \\Psi_{\\lambda} + \\int e^{\\Psi_{\\lambda}} d\\Psi_{\\lambda} and \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} = \\Psi_{\\lambda} + \\chi + e^{\\Psi_{\\lambda}} and \\Psi_{\\lambda} + \\int \\mathbb{I}{(\\Psi_{\\lambda})} d\\Psi_{\\lambda} = \\Psi_{\\lambda} + \\chi + \\mathbb{I}{(\\Psi_{\\lambda})}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))"], [["integrate", 1, "Symbol('\\\\Psi_{\\\\lambda}', commutative=True)"], "Equality(Integral(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))), Integral(exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))))"], [["add", 2, "Symbol('\\\\Psi_{\\\\lambda}', commutative=True)"], "Equality(Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))), Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))), Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Symbol('\\\\chi', commutative=True), exp(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Integral(Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)), Tuple(Symbol('\\\\Psi_{\\\\lambda}', commutative=True)))), Add(Symbol('\\\\Psi_{\\\\lambda}', commutative=True), Symbol('\\\\chi', commutative=True), Function('\\\\mathbb{I}')(Symbol('\\\\Psi_{\\\\lambda}', commutative=True))))"]], "VR prompt": "Given \\nu{(\\tau)} = e^{\\tau}, then derive \\tau + \\int \\nu{(\\tau)} d\\tau = \\gamma + \\tau + e^{\\tau}, then obtain \\tau + \\int \\nu{(\\tau)} d\\tau = \\gamma + \\tau + \\nu{(\\tau)}", "VR derivation": "\\nu{(\\tau)} = e^{\\tau} and \\int \\nu{(\\tau)} d\\tau = \\int e^{\\tau} d\\tau and \\tau + \\int \\nu{(\\tau)} d\\tau = \\tau + \\int e^{\\tau} d\\tau and \\tau + \\int \\nu{(\\tau)} d\\tau = \\gamma + \\tau + e^{\\tau} and \\tau + \\int \\nu{(\\tau)} d\\tau = \\gamma + \\tau + \\nu{(\\tau)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\nu')(Symbol('\\\\tau', commutative=True)), exp(Symbol('\\\\tau', commutative=True)))"], [["integrate", 1, "Symbol('\\\\tau', commutative=True)"], "Equality(Integral(Function('\\\\nu')(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True))), Integral(exp(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True))))"], [["add", 2, "Symbol('\\\\tau', commutative=True)"], "Equality(Add(Symbol('\\\\tau', commutative=True), Integral(Function('\\\\nu')(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True)))), Add(Symbol('\\\\tau', commutative=True), Integral(exp(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True)))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('\\\\tau', commutative=True), Integral(Function('\\\\nu')(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True)))), Add(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True), exp(Symbol('\\\\tau', commutative=True))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Add(Symbol('\\\\tau', commutative=True), Integral(Function('\\\\nu')(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True)))), Add(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True), Function('\\\\nu')(Symbol('\\\\tau', commutative=True))))"]], "static_flan-t5-large": "mathbb { I } { ( \\ Psi_ { \\ lambda } ) } = e ^ { \\ Psi_ { \\ lambda } } and \\ int \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } d \\ Psi_ { \\ lambda } = \\ int e ^ { \\ Psi_ { \\ lambda } } d \\ Psi_ { \\ lambda } and \\ Psi_ { \\ lambda } + \\ int \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } d \\ Psi_ { \\ lambda } = \\ Psi_ { \\ lambda } + \\ int e ^ { \\ Psi_ { \\ lambda } } d \\ Psi_ { \\ lambda } and \\ Psi_ { \\ lambda } + \\ int \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } d \\ Psi_ { \\ lambda } = \\ Psi_ { \\ lambda } + \\ chi + e ^ { \\ Psi_ { \\ lambda } } and \\ Psi_ { \\ lambda } + \\ int \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } d \\ Psi_ { \\ lambda } = \\ Psi_ { \\ lambda } + \\ chi + \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) }", "VR_flan-t5-large": "nu { ( \\ tau) } = e ^ { \\ tau } and \\ int \\ nu { ( \\ tau) } d \\ tau = \\ int e ^ { \\ tau } d \\ tau and \\ frac { d } { d \\ tau } \\ int \\ nu { ( \\ tau) } d \\ tau = \\ frac { d } { d \\ tau } \\ int e ^ { \\ tau } d \\ tau and \\ int \\ frac { d } { d \\ tau } \\ int \\ nu { ( \\ tau) } d \\ tau d \\ tau = \\ int \\ frac { d } { d \\ tau } \\ int e ^ { \\ tau } d \\ tau d \\ tau and \\ tau + \\ int \\ nu { ( \\ tau) } d \\ tau = \\ gamma + \\ tau + e ^ { \\ tau } and \\ tau + \\ int \\ nu { ( \\ tau) } d \\ tau = \\ gamma + \\ tau + \\ nu { ( \\ tau) }", "EE_flan-t5-large": "mathbb { I } { ( \\ Psi_ { \\ lambda } ) } = \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } and \\ int e ^ { \\ Psi_ { \\ lambda } } d \\ Psi_ { \\ lambda } = \\ int \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } d \\ Psi_ { \\ lambda } and \\ Psi_ { \\ lambda } + \\ int e ^ { \\ Psi_ { \\ lambda } } d \\ Psi_ { \\ lambda } = \\ Psi_ { \\ lambda } + \\ int \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } d \\ Psi_ { \\ lambda } and \\ Psi_ { \\ lambda } + \\ chi + e ^ { \\ Psi_ { \\ lambda } } = \\ Psi_ { \\ lambda } + \\ int \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } d \\ Psi_ { \\ lambda } and \\ Psi_ { \\ lambda } + \\ chi + \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } = \\ Psi_ { \\ lambda } + \\ int \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } d \\ Psi_ { \\ lambda }", "AG_flan-t5-large": "mathbb { I } { ( \\ Psi_ { \\ lambda } ) } = e ^ { \\ Psi_ { \\ lambda } } and \\ int \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } d \\ Psi_ { \\ lambda } = \\ int e ^ { \\ Psi_ { \\ lambda } } d \\ Psi_ { \\ lambda } and \\ Psi_ { \\ lambda } + \\ int \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } d \\ Psi_ { \\ lambda } = \\ Psi_ { \\ lambda } + \\ int e ^ { \\ Psi_ { \\ lambda } } d \\ Psi_ { \\ lambda } and \\ Psi_ { \\ lambda } + \\ int \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } d \\ Psi_ { \\ lambda } = \\ Psi_ { \\ lambda } + \\ chi + e ^ { \\ Psi_ { \\ lambda } } and \\ Psi_ { \\ lambda } + \\ int e ^ { \\ Psi_ { \\ lambda } } d \\ Psi_ { \\ lambda } = \\ Psi_ { \\ lambda } + \\ chi + e ^ { \\ Psi_ { \\ lambda } }", "SR_flan-t5-large": "mathbb { I } { ( \\ Psi_ { \\ lambda } ) } = e ^ { \\ Psi_ { \\ lambda } } and \\ int \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } d \\ Psi_ { \\ lambda } = \\ int e ^ { \\ Psi_ { \\ lambda } } d \\ Psi_ { \\ lambda } and \\ Psi_ { \\ lambda } + \\ int \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } d \\ Psi_ { \\ lambda } = \\ Psi_ { \\ lambda } + \\ int e ^ { \\ Psi_ { \\ lambda } } d \\ Psi_ { \\ lambda } and \\ Psi_ { \\ lambda } + \\ int \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) } d \\ Psi_ { \\ lambda } = \\ Psi_ { \\ lambda } + \\ chi + \\ mathbb { I } { ( \\ Psi_ { \\ lambda } ) }", "static_rouge": 1.0, "static_bleu": 0.9961904808063956, "static_bleurt": 0.7683258056640625, "static_gleu": 0.9961759082217974, "VR_rouge": 0.27131782945736427, "EE_rouge": 0.01935483870967747, "AG_rouge": 0.0, "SR_rouge": 0.12408759124087587, "VR_rouge_abs": 0.009402487109493478, "EE_rouge_abs": 0.019271051529116012, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.12408759124087587, "VR_bleu": 0.3669048701899421, "EE_bleu": 0.027304216370112377, "AG_bleu": 0.00015087165925609103, "SR_bleu": 0.24733980963488755, "VR_bleu_abs": -0.05229678880433963, "EE_bleu_abs": 0.03178224056235357, "AG_bleu_abs": 0.0003101778851132275, "SR_bleu_abs": 0.24746948033725835, "VR_bleurt": 0.03415119647979736, "EE_bleurt": 0.011203289031982422, "AG_bleurt": -0.008503079414367676, "SR_bleurt": 0.08304989337921143, "VR_bleurt_abs": -0.15373075008392334, "EE_bleurt_abs": -0.06025266647338867, "AG_bleurt_abs": -0.03863126039505005, "SR_bleurt_abs": 0.06960731744766235, "VR_gleu": 0.3665462785921677, "EE_gleu": 0.027249354549480964, "AG_gleu": 0.00015205136295048938, "SR_gleu": 0.2217973231357553, "VR_gleu_abs": -0.0325726742585776, "EE_gleu_abs": 0.03172699873610518, "AG_gleu_abs": 0.0003046061589163651, "SR_gleu_abs": 0.2226487523992322, "ratio_VR_rouge": 0.802547770700637, "ratio_VR_bleu": 1.3402641411739846, "ratio_VR_bleurt": 0.6393551758793969, "ratio_VR_gleu": 1.1385000702214316, "ratio_EE_rouge": 0.9804753820033956, "ratio_EE_bleu": 0.9675888913323559, "ratio_EE_bleurt": 1.08568397950851, "ratio_EE_gleu": 0.9676545412495458, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9996628226163181, "ratio_AG_bleurt": 1.0529713396957514, "ratio_AG_gleu": 0.999669140143067, "ratio_SR_rouge": 0.8759124087591241, "ratio_SR_bleu": 0.7525305196627416, "ratio_SR_bleurt": 0.9062666472000358, "ratio_SR_gleu": 0.7773512476007678}, {"prompt": "Given m{(\\hat{x}_0,\\mathbf{r})} = \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0, then derive \\hat{x}_0 m{(\\hat{x}_0,\\mathbf{r})} = \\hat{x}_0 (\\hat{H} - \\frac{\\hat{x}_0^{2}}{2} + \\hat{x}_0 \\mathbf{r}), then obtain \\hat{x}_0 \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0 = \\hat{x}_0 (\\hat{H} - \\frac{\\hat{x}_0^{2}}{2} + \\hat{x}_0 \\mathbf{r})", "derivation": "m{(\\hat{x}_0,\\mathbf{r})} = \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0 and \\hat{x}_0 m{(\\hat{x}_0,\\mathbf{r})} = \\hat{x}_0 \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0 and \\hat{x}_0 m{(\\hat{x}_0,\\mathbf{r})} = \\hat{x}_0 (\\hat{H} - \\frac{\\hat{x}_0^{2}}{2} + \\hat{x}_0 \\mathbf{r}) and \\hat{x}_0 \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0 = \\hat{x}_0 (\\hat{H} - \\frac{\\hat{x}_0^{2}}{2} + \\hat{x}_0 \\mathbf{r})", "srepr_derivation": [["premise", "Equality(Function('m')(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True)), Integral(Add(Mul(Integer(-1), Symbol('\\\\hat{x}_0', commutative=True)), Symbol('\\\\mathbf{r}', commutative=True)), Tuple(Symbol('\\\\hat{x}_0', commutative=True))))"], [["times", 1, "Symbol('\\\\hat{x}_0', commutative=True)"], "Equality(Mul(Symbol('\\\\hat{x}_0', commutative=True), Function('m')(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Integral(Add(Mul(Integer(-1), Symbol('\\\\hat{x}_0', commutative=True)), Symbol('\\\\mathbf{r}', commutative=True)), Tuple(Symbol('\\\\hat{x}_0', commutative=True)))))"], [["evaluate_integrals", 2], "Equality(Mul(Symbol('\\\\hat{x}_0', commutative=True), Function('m')(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Add(Symbol('\\\\hat{H}', commutative=True), Mul(Integer(-1), Rational(1, 2), Pow(Symbol('\\\\hat{x}_0', commutative=True), Integer(2))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Mul(Symbol('\\\\hat{x}_0', commutative=True), Integral(Add(Mul(Integer(-1), Symbol('\\\\hat{x}_0', commutative=True)), Symbol('\\\\mathbf{r}', commutative=True)), Tuple(Symbol('\\\\hat{x}_0', commutative=True)))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Add(Symbol('\\\\hat{H}', commutative=True), Mul(Integer(-1), Rational(1, 2), Pow(Symbol('\\\\hat{x}_0', commutative=True), Integer(2))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True)))))"]], "EE prompt": "Given \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0 = m{(\\hat{x}_0,\\mathbf{r})}, then derive \\hat{x}_0 (\\hat{H} - \\frac{\\hat{x}_0^{2}}{2} + \\hat{x}_0 \\mathbf{r}) = \\hat{x}_0 m{(\\hat{x}_0,\\mathbf{r})}, then obtain \\hat{x}_0 (\\hat{H} - \\frac{\\hat{x}_0^{2}}{2} + \\hat{x}_0 \\mathbf{r}) = \\hat{x}_0 \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0", "EE derivation": "\\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0 = m{(\\hat{x}_0,\\mathbf{r})} and \\hat{x}_0 \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0 = \\hat{x}_0 m{(\\hat{x}_0,\\mathbf{r})} and \\hat{x}_0 (\\hat{H} - \\frac{\\hat{x}_0^{2}}{2} + \\hat{x}_0 \\mathbf{r}) = \\hat{x}_0 m{(\\hat{x}_0,\\mathbf{r})} and \\hat{x}_0 (\\hat{H} - \\frac{\\hat{x}_0^{2}}{2} + \\hat{x}_0 \\mathbf{r}) = \\hat{x}_0 \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0", "EE srepr_derivation": [["premise", "Equality(Integral(Add(Mul(Integer(-1), Symbol('\\\\hat{x}_0', commutative=True)), Symbol('\\\\mathbf{r}', commutative=True)), Tuple(Symbol('\\\\hat{x}_0', commutative=True))), Function('m')(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True)))"], [["times", 1, "Symbol('\\\\hat{x}_0', commutative=True)"], "Equality(Mul(Symbol('\\\\hat{x}_0', commutative=True), Integral(Add(Mul(Integer(-1), Symbol('\\\\hat{x}_0', commutative=True)), Symbol('\\\\mathbf{r}', commutative=True)), Tuple(Symbol('\\\\hat{x}_0', commutative=True)))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Function('m')(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Mul(Symbol('\\\\hat{x}_0', commutative=True), Add(Symbol('\\\\hat{H}', commutative=True), Mul(Integer(-1), Rational(1, 2), Pow(Symbol('\\\\hat{x}_0', commutative=True), Integer(2))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True)))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Function('m')(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True))))"], [["substitute_RHS_for_LHS", 3, 2], "Equality(Mul(Symbol('\\\\hat{x}_0', commutative=True), Add(Symbol('\\\\hat{H}', commutative=True), Mul(Integer(-1), Rational(1, 2), Pow(Symbol('\\\\hat{x}_0', commutative=True), Integer(2))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True)))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Integral(Add(Mul(Integer(-1), Symbol('\\\\hat{x}_0', commutative=True)), Symbol('\\\\mathbf{r}', commutative=True)), Tuple(Symbol('\\\\hat{x}_0', commutative=True)))))"]], "AG prompt": "Given m{(\\hat{x}_0,\\mathbf{r})} = \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0, then derive \\hat{x}_0 m{(\\hat{x}_0,\\mathbf{r})} = \\hat{x}_0 (\\hat{H} - \\frac{\\hat{x}_0^{2}}{2} + \\hat{x}_0 \\mathbf{r}), then obtain \\hat{x}_0 \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0 = \\hat{x}_0 (\\hat{H} - \\frac{\\hat{x}_0^{2}}{2} + \\hat{x}_0 \\mathbf{r})", "AG derivation": "m{(\\hat{x}_0,\\mathbf{r})} = \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0 and \\hat{x}_0 m{(\\hat{x}_0,\\mathbf{r})} = \\hat{x}_0 \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0 and \\hat{x}_0 m{(\\hat{x}_0,\\mathbf{r})} = \\hat{x}_0 (\\hat{H} - \\frac{\\hat{x}_0^{2}}{2} + \\hat{x}_0 \\mathbf{r}) and \\hat{x}_0 \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0 = \\hat{x}_0 (\\hat{H} - \\frac{\\hat{x}_0^{2}}{2} + \\hat{x}_0 \\mathbf{r})", "AG srepr_derivation": [["premise", "Equality(Function('m')(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True)), Integral(Add(Mul(Integer(-1), Symbol('\\\\hat{x}_0', commutative=True)), Symbol('\\\\mathbf{r}', commutative=True)), Tuple(Symbol('\\\\hat{x}_0', commutative=True))))"], [["times", 1, "Symbol('\\\\hat{x}_0', commutative=True)"], "Equality(Mul(Symbol('\\\\hat{x}_0', commutative=True), Function('m')(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Integral(Add(Mul(Integer(-1), Symbol('\\\\hat{x}_0', commutative=True)), Symbol('\\\\mathbf{r}', commutative=True)), Tuple(Symbol('\\\\hat{x}_0', commutative=True)))))"], [["evaluate_integrals", 2], "Equality(Mul(Symbol('\\\\hat{x}_0', commutative=True), Function('m')(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Add(Symbol('\\\\hat{H}', commutative=True), Mul(Integer(-1), Rational(1, 2), Pow(Symbol('\\\\hat{x}_0', commutative=True), Integer(2))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Mul(Symbol('\\\\hat{x}_0', commutative=True), Integral(Add(Mul(Integer(-1), Symbol('\\\\hat{x}_0', commutative=True)), Symbol('\\\\mathbf{r}', commutative=True)), Tuple(Symbol('\\\\hat{x}_0', commutative=True)))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Add(Symbol('\\\\hat{H}', commutative=True), Mul(Integer(-1), Rational(1, 2), Pow(Symbol('\\\\hat{x}_0', commutative=True), Integer(2))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True)))))"]], "SR prompt": "Given m{(\\hat{x}_0,\\mathbf{r})} = \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0, then obtain \\hat{x}_0 \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0 = \\hat{x}_0 (\\hat{H} - \\frac{\\hat{x}_0^{2}}{2} + \\hat{x}_0 \\mathbf{r})", "SR derivation": "m{(\\hat{x}_0,\\mathbf{r})} = \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0 and \\hat{x}_0 m{(\\hat{x}_0,\\mathbf{r})} = \\hat{x}_0 \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0 and \\hat{x}_0 m{(\\hat{x}_0,\\mathbf{r})} = \\hat{x}_0 (\\hat{H} - \\frac{\\hat{x}_0^{2}}{2} + \\hat{x}_0 \\mathbf{r}) and \\hat{x}_0 \\int (- \\hat{x}_0 + \\mathbf{r}) d\\hat{x}_0 = \\hat{x}_0 (\\hat{H} - \\frac{\\hat{x}_0^{2}}{2} + \\hat{x}_0 \\mathbf{r})", "SR srepr_derivation": [["premise", "Equality(Function('m')(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True)), Integral(Add(Mul(Integer(-1), Symbol('\\\\hat{x}_0', commutative=True)), Symbol('\\\\mathbf{r}', commutative=True)), Tuple(Symbol('\\\\hat{x}_0', commutative=True))))"], [["times", 1, "Symbol('\\\\hat{x}_0', commutative=True)"], "Equality(Mul(Symbol('\\\\hat{x}_0', commutative=True), Function('m')(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Integral(Add(Mul(Integer(-1), Symbol('\\\\hat{x}_0', commutative=True)), Symbol('\\\\mathbf{r}', commutative=True)), Tuple(Symbol('\\\\hat{x}_0', commutative=True)))))"], [["evaluate_integrals", 2], "Equality(Mul(Symbol('\\\\hat{x}_0', commutative=True), Function('m')(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Add(Symbol('\\\\hat{H}', commutative=True), Mul(Integer(-1), Rational(1, 2), Pow(Symbol('\\\\hat{x}_0', commutative=True), Integer(2))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Mul(Symbol('\\\\hat{x}_0', commutative=True), Integral(Add(Mul(Integer(-1), Symbol('\\\\hat{x}_0', commutative=True)), Symbol('\\\\mathbf{r}', commutative=True)), Tuple(Symbol('\\\\hat{x}_0', commutative=True)))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Add(Symbol('\\\\hat{H}', commutative=True), Mul(Integer(-1), Rational(1, 2), Pow(Symbol('\\\\hat{x}_0', commutative=True), Integer(2))), Mul(Symbol('\\\\hat{x}_0', commutative=True), Symbol('\\\\mathbf{r}', commutative=True)))))"]], "VR prompt": "Given \\gamma{(\\iota,\\beta)} = \\int (- \\beta + \\iota) d\\beta, then derive \\beta \\gamma{(\\iota,\\beta)} = \\beta (- \\frac{\\beta^{2}}{2} + \\beta \\iota + \\nu), then obtain \\beta \\int (- \\beta + \\iota) d\\beta = \\beta (- \\frac{\\beta^{2}}{2} + \\beta \\iota + \\nu)", "VR derivation": "\\gamma{(\\iota,\\beta)} = \\int (- \\beta + \\iota) d\\beta and \\beta \\gamma{(\\iota,\\beta)} = \\beta \\int (- \\beta + \\iota) d\\beta and \\beta \\gamma{(\\iota,\\beta)} = \\beta (- \\frac{\\beta^{2}}{2} + \\beta \\iota + \\nu) and \\beta \\int (- \\beta + \\iota) d\\beta = \\beta (- \\frac{\\beta^{2}}{2} + \\beta \\iota + \\nu)", "VR srepr_derivation": [["premise", "Equality(Function('\\\\gamma')(Symbol('\\\\iota', commutative=True), Symbol('\\\\beta', commutative=True)), Integral(Add(Mul(Integer(-1), Symbol('\\\\beta', commutative=True)), Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))))"], [["times", 1, "Symbol('\\\\beta', commutative=True)"], "Equality(Mul(Symbol('\\\\beta', commutative=True), Function('\\\\gamma')(Symbol('\\\\iota', commutative=True), Symbol('\\\\beta', commutative=True))), Mul(Symbol('\\\\beta', commutative=True), Integral(Add(Mul(Integer(-1), Symbol('\\\\beta', commutative=True)), Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True)))))"], [["evaluate_integrals", 2], "Equality(Mul(Symbol('\\\\beta', commutative=True), Function('\\\\gamma')(Symbol('\\\\iota', commutative=True), Symbol('\\\\beta', commutative=True))), Mul(Symbol('\\\\beta', commutative=True), Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('\\\\beta', commutative=True), Integer(2))), Mul(Symbol('\\\\beta', commutative=True), Symbol('\\\\iota', commutative=True)), Symbol('\\\\nu', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Mul(Symbol('\\\\beta', commutative=True), Integral(Add(Mul(Integer(-1), Symbol('\\\\beta', commutative=True)), Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True)))), Mul(Symbol('\\\\beta', commutative=True), Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('\\\\beta', commutative=True), Integer(2))), Mul(Symbol('\\\\beta', commutative=True), Symbol('\\\\iota', commutative=True)), Symbol('\\\\nu', commutative=True))))"]], "static_flan-t5-large": "m { ( \\ hat { x } _0, \\ mathbf { r } ) } = \\ int (- \\ hat { x } _0 + \\ mathbf { r } ) d \\ hat { x } _0 and \\ hat { x } _0 m { ( \\ hat { x } _0, \\ mathbf { r } ) } = \\ hat { x } _0 \\ int (- \\ hat { x } _0 + \\ mathbf { r } ) d \\ hat { x } _0 and \\ hat { x } _0 m { ( \\ hat { x } _0, \\ mathbf { r } ) } = \\ hat { x } _0 ( \\ hat { H } - \\ frac { \\ hat { x } _0 ^ { 2 } } { 2 } + \\ hat { x } _0 \\ mathbf { r } ) and \\ hat { x } _0 \\ int (- \\ hat { x } _0 + \\ mathbf { r } ) d \\ hat { x } _0 = \\ hat { x } _0 ( \\ hat { H } - \\ frac { \\ hat { x } _0 ^ { 2 } } { 2 } + \\ hat { x } _0 \\ mathbf { r } )", "VR_flan-t5-large": "gamma { ( \\ iota, \\ beta) } = \\ int (- \\ beta + \\ iota) d \\ beta and \\ frac { \\ partial } { \\ partial \\ iota } \\ gamma { ( \\ iota, \\ beta) } = \\ frac { \\ partial } { \\ partial \\ iota } \\ int (- \\ beta + \\ iota) d \\ beta and \\ frac { \\ partial } { \\ partial \\ iota } \\ gamma { ( \\ iota, \\ beta) } = \\ frac { \\ partial } { \\ partial \\ iota } \\ int (- \\ beta + \\ iota) d \\ beta and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ iota } \\ gamma { ( \\ iota, \\ beta) } = \\ frac { \\ partial ^ { 2 } } { \\ partial \\ iota } \\ int (- \\ beta + \\ iota) d \\ beta and \\ beta \\ gamma { ( \\ iota, \\ beta) } = \\ beta (- \\ frac { \\ beta ^ { 2 } } { 2 } + \\ beta \\ iota + \\ nu) and \\ beta \\ int (- \\ beta + \\ iota) d \\ beta = \\ beta (- \\ frac { \\ beta ^ { 2 } } { 2 } + \\ beta \\ iota + \\ nu)", "EE_flan-t5-large": "hat { x } _0 \\ int (- \\ hat { x } _0 + \\ mathbf { r } ) d \\ hat { x } _0 = m { ( \\ hat { x } _0, \\ mathbf { r } ) } and \\ hat { x } _0 \\ int (- \\ hat { x } _0 + \\ mathbf { r } ) d \\ hat { x } _0 = \\ hat { x } _0 m { ( \\ hat { x } _0, \\ mathbf { r } ) } and \\ hat { x } _0 ( \\ hat { H } - \\ frac { \\ hat { x } _0 ^ { 2 } } { 2 } + \\ hat { x } _0 \\ mathbf { r } ) = \\ hat { x } _0 m { ( \\ hat { x } _0, \\ mathbf { r } ) } and \\ hat { x } _0 ( \\ hat { H } - \\ frac { \\ hat { x } _0 ^ { 2 } } { 2 } + \\ hat { x } _0 \\ mathbf { r } ) = \\ hat { x } _0 \\ int (- \\ hat { x } _0 + \\ mathbf { r } ) d \\ hat { x } _0", "AG_flan-t5-large": "m { ( \\ hat { x } _0, \\ mathbf { r } ) } = \\ int (- \\ hat { x } _0 + \\ mathbf { r } ) d \\ hat { x } _0 and \\ hat { x } _0 m { ( \\ hat { x } _0, \\ mathbf { r } ) } = \\ hat { x } _0 \\ int (- \\ hat { x } _0 + \\ mathbf { r } ) d \\ hat { x } _0 and \\ hat { x } _0 m { ( \\ hat { x } _0, \\ mathbf { r } ) } = \\ hat { x } _0 ( \\ hat { H } - \\ frac { \\ hat { x } _0 ^ { 2 } } { 2 } + \\ hat { x } _0 \\ mathbf { r } ) and \\ hat { x } _0 \\ int (- \\ hat { x } _0 + \\ mathbf { r } ) d \\ hat { x } _0 = \\ hat { x } _0 ( \\ hat { H } - \\ frac { \\ hat { x } _0 ^ { 2 } } { 2 } + \\ hat { x } _0 \\ mathbf { r } )", "SR_flan-t5-large": "m { ( \\ hat { x } _0, \\ mathbf { r } ) } = \\ int (- \\ hat { x } _0 + \\ mathbf { r } ) d \\ hat { x } _0 and \\ hat { x } _0 m { ( \\ hat { x } _0, \\ mathbf { r } ) } = \\ hat { x } _0 \\ int (- \\ hat { x } _0 + \\ mathbf { r } ) d \\ hat { x } _0 and \\ hat { x } _0 m { ( \\ hat { x } _0, \\ mathbf { r } ) } = \\ hat { x } _0 ( \\ hat { H } - \\ frac { \\ hat { x } _0 ^ { 2 } } { 2 } + \\ hat { x } _0 \\ mathbf { r } ) and \\ hat { x } _0 \\ int (- \\ hat { x } _0 + \\ mathbf { r } ) d \\ hat { x } _0 = \\ hat { x } _0 ( \\ hat { H } - \\ frac { \\ hat { x } _0 ^ { 2 } } { 2 } + \\ hat { x } _0 \\ mathbf { r } )", "static_rouge": 1.0, "static_bleu": 1.0, "static_bleurt": 0.8480193614959717, "static_gleu": 1.0, "VR_rouge": 0.3731343283582089, "EE_rouge": 0.015706806282722585, "AG_rouge": 0.0, "SR_rouge": 0.0, "VR_rouge_abs": 0.006593406593406587, "EE_rouge_abs": 0.015205525231146266, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.0, "VR_bleu": 0.4955281386298447, "EE_bleu": 0.022770813209567198, "AG_bleu": 0.0, "SR_bleu": 0.0, "VR_bleu_abs": -0.055735230969434474, "EE_bleu_abs": 0.02189693431336248, "AG_bleu_abs": 0.0, "SR_bleu_abs": 0.0, "VR_bleurt": 0.17858266830444336, "EE_bleurt": 0.08501970767974854, "AG_bleurt": 0.0, "SR_bleurt": 0.0, "VR_bleurt_abs": -0.3009076416492462, "EE_bleurt_abs": 0.019525527954101562, "AG_bleurt_abs": 0.0, "SR_bleurt_abs": 0.0, "VR_gleu": 0.49527410207939504, "EE_gleu": 0.022770398481973486, "AG_gleu": 0.0, "SR_gleu": 0.0, "VR_gleu_abs": -0.025815332097564536, "EE_gleu_abs": 0.02190821834527734, "AG_gleu_abs": 0.0, "SR_gleu_abs": 0.0, "ratio_VR_rouge": 0.7692307692307694, "ratio_VR_bleu": 1.328867875574324, "ratio_VR_bleurt": 0.5489054211848569, "ratio_VR_gleu": 1.108088585611754, "ratio_EE_rouge": 0.9842931937172775, "ratio_EE_bleu": 0.9772291867904328, "ratio_EE_bleurt": 0.9733652813795441, "ratio_EE_gleu": 0.9772296015180266, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 1.0, "ratio_AG_bleurt": 1.0, "ratio_AG_gleu": 1.0, "ratio_SR_rouge": 1.0, "ratio_SR_bleu": 1.0, "ratio_SR_bleurt": 1.0, "ratio_SR_gleu": 1.0}, {"prompt": "Given \\operatorname{V_{\\mathbf{B}}}{(P_{e})} = \\sin{(P_{e})}, then derive \\frac{d}{d P_{e}} \\operatorname{V_{\\mathbf{B}}}{(P_{e})} = \\cos{(P_{e})}, then obtain -1 + \\frac{\\frac{d}{d P_{e}} \\sin{(P_{e})}}{P_{e}} = -1 + \\frac{\\cos{(P_{e})}}{P_{e}}", "derivation": "\\operatorname{V_{\\mathbf{B}}}{(P_{e})} = \\sin{(P_{e})} and \\frac{d}{d P_{e}} \\operatorname{V_{\\mathbf{B}}}{(P_{e})} = \\frac{d}{d P_{e}} \\sin{(P_{e})} and \\frac{d}{d P_{e}} \\operatorname{V_{\\mathbf{B}}}{(P_{e})} = \\cos{(P_{e})} and \\frac{d}{d P_{e}} \\sin{(P_{e})} = \\cos{(P_{e})} and \\frac{\\frac{d}{d P_{e}} \\sin{(P_{e})}}{P_{e}} = \\frac{\\cos{(P_{e})}}{P_{e}} and -1 + \\frac{\\frac{d}{d P_{e}} \\sin{(P_{e})}}{P_{e}} = -1 + \\frac{\\cos{(P_{e})}}{P_{e}}", "srepr_derivation": [["premise", "Equality(Function('V_{\\\\mathbf{B}}')(Symbol('P_e', commutative=True)), sin(Symbol('P_e', commutative=True)))"], [["differentiate", 1, "Symbol('P_e', commutative=True)"], "Equality(Derivative(Function('V_{\\\\mathbf{B}}')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('V_{\\\\mathbf{B}}')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), cos(Symbol('P_e', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), cos(Symbol('P_e', commutative=True)))"], [["divide", 4, "Symbol('P_e', commutative=True)"], "Equality(Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1)))), Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), cos(Symbol('P_e', commutative=True))))"], [["add", 5, "Integer(-1)"], "Equality(Add(Integer(-1), Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))))), Add(Integer(-1), Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), cos(Symbol('P_e', commutative=True)))))"]], "EE prompt": "Given \\sin{(P_{e})} = \\operatorname{V_{\\mathbf{B}}}{(P_{e})}, then derive \\cos{(P_{e})} = \\frac{d}{d P_{e}} \\operatorname{V_{\\mathbf{B}}}{(P_{e})}, then obtain -1 + \\frac{\\cos{(P_{e})}}{P_{e}} = -1 + \\frac{\\frac{d}{d P_{e}} \\sin{(P_{e})}}{P_{e}}", "EE derivation": "\\sin{(P_{e})} = \\operatorname{V_{\\mathbf{B}}}{(P_{e})} and \\frac{d}{d P_{e}} \\sin{(P_{e})} = \\frac{d}{d P_{e}} \\operatorname{V_{\\mathbf{B}}}{(P_{e})} and \\cos{(P_{e})} = \\frac{d}{d P_{e}} \\operatorname{V_{\\mathbf{B}}}{(P_{e})} and \\cos{(P_{e})} = \\frac{d}{d P_{e}} \\sin{(P_{e})} and \\frac{\\cos{(P_{e})}}{P_{e}} = \\frac{\\frac{d}{d P_{e}} \\sin{(P_{e})}}{P_{e}} and -1 + \\frac{\\cos{(P_{e})}}{P_{e}} = -1 + \\frac{\\frac{d}{d P_{e}} \\sin{(P_{e})}}{P_{e}}", "EE srepr_derivation": [["premise", "Equality(sin(Symbol('P_e', commutative=True)), Function('V_{\\\\mathbf{B}}')(Symbol('P_e', commutative=True)))"], [["differentiate", 1, "Symbol('P_e', commutative=True)"], "Equality(Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(Function('V_{\\\\mathbf{B}}')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(cos(Symbol('P_e', commutative=True)), Derivative(Function('V_{\\\\mathbf{B}}')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(cos(Symbol('P_e', commutative=True)), Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["divide", 4, "Symbol('P_e', commutative=True)"], "Equality(Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), cos(Symbol('P_e', commutative=True))), Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1)))))"], [["add", 5, "Integer(-1)"], "Equality(Add(Integer(-1), Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), cos(Symbol('P_e', commutative=True)))), Add(Integer(-1), Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))))))"]], "AG prompt": "Given \\operatorname{V_{\\mathbf{B}}}{(P_{e})} = \\sin{(P_{e})}, then derive \\frac{d}{d P_{e}} \\operatorname{V_{\\mathbf{B}}}{(P_{e})} = \\cos{(P_{e})}, then obtain \\frac{\\frac{d}{d P_{e}} \\sin{(P_{e})}}{P_{e}} = \\frac{\\frac{d}{d P_{e}} \\operatorname{V_{\\mathbf{B}}}{(P_{e})}}{P_{e}}", "AG derivation": "\\operatorname{V_{\\mathbf{B}}}{(P_{e})} = \\sin{(P_{e})} and \\frac{d}{d P_{e}} \\operatorname{V_{\\mathbf{B}}}{(P_{e})} = \\frac{d}{d P_{e}} \\sin{(P_{e})} and \\frac{d}{d P_{e}} \\operatorname{V_{\\mathbf{B}}}{(P_{e})} = \\cos{(P_{e})} and \\frac{d}{d P_{e}} \\sin{(P_{e})} = \\cos{(P_{e})} and \\frac{\\frac{d}{d P_{e}} \\sin{(P_{e})}}{P_{e}} = \\frac{\\cos{(P_{e})}}{P_{e}} and \\frac{\\frac{d}{d P_{e}} \\sin{(P_{e})}}{P_{e}} = \\frac{\\frac{d}{d P_{e}} \\operatorname{V_{\\mathbf{B}}}{(P_{e})}}{P_{e}}", "AG srepr_derivation": [["premise", "Equality(Function('V_{\\\\mathbf{B}}')(Symbol('P_e', commutative=True)), sin(Symbol('P_e', commutative=True)))"], [["differentiate", 1, "Symbol('P_e', commutative=True)"], "Equality(Derivative(Function('V_{\\\\mathbf{B}}')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('V_{\\\\mathbf{B}}')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), cos(Symbol('P_e', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), cos(Symbol('P_e', commutative=True)))"], [["divide", 4, "Symbol('P_e', commutative=True)"], "Equality(Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1)))), Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), cos(Symbol('P_e', commutative=True))))"], [["substitute_RHS_for_LHS", 5, 3], "Equality(Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1)))), Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), Derivative(Function('V_{\\\\mathbf{B}}')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1)))))"]], "SR prompt": "Given \\operatorname{V_{\\mathbf{B}}}{(P_{e})} = \\sin{(P_{e})}, then obtain -1 + \\frac{\\frac{d}{d P_{e}} \\sin{(P_{e})}}{P_{e}} = -1 + \\frac{\\cos{(P_{e})}}{P_{e}}", "SR derivation": "\\operatorname{V_{\\mathbf{B}}}{(P_{e})} = \\sin{(P_{e})} and \\frac{d}{d P_{e}} \\operatorname{V_{\\mathbf{B}}}{(P_{e})} = \\frac{d}{d P_{e}} \\sin{(P_{e})} and \\frac{d}{d P_{e}} \\operatorname{V_{\\mathbf{B}}}{(P_{e})} = \\cos{(P_{e})} and \\frac{d}{d P_{e}} \\sin{(P_{e})} = \\cos{(P_{e})} and \\frac{\\frac{d}{d P_{e}} \\sin{(P_{e})}}{P_{e}} = \\frac{\\cos{(P_{e})}}{P_{e}} and -1 + \\frac{\\frac{d}{d P_{e}} \\sin{(P_{e})}}{P_{e}} = -1 + \\frac{\\cos{(P_{e})}}{P_{e}}", "SR srepr_derivation": [["premise", "Equality(Function('V_{\\\\mathbf{B}}')(Symbol('P_e', commutative=True)), sin(Symbol('P_e', commutative=True)))"], [["differentiate", 1, "Symbol('P_e', commutative=True)"], "Equality(Derivative(Function('V_{\\\\mathbf{B}}')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('V_{\\\\mathbf{B}}')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), cos(Symbol('P_e', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), cos(Symbol('P_e', commutative=True)))"], [["divide", 4, "Symbol('P_e', commutative=True)"], "Equality(Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1)))), Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), cos(Symbol('P_e', commutative=True))))"], [["add", 5, "Integer(-1)"], "Equality(Add(Integer(-1), Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), Derivative(sin(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))))), Add(Integer(-1), Mul(Pow(Symbol('P_e', commutative=True), Integer(-1)), cos(Symbol('P_e', commutative=True)))))"]], "VR prompt": "Given \\beta{(\\omicron)} = \\sin{(\\omicron)}, then derive \\frac{d}{d \\omicron} \\beta{(\\omicron)} = \\cos{(\\omicron)}, then obtain -1 + \\frac{\\frac{d}{d \\omicron} \\sin{(\\omicron)}}{\\omicron} = -1 + \\frac{\\cos{(\\omicron)}}{\\omicron}", "VR derivation": "\\beta{(\\omicron)} = \\sin{(\\omicron)} and \\frac{d}{d \\omicron} \\beta{(\\omicron)} = \\frac{d}{d \\omicron} \\sin{(\\omicron)} and \\frac{d}{d \\omicron} \\beta{(\\omicron)} = \\cos{(\\omicron)} and \\frac{d}{d \\omicron} \\sin{(\\omicron)} = \\cos{(\\omicron)} and \\frac{\\frac{d}{d \\omicron} \\sin{(\\omicron)}}{\\omicron} = \\frac{\\cos{(\\omicron)}}{\\omicron} and -1 + \\frac{\\frac{d}{d \\omicron} \\sin{(\\omicron)}}{\\omicron} = -1 + \\frac{\\cos{(\\omicron)}}{\\omicron}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\beta')(Symbol('\\\\omicron', commutative=True)), sin(Symbol('\\\\omicron', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\omicron', commutative=True)"], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1))), cos(Symbol('\\\\omicron', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(sin(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1))), cos(Symbol('\\\\omicron', commutative=True)))"], [["divide", 4, "Symbol('\\\\omicron', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\omicron', commutative=True), Integer(-1)), Derivative(sin(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1)))), Mul(Pow(Symbol('\\\\omicron', commutative=True), Integer(-1)), cos(Symbol('\\\\omicron', commutative=True))))"], [["add", 5, "Integer(-1)"], "Equality(Add(Integer(-1), Mul(Pow(Symbol('\\\\omicron', commutative=True), Integer(-1)), Derivative(sin(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1))))), Add(Integer(-1), Mul(Pow(Symbol('\\\\omicron', commutative=True), Integer(-1)), cos(Symbol('\\\\omicron', commutative=True)))))"]], "static_flan-t5-large": "operatorname { V_ { \\ mathbf { B } } } { (P_ { e } ) } = \\ sin { (P_ { e } ) } and \\ frac { d } { d P_ { e } } \\ operatorname { V_ { \\ mathbf { B } } } { (P_ { e } ) } = \\ frac { d } { d P_ { e } } \\ sin { (P_ { e } ) } and \\ frac { d } { d P_ { e } } \\ operatorname { V_ { \\ mathbf { B } } } { (P_ { e } ) } = \\ cos { (P_ { e } ) } and \\ frac { \\ frac { d } { d P_ { e } } \\ operatorname { V_ { \\ mathbf { B } } } { (P_ { e } ) } } { P_ { e } } = \\ frac { \\ cos { (P_ { e } ) } } { P_ { e } } and \\ frac { \\ frac { d } { d P_ { e } } \\ sin { (P_ { e } ) } } { P_ { e } } = \\ frac { \\ cos { (P_ { e } ) } } { P_ { e } } and -1 + \\ frac { \\ frac { d } { d P_ { e } } \\ sin { (P_ { e } ) } } { P_ { e } } = -1 + \\ frac { \\ cos { (P_ { e } ) } } { P_ { e } }", "VR_flan-t5-large": "beta { ( \\ omicron) } = \\ sin { ( \\ omicron) } and \\ frac { d } { d \\ omicron } \\ beta { ( \\ omicron) } = \\ frac { d } { d \\ omicron } \\ sin { ( \\ omicron) } and \\ frac { d } { d \\ omicron } \\ beta { ( \\ omicron) } = \\ cos { ( \\ omicron) } and \\ frac { \\ frac { d } { d \\ omicron } \\ beta { ( \\ omicron) } } { \\ omicron } = \\ frac { \\ cos { ( \\ omicron) } } { \\ omicron } and \\ frac { \\ frac { d } { d \\ omicron } \\ sin { ( \\ omicron) } } { \\ omicron } = \\ frac { \\ cos { ( \\ omicron) } } { \\ omicron } and -1 + \\ frac { \\ frac { d } { d \\ omicron } \\ sin { ( \\ omicron) } } { \\ omicron } = -1 + \\ frac { \\ cos { ( \\ omicron) } } { \\ omicron }", "EE_flan-t5-large": "sin { (P_ { e } ) } = \\ operatorname { V_ { \\ mathbf { B } } } { (P_ { e } ) } and \\ frac { d } { d P_ { e } } \\ sin { (P_ { e } ) } = \\ frac { d } { d P_ { e } } \\ operatorname { V_ { \\ mathbf { B } } } { (P_ { e } ) } and \\ cos { (P_ { e } ) } = \\ frac { d } { d P_ { e } } \\ operatorname { V_ { \\ mathbf { B } } } { (P_ { e } ) } and \\ cos { (P_ { e } ) } = \\ frac { d } { d P_ { e } } \\ sin { (P_ { e } ) } and \\ frac { \\ cos { (P_ { e } ) } } { P_ { e } } = \\ frac { \\ frac { d } { d P_ { e } } \\ sin { (P_ { e } ) } } { P_ { e } } and -1 + \\ frac { \\ cos { (P_ { e } ) } } { P_ { e } } = -1 + \\ frac { \\ frac { d } { d P_ { e } } \\ sin { (P_ { e } ) } } { P_ { e } }", "AG_flan-t5-large": "operatorname { V_ { \\ mathbf { B } } } { (P_ { e } ) } = \\ sin { (P_ { e } ) } and \\ frac { d } { d P_ { e } } \\ operatorname { V_ { \\ mathbf { B } } } { (P_ { e } ) } = \\ frac { d } { d P_ { e } } \\ sin { (P_ { e } ) } and \\ frac { d } { d P_ { e } } \\ operatorname { V_ { \\ mathbf { B } } } { (P_ { e } ) } = \\ cos { (P_ { e } ) } and \\ frac { d } { d P_ { e } } \\ sin { (P_ { e } ) } = \\ cos { (P_ { e } ) } and \\ frac { \\ frac { d } { d P_ { e } } \\ sin { (P_ { e } ) } } { P_ { e } } = \\ frac { \\ cos { (P_ { e } ) } } { P_ { e } } and \\ frac { \\ frac { d } { d P_ { e } } \\ sin { (P_ { e } ) } } { P_ { e } } = \\ frac { \\ frac { d } { d P_ { e } } \\ operatorname { V_ { \\ mathbf { B } } } { (P_ { e } ) } } { P_ { e } }", "SR_flan-t5-large": "operatorname { V_ { \\ mathbf { B } } } { (P_ { e } ) } = \\ sin { (P_ { e } ) } and \\ frac { d } { d P_ { e } } \\ operatorname { V_ { \\ mathbf { B } } } { (P_ { e } ) } = \\ frac { d } { d P_ { e } } \\ sin { (P_ { e } ) } and \\ frac { \\ frac { d } { d P_ { e } } \\ operatorname { V_ { \\ mathbf { B } } } { (P_ { e } ) } } { P_ { e } } = \\ frac { \\ frac { d } { d P_ { e } } \\ sin { (P_ { e } ) } } { P_ { e } } and \\ frac { \\ frac { d } { d P_ { e } } \\ operatorname { V_ { \\ mathbf { B } } } { (P_ { e } ) } } { P_ { e } } = \\ frac { \\ cos { (P_ { e } ) } } { P_ { e } } and -1 + \\ frac { \\ frac { d } { d P_ { e } } \\ sin { (P_ { e } ) } } { P_ { e } } = -1 + \\ frac { \\ cos { (P_ { e } ) } } { P_ { e } }", "static_rouge": 0.923076923076923, "static_bleu": 0.8893680422002481, "static_bleurt": 0.810904860496521, "static_gleu": 0.8894736842105263, "VR_rouge": 0.0012019230769230171, "EE_rouge": -0.07692307692307698, "AG_rouge": -0.07692307692307698, "SR_rouge": 0.01882160392798693, "VR_rouge_abs": -0.0008448540706604835, "EE_rouge_abs": 0.0334160463192722, "AG_rouge_abs": -0.009172885572139244, "SR_rouge_abs": 0.045685279187817285, "VR_bleu": -0.019164075458619756, "EE_bleu": -0.10731521125997567, "AG_bleu": -0.10752154040466966, "SR_bleu": -0.0186124924326464, "VR_bleu_abs": 0.021099084946878566, "EE_bleu_abs": 0.11015041907207734, "AG_bleu_abs": -0.016109598583665452, "SR_bleu_abs": 0.07676027680546393, "VR_bleurt": 0.012955307960510254, "EE_bleurt": 0.012587666511535645, "AG_bleurt": 0.02630627155303955, "SR_bleurt": 0.06215786933898926, "VR_bleurt_abs": 0.04778243601322174, "EE_bleurt_abs": 0.16236752271652222, "AG_bleurt_abs": 0.0674317479133606, "SR_bleurt_abs": 0.06009119749069214, "VR_gleu": -0.019302297313723127, "EE_gleu": -0.10719852876784308, "AG_gleu": -0.10740619098448145, "SR_gleu": -0.018954192612812393, "VR_gleu_abs": 0.017028010959178275, "EE_gleu_abs": 0.10556591145084004, "AG_gleu_abs": -0.01685571182245782, "SR_gleu_abs": 0.07443609022556386, "ratio_VR_rouge": 1.002846790890269, "ratio_VR_bleu": 0.9414115104563441, "ratio_VR_bleurt": 1.205114951046506, "ratio_VR_gleu": 0.9577986202619952, "ratio_EE_rouge": 0.9646853146853146, "ratio_EE_bleu": 0.8884410803486577, "ratio_EE_bleurt": 0.7894087093335758, "ratio_EE_gleu": 0.8931000627094273, "ratio_AG_rouge": 1.010121804769257, "ratio_AG_bleu": 1.0177446900211224, "ratio_AG_bleurt": 0.9189448356714169, "ratio_AG_gleu": 1.0185644523680335, "ratio_SR_rouge": 0.9543147208121827, "ratio_SR_bleu": 0.9232397231945361, "ratio_SR_bleurt": 0.9277684171324242, "ratio_SR_gleu": 0.9255639097744361}, {"prompt": "Given \\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})} = \\int (\\mathbf{J} + \\mathbf{v}) d\\mathbf{J}, then derive \\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})} = \\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f, then obtain \\frac{\\int (\\mathbf{J} + \\mathbf{v}) d\\mathbf{J}}{\\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f} = 1", "derivation": "\\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})} = \\int (\\mathbf{J} + \\mathbf{v}) d\\mathbf{J} and \\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})} = \\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f and \\frac{\\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})}}{\\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f} = 1 and \\frac{\\int (\\mathbf{J} + \\mathbf{v}) d\\mathbf{J}}{\\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f} = 1", "srepr_derivation": [["premise", "Equality(Function('F_c')(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Integral(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Tuple(Symbol('\\\\mathbf{J}', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('F_c')(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True)))"], [["divide", 2, "Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True))"], "Equality(Mul(Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True)), Integer(-1)), Function('F_c')(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True))), Integer(1))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Mul(Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True)), Integer(-1)), Integral(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Tuple(Symbol('\\\\mathbf{J}', commutative=True)))), Integer(1))"]], "EE prompt": "Given \\int (\\mathbf{J} + \\mathbf{v}) d\\mathbf{J} = \\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})}, then derive \\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f = \\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})}, then obtain 1 = \\frac{\\int (\\mathbf{J} + \\mathbf{v}) d\\mathbf{J}}{\\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f}", "EE derivation": "\\int (\\mathbf{J} + \\mathbf{v}) d\\mathbf{J} = \\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})} and \\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f = \\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})} and 1 = \\frac{\\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})}}{\\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f} and 1 = \\frac{\\int (\\mathbf{J} + \\mathbf{v}) d\\mathbf{J}}{\\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f}", "EE srepr_derivation": [["premise", "Equality(Integral(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Tuple(Symbol('\\\\mathbf{J}', commutative=True))), Function('F_c')(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)))"], [["evaluate_integrals", 1], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True)), Function('F_c')(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)))"], [["divide", 2, "Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True))"], "Equality(Integer(1), Mul(Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True)), Integer(-1)), Function('F_c')(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True))))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Integer(1), Mul(Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True)), Integer(-1)), Integral(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Tuple(Symbol('\\\\mathbf{J}', commutative=True)))))"]], "AG prompt": "Given \\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})} = \\int (\\mathbf{J} + \\mathbf{v}) d\\mathbf{J}, then derive \\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})} = \\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f, then obtain \\frac{2 \\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})}}{\\mathbf{J}^{2} (\\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f)} = \\frac{2}{\\mathbf{J}^{2}}", "AG derivation": "\\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})} = \\int (\\mathbf{J} + \\mathbf{v}) d\\mathbf{J} and \\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})} = \\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f and \\frac{\\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})}}{\\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f} = 1 and \\frac{2 \\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})}}{\\mathbf{J}^{2} (\\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f)} = \\frac{2}{\\mathbf{J}^{2}}", "AG srepr_derivation": [["premise", "Equality(Function('F_c')(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Integral(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Tuple(Symbol('\\\\mathbf{J}', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('F_c')(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True)))"], [["divide", 2, "Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True))"], "Equality(Mul(Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True)), Integer(-1)), Function('F_c')(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True))), Integer(1))"], [["divide", 3, "Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2)))"], "Equality(Mul(Integer(2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(-2)), Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True)), Integer(-1)), Function('F_c')(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True))), Mul(Integer(2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(-2))))"]], "SR prompt": "Given \\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})} = \\int (\\mathbf{J} + \\mathbf{v}) d\\mathbf{J}, then obtain \\frac{\\int (\\mathbf{J} + \\mathbf{v}) d\\mathbf{J}}{\\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f} = 1", "SR derivation": "\\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})} = \\int (\\mathbf{J} + \\mathbf{v}) d\\mathbf{J} and \\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})} = \\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f and \\frac{\\operatorname{F_{c}}{(\\mathbf{J},\\mathbf{v})}}{\\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f} = 1 and \\frac{\\int (\\mathbf{J} + \\mathbf{v}) d\\mathbf{J}}{\\frac{\\mathbf{J}^{2}}{2} + \\mathbf{J} \\mathbf{v} + f} = 1", "SR srepr_derivation": [["premise", "Equality(Function('F_c')(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Integral(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Tuple(Symbol('\\\\mathbf{J}', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('F_c')(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True)))"], [["divide", 2, "Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True))"], "Equality(Mul(Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True)), Integer(-1)), Function('F_c')(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True))), Integer(1))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Mul(Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{J}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Symbol('f', commutative=True)), Integer(-1)), Integral(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mathbf{v}', commutative=True)), Tuple(Symbol('\\\\mathbf{J}', commutative=True)))), Integer(1))"]], "VR prompt": "Given \\alpha{(\\kappa,\\gamma)} = \\int (\\gamma + \\kappa) d\\gamma, then derive \\alpha{(\\kappa,\\gamma)} = \\frac{\\gamma^{2}}{2} + \\gamma \\kappa + \\zeta, then obtain \\frac{\\int (\\gamma + \\kappa) d\\gamma}{\\frac{\\gamma^{2}}{2} + \\gamma \\kappa + \\zeta} = 1", "VR derivation": "\\alpha{(\\kappa,\\gamma)} = \\int (\\gamma + \\kappa) d\\gamma and \\alpha{(\\kappa,\\gamma)} = \\frac{\\gamma^{2}}{2} + \\gamma \\kappa + \\zeta and \\frac{\\alpha{(\\kappa,\\gamma)}}{\\frac{\\gamma^{2}}{2} + \\gamma \\kappa + \\zeta} = 1 and \\frac{\\int (\\gamma + \\kappa) d\\gamma}{\\frac{\\gamma^{2}}{2} + \\gamma \\kappa + \\zeta} = 1", "VR srepr_derivation": [["premise", "Equality(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\gamma', commutative=True)), Integral(Add(Symbol('\\\\gamma', commutative=True), Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\gamma', commutative=True)), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\gamma', commutative=True), Integer(2))), Mul(Symbol('\\\\gamma', commutative=True), Symbol('\\\\kappa', commutative=True)), Symbol('\\\\zeta', commutative=True)))"], [["divide", 2, "Add(Mul(Rational(1, 2), Pow(Symbol('\\\\gamma', commutative=True), Integer(2))), Mul(Symbol('\\\\gamma', commutative=True), Symbol('\\\\kappa', commutative=True)), Symbol('\\\\zeta', commutative=True))"], "Equality(Mul(Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\gamma', commutative=True), Integer(2))), Mul(Symbol('\\\\gamma', commutative=True), Symbol('\\\\kappa', commutative=True)), Symbol('\\\\zeta', commutative=True)), Integer(-1)), Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\gamma', commutative=True))), Integer(1))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Mul(Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\gamma', commutative=True), Integer(2))), Mul(Symbol('\\\\gamma', commutative=True), Symbol('\\\\kappa', commutative=True)), Symbol('\\\\zeta', commutative=True)), Integer(-1)), Integral(Add(Symbol('\\\\gamma', commutative=True), Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True)))), Integer(1))"]], "static_flan-t5-large": "operatorname { F_ { c } } { ( \\ mathbf { J }, \\ mathbf { v } ) } = \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } and \\ operatorname { F_ { c } } { ( \\ mathbf { J }, \\ mathbf { v } ) } = \\ frac { \\ mathbf { J } ^ { 2 } } { 2 } + \\ mathbf { J } \\ mathbf { v } + f and \\ frac { \\ mathbf { J } ^ { 2 } } { 2 } + \\ mathbf { J } \\ mathbf { v } + f = \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } and \\ frac { \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } } { \\ frac { \\ mathbf { J } ^ { 2 } } { 2 } + \\ mathbf { J } \\ mathbf { v } + f } = 1", "VR_flan-t5-large": "alpha { ( \\ kappa, \\ gamma) } = \\ int ( \\ gamma + \\ kappa) d \\ gamma and \\ frac { \\ partial } { \\ partial \\ gamma } \\ alpha { ( \\ kappa, \\ gamma) } = \\ frac { \\ partial } { \\ partial \\ gamma } \\ frac { \\ gamma ^ { 2 } } { 2 } + \\ gamma \\ kappa + \\ zeta and \\ frac { \\ partial } { \\ partial \\ gamma } \\ alpha { ( \\ kappa, \\ gamma) } = \\ frac { \\ gamma ^ { 2 } } { 2 } + \\ gamma \\ kappa + \\ zeta and \\ frac { \\ int ( \\ gamma + \\ kappa) d \\ gamma } { \\ frac { \\ gamma ^ { 2 } } { 2 } + \\ gamma \\ kappa + \\ zeta } = 1", "EE_flan-t5-large": "int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } = \\ operatorname { F_ { c } } { ( \\ mathbf { J }, \\ mathbf { v } ) } and \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } = \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } and \\ frac { \\ mathbf { J } ^ { 2 } } { 2 } + \\ mathbf { J } \\ mathbf { v } + f = \\ operatorname { F_ { c } } { ( \\ mathbf { J }, \\ mathbf { v } ) } and \\ frac { \\ mathbf { J } ^ { 2 } } { 2 } + \\ mathbf { J } \\ mathbf { v } + f = \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } and 1 = \\ frac { \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } } { \\ frac { \\ mathbf { J } ^ { 2 } } { 2 } + \\ mathbf { J } \\ mathbf { v } + f }", "AG_flan-t5-large": "operatorname { F_ { c } } { ( \\ mathbf { J }, \\ mathbf { v } ) } = \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } and \\ operatorname { F_ { c } } { ( \\ mathbf { J }, \\ mathbf { v } ) } = \\ frac { \\ mathbf { J } ^ { 2 } } { 2 } + \\ mathbf { J } \\ mathbf { v } + f and \\ frac { \\ mathbf { J } ^ { 2 } } { 2 } + \\ mathbf { J } \\ mathbf { v } + f = \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } and \\ frac { 2 \\ operatorname { F_ { c } } { ( \\ mathbf { J }, \\ mathbf { v } ) } } { \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } } = \\ frac { 2 \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } } { \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } } and \\ operatorname { F_ { c } } { ( \\ mathbf { J }, \\ mathbf { v } ) } = \\ frac { \\ mathbf { J } ^ { 2 } } { 2 } + \\ mathbf { J } \\ mathbf { v } + f and \\ frac { 2 \\ operatorname { F_ { c } } { ( \\ mathbf { J }, \\ mathbf { v } ) } } { \\ mathbf { J } ^ { 2 } ( \\ frac { \\ mathbf { J } ^ { 2 } } { 2 } + \\ mathbf { J } \\ mathbf { ", "SR_flan-t5-large": "operatorname { F_ { c } } { ( \\ mathbf { J }, \\ mathbf { v } ) } = \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } and \\ frac { \\ operatorname { F_ { c } } { ( \\ mathbf { J }, \\ mathbf { v } ) } } { \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } } = 1 and \\ frac { \\ operatorname { F_ { c } } { ( \\ mathbf { J }, \\ mathbf { v } ) } } { \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } } = 1 and \\ frac { \\ int ( \\ mathbf { J } + \\ mathbf { v } ) d \\ mathbf { J } } { \\ frac { \\ mathbf { J } ^ { 2 } } { 2 } + \\ mathbf { J } \\ mathbf { v } + f } = 1", "static_rouge": 0.9103448275862068, "static_bleu": 0.8887290016193876, "static_bleurt": 0.7068784832954407, "static_gleu": 0.8900226757369615, "VR_rouge": 0.0868154158215011, "EE_rouge": 0.10787569178373768, "AG_rouge": 0.1724807499163039, "SR_rouge": 0.10478927203065114, "VR_rouge_abs": 0.02389705882352941, "EE_rouge_abs": 0.05811282225814696, "AG_rouge_abs": 0.1687462863933452, "SR_rouge_abs": 0.21678321678321677, "VR_bleu": 0.10619581492002284, "EE_bleu": 0.10569984447882408, "AG_bleu": 0.2414856640932037, "SR_bleu": 0.042285872238143174, "VR_bleu_abs": -0.013589971464689266, "EE_bleu_abs": 0.1435361954065545, "AG_bleu_abs": 0.28215472650689655, "SR_bleu_abs": 0.1709093654802164, "VR_bleurt": -0.01784437894821167, "EE_bleurt": 0.07744842767715454, "AG_bleurt": 0.12773889303207397, "SR_bleurt": 0.00658494234085083, "VR_bleurt_abs": -0.14529860019683838, "EE_bleurt_abs": 0.051759421825408936, "AG_bleurt_abs": 0.033602237701416016, "SR_bleurt_abs": 0.19084173440933228, "VR_gleu": 0.10644058618472263, "EE_gleu": 0.10599900709790822, "AG_gleu": 0.24249263568355695, "SR_gleu": 0.04081632653061229, "VR_gleu_abs": 0.004635266994626019, "EE_gleu_abs": 0.14409827047189683, "AG_gleu_abs": 0.2825990209167779, "SR_gleu_abs": 0.167458432304038, "ratio_VR_rouge": 0.796875, "ratio_VR_bleu": 1.046778303611855, "ratio_VR_bleurt": 0.6997161063411581, "ratio_VR_gleu": 0.9865072426097025, "ratio_EE_rouge": 0.9347348303870042, "ratio_EE_bleu": 0.8484216375715435, "ratio_EE_bleurt": 0.9182444347158869, "ratio_EE_gleu": 0.8479728773251041, "ratio_AG_rouge": 0.8073270013568521, "ratio_AG_bleu": 0.6612104737041182, "ratio_AG_bleurt": 0.9565730892920364, "ratio_AG_gleu": 0.6608811748998665, "ratio_SR_rouge": 0.7832167832167832, "ratio_SR_bleu": 0.8290906345197836, "ratio_SR_bleurt": 0.7749899891479413, "ratio_SR_gleu": 0.832541567695962}, {"prompt": "Given \\mathbf{M}{(J)} = \\cos{(J)}, then derive \\int \\mathbf{M}{(J)} dJ = F_{g} + \\sin{(J)}, then obtain \\int 2 (F_{g} + \\sin{(J)})^{F_{g}} dF_{g} = \\int ((F_{g} + \\sin{(J)})^{F_{g}} + (\\int \\cos{(J)} dJ)^{F_{g}}) dF_{g}", "derivation": "\\mathbf{M}{(J)} = \\cos{(J)} and \\int \\mathbf{M}{(J)} dJ = \\int \\cos{(J)} dJ and \\int \\mathbf{M}{(J)} dJ = F_{g} + \\sin{(J)} and F_{g} + \\sin{(J)} = \\int \\cos{(J)} dJ and (F_{g} + \\sin{(J)})^{F_{g}} = (\\int \\cos{(J)} dJ)^{F_{g}} and 2 (F_{g} + \\sin{(J)})^{F_{g}} = (F_{g} + \\sin{(J)})^{F_{g}} + (\\int \\cos{(J)} dJ)^{F_{g}} and \\int 2 (F_{g} + \\sin{(J)})^{F_{g}} dF_{g} = \\int ((F_{g} + \\sin{(J)})^{F_{g}} + (\\int \\cos{(J)} dJ)^{F_{g}}) dF_{g}", "srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{M}')(Symbol('J', commutative=True)), cos(Symbol('J', commutative=True)))"], [["integrate", 1, "Symbol('J', commutative=True)"], "Equality(Integral(Function('\\\\mathbf{M}')(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\mathbf{M}')(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))))"], [["power", 4, "Symbol('F_g', commutative=True)"], "Equality(Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)), Pow(Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)))"], [["add", 5, "Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))"], "Equality(Mul(Integer(2), Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))), Add(Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)), Pow(Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))))"], [["integrate", 6, "Symbol('F_g', commutative=True)"], "Equality(Integral(Mul(Integer(2), Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True))), Integral(Add(Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)), Pow(Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True))))"]], "EE prompt": "Given \\cos{(J)} = \\mathbf{M}{(J)}, then derive F_{g} + \\sin{(J)} = \\int \\mathbf{M}{(J)} dJ, then obtain \\int ((F_{g} + \\sin{(J)})^{F_{g}} + (\\int \\cos{(J)} dJ)^{F_{g}}) dF_{g} = \\int 2 (F_{g} + \\sin{(J)})^{F_{g}} dF_{g}", "EE derivation": "\\cos{(J)} = \\mathbf{M}{(J)} and \\int \\cos{(J)} dJ = \\int \\mathbf{M}{(J)} dJ and F_{g} + \\sin{(J)} = \\int \\mathbf{M}{(J)} dJ and \\int \\cos{(J)} dJ = F_{g} + \\sin{(J)} and (\\int \\cos{(J)} dJ)^{F_{g}} = (F_{g} + \\sin{(J)})^{F_{g}} and (F_{g} + \\sin{(J)})^{F_{g}} + (\\int \\cos{(J)} dJ)^{F_{g}} = 2 (F_{g} + \\sin{(J)})^{F_{g}} and \\int ((F_{g} + \\sin{(J)})^{F_{g}} + (\\int \\cos{(J)} dJ)^{F_{g}}) dF_{g} = \\int 2 (F_{g} + \\sin{(J)})^{F_{g}} dF_{g}", "EE srepr_derivation": [["premise", "Equality(cos(Symbol('J', commutative=True)), Function('\\\\mathbf{M}')(Symbol('J', commutative=True)))"], [["integrate", 1, "Symbol('J', commutative=True)"], "Equality(Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Integral(Function('\\\\mathbf{M}')(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Integral(Function('\\\\mathbf{M}')(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))))"], [["power", 4, "Symbol('F_g', commutative=True)"], "Equality(Pow(Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)), Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)))"], [["add", 5, "Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))"], "Equality(Add(Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)), Pow(Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))), Mul(Integer(2), Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))))"], [["integrate", 6, "Symbol('F_g', commutative=True)"], "Equality(Integral(Add(Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)), Pow(Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True))), Integral(Mul(Integer(2), Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True))))"]], "AG prompt": "Given \\mathbf{M}{(J)} = \\cos{(J)}, then derive \\int \\mathbf{M}{(J)} dJ = F_{g} + \\sin{(J)}, then obtain \\frac{2 (F_{g} + \\sin{(J)})^{F_{g}}}{F_{g}} = \\frac{(F_{g} + \\sin{(J)})^{F_{g}} + (\\int \\cos{(J)} dJ)^{F_{g}}}{F_{g}}", "AG derivation": "\\mathbf{M}{(J)} = \\cos{(J)} and \\int \\mathbf{M}{(J)} dJ = \\int \\cos{(J)} dJ and \\int \\mathbf{M}{(J)} dJ = F_{g} + \\sin{(J)} and F_{g} + \\sin{(J)} = \\int \\cos{(J)} dJ and (F_{g} + \\sin{(J)})^{F_{g}} = (\\int \\cos{(J)} dJ)^{F_{g}} and 2 (F_{g} + \\sin{(J)})^{F_{g}} = (F_{g} + \\sin{(J)})^{F_{g}} + (\\int \\cos{(J)} dJ)^{F_{g}} and \\frac{2 (F_{g} + \\sin{(J)})^{F_{g}}}{F_{g}} = \\frac{(F_{g} + \\sin{(J)})^{F_{g}} + (\\int \\cos{(J)} dJ)^{F_{g}}}{F_{g}}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{M}')(Symbol('J', commutative=True)), cos(Symbol('J', commutative=True)))"], [["integrate", 1, "Symbol('J', commutative=True)"], "Equality(Integral(Function('\\\\mathbf{M}')(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\mathbf{M}')(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))))"], [["power", 4, "Symbol('F_g', commutative=True)"], "Equality(Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)), Pow(Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)))"], [["add", 5, "Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))"], "Equality(Mul(Integer(2), Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))), Add(Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)), Pow(Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))))"], [["divide", 6, "Symbol('F_g', commutative=True)"], "Equality(Mul(Integer(2), Pow(Symbol('F_g', commutative=True), Integer(-1)), Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))), Mul(Pow(Symbol('F_g', commutative=True), Integer(-1)), Add(Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)), Pow(Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)))))"]], "SR prompt": "Given \\mathbf{M}{(J)} = \\cos{(J)}, then obtain \\int 2 (F_{g} + \\sin{(J)})^{F_{g}} dF_{g} = \\int ((F_{g} + \\sin{(J)})^{F_{g}} + (\\int \\cos{(J)} dJ)^{F_{g}}) dF_{g}", "SR derivation": "\\mathbf{M}{(J)} = \\cos{(J)} and \\int \\mathbf{M}{(J)} dJ = \\int \\cos{(J)} dJ and \\int \\mathbf{M}{(J)} dJ = F_{g} + \\sin{(J)} and F_{g} + \\sin{(J)} = \\int \\cos{(J)} dJ and (F_{g} + \\sin{(J)})^{F_{g}} = (\\int \\cos{(J)} dJ)^{F_{g}} and 2 (F_{g} + \\sin{(J)})^{F_{g}} = (F_{g} + \\sin{(J)})^{F_{g}} + (\\int \\cos{(J)} dJ)^{F_{g}} and \\int 2 (F_{g} + \\sin{(J)})^{F_{g}} dF_{g} = \\int ((F_{g} + \\sin{(J)})^{F_{g}} + (\\int \\cos{(J)} dJ)^{F_{g}}) dF_{g}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{M}')(Symbol('J', commutative=True)), cos(Symbol('J', commutative=True)))"], [["integrate", 1, "Symbol('J', commutative=True)"], "Equality(Integral(Function('\\\\mathbf{M}')(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\mathbf{M}')(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))))"], [["power", 4, "Symbol('F_g', commutative=True)"], "Equality(Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)), Pow(Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)))"], [["add", 5, "Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))"], "Equality(Mul(Integer(2), Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))), Add(Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)), Pow(Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))))"], [["integrate", 6, "Symbol('F_g', commutative=True)"], "Equality(Integral(Mul(Integer(2), Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True))), Integral(Add(Pow(Add(Symbol('F_g', commutative=True), sin(Symbol('J', commutative=True))), Symbol('F_g', commutative=True)), Pow(Integral(cos(Symbol('J', commutative=True)), Tuple(Symbol('J', commutative=True))), Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True))))"]], "VR prompt": "Given \\omicron{(\\upsilon)} = \\cos{(\\upsilon)}, then derive \\int \\omicron{(\\upsilon)} d\\upsilon = \\tau + \\sin{(\\upsilon)}, then obtain \\int 2 (\\tau + \\sin{(\\upsilon)})^{\\tau} d\\tau = \\int ((\\tau + \\sin{(\\upsilon)})^{\\tau} + (\\int \\cos{(\\upsilon)} d\\upsilon)^{\\tau}) d\\tau", "VR derivation": "\\omicron{(\\upsilon)} = \\cos{(\\upsilon)} and \\int \\omicron{(\\upsilon)} d\\upsilon = \\int \\cos{(\\upsilon)} d\\upsilon and \\int \\omicron{(\\upsilon)} d\\upsilon = \\tau + \\sin{(\\upsilon)} and \\tau + \\sin{(\\upsilon)} = \\int \\cos{(\\upsilon)} d\\upsilon and (\\tau + \\sin{(\\upsilon)})^{\\tau} = (\\int \\cos{(\\upsilon)} d\\upsilon)^{\\tau} and 2 (\\tau + \\sin{(\\upsilon)})^{\\tau} = (\\tau + \\sin{(\\upsilon)})^{\\tau} + (\\int \\cos{(\\upsilon)} d\\upsilon)^{\\tau} and \\int 2 (\\tau + \\sin{(\\upsilon)})^{\\tau} d\\tau = \\int ((\\tau + \\sin{(\\upsilon)})^{\\tau} + (\\int \\cos{(\\upsilon)} d\\upsilon)^{\\tau}) d\\tau", "VR srepr_derivation": [["premise", "Equality(Function('\\\\omicron')(Symbol('\\\\upsilon', commutative=True)), cos(Symbol('\\\\upsilon', commutative=True)))"], [["integrate", 1, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Integral(Function('\\\\omicron')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Integral(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\omicron')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Add(Symbol('\\\\tau', commutative=True), sin(Symbol('\\\\upsilon', commutative=True))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Add(Symbol('\\\\tau', commutative=True), sin(Symbol('\\\\upsilon', commutative=True))), Integral(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))))"], [["power", 4, "Symbol('\\\\tau', commutative=True)"], "Equality(Pow(Add(Symbol('\\\\tau', commutative=True), sin(Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\tau', commutative=True)), Pow(Integral(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\tau', commutative=True)))"], [["add", 5, "Pow(Add(Symbol('\\\\tau', commutative=True), sin(Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\tau', commutative=True))"], "Equality(Mul(Integer(2), Pow(Add(Symbol('\\\\tau', commutative=True), sin(Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\tau', commutative=True))), Add(Pow(Add(Symbol('\\\\tau', commutative=True), sin(Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\tau', commutative=True)), Pow(Integral(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\tau', commutative=True))))"], [["integrate", 6, "Symbol('\\\\tau', commutative=True)"], "Equality(Integral(Mul(Integer(2), Pow(Add(Symbol('\\\\tau', commutative=True), sin(Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\tau', commutative=True))), Integral(Add(Pow(Add(Symbol('\\\\tau', commutative=True), sin(Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\tau', commutative=True)), Pow(Integral(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\tau', commutative=True))))"]], "static_flan-t5-large": "mathbf { M } { (J) } = \\ cos { (J) } and \\ int \\ mathbf { M } { (J) } dJ = \\ int \\ cos { (J) } dJ and ( \\ int \\ mathbf { M } { (J) } dJ) ^ { F_ { g } } = ( \\ int \\ cos { (J) } dJ) ^ { F_ { g } } and \\ int \\ mathbf { M } { (J) } dJ = F_ { g } + \\ sin { (J) } and (F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } = ( \\ int \\ cos { (J) } dJ) ^ { F_ { g } } and 2 (F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } = (F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } + ( \\ int \\ cos { (J) } dJ) ^ { F_ { g } } and \\ int 2 (F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } dF_ { g } = \\ int ((F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } + ( \\ int \\ cos { (J) } dJ) ^ { F_ { g } } ) dF_ { g }", "VR_flan-t5-large": "omicron { ( \\ upsilon) } = \\ cos { ( \\ upsilon) } and \\ int \\ omicron { ( \\ upsilon) } d \\ upsilon = \\ int \\ cos { ( \\ upsilon) } d \\ upsilon and ( \\ int \\ omicron { ( \\ upsilon) } d \\ upsilon) ^ { \\ tau } = ( \\ int \\ cos { ( \\ upsilon) } d \\ upsilon) ^ { \\ tau } and \\ int \\ omicron { ( \\ upsilon) } d \\ upsilon = \\ tau + \\ sin { ( \\ upsilon) } and ( \\ tau + \\ sin { ( \\ upsilon) } ) ^ { \\ tau } = ( \\ int \\ cos { ( \\ upsilon) } d \\ upsilon) ^ { \\ tau } and 2 ( \\ tau + \\ sin { ( \\ upsilon) } ) ^ { \\ tau } = ( \\ int \\ cos { ( \\ upsilon) } d \\ upsilon) ^ { \\ tau } + ( \\ int \\ cos { ( \\ upsilon) } d \\ upsilon) ^ { \\ tau } and \\ int 2 ( \\ tau + \\ sin { ( \\ upsilon) } ) ^ { \\ tau } d \\ tau = \\ int (( \\ tau + \\ sin { ( \\ upsilon) } ) ^ { \\ tau } + ( \\ int \\ cos { ( \\ upsilon) } d \\ upsilon) ^ { \\ tau } ) d \\ tau", "EE_flan-t5-large": "cos { (J) } = \\ mathbf { M } { (J) } and \\ int \\ cos { (J) } dJ = \\ int \\ mathbf { M } { (J) } dJ and \\ int \\ cos { (J) } dJ = \\ int \\ mathbf { M } { (J) } dJ and ( \\ int \\ cos { (J) } dJ) ^ { F_ { g } } = ( \\ int \\ mathbf { M } { (J) } dJ) ^ { F_ { g } } and F_ { g } + \\ sin { (J) } = \\ int \\ mathbf { M } { (J) } dJ and (F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } + ( \\ int \\ cos { (J) } dJ) ^ { F_ { g } } = 2 (F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } and \\ int ((F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } + ( \\ int \\ cos { (J) } dJ) ^ { F_ { g } } ) dF_ { g } = \\ int 2 (F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } dF_ { g }", "AG_flan-t5-large": "mathbf { M } { (J) } = \\ cos { (J) } and \\ int \\ mathbf { M } { (J) } dJ = \\ int \\ cos { (J) } dJ and ( \\ int \\ mathbf { M } { (J) } dJ) ^ { F_ { g } } = ( \\ int \\ cos { (J) } dJ) ^ { F_ { g } } and \\ int \\ mathbf { M } { (J) } dJ = F_ { g } + \\ sin { (J) } and 2 ( \\ int \\ mathbf { M } { (J) } dJ) ^ { F_ { g } } = (F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } + ( \\ int \\ mathbf { M } { (J) } dJ) ^ { F_ { g } } and \\ frac { 2 ( \\ int \\ mathbf { M } { (J) } dJ) ^ { F_ { g } } } { F_ { g } } = \\ frac { (F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } + ( \\ int \\ cos { (J) } dJ) ^ { F_ { g } } } { F_ { g } } and \\ frac { 2 (F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } } { F_ { g } } = \\ frac { (F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } + ( \\ int \\ cos { (J) } dJ) ^ { F_ { g } } } { F_ { g } }", "SR_flan-t5-large": "mathbf { M } { (J) } = \\ cos { (J) } and \\ int \\ mathbf { M } { (J) } dJ = \\ int \\ cos { (J) } dJ and ( \\ int \\ mathbf { M } { (J) } dJ) ^ { F_ { g } } = ( \\ int \\ cos { (J) } dJ) ^ { F_ { g } } and 2 ( \\ int \\ mathbf { M } { (J) } dJ) ^ { F_ { g } } = ( \\ int \\ mathbf { M } { (J) } dJ) ^ { F_ { g } } + ( \\ int \\ cos { (J) } dJ) ^ { F_ { g } } and 2 (F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } = (F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } + ( \\ int \\ cos { (J) } dJ) ^ { F_ { g } } and \\ int 2 (F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } dF_ { g } = \\ int ((F_ { g } + \\ sin { (J) } ) ^ { F_ { g } } + ( \\ int \\ cos { (J) } dJ) ^ { F_ { g } } ) dF_ { g }", "static_rouge": 0.9206349206349207, "static_bleu": 0.9091354871472841, "static_bleurt": 0.8031484484672546, "static_gleu": 0.9093799682034976, "VR_rouge": 0.051587301587301626, "EE_rouge": 0.028161802355350818, "AG_rouge": 0.1401471157568721, "SR_rouge": 0.06957109084768665, "VR_rouge_abs": -0.003958280975119383, "EE_rouge_abs": 0.09828135670384697, "AG_rouge_abs": 0.13209109730848856, "SR_rouge_abs": 0.08808290155440424, "VR_bleu": 0.02216386849374241, "EE_bleu": -0.013325679417401592, "AG_bleu": 0.1474293871377409, "SR_bleu": 0.047506837893004805, "VR_bleu_abs": 0.020752054852238355, "EE_bleu_abs": 0.10584272658020788, "AG_bleu_abs": 0.15397907490465923, "SR_bleu_abs": 0.07121235492205424, "VR_bleurt": 0.05218440294265747, "EE_bleurt": 0.04145616292953491, "AG_bleurt": 0.06009531021118164, "SR_bleurt": 0.05023854970932007, "VR_bleurt_abs": 0.021630465984344482, "EE_bleurt_abs": 0.039403676986694336, "AG_bleurt_abs": 0.07923758029937744, "SR_bleurt_abs": 0.07716763019561768, "VR_gleu": 0.02185799983794401, "EE_gleu": -0.01363187612814365, "AG_gleu": 0.14689683729931413, "SR_gleu": 0.04661913353255065, "VR_gleu_abs": 0.018508953862790778, "EE_gleu_abs": 0.10375290190160302, "AG_gleu_abs": 0.1530606078917155, "SR_gleu_abs": 0.07074721780604132, "ratio_VR_rouge": 1.0342391304347827, "ratio_VR_bleu": 0.9440694603336969, "ratio_VR_bleurt": 1.0709215270390777, "ratio_VR_gleu": 0.9535507782042065, "ratio_EE_rouge": 0.8984057885757987, "ratio_EE_bleu": 0.8920303183063912, "ratio_EE_bleurt": 0.945841499768811, "ratio_EE_gleu": 0.8941881535395213, "ratio_AG_rouge": 0.8553287981859411, "ratio_AG_bleu": 0.8357693799854655, "ratio_AG_bleurt": 0.9043409131761238, "ratio_AG_gleu": 0.8367894844231575, "ratio_SR_rouge": 0.9119170984455958, "ratio_SR_bleu": 0.9287876450779458, "ratio_SR_bleurt": 0.9124668739890465, "ratio_SR_gleu": 0.9292527821939587}, {"prompt": "Given \\operatorname{C_{d}}{(\\mathbf{p})} = \\sin{(\\mathbf{p})}, then derive \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} = \\cos{(\\mathbf{p})}, then obtain \\int F_{c} \\cos{(\\mathbf{p})} dF_{c} = \\int F_{c} \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} dF_{c}", "derivation": "\\operatorname{C_{d}}{(\\mathbf{p})} = \\sin{(\\mathbf{p})} and \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} = \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} and F_{c} \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} = F_{c} \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} and \\int F_{c} \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} dF_{c} = \\int F_{c} \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} dF_{c} and \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} = \\cos{(\\mathbf{p})} and \\int F_{c} \\cos{(\\mathbf{p})} dF_{c} = \\int F_{c} \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} dF_{c}", "srepr_derivation": [["get_premise", "Equality(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), sin(Symbol('\\\\mathbf{p}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\mathbf{p}', commutative=True)"], "Equality(Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1))))"], [["times", 2, "Symbol('F_c', commutative=True)"], "Equality(Mul(Symbol('F_c', commutative=True), Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))), Mul(Symbol('F_c', commutative=True), Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))))"], [["integrate", 3, "Symbol('F_c', commutative=True)"], "Equality(Integral(Mul(Symbol('F_c', commutative=True), Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))), Tuple(Symbol('F_c', commutative=True))), Integral(Mul(Symbol('F_c', commutative=True), Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))), Tuple(Symbol('F_c', commutative=True))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1))), cos(Symbol('\\\\mathbf{p}', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Integral(Mul(Symbol('F_c', commutative=True), cos(Symbol('\\\\mathbf{p}', commutative=True))), Tuple(Symbol('F_c', commutative=True))), Integral(Mul(Symbol('F_c', commutative=True), Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))), Tuple(Symbol('F_c', commutative=True))))"]], "EE prompt": "Given \\sin{(\\mathbf{p})} = \\operatorname{C_{d}}{(\\mathbf{p})}, then derive \\cos{(\\mathbf{p})} = \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})}, then obtain \\int F_{c} \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} dF_{c} = \\int F_{c} \\cos{(\\mathbf{p})} dF_{c}", "EE derivation": "\\sin{(\\mathbf{p})} = \\operatorname{C_{d}}{(\\mathbf{p})} and \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} = \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} and F_{c} \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} = F_{c} \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} and \\int F_{c} \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} dF_{c} = \\int F_{c} \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} dF_{c} and \\cos{(\\mathbf{p})} = \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} and \\int F_{c} \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} dF_{c} = \\int F_{c} \\cos{(\\mathbf{p})} dF_{c}", "EE srepr_derivation": [["get_premise", "Equality(sin(Symbol('\\\\mathbf{p}', commutative=True)), Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\mathbf{p}', commutative=True)"], "Equality(Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1))), Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1))))"], [["times", 2, "Symbol('F_c', commutative=True)"], "Equality(Mul(Symbol('F_c', commutative=True), Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))), Mul(Symbol('F_c', commutative=True), Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))))"], [["integrate", 3, "Symbol('F_c', commutative=True)"], "Equality(Integral(Mul(Symbol('F_c', commutative=True), Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))), Tuple(Symbol('F_c', commutative=True))), Integral(Mul(Symbol('F_c', commutative=True), Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))), Tuple(Symbol('F_c', commutative=True))))"], [["evaluate_derivatives", 2], "Equality(cos(Symbol('\\\\mathbf{p}', commutative=True)), Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 4, 5], "Equality(Integral(Mul(Symbol('F_c', commutative=True), Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))), Tuple(Symbol('F_c', commutative=True))), Integral(Mul(Symbol('F_c', commutative=True), cos(Symbol('\\\\mathbf{p}', commutative=True))), Tuple(Symbol('F_c', commutative=True))))"]], "AG prompt": "Given \\operatorname{C_{d}}{(\\mathbf{p})} = \\sin{(\\mathbf{p})}, then derive \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} = \\cos{(\\mathbf{p})}, then obtain \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} = \\cos{(\\mathbf{p})}", "AG derivation": "\\operatorname{C_{d}}{(\\mathbf{p})} = \\sin{(\\mathbf{p})} and \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} = \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} and F_{c} \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} = F_{c} \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} and \\int F_{c} \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} dF_{c} = \\int F_{c} \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} dF_{c} and \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} = \\cos{(\\mathbf{p})} and \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} = \\cos{(\\mathbf{p})}", "AG srepr_derivation": [["get_premise", "Equality(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), sin(Symbol('\\\\mathbf{p}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\mathbf{p}', commutative=True)"], "Equality(Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1))))"], [["times", 2, "Symbol('F_c', commutative=True)"], "Equality(Mul(Symbol('F_c', commutative=True), Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))), Mul(Symbol('F_c', commutative=True), Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))))"], [["integrate", 3, "Symbol('F_c', commutative=True)"], "Equality(Integral(Mul(Symbol('F_c', commutative=True), Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))), Tuple(Symbol('F_c', commutative=True))), Integral(Mul(Symbol('F_c', commutative=True), Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))), Tuple(Symbol('F_c', commutative=True))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1))), cos(Symbol('\\\\mathbf{p}', commutative=True)))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1))), cos(Symbol('\\\\mathbf{p}', commutative=True)))"]], "SR prompt": "Given \\operatorname{C_{d}}{(\\mathbf{p})} = \\sin{(\\mathbf{p})}, then obtain \\int F_{c} \\cos{(\\mathbf{p})} dF_{c} = \\int F_{c} \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} dF_{c}", "SR derivation": "\\operatorname{C_{d}}{(\\mathbf{p})} = \\sin{(\\mathbf{p})} and \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} = \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} and F_{c} \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} = F_{c} \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} and \\int F_{c} \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} dF_{c} = \\int F_{c} \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} dF_{c} and \\frac{d}{d \\mathbf{p}} \\operatorname{C_{d}}{(\\mathbf{p})} = \\cos{(\\mathbf{p})} and \\int F_{c} \\cos{(\\mathbf{p})} dF_{c} = \\int F_{c} \\frac{d}{d \\mathbf{p}} \\sin{(\\mathbf{p})} dF_{c}", "SR srepr_derivation": [["get_premise", "Equality(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), sin(Symbol('\\\\mathbf{p}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\mathbf{p}', commutative=True)"], "Equality(Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1))))"], [["times", 2, "Symbol('F_c', commutative=True)"], "Equality(Mul(Symbol('F_c', commutative=True), Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))), Mul(Symbol('F_c', commutative=True), Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))))"], [["integrate", 3, "Symbol('F_c', commutative=True)"], "Equality(Integral(Mul(Symbol('F_c', commutative=True), Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))), Tuple(Symbol('F_c', commutative=True))), Integral(Mul(Symbol('F_c', commutative=True), Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))), Tuple(Symbol('F_c', commutative=True))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('C_d')(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1))), cos(Symbol('\\\\mathbf{p}', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Integral(Mul(Symbol('F_c', commutative=True), cos(Symbol('\\\\mathbf{p}', commutative=True))), Tuple(Symbol('F_c', commutative=True))), Integral(Mul(Symbol('F_c', commutative=True), Derivative(sin(Symbol('\\\\mathbf{p}', commutative=True)), Tuple(Symbol('\\\\mathbf{p}', commutative=True), Integer(1)))), Tuple(Symbol('F_c', commutative=True))))"]], "VR prompt": "Given \\tau{(\\nu)} = \\sin{(\\nu)}, then derive \\frac{d}{d \\nu} \\tau{(\\nu)} = \\cos{(\\nu)}, then obtain \\int \\alpha \\cos{(\\nu)} d\\alpha = \\int \\alpha \\frac{d}{d \\nu} \\sin{(\\nu)} d\\alpha", "VR derivation": "\\tau{(\\nu)} = \\sin{(\\nu)} and \\frac{d}{d \\nu} \\tau{(\\nu)} = \\frac{d}{d \\nu} \\sin{(\\nu)} and \\alpha \\frac{d}{d \\nu} \\tau{(\\nu)} = \\alpha \\frac{d}{d \\nu} \\sin{(\\nu)} and \\int \\alpha \\frac{d}{d \\nu} \\tau{(\\nu)} d\\alpha = \\int \\alpha \\frac{d}{d \\nu} \\sin{(\\nu)} d\\alpha and \\frac{d}{d \\nu} \\tau{(\\nu)} = \\cos{(\\nu)} and \\int \\alpha \\cos{(\\nu)} d\\alpha = \\int \\alpha \\frac{d}{d \\nu} \\sin{(\\nu)} d\\alpha", "VR srepr_derivation": [["get_premise", "Equality(Function('\\\\tau')(Symbol('\\\\nu', commutative=True)), sin(Symbol('\\\\nu', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\nu', commutative=True)"], "Equality(Derivative(Function('\\\\tau')(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))))"], [["times", 2, "Symbol('\\\\alpha', commutative=True)"], "Equality(Mul(Symbol('\\\\alpha', commutative=True), Derivative(Function('\\\\tau')(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1)))), Mul(Symbol('\\\\alpha', commutative=True), Derivative(sin(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1)))))"], [["integrate", 3, "Symbol('\\\\alpha', commutative=True)"], "Equality(Integral(Mul(Symbol('\\\\alpha', commutative=True), Derivative(Function('\\\\tau')(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1)))), Tuple(Symbol('\\\\alpha', commutative=True))), Integral(Mul(Symbol('\\\\alpha', commutative=True), Derivative(sin(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1)))), Tuple(Symbol('\\\\alpha', commutative=True))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\tau')(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))), cos(Symbol('\\\\nu', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Integral(Mul(Symbol('\\\\alpha', commutative=True), cos(Symbol('\\\\nu', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True))), Integral(Mul(Symbol('\\\\alpha', commutative=True), Derivative(sin(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1)))), Tuple(Symbol('\\\\alpha', commutative=True))))"]], "static_flan-t5-large": "operatorname { C_ { d } } { ( \\ mathbf { p } ) } = \\ sin { ( \\ mathbf { p } ) } and \\ frac { d } { d \\ mathbf { p } } \\ operatorname { C_ { d } } { ( \\ mathbf { p } ) } = \\ frac { d } { d \\ mathbf { p } } \\ sin { ( \\ mathbf { p } ) } and \\ frac { d } { d \\ mathbf { p } } \\ operatorname { C_ { d } } { ( \\ mathbf { p } ) } = \\ cos { ( \\ mathbf { p } ) } and \\ cos { ( \\ mathbf { p } ) } = \\ frac { d } { d \\ mathbf { p } } \\ sin { ( \\ mathbf { p } ) } and F_ { c } \\ cos { ( \\ mathbf { p } ) } = F_ { c } \\ frac { d } { d \\ mathbf { p } } \\ sin { ( \\ mathbf { p } ) } and \\ int F_ { c } \\ cos { ( \\ mathbf { p } ) } dF_ { c } = \\ int F_ { c } \\ frac { d } { d \\ mathbf { p } } \\ sin { ( \\ mathbf { p } ) } dF_ { c }", "VR_flan-t5-large": "tau { ( \\ nu) } = \\ sin { ( \\ nu) } and \\ frac { d } { d \\ nu } \\ tau { ( \\ nu) } = \\ frac { d } { d \\ nu } \\ sin { ( \\ nu) } and \\ frac { d } { d \\ nu } \\ tau { ( \\ nu) } = \\ cos { ( \\ nu) } and \\ cos { ( \\ nu) } = \\ frac { d } { d \\ nu } \\ sin { ( \\ nu) } and \\ alpha \\ cos { ( \\ nu) } = \\ alpha \\ frac { d } { d \\ nu } \\ sin { ( \\ mu) } and \\ int \\ alpha \\ cos { ( \\ nu) } d \\ alpha = \\ int \\ alpha \\ frac { d } { d \\ nu } \\ sin { ( \\ mu) } d \\ alpha", "EE_flan-t5-large": "sin { ( \\ mathbf { p } ) } = \\ operatorname { C_ { d } } { ( \\ mathbf { p } ) } and \\ frac { d } { d \\ mathbf { p } } \\ sin { ( \\ mathbf { p } ) } = \\ frac { d } { d \\ mathbf { p } } \\ operatorname { C_ { d } } { ( \\ mathbf { p } ) } and \\ cos { ( \\ mathbf { p } ) } = \\ frac { d } { d \\ mathbf { p } } \\ operatorname { C_ { d } } { ( \\ mathbf { p } ) } and \\ frac { d } { d \\ mathbf { p } } \\ sin { ( \\ mathbf { p } ) } = \\ cos { ( \\ mathbf { p } ) } and F_ { c } \\ frac { d } { d \\ mathbf { p } } \\ sin { ( \\ mathbf { p } ) } = F_ { c } \\ cos { ( \\ mathbf { p } ) } and \\ int F_ { c } \\ frac { d } { d \\ mathbf { p } } \\ sin { ( \\ mathbf { p } ) } dF_ { c } = \\ int F_ { c } \\ cos { ( \\ mathbf { p } ) } dF_ { c }", "AG_flan-t5-large": "operatorname { C_ { d } } { ( \\ mathbf { p } ) } = \\ sin { ( \\ mathbf { p } ) } and \\ frac { d } { d \\ mathbf { p } } \\ operatorname { C_ { d } } { ( \\ mathbf { p } ) } = \\ frac { d } { d \\ mathbf { p } } \\ sin { ( \\ mathbf { p } ) } and \\ frac { d } { d \\ mathbf { p } } \\ operatorname { C_ { d } } { ( \\ mathbf { p } ) } = \\ cos { ( \\ mathbf { p } ) } and \\ frac { d } { d \\ mathbf { p } } \\ sin { ( \\ mathbf { p } ) } = \\ cos { ( \\ mathbf { p } ) }", "SR_flan-t5-large": "operatorname { C_ { d } } { ( \\ mathbf { p } ) } = \\ sin { ( \\ mathbf { p } ) } and \\ frac { d } { d \\ mathbf { p } } \\ operatorname { C_ { d } } { ( \\ mathbf { p } ) } = \\ frac { d } { d \\ mathbf { p } } \\ sin { ( \\ mathbf { p } ) } and F_ { c } \\ frac { d } { d \\ mathbf { p } } \\ operatorname { C_ { d } } { ( \\ mathbf { p } ) } = F_ { c } \\ frac { d } { d \\ mathbf { p } } \\ sin { ( \\ mathbf { p } ) } and \\ int F_ { c } \\ cos { ( \\ mathbf { p } ) } dF_ { c } = \\ int F_ { c } \\ frac { d } { d \\ mathbf { p } } \\ sin { ( \\ mathbf { p } ) } dF_ { c }", "static_rouge": 0.8235294117647058, "static_bleu": 0.7683912064061953, "static_bleurt": 0.545913577079773, "static_gleu": 0.7865583456425406, "VR_rouge": 0.06638655462184861, "EE_rouge": 0.0, "AG_rouge": 0.1568627450980392, "SR_rouge": 0.05596184419713823, "VR_rouge_abs": -0.0021929824561403577, "EE_rouge_abs": -0.01520467836257311, "AG_rouge_abs": 0.2315544644010853, "SR_rouge_abs": 0.13043478260869557, "VR_bleu": 0.0024686901920782933, "EE_bleu": 0.0, "AG_bleu": 0.3586442825944437, "SR_bleu": 0.2133900306337143, "VR_bleu_abs": -0.05409581746451697, "EE_bleu_abs": -0.0011876927404509408, "AG_bleu_abs": 0.40121795662239135, "SR_bleu_abs": 0.2506954240385697, "VR_bleurt": -0.057030320167541504, "EE_bleurt": -0.021710216999053955, "AG_bleurt": 0.3099156469106674, "SR_bleurt": -0.1869528889656067, "VR_bleurt_abs": 0.027432262897491455, "EE_bleurt_abs": 0.16755050420761108, "AG_bleurt_abs": 0.4871554672718048, "SR_bleurt_abs": 0.15168553590774536, "VR_gleu": 0.008397426102310646, "EE_gleu": 0.0, "AG_gleu": 0.260326231175132, "SR_gleu": 0.1587887740029541, "VR_gleu_abs": -0.04891728482740554, "EE_gleu_abs": -0.0011625112403090831, "AG_gleu_abs": 0.32281762480456044, "SR_gleu_abs": 0.22577696526508229, "ratio_VR_rouge": 1.0105263157894737, "ratio_VR_bleu": 1.1761466929931526, "ratio_VR_bleurt": 1.066826934839611, "ratio_VR_gleu": 1.136004114283998, "ratio_EE_rouge": 1.0156156156156155, "ratio_EE_bleu": 1.0011957008886676, "ratio_EE_bleurt": 0.8007816840799461, "ratio_EE_gleu": 1.001170290125932, "ratio_AG_rouge": 0.7525545429439382, "ratio_AG_bleu": 0.5639778439748198, "ratio_AG_bleurt": 0.43728522395918823, "ratio_AG_gleu": 0.6500439839988993, "ratio_SR_rouge": 0.8695652173913044, "ratio_SR_bleu": 0.7493045759614303, "ratio_SR_bleurt": 0.8247875717274177, "ratio_SR_gleu": 0.7742230347349177}, {"prompt": "Given \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = - \\sigma_x + \\varphi, then derive \\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = 0, then obtain (e^{\\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)}})^{\\sigma_x} = 1", "derivation": "\\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = - \\sigma_x + \\varphi and \\frac{\\partial}{\\partial \\varphi} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = \\frac{\\partial}{\\partial \\varphi} (- \\sigma_x + \\varphi) and \\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = \\frac{\\partial^{2}}{\\partial \\varphi^{2}} (- \\sigma_x + \\varphi) and \\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = 0 and e^{\\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)}} = 1 and (e^{\\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)}})^{\\sigma_x} = 1", "srepr_derivation": [["premise", "Equality(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Add(Mul(Integer(-1), Symbol('\\\\sigma_x', commutative=True)), Symbol('\\\\varphi', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\varphi', commutative=True)"], "Equality(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Symbol('\\\\sigma_x', commutative=True)), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(1))))"], [["differentiate", 2, "Symbol('\\\\varphi', commutative=True)"], "Equality(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2))), Derivative(Add(Mul(Integer(-1), Symbol('\\\\sigma_x', commutative=True)), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2))), Integer(0))"], [["exp", 4], "Equality(exp(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2)))), Integer(1))"], [["power", 5, "Symbol('\\\\sigma_x', commutative=True)"], "Equality(Pow(exp(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2)))), Symbol('\\\\sigma_x', commutative=True)), Integer(1))"]], "EE prompt": "Given - \\sigma_x + \\varphi = \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)}, then derive 0 = \\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)}, then obtain 1 = (e^{\\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)}})^{\\sigma_x}", "EE derivation": "- \\sigma_x + \\varphi = \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} and \\frac{\\partial}{\\partial \\varphi} (- \\sigma_x + \\varphi) = \\frac{\\partial}{\\partial \\varphi} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} and \\frac{\\partial^{2}}{\\partial \\varphi^{2}} (- \\sigma_x + \\varphi) = \\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} and 0 = \\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} and 1 = e^{\\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)}} and 1 = (e^{\\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)}})^{\\sigma_x}", "EE srepr_derivation": [["premise", "Equality(Add(Mul(Integer(-1), Symbol('\\\\sigma_x', commutative=True)), Symbol('\\\\varphi', commutative=True)), Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\varphi', commutative=True)"], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('\\\\sigma_x', commutative=True)), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(1))), Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(1))))"], [["differentiate", 2, "Symbol('\\\\varphi', commutative=True)"], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('\\\\sigma_x', commutative=True)), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2))), Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2))))"], [["evaluate_derivatives", 3], "Equality(Integer(0), Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2))))"], [["exp", 4], "Equality(Integer(1), exp(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2)))))"], [["power", 5, "Symbol('\\\\sigma_x', commutative=True)"], "Equality(Integer(1), Pow(exp(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2)))), Symbol('\\\\sigma_x', commutative=True)))"]], "AG prompt": "Given \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = - \\sigma_x + \\varphi, then derive \\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = 0, then obtain e^{\\frac{\\partial^{2}}{\\partial \\varphi^{2}} (- \\sigma_x + \\varphi)} = 1", "AG derivation": "\\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = - \\sigma_x + \\varphi and \\frac{\\partial}{\\partial \\varphi} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = \\frac{\\partial}{\\partial \\varphi} (- \\sigma_x + \\varphi) and \\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = \\frac{\\partial^{2}}{\\partial \\varphi^{2}} (- \\sigma_x + \\varphi) and \\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = 0 and e^{\\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)}} = 1 and e^{\\frac{\\partial^{2}}{\\partial \\varphi^{2}} (- \\sigma_x + \\varphi)} = 1", "AG srepr_derivation": [["premise", "Equality(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Add(Mul(Integer(-1), Symbol('\\\\sigma_x', commutative=True)), Symbol('\\\\varphi', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\varphi', commutative=True)"], "Equality(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Symbol('\\\\sigma_x', commutative=True)), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(1))))"], [["differentiate", 2, "Symbol('\\\\varphi', commutative=True)"], "Equality(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2))), Derivative(Add(Mul(Integer(-1), Symbol('\\\\sigma_x', commutative=True)), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2))), Integer(0))"], [["exp", 4], "Equality(exp(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2)))), Integer(1))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(exp(Derivative(Add(Mul(Integer(-1), Symbol('\\\\sigma_x', commutative=True)), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2)))), Integer(1))"]], "SR prompt": "Given \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = - \\sigma_x + \\varphi, then obtain (e^{\\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)}})^{\\sigma_x} = 1", "SR derivation": "\\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = - \\sigma_x + \\varphi and \\frac{\\partial}{\\partial \\varphi} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = \\frac{\\partial}{\\partial \\varphi} (- \\sigma_x + \\varphi) and \\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = \\frac{\\partial^{2}}{\\partial \\varphi^{2}} (- \\sigma_x + \\varphi) and \\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)} = 0 and e^{\\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)}} = 1 and (e^{\\frac{\\partial^{2}}{\\partial \\varphi^{2}} \\operatorname{f_{\\mathbf{p}}}{(\\sigma_x,\\varphi)}})^{\\sigma_x} = 1", "SR srepr_derivation": [["premise", "Equality(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Add(Mul(Integer(-1), Symbol('\\\\sigma_x', commutative=True)), Symbol('\\\\varphi', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\varphi', commutative=True)"], "Equality(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Symbol('\\\\sigma_x', commutative=True)), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(1))))"], [["differentiate", 2, "Symbol('\\\\varphi', commutative=True)"], "Equality(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2))), Derivative(Add(Mul(Integer(-1), Symbol('\\\\sigma_x', commutative=True)), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2))), Integer(0))"], [["exp", 4], "Equality(exp(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2)))), Integer(1))"], [["power", 5, "Symbol('\\\\sigma_x', commutative=True)"], "Equality(Pow(exp(Derivative(Function('f_{\\\\mathbf{p}}')(Symbol('\\\\sigma_x', commutative=True), Symbol('\\\\varphi', commutative=True)), Tuple(Symbol('\\\\varphi', commutative=True), Integer(2)))), Symbol('\\\\sigma_x', commutative=True)), Integer(1))"]], "VR prompt": "Given \\omicron{(\\alpha,\\beta)} = - \\alpha + \\beta, then derive \\frac{\\partial^{2}}{\\partial \\beta^{2}} \\omicron{(\\alpha,\\beta)} = 0, then obtain (e^{\\frac{\\partial^{2}}{\\partial \\beta^{2}} \\omicron{(\\alpha,\\beta)}})^{\\alpha} = 1", "VR derivation": "\\omicron{(\\alpha,\\beta)} = - \\alpha + \\beta and \\frac{\\partial}{\\partial \\beta} \\omicron{(\\alpha,\\beta)} = \\frac{\\partial}{\\partial \\beta} (- \\alpha + \\beta) and \\frac{\\partial^{2}}{\\partial \\beta^{2}} \\omicron{(\\alpha,\\beta)} = \\frac{\\partial^{2}}{\\partial \\beta^{2}} (- \\alpha + \\beta) and \\frac{\\partial^{2}}{\\partial \\beta^{2}} \\omicron{(\\alpha,\\beta)} = 0 and e^{\\frac{\\partial^{2}}{\\partial \\beta^{2}} \\omicron{(\\alpha,\\beta)}} = 1 and (e^{\\frac{\\partial^{2}}{\\partial \\beta^{2}} \\omicron{(\\alpha,\\beta)}})^{\\alpha} = 1", "VR srepr_derivation": [["premise", "Equality(Function('\\\\omicron')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\beta', commutative=True)), Add(Mul(Integer(-1), Symbol('\\\\alpha', commutative=True)), Symbol('\\\\beta', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\beta', commutative=True)"], "Equality(Derivative(Function('\\\\omicron')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Symbol('\\\\alpha', commutative=True)), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))))"], [["differentiate", 2, "Symbol('\\\\beta', commutative=True)"], "Equality(Derivative(Function('\\\\omicron')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(2))), Derivative(Add(Mul(Integer(-1), Symbol('\\\\alpha', commutative=True)), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(2))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('\\\\omicron')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(2))), Integer(0))"], [["exp", 4], "Equality(exp(Derivative(Function('\\\\omicron')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(2)))), Integer(1))"], [["power", 5, "Symbol('\\\\alpha', commutative=True)"], "Equality(Pow(exp(Derivative(Function('\\\\omicron')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(2)))), Symbol('\\\\alpha', commutative=True)), Integer(1))"]], "static_flan-t5-large": "operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } = - \\ sigma_x + \\ varphi and \\ frac { \\ partial } { \\ partial \\ varphi } \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } = \\ frac { \\ partial } { \\ partial \\ varphi } (- \\ sigma_x + \\ varphi) and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } = \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } (- \\ sigma_x + \\ varphi) and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } = 0 and e ^ { \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } } = 1 and (e ^ { \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } } ) ^ { \\ sigma_x } = 1", "VR_flan-t5-large": "omicron { ( \\ alpha, \\ beta) } = - \\ alpha + \\ beta and \\ frac { \\ partial } { \\ partial \\ beta } \\ omicron { ( \\ alpha, \\ beta) } = \\ frac { \\ partial } { \\ partial \\ beta } (- \\ alpha + \\ beta) and \\ frac { \\ partial } { \\ partial \\ beta } \\ omicron { ( \\ alpha, \\ beta) } - 1 = \\ frac { \\ partial } { \\ partial \\ beta } (- \\ alpha + \\ beta) - 1 and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ beta ^ { 2 } } \\ omicron { ( \\ alpha, \\ beta) } = 0 and e ^ { \\ frac { \\ partial ^ { 2 } } { \\ partial \\ beta ^ { 2 } } \\ omicron { ( \\ alpha, \\ beta) } } = 1 and (e ^ { \\ frac { \\ partial ^ { 2 } } { \\ partial \\ beta ^ { 2 } } \\ omicron { ( \\ alpha, \\ beta) } } ) ^ { \\ alpha } = 1", "EE_flan-t5-large": "- \\ sigma_x + \\ varphi = \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } and 0 = - \\ sigma_x + \\ varphi + \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } and \\ frac { d } { d \\ varphi } 0 = \\ frac { \\ partial } { \\ partial \\ varphi } (- \\ sigma_x + \\ varphi + \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } ) and \\ frac { d } { d \\ varphi } 0 = \\ frac { \\ partial } { \\ partial \\ varphi } (- \\ sigma_x + \\ varphi + \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } ) and \\ frac { d ^ { 2 } } { d \\ varphi ^ { 2 } } 0 = \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } (- \\ sigma_x + \\ varphi + \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } ) and 0 = \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } and 1 = e ^ { \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } } and 1 = (e ^ { \\ frac { \\ partial ^ { 2 } } { \\ partial \\ var", "AG_flan-t5-large": "operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } = - \\ sigma_x + \\ varphi and \\ frac { \\ partial } { \\ partial \\ varphi } \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } = \\ frac { \\ partial } { \\ partial \\ varphi } (- \\ sigma_x + \\ varphi) and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } = \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } (- \\ sigma_x + \\ varphi) and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } = 0 and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } (- \\ sigma_x + \\ varphi) = 0 and e ^ { \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } (- \\ sigma_x + \\ varphi) } = 1", "SR_flan-t5-large": "operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } = - \\ sigma_x + \\ varphi and \\ frac { \\ partial } { \\ partial \\ varphi } \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } = \\ frac { \\ partial } { \\ partial \\ varphi } (- \\ sigma_x + \\ varphi) and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } = \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } (- \\ sigma_x + \\ varphi) and e ^ { \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } } = 1 and (e ^ { \\ frac { \\ partial ^ { 2 } } { \\ partial \\ varphi ^ { 2 } } \\ operatorname { f_ { \\ mathbf { p } } } { ( \\ sigma_x, \\ varphi) } } ) ^ { \\ sigma_x } = 1", "static_rouge": 1.0, "static_bleu": 0.9969372152616243, "static_bleurt": 0.8241004943847656, "static_gleu": 0.9969278033794163, "VR_rouge": 0.12676056338028163, "EE_rouge": 0.1964285714285714, "AG_rouge": 0.07103825136612019, "SR_rouge": 0.08108108108108114, "VR_rouge_abs": 0.04322845417236665, "EE_rouge_abs": 0.16892857142857143, "AG_rouge_abs": 0.05956471935853369, "SR_rouge_abs": 0.08108108108108114, "VR_bleu": 0.10716169905210438, "EE_bleu": 0.2164001036958203, "AG_bleu": 0.09378087065099527, "SR_bleu": 0.15728320177657418, "VR_bleu_abs": 0.0715825528836807, "EE_bleu_abs": 0.19393532606138753, "AG_bleu_abs": 0.08652886349795674, "SR_bleu_abs": 0.15733107408057367, "VR_bleurt": 0.07028508186340332, "EE_bleurt": 0.23511183261871338, "AG_bleurt": 0.02504575252532959, "SR_bleurt": 0.21354007720947266, "VR_bleurt_abs": 0.06903105974197388, "EE_bleurt_abs": 0.1276819109916687, "AG_bleurt_abs": -0.013859689235687256, "SR_bleurt_abs": 0.21946805715560913, "VR_gleu": 0.10548730233557502, "EE_gleu": 0.21531111498306688, "AG_gleu": 0.09196912569346594, "SR_gleu": 0.14669738863287252, "VR_gleu_abs": 0.06317411402157164, "EE_gleu_abs": 0.19237378258701388, "AG_gleu_abs": 0.08118717440751344, "SR_gleu_abs": 0.14714946070878276, "ratio_VR_rouge": 0.8672268907563024, "ratio_VR_bleu": 0.8463653754935709, "ratio_VR_bleurt": -2.7152817821434385, "ratio_VR_gleu": 0.8736517719568567, "ratio_EE_rouge": 0.8143642072213501, "ratio_EE_bleu": 0.7935031449090513, "ratio_EE_bleurt": 0.8009311545061326, "ratio_EE_gleu": 0.7953671038167549, "ratio_AG_rouge": 0.9371980676328503, "ratio_AG_bleu": 0.904118640487248, "ratio_AG_bleurt": 1.0167789971264705, "ratio_AG_gleu": 0.9102668072338009, "ratio_SR_rouge": 0.9189189189189189, "ratio_SR_bleu": 0.8426689259194263, "ratio_SR_bleurt": 0.7343047280682119, "ratio_SR_gleu": 0.8528505392912172}, {"prompt": "Given \\hat{p}_0{(\\phi,\\mathbf{H})} = \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi), then derive \\hat{p}_0{(\\phi,\\mathbf{H})} = 1, then derive 0 = \\frac{\\partial}{\\partial \\phi} \\hat{p}_0{(\\phi,\\mathbf{H})}, then obtain - 3 \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) - 1 = - 3 \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) + \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) - 1", "derivation": "\\hat{p}_0{(\\phi,\\mathbf{H})} = \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) and \\hat{p}_0{(\\phi,\\mathbf{H})} = 1 and \\frac{\\partial}{\\partial \\phi} \\hat{p}_0{(\\phi,\\mathbf{H})} = \\frac{d}{d \\phi} 1 and \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) = \\frac{d}{d \\phi} 1 and \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) = \\frac{\\partial}{\\partial \\phi} \\hat{p}_0{(\\phi,\\mathbf{H})} and 0 = \\frac{\\partial}{\\partial \\phi} \\hat{p}_0{(\\phi,\\mathbf{H})} and 0 = \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) and - 3 \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) - 1 = - 3 \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) + \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) - 1", "srepr_derivation": [["get_premise", "Equality(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["evaluate_derivatives", 1], "Equality(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Integer(1))"], [["differentiate", 2, "Symbol('\\\\phi', commutative=True)"], "Equality(Derivative(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(Integer(1), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))), Derivative(Integer(1), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))), Derivative(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["evaluate_derivatives", 5], "Equality(Integer(0), Derivative(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 6, 5], "Equality(Integer(0), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))))"], [["minus", 7, "Add(Mul(Integer(3), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Integer(1))"], "Equality(Add(Mul(Integer(-1), Integer(3), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Integer(-1)), Add(Mul(Integer(-1), Integer(3), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))), Integer(-1)))"]], "EE prompt": "Given \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) = \\hat{p}_0{(\\phi,\\mathbf{H})}, then derive 1 = \\hat{p}_0{(\\phi,\\mathbf{H})}, then derive \\frac{\\partial}{\\partial \\phi} \\hat{p}_0{(\\phi,\\mathbf{H})} = 0, then obtain - 3 \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) + \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) - 1 = - 3 \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) - 1", "EE derivation": "\\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) = \\hat{p}_0{(\\phi,\\mathbf{H})} and 1 = \\hat{p}_0{(\\phi,\\mathbf{H})} and \\frac{d}{d \\phi} 1 = \\frac{\\partial}{\\partial \\phi} \\hat{p}_0{(\\phi,\\mathbf{H})} and \\frac{d}{d \\phi} 1 = \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) and \\frac{\\partial}{\\partial \\phi} \\hat{p}_0{(\\phi,\\mathbf{H})} = \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) and \\frac{\\partial}{\\partial \\phi} \\hat{p}_0{(\\phi,\\mathbf{H})} = 0 and \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) = 0 and - 3 \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) + \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) - 1 = - 3 \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) - 1", "EE srepr_derivation": [["get_premise", "Equality(Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)))"], [["evaluate_derivatives", 1], "Equality(Integer(1), Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)))"], [["differentiate", 2, "Symbol('\\\\phi', commutative=True)"], "Equality(Derivative(Integer(1), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Derivative(Integer(1), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Derivative(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))))"], [["evaluate_derivatives", 5], "Equality(Derivative(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Integer(0))"], [["substitute_LHS_for_RHS", 6, 5], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))), Integer(0))"], [["minus", 7, "Add(Mul(Integer(3), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Integer(1))"], "Equality(Add(Mul(Integer(-1), Integer(3), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))), Integer(-1)), Add(Mul(Integer(-1), Integer(3), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Integer(-1)))"]], "AG prompt": "Given \\hat{p}_0{(\\phi,\\mathbf{H})} = \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi), then derive \\hat{p}_0{(\\phi,\\mathbf{H})} = 1, then derive 0 = \\frac{\\partial}{\\partial \\phi} \\hat{p}_0{(\\phi,\\mathbf{H})}, then obtain 0^{\\mathbf{H}} = (\\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi))^{\\mathbf{H}}", "AG derivation": "\\hat{p}_0{(\\phi,\\mathbf{H})} = \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) and \\hat{p}_0{(\\phi,\\mathbf{H})} = 1 and \\frac{\\partial}{\\partial \\phi} \\hat{p}_0{(\\phi,\\mathbf{H})} = \\frac{d}{d \\phi} 1 and \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) = \\frac{d}{d \\phi} 1 and \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) = \\frac{\\partial}{\\partial \\phi} \\hat{p}_0{(\\phi,\\mathbf{H})} and 0 = \\frac{\\partial}{\\partial \\phi} \\hat{p}_0{(\\phi,\\mathbf{H})} and 0 = \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) and 0^{\\mathbf{H}} = (\\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi))^{\\mathbf{H}}", "AG srepr_derivation": [["get_premise", "Equality(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["evaluate_derivatives", 1], "Equality(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Integer(1))"], [["differentiate", 2, "Symbol('\\\\phi', commutative=True)"], "Equality(Derivative(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(Integer(1), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))), Derivative(Integer(1), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))), Derivative(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["evaluate_derivatives", 5], "Equality(Integer(0), Derivative(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 6, 5], "Equality(Integer(0), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))))"], [["power", 7, "Symbol('\\\\mathbf{H}', commutative=True)"], "Equality(Pow(Integer(0), Symbol('\\\\mathbf{H}', commutative=True)), Pow(Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))), Symbol('\\\\mathbf{H}', commutative=True)))"]], "SR prompt": "Given \\hat{p}_0{(\\phi,\\mathbf{H})} = \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi), then obtain - 3 \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) - 1 = - 3 \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) + \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) - 1", "SR derivation": "\\hat{p}_0{(\\phi,\\mathbf{H})} = \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) and \\hat{p}_0{(\\phi,\\mathbf{H})} = 1 and \\frac{\\partial}{\\partial \\phi} \\hat{p}_0{(\\phi,\\mathbf{H})} = \\frac{d}{d \\phi} 1 and \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) = \\frac{d}{d \\phi} 1 and \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) = \\frac{\\partial}{\\partial \\phi} \\hat{p}_0{(\\phi,\\mathbf{H})} and 0 = \\frac{\\partial}{\\partial \\phi} \\hat{p}_0{(\\phi,\\mathbf{H})} and 0 = \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) and - 3 \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) - 1 = - 3 \\frac{\\partial}{\\partial \\phi} (- \\mathbf{H} + \\phi) + \\frac{\\partial^{2}}{\\partial \\phi^{2}} (- \\mathbf{H} + \\phi) - 1", "SR srepr_derivation": [["get_premise", "Equality(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["evaluate_derivatives", 1], "Equality(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Integer(1))"], [["differentiate", 2, "Symbol('\\\\phi', commutative=True)"], "Equality(Derivative(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(Integer(1), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))), Derivative(Integer(1), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))), Derivative(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["evaluate_derivatives", 5], "Equality(Integer(0), Derivative(Function('\\\\hat{p}_0')(Symbol('\\\\phi', commutative=True), Symbol('\\\\mathbf{H}', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 6, 5], "Equality(Integer(0), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))))"], [["minus", 7, "Add(Mul(Integer(3), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Integer(1))"], "Equality(Add(Mul(Integer(-1), Integer(3), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Integer(-1)), Add(Mul(Integer(-1), Integer(3), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Derivative(Add(Mul(Integer(-1), Symbol('\\\\mathbf{H}', commutative=True)), Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(2))), Integer(-1)))"]], "VR prompt": "Given \\beta{(\\kappa,\\tau)} = \\frac{\\partial}{\\partial \\kappa} (\\kappa - \\tau), then derive \\beta{(\\kappa,\\tau)} = 1, then derive 0 = \\frac{\\partial}{\\partial \\kappa} \\beta{(\\kappa,\\tau)}, then obtain - 3 \\frac{\\partial}{\\partial \\kappa} (\\kappa - \\tau) - 1 = - 3 \\frac{\\partial}{\\partial \\kappa} (\\kappa - \\tau) + \\frac{\\partial^{2}}{\\partial \\kappa^{2}} (\\kappa - \\tau) - 1", "VR derivation": "\\beta{(\\kappa,\\tau)} = \\frac{\\partial}{\\partial \\kappa} (\\kappa - \\tau) and \\beta{(\\kappa,\\tau)} = 1 and \\frac{\\partial}{\\partial \\kappa} \\beta{(\\kappa,\\tau)} = \\frac{d}{d \\kappa} 1 and \\frac{\\partial^{2}}{\\partial \\kappa^{2}} (\\kappa - \\tau) = \\frac{d}{d \\kappa} 1 and \\frac{\\partial^{2}}{\\partial \\kappa^{2}} (\\kappa - \\tau) = \\frac{\\partial}{\\partial \\kappa} \\beta{(\\kappa,\\tau)} and 0 = \\frac{\\partial}{\\partial \\kappa} \\beta{(\\kappa,\\tau)} and 0 = \\frac{\\partial^{2}}{\\partial \\kappa^{2}} (\\kappa - \\tau) and - 3 \\frac{\\partial}{\\partial \\kappa} (\\kappa - \\tau) - 1 = - 3 \\frac{\\partial}{\\partial \\kappa} (\\kappa - \\tau) + \\frac{\\partial^{2}}{\\partial \\kappa^{2}} (\\kappa - \\tau) - 1", "VR srepr_derivation": [["get_premise", "Equality(Function('\\\\beta')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\tau', commutative=True)), Derivative(Add(Symbol('\\\\kappa', commutative=True), Mul(Integer(-1), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))))"], [["evaluate_derivatives", 1], "Equality(Function('\\\\beta')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\tau', commutative=True)), Integer(1))"], [["differentiate", 2, "Symbol('\\\\kappa', commutative=True)"], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Derivative(Integer(1), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(Add(Symbol('\\\\kappa', commutative=True), Mul(Integer(-1), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True), Integer(2))), Derivative(Integer(1), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Derivative(Add(Symbol('\\\\kappa', commutative=True), Mul(Integer(-1), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True), Integer(2))), Derivative(Function('\\\\beta')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))))"], [["evaluate_derivatives", 5], "Equality(Integer(0), Derivative(Function('\\\\beta')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 6, 5], "Equality(Integer(0), Derivative(Add(Symbol('\\\\kappa', commutative=True), Mul(Integer(-1), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True), Integer(2))))"], [["minus", 7, "Add(Mul(Integer(3), Derivative(Add(Symbol('\\\\kappa', commutative=True), Mul(Integer(-1), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1)))), Integer(1))"], "Equality(Add(Mul(Integer(-1), Integer(3), Derivative(Add(Symbol('\\\\kappa', commutative=True), Mul(Integer(-1), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1)))), Integer(-1)), Add(Mul(Integer(-1), Integer(3), Derivative(Add(Symbol('\\\\kappa', commutative=True), Mul(Integer(-1), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1)))), Derivative(Add(Symbol('\\\\kappa', commutative=True), Mul(Integer(-1), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True), Integer(2))), Integer(-1)))"]], "static_flan-t5-large": "hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } = \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) and \\ hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } = 1 and \\ frac { \\ partial } { \\ partial \\ phi } \\ hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } = \\ frac { d } { d \\ phi } 1 and 0 = \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) - 1 and - \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) + \\ frac { \\ partial } { \\ partial \\ phi } \\ hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } = - \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) + \\ frac { \\ partial ^ { 2 } } { \\ partial \\ phi ^ { 2 } } (- \\ mathbf { H } + \\ phi) and 0 = \\ frac { \\ partial } { \\ partial \\ phi } \\ hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } and - 3 \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) - 1 = - 3 \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) + \\ frac { \\ partial ^ { 2 } } { \\ partial \\ phi ^ { 2 } } (- \\ mathbf { H } + \\ phi) - 1", "VR_flan-t5-large": "beta { ( \\ kappa, \\ tau) } = \\ frac { \\ partial } { \\ partial \\ kappa } ( \\ kappa - \\ tau) and \\ beta { ( \\ kappa, \\ tau) } = 1 and \\ frac { \\ partial } { \\ partial \\ kappa } \\ beta { ( \\ kappa, \\ tau) } = \\ frac { d } { d \\ kappa } 1 and 0 = \\ frac { \\ partial } { \\ partial \\ kappa } \\ beta { ( \\ kappa, \\ tau) } - 1 and 0 = \\ frac { \\ partial } { \\ partial \\ kappa } ( \\ kappa - \\ tau) - 1 and - \\ frac { \\ partial } { \\ partial \\ kappa } ( \\ kappa - \\ tau) - 1 = - \\ frac { \\ partial } { \\ partial \\ kappa } ( \\ kappa - \\ tau) + \\ frac { \\ partial ^ { 2 } } { \\ partial \\ kappa ^ { 2 } } ( \\ kappa - \\ tau) - 1", "EE_flan-t5-large": "frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) = \\ hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } and 1 = \\ frac { \\ hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } } { \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) } and \\ frac { \\ partial } { \\ partial \\ phi } \\ hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } = \\ frac { \\ partial } { \\ partial \\ phi } \\ hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } and \\ frac { \\ partial } { \\ partial \\ phi } \\ hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } = 0 and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ phi ^ { 2 } } (- \\ mathbf { H } + \\ phi) = 0 and - 2 \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) + \\ frac { \\ partial ^ { 2 } } { \\ partial \\ phi ^ { 2 } } (- \\ mathbf { H } + \\ phi) = - 2 \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) and - 3 \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) + \\ frac { \\ partial ^ { 2 } } { \\ partial \\ phi ^ { 2 } } (- \\ mathbf { H } + \\ phi) - 1 = - 3 \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) - 1", "AG_flan-t5-large": "hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } = \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) and \\ hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } = 1 and \\ frac { \\ partial } { \\ partial \\ phi } \\ hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } = \\ frac { d } { d \\ phi } 1 and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ phi ^ { 2 } } (- \\ mathbf { H } + \\ phi) = \\ frac { d } { d \\ phi } 1 and 0 = \\ frac { \\ partial } { \\ partial \\ phi } \\ hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } and 0 = \\ frac { \\ partial ^ { 2 } } { \\ partial \\ phi ^ { 2 } } (- \\ mathbf { H } + \\ phi) and 0 ^ { \\ mathbf { H } } = ( \\ frac { \\ partial ^ { 2 } } { \\ partial \\ phi ^ { 2 } } (- \\ mathbf { H } + \\ phi)) ^ { \\ mathbf { H } }", "SR_flan-t5-large": "hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } = \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) and \\ hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } + 1 = \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) + 1 and 2 \\ hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } + 1 = \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) + 1 and \\ frac { \\ partial } { \\ partial \\ phi } (2 \\ hat { p } _0 { ( \\ phi, \\ mathbf { H } ) } + 1) - 1 = \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) + \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) - 1 and - 3 \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) - 1 = - 3 \\ frac { \\ partial } { \\ partial \\ phi } (- \\ mathbf { H } + \\ phi) + \\ frac { \\ partial ^ { 2 } } { \\ partial \\ phi ^ { 2 } } (- \\ mathbf { H } + \\ phi) - 1", "static_rouge": 0.9008264462809917, "static_bleu": 0.8932636664745857, "static_bleurt": 0.5947904586791992, "static_gleu": 0.8943472409152086, "VR_rouge": 0.15082644628099173, "EE_rouge": 0.04598773660357236, "AG_rouge": 0.0018365472910927272, "SR_rouge": 0.13296930342384883, "VR_rouge_abs": 0.10178263369752732, "EE_rouge_abs": 0.05611088897774241, "AG_rouge_abs": 0.152198678514468, "SR_rouge_abs": 0.1711711711711711, "VR_bleu": 0.30484334888157805, "EE_bleu": 0.029294223127733, "AG_bleu": 0.10802212578705939, "SR_bleu": 0.16972461436197506, "VR_bleu_abs": 0.24709710545134306, "EE_bleu_abs": 0.09348162466249299, "AG_bleu_abs": 0.25544188348594044, "SR_bleu_abs": 0.22424756208920338, "VR_bleurt": 0.2777572572231293, "EE_bleurt": 0.026675403118133545, "AG_bleurt": -0.22024810314178467, "SR_bleurt": 0.1267155110836029, "VR_bleurt_abs": 0.13313664495944977, "EE_bleurt_abs": 0.14797663688659668, "AG_bleurt_abs": 0.11575698852539062, "SR_bleurt_abs": 0.15130066871643066, "VR_gleu": 0.2526668455280586, "EE_gleu": 0.029619048753388055, "AG_gleu": 0.09032339590775695, "SR_gleu": 0.15881561238223418, "VR_gleu_abs": 0.19557071579455937, "EE_gleu_abs": 0.09291695096075803, "AG_gleu_abs": 0.22504690653022452, "SR_gleu_abs": 0.21322537112010798, "ratio_VR_rouge": 0.7310030395136778, "ratio_VR_bleu": 0.5230667819881739, "ratio_VR_bleurt": 0.21209894944457186, "ratio_VR_gleu": 0.638534721802593, "ratio_EE_rouge": 0.9377679231337767, "ratio_EE_bleu": 0.9023860658153505, "ratio_EE_bleurt": 0.7821106159195789, "ratio_EE_gleu": 0.9030375076350516, "ratio_AG_rouge": 0.8341608738828202, "ratio_AG_bleu": 0.7049178558742871, "ratio_AG_bleurt": 0.8507103343243545, "ratio_AG_gleu": 0.7413614051787211, "ratio_SR_rouge": 0.8288288288288289, "ratio_SR_bleu": 0.7757524379107966, "ratio_SR_bleurt": 0.8048703016818456, "ratio_SR_gleu": 0.786774628879892}, {"prompt": "Given \\theta{(q)} = \\cos{(q)}, then derive \\frac{d}{d q} \\theta{(q)} = - \\sin{(q)}, then obtain (- \\sin{(q)})^{2 q} = (- \\sin{(q)})^{q} (\\frac{d}{d q} \\cos{(q)})^{q}", "derivation": "\\theta{(q)} = \\cos{(q)} and \\frac{d}{d q} \\theta{(q)} = \\frac{d}{d q} \\cos{(q)} and \\frac{d}{d q} \\theta{(q)} = - \\sin{(q)} and - \\sin{(q)} = \\frac{d}{d q} \\cos{(q)} and (- \\sin{(q)})^{q} = (\\frac{d}{d q} \\cos{(q)})^{q} and (- \\sin{(q)})^{2 q} = (- \\sin{(q)})^{q} (\\frac{d}{d q} \\cos{(q)})^{q}", "srepr_derivation": [["premise", "Equality(Function('\\\\theta')(Symbol('q', commutative=True)), cos(Symbol('q', commutative=True)))"], [["differentiate", 1, "Symbol('q', commutative=True)"], "Equality(Derivative(Function('\\\\theta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\theta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('q', commutative=True))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["power", 4, "Symbol('q', commutative=True)"], "Equality(Pow(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Symbol('q', commutative=True)), Pow(Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Symbol('q', commutative=True)))"], [["times", 5, "Pow(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Symbol('q', commutative=True))"], "Equality(Pow(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Mul(Integer(2), Symbol('q', commutative=True))), Mul(Pow(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Symbol('q', commutative=True)), Pow(Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Symbol('q', commutative=True))))"]], "EE prompt": "Given \\cos{(q)} = \\theta{(q)}, then derive - \\sin{(q)} = \\frac{d}{d q} \\theta{(q)}, then obtain (- \\sin{(q)})^{q} (\\frac{d}{d q} \\cos{(q)})^{q} = (- \\sin{(q)})^{2 q}", "EE derivation": "\\cos{(q)} = \\theta{(q)} and \\frac{d}{d q} \\cos{(q)} = \\frac{d}{d q} \\theta{(q)} and - \\sin{(q)} = \\frac{d}{d q} \\theta{(q)} and \\frac{d}{d q} \\cos{(q)} = - \\sin{(q)} and (\\frac{d}{d q} \\cos{(q)})^{q} = (- \\sin{(q)})^{q} and (- \\sin{(q)})^{q} (\\frac{d}{d q} \\cos{(q)})^{q} = (- \\sin{(q)})^{2 q}", "EE srepr_derivation": [["premise", "Equality(cos(Symbol('q', commutative=True)), Function('\\\\theta')(Symbol('q', commutative=True)))"], [["differentiate", 1, "Symbol('q', commutative=True)"], "Equality(Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Derivative(Function('\\\\theta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Derivative(Function('\\\\theta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('q', commutative=True))))"], [["power", 4, "Symbol('q', commutative=True)"], "Equality(Pow(Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Symbol('q', commutative=True)), Pow(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Symbol('q', commutative=True)))"], [["times", 5, "Pow(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Symbol('q', commutative=True))"], "Equality(Mul(Pow(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Symbol('q', commutative=True)), Pow(Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Symbol('q', commutative=True))), Pow(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Mul(Integer(2), Symbol('q', commutative=True))))"]], "AG prompt": "Given \\theta{(q)} = \\cos{(q)}, then derive \\frac{d}{d q} \\theta{(q)} = - \\sin{(q)}, then obtain \\frac{d}{d q} (- \\sin{(q)})^{q} = \\frac{d}{d q} (\\frac{d}{d q} \\cos{(q)})^{q}", "AG derivation": "\\theta{(q)} = \\cos{(q)} and \\frac{d}{d q} \\theta{(q)} = \\frac{d}{d q} \\cos{(q)} and \\frac{d}{d q} \\theta{(q)} = - \\sin{(q)} and - \\sin{(q)} = \\frac{d}{d q} \\cos{(q)} and (- \\sin{(q)})^{q} = (\\frac{d}{d q} \\cos{(q)})^{q} and \\frac{d}{d q} (- \\sin{(q)})^{q} = \\frac{d}{d q} (\\frac{d}{d q} \\cos{(q)})^{q}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\theta')(Symbol('q', commutative=True)), cos(Symbol('q', commutative=True)))"], [["differentiate", 1, "Symbol('q', commutative=True)"], "Equality(Derivative(Function('\\\\theta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\theta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('q', commutative=True))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["power", 4, "Symbol('q', commutative=True)"], "Equality(Pow(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Symbol('q', commutative=True)), Pow(Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Symbol('q', commutative=True)))"], [["differentiate", 5, "Symbol('q', commutative=True)"], "Equality(Derivative(Pow(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Derivative(Pow(Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))))"]], "SR prompt": "Given \\theta{(q)} = \\cos{(q)}, then obtain (- \\sin{(q)})^{2 q} = (- \\sin{(q)})^{q} (\\frac{d}{d q} \\cos{(q)})^{q}", "SR derivation": "\\theta{(q)} = \\cos{(q)} and \\frac{d}{d q} \\theta{(q)} = \\frac{d}{d q} \\cos{(q)} and \\frac{d}{d q} \\theta{(q)} = - \\sin{(q)} and - \\sin{(q)} = \\frac{d}{d q} \\cos{(q)} and (- \\sin{(q)})^{q} = (\\frac{d}{d q} \\cos{(q)})^{q} and (- \\sin{(q)})^{2 q} = (- \\sin{(q)})^{q} (\\frac{d}{d q} \\cos{(q)})^{q}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\theta')(Symbol('q', commutative=True)), cos(Symbol('q', commutative=True)))"], [["differentiate", 1, "Symbol('q', commutative=True)"], "Equality(Derivative(Function('\\\\theta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\theta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('q', commutative=True))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["power", 4, "Symbol('q', commutative=True)"], "Equality(Pow(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Symbol('q', commutative=True)), Pow(Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Symbol('q', commutative=True)))"], [["times", 5, "Pow(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Symbol('q', commutative=True))"], "Equality(Pow(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Mul(Integer(2), Symbol('q', commutative=True))), Mul(Pow(Mul(Integer(-1), sin(Symbol('q', commutative=True))), Symbol('q', commutative=True)), Pow(Derivative(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Symbol('q', commutative=True))))"]], "VR prompt": "Given \\omicron{(\\xi)} = \\cos{(\\xi)}, then derive \\frac{d}{d \\xi} \\omicron{(\\xi)} = - \\sin{(\\xi)}, then obtain (- \\sin{(\\xi)})^{2 \\xi} = (- \\sin{(\\xi)})^{\\xi} (\\frac{d}{d \\xi} \\cos{(\\xi)})^{\\xi}", "VR derivation": "\\omicron{(\\xi)} = \\cos{(\\xi)} and \\frac{d}{d \\xi} \\omicron{(\\xi)} = \\frac{d}{d \\xi} \\cos{(\\xi)} and \\frac{d}{d \\xi} \\omicron{(\\xi)} = - \\sin{(\\xi)} and - \\sin{(\\xi)} = \\frac{d}{d \\xi} \\cos{(\\xi)} and (- \\sin{(\\xi)})^{\\xi} = (\\frac{d}{d \\xi} \\cos{(\\xi)})^{\\xi} and (- \\sin{(\\xi)})^{2 \\xi} = (- \\sin{(\\xi)})^{\\xi} (\\frac{d}{d \\xi} \\cos{(\\xi)})^{\\xi}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), cos(Symbol('\\\\xi', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\xi', commutative=True)"], "Equality(Derivative(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))), Derivative(cos(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('\\\\xi', commutative=True))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Mul(Integer(-1), sin(Symbol('\\\\xi', commutative=True))), Derivative(cos(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))))"], [["power", 4, "Symbol('\\\\xi', commutative=True)"], "Equality(Pow(Mul(Integer(-1), sin(Symbol('\\\\xi', commutative=True))), Symbol('\\\\xi', commutative=True)), Pow(Derivative(cos(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))), Symbol('\\\\xi', commutative=True)))"], [["times", 5, "Pow(Mul(Integer(-1), sin(Symbol('\\\\xi', commutative=True))), Symbol('\\\\xi', commutative=True))"], "Equality(Pow(Mul(Integer(-1), sin(Symbol('\\\\xi', commutative=True))), Mul(Integer(2), Symbol('\\\\xi', commutative=True))), Mul(Pow(Mul(Integer(-1), sin(Symbol('\\\\xi', commutative=True))), Symbol('\\\\xi', commutative=True)), Pow(Derivative(cos(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))), Symbol('\\\\xi', commutative=True))))"]], "static_flan-t5-large": "theta { (q) } = \\ cos { (q) } and \\ frac { d } { d q } \\ theta { (q) } = \\ frac { d } { d q } \\ cos { (q) } and \\ frac { d } { d q } \\ theta { (q) } = - \\ sin { (q) } and ( \\ frac { d } { d q } \\ theta { (q) } ) ^ { q } = (- \\ sin { (q) } ) ^ { q } and ( \\ frac { d } { d q } \\ cos { (q) } ) ^ { q } = (- \\ sin { (q) } ) ^ { q } and (- \\ sin { (q) } ) ^ { q } \\ frac { d } { d q } \\ theta { (q) } = (- \\ sin { (q) } ) ^ { q } ( \\ frac { d } { d q } \\ cos { (q) } ) ^ { q } and (- \\ sin { (q) } ) ^ { 2 q } = (- \\ sin { (q) } ) ^ { q } ( \\ frac { d } { d q } \\ cos { (q) } ) ^ { q }", "VR_flan-t5-large": "omicron { ( \\ xi) } = \\ cos { ( \\ xi) } and \\ frac { d } { d \\ xi } \\ omicron { ( \\ xi) } = \\ frac { d } { d \\ xi } \\ cos { ( \\ xi) } and \\ frac { d } { d \\ xi } \\ omicron { ( \\ xi) } = - \\ sin { ( \\ xi) } and \\ frac { d } { d \\ xi } \\ cos { ( \\ xi) } = - \\ sin { ( \\ xi) } and ( \\ frac { d } { d \\ xi } \\ cos { ( \\ xi) } ) ^ { xi } = (- \\ sin { ( \\ xi) } ) ^ { xi } and (- \\ sin { ( \\ xi) } ) ^ { xi } = (- \\ sin { ( \\ xi) } ) ^ { xi } and (- \\ sin { ( \\ xi) } ) ^ { 2 \\ xi } = (- \\ sin { ( \\ xi) } ) ^ { \\ xi } ( \\ frac { d } { d \\ xi } \\ cos { ( \\ xi) } ) ^ { \\ xi }", "EE_flan-t5-large": "cos { (q) } = \\ theta { (q) } and \\ frac { d } { d q } \\ cos { (q) } = \\ frac { d } { d q } \\ theta { (q) } and \\ frac { d } { d q } \\ cos { (q) } = \\ frac { d ^ { 2 } } { d q ^ { 2 } } \\ theta { (q) } and - \\ sin { (q) } = \\ frac { d } { d q } \\ theta { (q) } and \\ frac { d } { d q } \\ cos { (q) } = \\ frac { d ^ { 2 } } { d q ^ { 2 } } \\ theta { (q) } and ( \\ frac { d } { d q } \\ cos { (q) } ) ^ { q } = ( \\ frac { d ^ { 2 } } { d q ^ { 2 } } \\ theta { (q) } ) ^ { q } and (- \\ sin { (q) } ) ^ { q } ( \\ frac { d } { d q } \\ cos { (q) } ) ^ { q } = (- \\ sin { (q) } ) ^ { 2 q }", "AG_flan-t5-large": "theta { (q) } = \\ cos { (q) } and \\ frac { d } { d q } \\ theta { (q) } = \\ frac { d } { d q } \\ cos { (q) } and \\ frac { d } { d q } \\ theta { (q) } = - \\ sin { (q) } and - \\ sin { (q) } = \\ frac { d } { d q } \\ cos { (q) } and (- \\ sin { (q) } ) ^ { q } = ( \\ frac { d } { d q } \\ cos { (q) } ) ^ { q } and \\ frac { d } { d q } (- \\ sin { (q) } ) ^ { q } = \\ frac { d } { d q } ( \\ frac { d } { d q } \\ cos { (q) } ) ^ { q }", "SR_flan-t5-large": "theta { (q) } = \\ cos { (q) } and \\ frac { d } { d q } \\ theta { (q) } = \\ frac { d } { d q } \\ cos { (q) } and ( \\ frac { d } { d q } \\ theta { (q) } ) ^ { q } = ( \\ frac { d } { d q } \\ cos { (q) } ) ^ { q } and (- \\ sin { (q) } ) ^ { q } ( \\ frac { d } { d q } \\ theta { (q) } ) ^ { q } = (- \\ sin { (q) } ) ^ { q } ( \\ frac { d } { d q } \\ cos { (q) } ) ^ { q } and (- \\ sin { (q) } ) ^ { 2 q } = (- \\ sin { (q) } ) ^ { q } ( \\ frac { d } { d q } \\ cos { (q) } ) ^ { q }", "static_rouge": 0.8309859154929577, "static_bleu": 0.6908890475160422, "static_bleurt": 0.8675135374069214, "static_gleu": 0.6910946196660482, "VR_rouge": -0.06665187978263276, "EE_rouge": 0.06908115358819578, "AG_rouge": -0.16901408450704225, "SR_rouge": -0.06665187978263276, "VR_rouge_abs": 0.04172259507829976, "EE_rouge_abs": 0.15710059171597646, "AG_rouge_abs": 0.040212107821475884, "SR_rouge_abs": 0.11409395973154368, "VR_bleu": -0.15453721378367247, "EE_bleu": 0.0003520256086014806, "AG_bleu": -0.3039695756638767, "SR_bleu": -0.12287811510859925, "VR_bleu_abs": 0.05760610506254149, "EE_bleu_abs": 0.2059843977798853, "AG_bleu_abs": 0.2644995828401613, "SR_bleu_abs": 0.21346109147241243, "VR_bleurt": 0.06332755088806152, "EE_bleurt": 0.11698448657989502, "AG_bleurt": 0.06452888250350952, "SR_bleurt": 0.07563459873199463, "VR_bleurt_abs": 0.06733451783657074, "EE_bleurt_abs": 0.18022727966308594, "AG_bleurt_abs": 0.14039862155914307, "SR_bleurt_abs": -0.017786264419555664, "VR_gleu": -0.15490127355777106, "EE_gleu": 0.00039253237952074915, "AG_gleu": -0.30373742167762097, "SR_gleu": -0.12325617760046659, "VR_gleu_abs": 0.05285190999476708, "EE_gleu_abs": 0.2020899984904484, "AG_gleu_abs": 0.22423091858307798, "SR_gleu_abs": 0.19666048237476808, "ratio_VR_rouge": 0.8527437820765891, "ratio_VR_bleu": 0.8992030457862514, "ratio_VR_bleurt": 0.5445149332301957, "ratio_VR_gleu": 0.9098470402077333, "ratio_EE_rouge": 0.8346309560884458, "ratio_EE_bleu": 0.791233923735576, "ratio_EE_bleurt": 0.7608115336526087, "ratio_EE_gleu": 0.7952226345083488, "ratio_AG_rouge": 0.9554794520547946, "ratio_AG_bleu": 0.7082352058315478, "ratio_AG_bleurt": 0.794081573314278, "ratio_AG_gleu": 0.7527710384853242, "ratio_SR_rouge": 0.8859060402684563, "ratio_SR_bleu": 0.7865389085275876, "ratio_SR_bleurt": 1.0242703636723725, "ratio_SR_gleu": 0.8033395176252319}, {"prompt": "Given \\operatorname{r_{0}}{(\\lambda,g)} = \\frac{\\partial}{\\partial g} (\\lambda + g), then derive \\frac{\\partial}{\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} = 0, then obtain (\\lambda + g) \\frac{\\partial^{2}}{\\partial \\lambda\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} = (\\lambda + g) \\frac{d}{d \\lambda} 0", "derivation": "\\operatorname{r_{0}}{(\\lambda,g)} = \\frac{\\partial}{\\partial g} (\\lambda + g) and \\frac{\\partial}{\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} = \\frac{\\partial^{2}}{\\partial g^{2}} (\\lambda + g) and \\frac{\\partial}{\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} = 0 and \\frac{\\partial^{2}}{\\partial \\lambda\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} = \\frac{d}{d \\lambda} 0 and (\\lambda + g) \\frac{\\partial^{2}}{\\partial \\lambda\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} = (\\lambda + g) \\frac{d}{d \\lambda} 0", "srepr_derivation": [["premise", "Equality(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Derivative(Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('g', commutative=True)"], "Equality(Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(2))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Integer(0))"], [["differentiate", 3, "Symbol('\\\\lambda', commutative=True)"], "Equality(Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1)), Tuple(Symbol('\\\\lambda', commutative=True), Integer(1))), Derivative(Integer(0), Tuple(Symbol('\\\\lambda', commutative=True), Integer(1))))"], [["times", 4, "Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True))"], "Equality(Mul(Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1)), Tuple(Symbol('\\\\lambda', commutative=True), Integer(1)))), Mul(Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Derivative(Integer(0), Tuple(Symbol('\\\\lambda', commutative=True), Integer(1)))))"]], "EE prompt": "Given \\frac{\\partial}{\\partial g} (\\lambda + g) = \\operatorname{r_{0}}{(\\lambda,g)}, then derive 0 = \\frac{\\partial}{\\partial g} \\operatorname{r_{0}}{(\\lambda,g)}, then obtain (\\lambda + g) \\frac{d}{d \\lambda} 0 = (\\lambda + g) \\frac{\\partial^{2}}{\\partial \\lambda\\partial g} \\operatorname{r_{0}}{(\\lambda,g)}", "EE derivation": "\\frac{\\partial}{\\partial g} (\\lambda + g) = \\operatorname{r_{0}}{(\\lambda,g)} and \\frac{\\partial^{2}}{\\partial g^{2}} (\\lambda + g) = \\frac{\\partial}{\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} and 0 = \\frac{\\partial}{\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} and \\frac{d}{d \\lambda} 0 = \\frac{\\partial^{2}}{\\partial \\lambda\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} and (\\lambda + g) \\frac{d}{d \\lambda} 0 = (\\lambda + g) \\frac{\\partial^{2}}{\\partial \\lambda\\partial g} \\operatorname{r_{0}}{(\\lambda,g)}", "EE srepr_derivation": [["premise", "Equality(Derivative(Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)))"], [["differentiate", 1, "Symbol('g', commutative=True)"], "Equality(Derivative(Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(2))), Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Integer(0), Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["differentiate", 3, "Symbol('\\\\lambda', commutative=True)"], "Equality(Derivative(Integer(0), Tuple(Symbol('\\\\lambda', commutative=True), Integer(1))), Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1)), Tuple(Symbol('\\\\lambda', commutative=True), Integer(1))))"], [["times", 4, "Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True))"], "Equality(Mul(Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Derivative(Integer(0), Tuple(Symbol('\\\\lambda', commutative=True), Integer(1)))), Mul(Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1)), Tuple(Symbol('\\\\lambda', commutative=True), Integer(1)))))"]], "AG prompt": "Given \\operatorname{r_{0}}{(\\lambda,g)} = \\frac{\\partial}{\\partial g} (\\lambda + g), then derive \\frac{\\partial}{\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} = 0, then obtain \\frac{\\partial^{2}}{\\partial g\\partial \\lambda} \\operatorname{r_{0}}{(\\lambda,g)} = 0", "AG derivation": "\\operatorname{r_{0}}{(\\lambda,g)} = \\frac{\\partial}{\\partial g} (\\lambda + g) and \\frac{\\partial}{\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} = \\frac{\\partial^{2}}{\\partial g^{2}} (\\lambda + g) and \\frac{\\partial}{\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} = 0 and \\frac{\\partial^{2}}{\\partial \\lambda\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} = \\frac{d}{d \\lambda} 0 and \\frac{\\partial^{2}}{\\partial g\\partial \\lambda} \\operatorname{r_{0}}{(\\lambda,g)} = 0", "AG srepr_derivation": [["premise", "Equality(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Derivative(Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('g', commutative=True)"], "Equality(Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(2))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Integer(0))"], [["differentiate", 3, "Symbol('\\\\lambda', commutative=True)"], "Equality(Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1)), Tuple(Symbol('\\\\lambda', commutative=True), Integer(1))), Derivative(Integer(0), Tuple(Symbol('\\\\lambda', commutative=True), Integer(1))))"], [["evaluate_derivatives", 4], "Equality(Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True), Integer(1)), Tuple(Symbol('g', commutative=True), Integer(1))), Integer(0))"]], "SR prompt": "Given \\operatorname{r_{0}}{(\\lambda,g)} = \\frac{\\partial}{\\partial g} (\\lambda + g), then obtain (\\lambda + g) \\frac{\\partial^{2}}{\\partial \\lambda\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} = (\\lambda + g) \\frac{d}{d \\lambda} 0", "SR derivation": "\\operatorname{r_{0}}{(\\lambda,g)} = \\frac{\\partial}{\\partial g} (\\lambda + g) and \\frac{\\partial}{\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} = \\frac{\\partial^{2}}{\\partial g^{2}} (\\lambda + g) and \\frac{\\partial}{\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} = 0 and \\frac{\\partial^{2}}{\\partial \\lambda\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} = \\frac{d}{d \\lambda} 0 and (\\lambda + g) \\frac{\\partial^{2}}{\\partial \\lambda\\partial g} \\operatorname{r_{0}}{(\\lambda,g)} = (\\lambda + g) \\frac{d}{d \\lambda} 0", "SR srepr_derivation": [["premise", "Equality(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Derivative(Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('g', commutative=True)"], "Equality(Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(2))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Integer(0))"], [["differentiate", 3, "Symbol('\\\\lambda', commutative=True)"], "Equality(Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1)), Tuple(Symbol('\\\\lambda', commutative=True), Integer(1))), Derivative(Integer(0), Tuple(Symbol('\\\\lambda', commutative=True), Integer(1))))"], [["times", 4, "Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True))"], "Equality(Mul(Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Derivative(Function('r_0')(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1)), Tuple(Symbol('\\\\lambda', commutative=True), Integer(1)))), Mul(Add(Symbol('\\\\lambda', commutative=True), Symbol('g', commutative=True)), Derivative(Integer(0), Tuple(Symbol('\\\\lambda', commutative=True), Integer(1)))))"]], "VR prompt": "Given \\gamma{(\\kappa,\\upsilon)} = \\frac{\\partial}{\\partial \\kappa} (\\kappa + \\upsilon), then derive \\frac{\\partial}{\\partial \\kappa} \\gamma{(\\kappa,\\upsilon)} = 0, then obtain (\\kappa + \\upsilon) \\frac{\\partial^{2}}{\\partial \\upsilon\\partial \\kappa} \\gamma{(\\kappa,\\upsilon)} = (\\kappa + \\upsilon) \\frac{d}{d \\upsilon} 0", "VR derivation": "\\gamma{(\\kappa,\\upsilon)} = \\frac{\\partial}{\\partial \\kappa} (\\kappa + \\upsilon) and \\frac{\\partial}{\\partial \\kappa} \\gamma{(\\kappa,\\upsilon)} = \\frac{\\partial^{2}}{\\partial \\kappa^{2}} (\\kappa + \\upsilon) and \\frac{\\partial}{\\partial \\kappa} \\gamma{(\\kappa,\\upsilon)} = 0 and \\frac{\\partial^{2}}{\\partial \\upsilon\\partial \\kappa} \\gamma{(\\kappa,\\upsilon)} = \\frac{d}{d \\upsilon} 0 and (\\kappa + \\upsilon) \\frac{\\partial^{2}}{\\partial \\upsilon\\partial \\kappa} \\gamma{(\\kappa,\\upsilon)} = (\\kappa + \\upsilon) \\frac{d}{d \\upsilon} 0", "VR srepr_derivation": [["premise", "Equality(Function('\\\\gamma')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Derivative(Add(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('\\\\kappa', commutative=True)"], "Equality(Derivative(Function('\\\\gamma')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(2))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\gamma')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Integer(0))"], [["differentiate", 3, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Derivative(Function('\\\\gamma')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Derivative(Integer(0), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))))"], [["times", 4, "Add(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True))"], "Equality(Mul(Add(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Derivative(Function('\\\\gamma')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1)))), Mul(Add(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Derivative(Integer(0), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1)))))"]], "static_flan-t5-large": "operatorname { r_ { 0 } } { ( \\ lambda,g) } = \\ frac { \\ partial } { \\ partial g } ( \\ lambda + g) and \\ frac { \\ partial } { \\ partial g } \\ operatorname { r_ { 0 } } { ( \\ lambda,g) } = \\ frac { \\ partial ^ { 2 } } { \\ partial \\ lambda \\ partial g } ( \\ lambda + g) and \\ frac { \\ partial } { \\ partial g } \\ operatorname { r_ { 0 } } { ( \\ lambda,g) } = 0 and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ lambda \\ partial g } \\ operatorname { r_ { 0 } } { ( \\ lambda,g) } = \\ frac { d } { d \\ lambda } 0", "VR_flan-t5-large": "gamma { ( \\ kappa, \\ upsilon) } = \\ frac { \\ partial } { \\ partial \\ kappa } ( \\ kappa + \\ upsilon) and \\ frac { \\ partial } { \\ partial \\ kappa } \\ gamma { ( \\ kappa, \\ upsilon) } = \\ frac { \\ partial ^ { 2 } } { \\ partial \\ kappa \\ partial \\ kappa } ( \\ kappa + \\ upsilon) and \\ frac { \\ partial } { \\ partial \\ kappa } \\ gamma { ( \\ kappa, \\ upsilon) } = 0 and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ upsilon \\ partial \\ kappa } \\ gamma { ( \\ kappa, \\ upsilon) } = \\ frac { d } { d \\ upsilon } 0", "EE_flan-t5-large": "frac { \\ partial } { \\ partial g } ( \\ lambda + g) = \\ operatorname { r_ { 0 } } { ( \\ lambda,g) } and 0 = - \\ frac { \\ partial } { \\ partial g } ( \\ lambda + g) + \\ frac { \\ partial } { \\ partial g } \\ operatorname { r_ { 0 } } { ( \\ lambda,g) } and 0 = \\ frac { \\ partial } { \\ partial g } \\ operatorname { r_ { 0 } } { ( \\ lambda,g) } and \\ frac { d } { d \\ lambda } 0 = \\ frac { \\ partial ^ { 2 } } { \\ partial \\ lambda \\ partial g } \\ operatorname { r_ { 0 } } { ( \\ lambda,g) } and ( \\ lambda + g) \\ frac { d } { d \\ lambda } 0 = ( \\ lambda + g) \\ frac { \\ partial ^ { 2 } } { \\ partial \\ lambda \\ partial g } \\ operatorname { r_ { 0 } } { ( \\ lambda,g) }", "AG_flan-t5-large": "operatorname { r_ { 0 } } { ( \\ lambda,g) } = \\ frac { \\ partial } { \\ partial g } ( \\ lambda + g) and \\ frac { \\ partial } { \\ partial g } \\ operatorname { r_ { 0 } } { ( \\ lambda,g) } = \\ frac { \\ partial ^ { 2 } } { \\ partial \\ lambda \\ partial g } ( \\ lambda + g) and \\ frac { \\ partial } { \\ partial g } \\ operatorname { r_ { 0 } } { ( \\ lambda,g) } = 0 and \\ frac { \\ partial ^ { 2 } } { \\ partial g \\ partial \\ lambda } \\ operatorname { r_ { 0 } } { ( \\ lambda,g) } = 0", "SR_flan-t5-large": "operatorname { r_ { 0 } } { ( \\ lambda,g) } = \\ frac { \\ partial } { \\ partial g } ( \\ lambda + g) and \\ frac { \\ partial } { \\ partial g } \\ operatorname { r_ { 0 } } { ( \\ lambda,g) } = \\ frac { \\ partial ^ { 2 } } { \\ partial \\ lambda \\ partial g } ( \\ lambda + g) and ( \\ lambda + g) \\ frac { \\ partial ^ { 2 } } { \\ partial \\ lambda \\ partial g } \\ operatorname { r_ { 0 } } { ( \\ lambda,g) } = ( \\ lambda + g) \\ frac { \\ partial ^ { 2 } } { \\ partial \\ lambda \\ partial g } ( \\ lambda + g) and ( \\ lambda + g) \\ frac { \\ partial ^ { 2 } } { \\ partial \\ lambda \\ partial g } \\ operatorname { r_ { 0 } } { ( \\ lambda,g) } = ( \\ lambda + g) \\ frac { d } { d \\ lambda } 0", "static_rouge": 0.8467153284671534, "static_bleu": 0.6897709096820274, "static_bleurt": 0.5348345041275024, "static_gleu": 0.7265795206971678, "VR_rouge": 0.0399926393915232, "EE_rouge": -0.09595983076851544, "AG_rouge": -0.0012846715328466152, "SR_rouge": 0.03902302077484554, "VR_rouge_abs": -0.009009009009009028, "EE_rouge_abs": 0.11727475800446763, "AG_rouge_abs": -0.017380952380952497, "SR_rouge_abs": 0.2148148148148148, "VR_bleu": 0.02172805837402436, "EE_bleu": -0.2410922025543618, "AG_bleu": -0.03689481401056294, "SR_bleu": -0.14840008407333527, "VR_bleu_abs": 0.009469800110821325, "EE_bleu_abs": 0.24449541066161462, "AG_bleu_abs": -0.03975434794647004, "SR_bleu_abs": 0.286895576413311, "VR_bleurt": -0.015645503997802734, "EE_bleurt": -0.12592339515686035, "AG_bleurt": -0.035327136516571045, "SR_bleurt": -0.12121421098709106, "VR_bleurt_abs": 0.07027105242013931, "EE_bleurt_abs": 0.07876551151275635, "AG_bleurt_abs": -0.0420566201210022, "SR_bleurt_abs": -0.04220783710479736, "VR_gleu": 0.01894228919358787, "EE_gleu": -0.20479302832244006, "AG_gleu": -0.02884216604982015, "SR_gleu": -0.11328976034858385, "VR_gleu_abs": 0.008919455012519117, "EE_gleu_abs": 0.24439619248146682, "AG_gleu_abs": -0.03705004389815625, "SR_gleu_abs": 0.28635346756152125, "ratio_VR_rouge": 1.027777777777778, "ratio_VR_bleu": 0.9815255428080178, "ratio_VR_bleurt": 1.8463840887755465, "ratio_VR_gleu": 0.9831174026773349, "ratio_EE_rouge": 0.8713235294117647, "ratio_EE_bleu": 0.7389760327506386, "ratio_EE_bleurt": 0.8850490004833894, "ratio_EE_gleu": 0.7394242686434535, "ratio_AG_rouge": 1.019456289978678, "ratio_AG_bleu": 1.0452719223347255, "ratio_AG_bleurt": 1.0619516128168411, "ratio_AG_gleu": 1.0419900497512438, "ratio_SR_rouge": 0.7851851851851852, "ratio_SR_bleu": 0.713104423586689, "ratio_SR_bleurt": 1.0535565859860279, "ratio_SR_gleu": 0.7136465324384788}, {"prompt": "Given \\mathbf{B}{(\\mathbf{g})} = \\log{(\\mathbf{g})}, then derive \\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})} = \\frac{1}{\\mathbf{g}}, then obtain \\cos{(\\frac{d}{d \\mathbf{g}} \\log{(\\mathbf{g})})} = \\cos{(\\frac{1}{\\mathbf{g}})}", "derivation": "\\mathbf{B}{(\\mathbf{g})} = \\log{(\\mathbf{g})} and \\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})} = \\frac{d}{d \\mathbf{g}} \\log{(\\mathbf{g})} and \\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})} = \\frac{1}{\\mathbf{g}} and \\cos{(\\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})})} = \\cos{(\\frac{1}{\\mathbf{g}})} and \\cos{(\\frac{d}{d \\mathbf{g}} \\log{(\\mathbf{g})})} = \\cos{(\\frac{1}{\\mathbf{g}})}", "srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), log(Symbol('\\\\mathbf{g}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\mathbf{g}', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1))), Derivative(log(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1))), Pow(Symbol('\\\\mathbf{g}', commutative=True), Integer(-1)))"], [["cos", 3], "Equality(cos(Derivative(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1)))), cos(Pow(Symbol('\\\\mathbf{g}', commutative=True), Integer(-1))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(cos(Derivative(log(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1)))), cos(Pow(Symbol('\\\\mathbf{g}', commutative=True), Integer(-1))))"]], "EE prompt": "Given \\log{(\\mathbf{g})} = \\mathbf{B}{(\\mathbf{g})}, then derive \\frac{1}{\\mathbf{g}} = \\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})}, then obtain \\cos{(\\frac{1}{\\mathbf{g}})} = \\cos{(\\frac{d}{d \\mathbf{g}} \\log{(\\mathbf{g})})}", "EE derivation": "\\log{(\\mathbf{g})} = \\mathbf{B}{(\\mathbf{g})} and \\frac{d}{d \\mathbf{g}} \\log{(\\mathbf{g})} = \\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})} and \\frac{1}{\\mathbf{g}} = \\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})} and \\cos{(\\frac{1}{\\mathbf{g}})} = \\cos{(\\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})})} and \\cos{(\\frac{1}{\\mathbf{g}})} = \\cos{(\\frac{d}{d \\mathbf{g}} \\log{(\\mathbf{g})})}", "EE srepr_derivation": [["premise", "Equality(log(Symbol('\\\\mathbf{g}', commutative=True)), Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\mathbf{g}', commutative=True)"], "Equality(Derivative(log(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1))), Derivative(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Pow(Symbol('\\\\mathbf{g}', commutative=True), Integer(-1)), Derivative(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1))))"], [["cos", 3], "Equality(cos(Pow(Symbol('\\\\mathbf{g}', commutative=True), Integer(-1))), cos(Derivative(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(cos(Pow(Symbol('\\\\mathbf{g}', commutative=True), Integer(-1))), cos(Derivative(log(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1)))))"]], "AG prompt": "Given \\mathbf{B}{(\\mathbf{g})} = \\log{(\\mathbf{g})}, then derive \\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})} = \\frac{1}{\\mathbf{g}}, then obtain \\frac{d}{d \\mathbf{g}} \\cos{(\\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})})} = \\frac{d}{d \\mathbf{g}} \\cos{(\\frac{1}{\\mathbf{g}})}", "AG derivation": "\\mathbf{B}{(\\mathbf{g})} = \\log{(\\mathbf{g})} and \\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})} = \\frac{d}{d \\mathbf{g}} \\log{(\\mathbf{g})} and \\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})} = \\frac{1}{\\mathbf{g}} and \\cos{(\\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})})} = \\cos{(\\frac{1}{\\mathbf{g}})} and \\frac{d}{d \\mathbf{g}} \\cos{(\\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})})} = \\frac{d}{d \\mathbf{g}} \\cos{(\\frac{1}{\\mathbf{g}})}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), log(Symbol('\\\\mathbf{g}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\mathbf{g}', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1))), Derivative(log(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1))), Pow(Symbol('\\\\mathbf{g}', commutative=True), Integer(-1)))"], [["cos", 3], "Equality(cos(Derivative(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1)))), cos(Pow(Symbol('\\\\mathbf{g}', commutative=True), Integer(-1))))"], [["differentiate", 4, "Symbol('\\\\mathbf{g}', commutative=True)"], "Equality(Derivative(cos(Derivative(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1)))), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1))), Derivative(cos(Pow(Symbol('\\\\mathbf{g}', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1))))"]], "SR prompt": "Given \\mathbf{B}{(\\mathbf{g})} = \\log{(\\mathbf{g})}, then obtain \\cos{(\\frac{d}{d \\mathbf{g}} \\log{(\\mathbf{g})})} = \\cos{(\\frac{1}{\\mathbf{g}})}", "SR derivation": "\\mathbf{B}{(\\mathbf{g})} = \\log{(\\mathbf{g})} and \\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})} = \\frac{d}{d \\mathbf{g}} \\log{(\\mathbf{g})} and \\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})} = \\frac{1}{\\mathbf{g}} and \\cos{(\\frac{d}{d \\mathbf{g}} \\mathbf{B}{(\\mathbf{g})})} = \\cos{(\\frac{1}{\\mathbf{g}})} and \\cos{(\\frac{d}{d \\mathbf{g}} \\log{(\\mathbf{g})})} = \\cos{(\\frac{1}{\\mathbf{g}})}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), log(Symbol('\\\\mathbf{g}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\mathbf{g}', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1))), Derivative(log(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1))), Pow(Symbol('\\\\mathbf{g}', commutative=True), Integer(-1)))"], [["cos", 3], "Equality(cos(Derivative(Function('\\\\mathbf{B}')(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1)))), cos(Pow(Symbol('\\\\mathbf{g}', commutative=True), Integer(-1))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(cos(Derivative(log(Symbol('\\\\mathbf{g}', commutative=True)), Tuple(Symbol('\\\\mathbf{g}', commutative=True), Integer(1)))), cos(Pow(Symbol('\\\\mathbf{g}', commutative=True), Integer(-1))))"]], "VR prompt": "Given \\zeta{(\\gamma)} = \\log{(\\gamma)}, then derive \\frac{d}{d \\gamma} \\zeta{(\\gamma)} = \\frac{1}{\\gamma}, then obtain \\cos{(\\frac{d}{d \\gamma} \\log{(\\gamma)})} = \\cos{(\\frac{1}{\\gamma})}", "VR derivation": "\\zeta{(\\gamma)} = \\log{(\\gamma)} and \\frac{d}{d \\gamma} \\zeta{(\\gamma)} = \\frac{d}{d \\gamma} \\log{(\\gamma)} and \\frac{d}{d \\gamma} \\zeta{(\\gamma)} = \\frac{1}{\\gamma} and \\cos{(\\frac{d}{d \\gamma} \\zeta{(\\gamma)})} = \\cos{(\\frac{1}{\\gamma})} and \\cos{(\\frac{d}{d \\gamma} \\log{(\\gamma)})} = \\cos{(\\frac{1}{\\gamma})}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\zeta')(Symbol('\\\\gamma', commutative=True)), log(Symbol('\\\\gamma', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\gamma', commutative=True)"], "Equality(Derivative(Function('\\\\zeta')(Symbol('\\\\gamma', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True), Integer(1))), Derivative(log(Symbol('\\\\gamma', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\zeta')(Symbol('\\\\gamma', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True), Integer(1))), Pow(Symbol('\\\\gamma', commutative=True), Integer(-1)))"], [["cos", 3], "Equality(cos(Derivative(Function('\\\\zeta')(Symbol('\\\\gamma', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True), Integer(1)))), cos(Pow(Symbol('\\\\gamma', commutative=True), Integer(-1))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(cos(Derivative(log(Symbol('\\\\gamma', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True), Integer(1)))), cos(Pow(Symbol('\\\\gamma', commutative=True), Integer(-1))))"]], "static_flan-t5-large": "mathbf { B } { ( \\ mathbf { g } ) } = \\ log { ( \\ mathbf { g } ) } and \\ frac { d } { d \\ mathbf { g } } \\ mathbf { B } { ( \\ mathbf { g } ) } = \\ frac { d } { d \\ mathbf { g } } \\ log { ( \\ mathbf { g } ) } and \\ frac { d } { d \\ mathbf { g } } \\ mathbf { B } { ( \\ mathbf { g } ) } = \\ frac { 1 } { \\ mathbf { g } } and \\ cos { ( \\ frac { d } { d \\ mathbf { g } } \\ mathbf { B } { ( \\ mathbf { g } ) } ) } = \\ cos { ( \\ frac { 1 } { \\ mathbf { g } } ) } and \\ cos { ( \\ frac { d } { d \\ mathbf { g } } \\ log { ( \\ mathbf { g } ) } ) } = \\ cos { ( \\ frac { 1 } { \\ mathbf { g } } ) }", "VR_flan-t5-large": "zeta { ( \\ gamma) } = \\ log { ( \\ gamma) } and \\ frac { d } { d \\ gamma } \\ zeta { ( \\ gamma) } = \\ frac { d } { d \\ gamma } \\ log { ( \\ gamma) } and \\ frac { d } { d \\ gamma } \\ zeta { ( \\ gamma) } = \\ frac { 1 } { \\ gamma } and \\ cos { ( \\ frac { d } { d \\ gamma } \\ zeta { ( \\ gamma) } ) } = \\ cos { ( \\ frac { 1 } { \\ gamma } ) } and \\ cos { ( \\ frac { d } { d \\ gamma } \\ log { ( \\ gamma) } ) } = \\ cos { ( \\ frac { 1 } { \\ gamma } ) }", "EE_flan-t5-large": "log { ( \\ mathbf { g } ) } = \\ mathbf { B } { ( \\ mathbf { g } ) } and \\ frac { d } { d \\ mathbf { g } } \\ log { ( \\ mathbf { g } ) } = \\ frac { d } { d \\ mathbf { g } } \\ mathbf { B } { ( \\ mathbf { g } ) } and \\ frac { 1 } { \\ mathbf { g } } = \\ frac { d } { d \\ mathbf { g } } \\ mathbf { B } { ( \\ mathbf { g } ) } and \\ frac { 1 } { \\ mathbf { g } } = \\ frac { d } { d \\ mathbf { g } } \\ log { ( \\ mathbf { g } ) } and \\ cos { ( \\ frac { 1 } { \\ mathbf { g } } ) } = \\ cos { ( \\ frac { d } { d \\ mathbf { g } } \\ log { ( \\ mathbf { g } ) } ) }", "AG_flan-t5-large": "mathbf { B } { ( \\ mathbf { g } ) } = \\ log { ( \\ mathbf { g } ) } and \\ frac { d } { d \\ mathbf { g } } \\ mathbf { B } { ( \\ mathbf { g } ) } = \\ frac { d } { d \\ mathbf { g } } \\ log { ( \\ mathbf { g } ) } and \\ frac { d } { d \\ mathbf { g } } \\ mathbf { B } { ( \\ mathbf { g } ) } = \\ frac { 1 } { \\ mathbf { g } } and \\ cos { ( \\ frac { d } { d \\ mathbf { g } } \\ mathbf { B } { ( \\ mathbf { g } ) } ) } = \\ cos { ( \\ frac { 1 } { \\ mathbf { g } } ) } and \\ frac { d } { d \\ mathbf { g } } \\ cos { ( \\ frac { d } { d \\ mathbf { g } } \\ mathbf { B } { ( \\ mathbf { g } ) } ) } = \\ frac { d } { d \\ mathbf { g } } \\ cos { ( \\ frac { 1 } { \\ mathbf { g } } ) }", "SR_flan-t5-large": "mathbf { B } { ( \\ mathbf { g } ) } = \\ log { ( \\ mathbf { g } ) } and \\ frac { d } { d \\ mathbf { g } } \\ mathbf { B } { ( \\ mathbf { g } ) } = \\ frac { d } { d \\ mathbf { g } } \\ log { ( \\ mathbf { g } ) } and \\ cos { ( \\ frac { d } { d \\ mathbf { g } } \\ mathbf { B } { ( \\ mathbf { g } ) } ) } = \\ cos { ( \\ frac { d } { d \\ mathbf { g } } \\ log { ( \\ mathbf { g } ) } ) } and \\ cos { ( \\ frac { d } { d \\ mathbf { g } } \\ mathbf { B } { ( \\ mathbf { g } ) } ) } = \\ cos { ( \\ frac { 1 } { \\ mathbf { g } } ) } and \\ cos { ( \\ frac { d } { d \\ mathbf { g } } \\ log { ( \\ mathbf { g } ) } ) } = \\ cos { ( \\ frac { 1 } { \\ mathbf { g } } ) }", "static_rouge": 1.0, "static_bleu": 0.9955056255598963, "static_bleurt": 0.8234213590621948, "static_gleu": 0.9954853273137697, "VR_rouge": 0.0, "EE_rouge": 0.08148148148148149, "AG_rouge": 0.0, "SR_rouge": 0.09722222222222221, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.052173913043478404, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.09722222222222221, "VR_bleu": 0.0015479031934099163, "EE_bleu": 0.08810856529295541, "AG_bleu": -0.0005182365478514361, "SR_bleu": 0.11544531234282451, "VR_bleu_abs": -0.0011640619387539575, "EE_bleu_abs": 0.08844019963916983, "AG_bleu_abs": 0.0005291145408864439, "SR_bleu_abs": 0.12297005792545435, "VR_bleurt": -0.049725890159606934, "EE_bleurt": 0.05668973922729492, "AG_bleurt": -0.00477910041809082, "SR_bleurt": 0.05866819620132446, "VR_bleurt_abs": 0.016469091176986694, "EE_bleurt_abs": 0.1532529592514038, "AG_bleurt_abs": -0.00517803430557251, "SR_bleurt_abs": 0.058323800563812256, "VR_gleu": 0.0015643546693927535, "EE_gleu": 0.08577878103837466, "AG_gleu": -0.0005226567181664254, "SR_gleu": 0.11511722915426048, "VR_gleu_abs": -0.0012924658200375028, "EE_gleu_abs": 0.08621386854214974, "AG_gleu_abs": 0.00052800211200843, "SR_gleu_abs": 0.12269938650306744, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 1.002312991381726, "ratio_VR_bleurt": 1.1296342713724268, "ratio_VR_gleu": 1.0024158749294372, "ratio_EE_rouge": 0.9470588235294116, "ratio_EE_bleu": 0.9106414966708881, "ratio_EE_bleurt": 0.8085343599014121, "ratio_EE_gleu": 0.9129013825218418, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9993905167363286, "ratio_AG_bleurt": 1.0060881542989315, "ratio_AG_gleu": 0.9993918872227213, "ratio_SR_rouge": 0.9027777777777778, "ratio_SR_bleu": 0.8770299420745457, "ratio_SR_bleurt": 0.9323208245962933, "ratio_SR_gleu": 0.8773006134969326}, {"prompt": "Given \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} = \\frac{\\partial}{\\partial \\mathbf{P}} Q \\mathbf{P}, then derive \\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} = Q \\mathbf{P}, then obtain \\frac{\\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} - \\cos{(\\sin{(J)})}}{J} = \\frac{Q \\mathbf{P} - \\cos{(\\sin{(J)})}}{J}", "derivation": "\\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} = \\frac{\\partial}{\\partial \\mathbf{P}} Q \\mathbf{P} and \\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} = \\mathbf{P} \\frac{\\partial}{\\partial \\mathbf{P}} Q \\mathbf{P} and \\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} = Q \\mathbf{P} and \\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} - \\cos{(\\sin{(J)})} = Q \\mathbf{P} - \\cos{(\\sin{(J)})} and \\frac{\\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} - \\cos{(\\sin{(J)})}}{J} = \\frac{Q \\mathbf{P} - \\cos{(\\sin{(J)})}}{J}", "srepr_derivation": [["get_premise", "Equality(Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Derivative(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1))))"], [["times", 1, "Symbol('\\\\mathbf{P}', commutative=True)"], "Equality(Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Symbol('\\\\mathbf{P}', commutative=True), Derivative(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 2], "Equality(Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)))"], [["minus", 3, "cos(sin(Symbol('J', commutative=True)))"], "Equality(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True))))), Add(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True))))))"], [["divide", 4, "Symbol('J', commutative=True)"], "Equality(Mul(Pow(Symbol('J', commutative=True), Integer(-1)), Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True)))))), Mul(Pow(Symbol('J', commutative=True), Integer(-1)), Add(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True)))))))"]], "EE prompt": "Given \\frac{\\partial}{\\partial \\mathbf{P}} Q \\mathbf{P} = \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})}, then derive Q \\mathbf{P} = \\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})}, then obtain \\frac{Q \\mathbf{P} - \\cos{(\\sin{(J)})}}{J} = \\frac{\\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} - \\cos{(\\sin{(J)})}}{J}", "EE derivation": "\\frac{\\partial}{\\partial \\mathbf{P}} Q \\mathbf{P} = \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} and \\mathbf{P} \\frac{\\partial}{\\partial \\mathbf{P}} Q \\mathbf{P} = \\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} and Q \\mathbf{P} = \\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} and Q \\mathbf{P} - \\cos{(\\sin{(J)})} = \\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} - \\cos{(\\sin{(J)})} and \\frac{Q \\mathbf{P} - \\cos{(\\sin{(J)})}}{J} = \\frac{\\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} - \\cos{(\\sin{(J)})}}{J}", "EE srepr_derivation": [["get_premise", "Equality(Derivative(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1))), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)))"], [["times", 1, "Symbol('\\\\mathbf{P}', commutative=True)"], "Equality(Mul(Symbol('\\\\mathbf{P}', commutative=True), Derivative(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1)))), Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))))"], [["evaluate_derivatives", 2], "Equality(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))))"], [["minus", 3, "cos(sin(Symbol('J', commutative=True)))"], "Equality(Add(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True))))), Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True))))))"], [["divide", 4, "Symbol('J', commutative=True)"], "Equality(Mul(Pow(Symbol('J', commutative=True), Integer(-1)), Add(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True)))))), Mul(Pow(Symbol('J', commutative=True), Integer(-1)), Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True)))))))"]], "AG prompt": "Given \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} = \\frac{\\partial}{\\partial \\mathbf{P}} Q \\mathbf{P}, then derive \\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} = Q \\mathbf{P}, then obtain \\int (\\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} - \\cos{(\\sin{(J)})}) dQ = \\int (Q \\mathbf{P} - \\cos{(\\sin{(J)})}) dQ", "AG derivation": "\\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} = \\frac{\\partial}{\\partial \\mathbf{P}} Q \\mathbf{P} and \\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} = \\mathbf{P} \\frac{\\partial}{\\partial \\mathbf{P}} Q \\mathbf{P} and \\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} = Q \\mathbf{P} and \\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} - \\cos{(\\sin{(J)})} = Q \\mathbf{P} - \\cos{(\\sin{(J)})} and \\int (\\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} - \\cos{(\\sin{(J)})}) dQ = \\int (Q \\mathbf{P} - \\cos{(\\sin{(J)})}) dQ", "AG srepr_derivation": [["get_premise", "Equality(Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Derivative(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1))))"], [["times", 1, "Symbol('\\\\mathbf{P}', commutative=True)"], "Equality(Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Symbol('\\\\mathbf{P}', commutative=True), Derivative(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 2], "Equality(Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)))"], [["minus", 3, "cos(sin(Symbol('J', commutative=True)))"], "Equality(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True))))), Add(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True))))))"], [["integrate", 4, "Symbol('Q', commutative=True)"], "Equality(Integral(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True))))), Tuple(Symbol('Q', commutative=True))), Integral(Add(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True))))), Tuple(Symbol('Q', commutative=True))))"]], "SR prompt": "Given \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} = \\frac{\\partial}{\\partial \\mathbf{P}} Q \\mathbf{P}, then obtain \\frac{\\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} - \\cos{(\\sin{(J)})}}{J} = \\frac{Q \\mathbf{P} - \\cos{(\\sin{(J)})}}{J}", "SR derivation": "\\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} = \\frac{\\partial}{\\partial \\mathbf{P}} Q \\mathbf{P} and \\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} = \\mathbf{P} \\frac{\\partial}{\\partial \\mathbf{P}} Q \\mathbf{P} and \\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} = Q \\mathbf{P} and \\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} - \\cos{(\\sin{(J)})} = Q \\mathbf{P} - \\cos{(\\sin{(J)})} and \\frac{\\mathbf{P} \\operatorname{V_{\\mathbf{E}}}{(Q,\\mathbf{P})} - \\cos{(\\sin{(J)})}}{J} = \\frac{Q \\mathbf{P} - \\cos{(\\sin{(J)})}}{J}", "SR srepr_derivation": [["get_premise", "Equality(Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Derivative(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1))))"], [["times", 1, "Symbol('\\\\mathbf{P}', commutative=True)"], "Equality(Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Symbol('\\\\mathbf{P}', commutative=True), Derivative(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 2], "Equality(Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)))"], [["minus", 3, "cos(sin(Symbol('J', commutative=True)))"], "Equality(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True))))), Add(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True))))))"], [["divide", 4, "Symbol('J', commutative=True)"], "Equality(Mul(Pow(Symbol('J', commutative=True), Integer(-1)), Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), Function('V_{\\\\mathbf{E}}')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True)))))), Mul(Pow(Symbol('J', commutative=True), Integer(-1)), Add(Mul(Symbol('Q', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Mul(Integer(-1), cos(sin(Symbol('J', commutative=True)))))))"]], "VR prompt": "Given \\xi{(\\zeta,\\nu)} = \\frac{\\partial}{\\partial \\nu} \\nu \\zeta, then derive \\nu \\xi{(\\zeta,\\nu)} = \\nu \\zeta, then obtain \\frac{\\nu \\xi{(\\zeta,\\nu)} - \\cos{(\\sin{(\\omicron)})}}{\\omicron} = \\frac{\\nu \\zeta - \\cos{(\\sin{(\\omicron)})}}{\\omicron}", "VR derivation": "\\xi{(\\zeta,\\nu)} = \\frac{\\partial}{\\partial \\nu} \\nu \\zeta and \\nu \\xi{(\\zeta,\\nu)} = \\nu \\frac{\\partial}{\\partial \\nu} \\nu \\zeta and \\nu \\xi{(\\zeta,\\nu)} = \\nu \\zeta and \\nu \\xi{(\\zeta,\\nu)} - \\cos{(\\sin{(\\omicron)})} = \\nu \\zeta - \\cos{(\\sin{(\\omicron)})} and \\frac{\\nu \\xi{(\\zeta,\\nu)} - \\cos{(\\sin{(\\omicron)})}}{\\omicron} = \\frac{\\nu \\zeta - \\cos{(\\sin{(\\omicron)})}}{\\omicron}", "VR srepr_derivation": [["get_premise", "Equality(Function('\\\\xi')(Symbol('\\\\zeta', commutative=True), Symbol('\\\\nu', commutative=True)), Derivative(Mul(Symbol('\\\\nu', commutative=True), Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))))"], [["times", 1, "Symbol('\\\\nu', commutative=True)"], "Equality(Mul(Symbol('\\\\nu', commutative=True), Function('\\\\xi')(Symbol('\\\\zeta', commutative=True), Symbol('\\\\nu', commutative=True))), Mul(Symbol('\\\\nu', commutative=True), Derivative(Mul(Symbol('\\\\nu', commutative=True), Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 2], "Equality(Mul(Symbol('\\\\nu', commutative=True), Function('\\\\xi')(Symbol('\\\\zeta', commutative=True), Symbol('\\\\nu', commutative=True))), Mul(Symbol('\\\\nu', commutative=True), Symbol('\\\\zeta', commutative=True)))"], [["minus", 3, "cos(sin(Symbol('\\\\omicron', commutative=True)))"], "Equality(Add(Mul(Symbol('\\\\nu', commutative=True), Function('\\\\xi')(Symbol('\\\\zeta', commutative=True), Symbol('\\\\nu', commutative=True))), Mul(Integer(-1), cos(sin(Symbol('\\\\omicron', commutative=True))))), Add(Mul(Symbol('\\\\nu', commutative=True), Symbol('\\\\zeta', commutative=True)), Mul(Integer(-1), cos(sin(Symbol('\\\\omicron', commutative=True))))))"], [["divide", 4, "Symbol('\\\\omicron', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\omicron', commutative=True), Integer(-1)), Add(Mul(Symbol('\\\\nu', commutative=True), Function('\\\\xi')(Symbol('\\\\zeta', commutative=True), Symbol('\\\\nu', commutative=True))), Mul(Integer(-1), cos(sin(Symbol('\\\\omicron', commutative=True)))))), Mul(Pow(Symbol('\\\\omicron', commutative=True), Integer(-1)), Add(Mul(Symbol('\\\\nu', commutative=True), Symbol('\\\\zeta', commutative=True)), Mul(Integer(-1), cos(sin(Symbol('\\\\omicron', commutative=True)))))))"]], "static_flan-t5-large": "operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } = \\ frac { \\ partial } { \\ partial \\ mathbf { P } } Q \\ mathbf { P } and \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } = \\ mathbf { P } \\ frac { \\ partial } { \\ partial \\ mathbf { P } } Q \\ mathbf { P } and \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } = Q \\ mathbf { P } and \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } - \\ cos { ( \\ sin { (J) } ) } = Q \\ mathbf { P } - \\ cos { ( \\ sin { (J) } ) } and \\ frac { \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } - \\ cos { ( \\ sin { (J) } ) } } { J } = \\ frac { Q \\ mathbf { P } - \\ cos { ( \\ sin { (J) } ) } } { J }", "VR_flan-t5-large": "xi { ( \\ zeta, \\ nu) } = \\ frac { \\ partial } { \\ partial \\ nu } \\ nu \\ zeta and \\ frac { \\ xi { ( \\ zeta, \\ nu) } } { \\ frac { \\ partial } { \\ partial \\ nu } \\ nu \\ zeta } = 1 and \\ frac { \\ partial } { \\ partial \\ zeta } \\ frac { \\ xi { ( \\ zeta, \\ nu) } } { \\ frac { \\ partial } { \\ partial \\ nu } \\ nu \\ zeta } = \\ frac { 1 } { \\ frac { \\ partial } { \\ partial \\ zeta } \\ frac { \\ partial } { \\ partial \\ nu } \\ nu \\ zeta } and \\ xi { ( \\ zeta, \\ nu) } = \\ frac { \\ partial } { \\ partial \\ zeta and \\ frac { \\ xi { ( \\ zeta, \\ nu) } } { \\ frac { \\ partial } { \\ partial \\ zeta } \\ frac { \\ partial } { \\ partial \\ zeta } \\ frac { \\ partial } { \\ partial \\ zeta } \\ frac { \\ partial } { \\ partial \\ zeta } \\ frac { \\ partial } { \\ partial \\ zeta } \\ frac { \\ partial } { \\ partial \\ zeta } \\ frac { \\ partial } { \\ partial \\ zeta } \\ xi { ( \\ zeta, \\ nu) } and \\ nu \\ xi { ( \\ zeta, \\ nu) } = \\ nu \\ zeta and \\ frac { \\ nu \\ xi { ( \\ zeta, \\ nu) } - \\ cos { ( \\ sin { ( \\ omicron) } ) } } { \\ omicron } = \\ frac { \\ nu \\ zeta - \\ cos { ( \\ sin { ( \\ omicron) } ) } } { \\ omicron }", "EE_flan-t5-large": "frac { \\ partial } { \\ partial \\ mathbf { P } } Q \\ mathbf { P } = \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } and Q \\ mathbf { P } = \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } and \\ frac { \\ partial } { \\ partial \\ mathbf { P } } Q \\ mathbf { P } = \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } and Q \\ mathbf { P } = \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } and Q \\ mathbf { P } - \\ cos { ( \\ sin { (J) } ) } = \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } - \\ cos { ( \\ sin { (J) } ) } and \\ frac { Q \\ mathbf { P } - \\ cos { ( \\ sin { (J) } ) } } { J } = \\ frac { \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } - \\ cos { ( \\ sin { (J) } ) } } { J }", "AG_flan-t5-large": "operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } = \\ frac { \\ partial } { \\ partial \\ mathbf { P } } Q \\ mathbf { P } and \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } = \\ mathbf { P } \\ frac { \\ partial } { \\ partial \\ mathbf { P } } Q \\ mathbf { P } and \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } = Q \\ mathbf { P } and \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } - \\ cos { ( \\ sin { (J) } ) } = Q \\ mathbf { P } - \\ cos { ( \\ sin { (J) } ) } and \\ int ( \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } - \\ cos { ( \\ sin { (J) } ) } ) dQ = \\ int (Q \\ mathbf { P } - \\ cos { ( \\ sin { (J) } ) } ) dQ", "SR_flan-t5-large": "operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } = \\ frac { \\ partial } { \\ partial \\ mathbf { P } } Q \\ mathbf { P } and \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } = Q \\ mathbf { P } and \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } - \\ cos { ( \\ sin { (J) } ) } = Q \\ mathbf { P } - \\ cos { ( \\ sin { (J) } ) } and \\ frac { \\ mathbf { P } \\ operatorname { V_ { \\ mathbf { E } } } { (Q, \\ mathbf { P } ) } - \\ cos { ( \\ sin { (J) } ) } } { J } = \\ frac { Q \\ mathbf { P } - \\ cos { ( \\ sin { (J) } ) } } { J }", "static_rouge": 1.0, "static_bleu": 0.9964726668030782, "static_bleurt": 0.8394873142242432, "static_gleu": 0.9964601769911504, "VR_rouge": 0.4767441860465116, "EE_rouge": 0.07936507936507942, "AG_rouge": 0.0, "SR_rouge": 0.12658227848101256, "VR_rouge_abs": 0.054660220252484557, "EE_rouge_abs": 0.07609535699423342, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.12658227848101256, "VR_bleu": 0.5516345148010775, "EE_bleu": 0.10257994734140075, "AG_bleu": 5.0480510978445636e-05, "SR_bleu": 0.22282379949945208, "VR_bleu_abs": 0.06318546386527271, "EE_bleu_abs": 0.10585639808417391, "AG_bleu_abs": 0.0002052893700353886, "SR_bleu_abs": 0.2229203229302712, "VR_bleurt": 0.4913126826286316, "EE_bleurt": 0.09404146671295166, "AG_bleurt": -0.00012421607971191406, "SR_bleurt": 0.13007307052612305, "VR_bleurt_abs": -0.20034131407737732, "EE_bleurt_abs": 0.07561737298965454, "AG_bleurt_abs": 0.0021384358406066895, "SR_bleurt_abs": 0.15360027551651, "VR_gleu": 0.549417536000779, "EE_gleu": 0.10252078305175649, "AG_gleu": 5.084126404086842e-05, "SR_gleu": 0.2017699115044248, "VR_gleu_abs": 0.064133120716729, "EE_gleu_abs": 0.10566258768401293, "AG_gleu_abs": 0.00020434147031545002, "SR_gleu_abs": 0.20248667850799285, "ratio_VR_rouge": 0.5566448801742919, "ratio_VR_bleu": 0.7896290814329764, "ratio_VR_bleurt": 0.6818637302052741, "ratio_VR_gleu": 0.8132205504899388, "ratio_EE_rouge": 0.9193751574703956, "ratio_EE_bleu": 0.8900870735532573, "ratio_EE_bleurt": 0.8916241593102622, "ratio_EE_gleu": 0.8903592983627782, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9997821511178745, "ratio_AG_bleurt": 0.9974684266007067, "ratio_AG_gleu": 0.9997831869845479, "ratio_SR_rouge": 0.8734177215189874, "ratio_SR_bleu": 0.7770796770697288, "ratio_SR_bleurt": 0.8240251640700041, "ratio_SR_gleu": 0.7975133214920072}, {"prompt": "Given \\operatorname{a^{\\dagger}}{(u)} = \\cos{(u)}, then derive (\\frac{d}{d u} \\operatorname{a^{\\dagger}}{(u)})^{u} = (- \\sin{(u)})^{u}, then obtain \\frac{d}{d u} (\\frac{d}{d u} \\cos{(u)})^{u} = \\frac{d}{d u} (- \\sin{(u)})^{u}", "derivation": "\\operatorname{a^{\\dagger}}{(u)} = \\cos{(u)} and \\frac{d}{d u} \\operatorname{a^{\\dagger}}{(u)} = \\frac{d}{d u} \\cos{(u)} and (\\frac{d}{d u} \\operatorname{a^{\\dagger}}{(u)})^{u} = (\\frac{d}{d u} \\cos{(u)})^{u} and (\\frac{d}{d u} \\operatorname{a^{\\dagger}}{(u)})^{u} = (- \\sin{(u)})^{u} and (\\frac{d}{d u} \\cos{(u)})^{u} = (- \\sin{(u)})^{u} and \\frac{d}{d u} (\\frac{d}{d u} \\cos{(u)})^{u} = \\frac{d}{d u} (- \\sin{(u)})^{u}", "srepr_derivation": [["premise", "Equality(Function('a^{\\\\dagger}')(Symbol('u', commutative=True)), cos(Symbol('u', commutative=True)))"], [["differentiate", 1, "Symbol('u', commutative=True)"], "Equality(Derivative(Function('a^{\\\\dagger}')(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))))"], [["power", 2, "Symbol('u', commutative=True)"], "Equality(Pow(Derivative(Function('a^{\\\\dagger}')(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)), Pow(Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)))"], [["evaluate_derivatives", 3], "Equality(Pow(Derivative(Function('a^{\\\\dagger}')(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)), Pow(Mul(Integer(-1), sin(Symbol('u', commutative=True))), Symbol('u', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Pow(Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)), Pow(Mul(Integer(-1), sin(Symbol('u', commutative=True))), Symbol('u', commutative=True)))"], [["differentiate", 5, "Symbol('u', commutative=True)"], "Equality(Derivative(Pow(Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Derivative(Pow(Mul(Integer(-1), sin(Symbol('u', commutative=True))), Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))))"]], "EE prompt": "Given \\cos{(u)} = \\operatorname{a^{\\dagger}}{(u)}, then derive (- \\sin{(u)})^{u} = (\\frac{d}{d u} \\operatorname{a^{\\dagger}}{(u)})^{u}, then obtain \\frac{d}{d u} (- \\sin{(u)})^{u} = \\frac{d}{d u} (\\frac{d}{d u} \\cos{(u)})^{u}", "EE derivation": "\\cos{(u)} = \\operatorname{a^{\\dagger}}{(u)} and \\frac{d}{d u} \\cos{(u)} = \\frac{d}{d u} \\operatorname{a^{\\dagger}}{(u)} and (\\frac{d}{d u} \\cos{(u)})^{u} = (\\frac{d}{d u} \\operatorname{a^{\\dagger}}{(u)})^{u} and (- \\sin{(u)})^{u} = (\\frac{d}{d u} \\operatorname{a^{\\dagger}}{(u)})^{u} and (- \\sin{(u)})^{u} = (\\frac{d}{d u} \\cos{(u)})^{u} and \\frac{d}{d u} (- \\sin{(u)})^{u} = \\frac{d}{d u} (\\frac{d}{d u} \\cos{(u)})^{u}", "EE srepr_derivation": [["premise", "Equality(cos(Symbol('u', commutative=True)), Function('a^{\\\\dagger}')(Symbol('u', commutative=True)))"], [["differentiate", 1, "Symbol('u', commutative=True)"], "Equality(Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Derivative(Function('a^{\\\\dagger}')(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))))"], [["power", 2, "Symbol('u', commutative=True)"], "Equality(Pow(Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)), Pow(Derivative(Function('a^{\\\\dagger}')(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)))"], [["evaluate_derivatives", 3], "Equality(Pow(Mul(Integer(-1), sin(Symbol('u', commutative=True))), Symbol('u', commutative=True)), Pow(Derivative(Function('a^{\\\\dagger}')(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Pow(Mul(Integer(-1), sin(Symbol('u', commutative=True))), Symbol('u', commutative=True)), Pow(Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)))"], [["differentiate", 5, "Symbol('u', commutative=True)"], "Equality(Derivative(Pow(Mul(Integer(-1), sin(Symbol('u', commutative=True))), Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Derivative(Pow(Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))))"]], "AG prompt": "Given \\operatorname{a^{\\dagger}}{(u)} = \\cos{(u)}, then derive (\\frac{d}{d u} \\operatorname{a^{\\dagger}}{(u)})^{u} = (- \\sin{(u)})^{u}, then obtain - \\sin{(u)} + (\\frac{d}{d u} \\cos{(u)})^{u} = (- \\sin{(u)})^{u} - \\sin{(u)}", "AG derivation": "\\operatorname{a^{\\dagger}}{(u)} = \\cos{(u)} and \\frac{d}{d u} \\operatorname{a^{\\dagger}}{(u)} = \\frac{d}{d u} \\cos{(u)} and (\\frac{d}{d u} \\operatorname{a^{\\dagger}}{(u)})^{u} = (\\frac{d}{d u} \\cos{(u)})^{u} and (\\frac{d}{d u} \\operatorname{a^{\\dagger}}{(u)})^{u} = (- \\sin{(u)})^{u} and (\\frac{d}{d u} \\cos{(u)})^{u} = (- \\sin{(u)})^{u} and - \\sin{(u)} + (\\frac{d}{d u} \\cos{(u)})^{u} = (- \\sin{(u)})^{u} - \\sin{(u)}", "AG srepr_derivation": [["premise", "Equality(Function('a^{\\\\dagger}')(Symbol('u', commutative=True)), cos(Symbol('u', commutative=True)))"], [["differentiate", 1, "Symbol('u', commutative=True)"], "Equality(Derivative(Function('a^{\\\\dagger}')(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))))"], [["power", 2, "Symbol('u', commutative=True)"], "Equality(Pow(Derivative(Function('a^{\\\\dagger}')(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)), Pow(Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)))"], [["evaluate_derivatives", 3], "Equality(Pow(Derivative(Function('a^{\\\\dagger}')(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)), Pow(Mul(Integer(-1), sin(Symbol('u', commutative=True))), Symbol('u', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Pow(Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)), Pow(Mul(Integer(-1), sin(Symbol('u', commutative=True))), Symbol('u', commutative=True)))"], [["add", 5, "Mul(Integer(-1), sin(Symbol('u', commutative=True)))"], "Equality(Add(Mul(Integer(-1), sin(Symbol('u', commutative=True))), Pow(Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True))), Add(Pow(Mul(Integer(-1), sin(Symbol('u', commutative=True))), Symbol('u', commutative=True)), Mul(Integer(-1), sin(Symbol('u', commutative=True)))))"]], "SR prompt": "Given \\operatorname{a^{\\dagger}}{(u)} = \\cos{(u)}, then obtain \\frac{d}{d u} (\\frac{d}{d u} \\cos{(u)})^{u} = \\frac{d}{d u} (- \\sin{(u)})^{u}", "SR derivation": "\\operatorname{a^{\\dagger}}{(u)} = \\cos{(u)} and \\frac{d}{d u} \\operatorname{a^{\\dagger}}{(u)} = \\frac{d}{d u} \\cos{(u)} and (\\frac{d}{d u} \\operatorname{a^{\\dagger}}{(u)})^{u} = (\\frac{d}{d u} \\cos{(u)})^{u} and (\\frac{d}{d u} \\operatorname{a^{\\dagger}}{(u)})^{u} = (- \\sin{(u)})^{u} and (\\frac{d}{d u} \\cos{(u)})^{u} = (- \\sin{(u)})^{u} and \\frac{d}{d u} (\\frac{d}{d u} \\cos{(u)})^{u} = \\frac{d}{d u} (- \\sin{(u)})^{u}", "SR srepr_derivation": [["premise", "Equality(Function('a^{\\\\dagger}')(Symbol('u', commutative=True)), cos(Symbol('u', commutative=True)))"], [["differentiate", 1, "Symbol('u', commutative=True)"], "Equality(Derivative(Function('a^{\\\\dagger}')(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))))"], [["power", 2, "Symbol('u', commutative=True)"], "Equality(Pow(Derivative(Function('a^{\\\\dagger}')(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)), Pow(Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)))"], [["evaluate_derivatives", 3], "Equality(Pow(Derivative(Function('a^{\\\\dagger}')(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)), Pow(Mul(Integer(-1), sin(Symbol('u', commutative=True))), Symbol('u', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Pow(Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)), Pow(Mul(Integer(-1), sin(Symbol('u', commutative=True))), Symbol('u', commutative=True)))"], [["differentiate", 5, "Symbol('u', commutative=True)"], "Equality(Derivative(Pow(Derivative(cos(Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))), Derivative(Pow(Mul(Integer(-1), sin(Symbol('u', commutative=True))), Symbol('u', commutative=True)), Tuple(Symbol('u', commutative=True), Integer(1))))"]], "VR prompt": "Given \\nu{(\\upsilon)} = \\cos{(\\upsilon)}, then derive (\\frac{d}{d \\upsilon} \\nu{(\\upsilon)})^{\\upsilon} = (- \\sin{(\\upsilon)})^{\\upsilon}, then obtain \\frac{d}{d \\upsilon} (\\frac{d}{d \\upsilon} \\cos{(\\upsilon)})^{\\upsilon} = \\frac{d}{d \\upsilon} (- \\sin{(\\upsilon)})^{\\upsilon}", "VR derivation": "\\nu{(\\upsilon)} = \\cos{(\\upsilon)} and \\frac{d}{d \\upsilon} \\nu{(\\upsilon)} = \\frac{d}{d \\upsilon} \\cos{(\\upsilon)} and (\\frac{d}{d \\upsilon} \\nu{(\\upsilon)})^{\\upsilon} = (\\frac{d}{d \\upsilon} \\cos{(\\upsilon)})^{\\upsilon} and (\\frac{d}{d \\upsilon} \\nu{(\\upsilon)})^{\\upsilon} = (- \\sin{(\\upsilon)})^{\\upsilon} and (\\frac{d}{d \\upsilon} \\cos{(\\upsilon)})^{\\upsilon} = (- \\sin{(\\upsilon)})^{\\upsilon} and \\frac{d}{d \\upsilon} (\\frac{d}{d \\upsilon} \\cos{(\\upsilon)})^{\\upsilon} = \\frac{d}{d \\upsilon} (- \\sin{(\\upsilon)})^{\\upsilon}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\nu')(Symbol('\\\\upsilon', commutative=True)), cos(Symbol('\\\\upsilon', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Derivative(Function('\\\\nu')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Derivative(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))))"], [["power", 2, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Pow(Derivative(Function('\\\\nu')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Symbol('\\\\upsilon', commutative=True)), Pow(Derivative(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Symbol('\\\\upsilon', commutative=True)))"], [["evaluate_derivatives", 3], "Equality(Pow(Derivative(Function('\\\\nu')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Symbol('\\\\upsilon', commutative=True)), Pow(Mul(Integer(-1), sin(Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\upsilon', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Pow(Derivative(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Symbol('\\\\upsilon', commutative=True)), Pow(Mul(Integer(-1), sin(Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\upsilon', commutative=True)))"], [["differentiate", 5, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Derivative(Pow(Derivative(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Derivative(Pow(Mul(Integer(-1), sin(Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))))"]], "static_flan-t5-large": "operatorname { a ^ { \\ dagger } } { (u) } = \\ cos { (u) } and \\ frac { d } { d u } \\ operatorname { a ^ { \\ dagger } } { (u) } = \\ frac { d } { d u } \\ cos { (u) } and ( \\ frac { d } { d u } \\ operatorname { a ^ { \\ dagger } } { (u) } ) ^ { u } = ( \\ frac { d } { d u } \\ cos { (u) } ) ^ { u } and ( \\ frac { d } { d u } \\ operatorname { a ^ { \\ dagger } } { (u) } ) ^ { u } = (- \\ sin { (u) } ) ^ { u } and ( \\ frac { d } { d u } \\ cos { (u) } ) ^ { u } = (- \\ sin { (u) } ) ^ { u } and \\ frac { d } { d u } ( \\ frac { d } { d u } \\ cos { (u) } ) ^ { u } = \\ frac { d } { d u } (- \\ sin { (u) } ) ^ { u }", "VR_flan-t5-large": "n { ( \\ upsilon) } = \\ cos { ( \\ upsilon) } and \\ frac { d } { d \\ upsilon } \\ nu { ( \\ upsilon) } = \\ frac { d } { d \\ upsilon } \\ cos { ( \\ upsilon) } and ( \\ frac { d } { d \\ upsilon } \\ nu { ( \\ upsilon) } ) ^ { \\ upsilon } = ( \\ frac { d } { d \\ upsilon } \\ cos { ( \\ upsilon) } ) ^ { \\ upsilon } and ( \\ frac { d } { d \\ upsilon } \\ nu { ( \\ upsilon) } ) ^ { \\ upsilon } = (- \\ sin { ( \\ upsilon) } ) ^ { \\ upsilon } and ( \\ frac { d } { d \\ upsilon } \\ cos { ( \\ upsilon) } ) ^ { \\ upsilon } = (- \\ sin { ( \\ upsilon) } ) ^ { \\ upsilon } and \\ frac { d } { d \\ upsilon } ( \\ frac { d } { d \\ upsilon } \\ cos { ( \\ upsilon) } ) ^ { \\ upsilon } = \\ frac { d } { d \\ upsilon } (- \\ sin { ( \\ upsilon) } ) ^ { \\ upsilon }", "EE_flan-t5-large": "cos { (u) } = \\ operatorname { a ^ { \\ dagger } } { (u) } and \\ frac { d } { d u } \\ cos { (u) } = \\ frac { d } { d u } \\ operatorname { a ^ { \\ dagger } } { (u) } and ( \\ frac { d } { d u } \\ cos { (u) } ) ^ { u } = ( \\ frac { d } { d u } \\ operatorname { a ^ { \\ dagger } } { (u) } ) ^ { u } and (- \\ sin { (u) } ) ^ { u } = ( \\ frac { d } { d u } \\ operatorname { a ^ { \\ dagger } } { (u) } ) ^ { u } and (- \\ sin { (u) } ) ^ { u } = ( \\ frac { d } { d u } \\ cos { (u) } ) ^ { u } and \\ frac { d } { d u } (- \\ sin { (u) } ) ^ { u } = \\ frac { d } { d u } ( \\ frac { d } { d u } \\ cos { (u) } ) ^ { u }", "AG_flan-t5-large": "operatorname { a ^ { \\ dagger } } { (u) } = \\ cos { (u) } and \\ frac { d } { d u } \\ operatorname { a ^ { \\ dagger } } { (u) } = \\ frac { d } { d u } \\ cos { (u) } and ( \\ frac { d } { d u } \\ operatorname { a ^ { \\ dagger } } { (u) } ) ^ { u } = ( \\ frac { d } { d u } \\ cos { (u) } ) ^ { u } and ( \\ frac { d } { d u } \\ operatorname { a ^ { \\ dagger } } { (u) } ) ^ { u } = (- \\ sin { (u) } ) ^ { u } and ( \\ frac { d } { d u } \\ cos { (u) } ) ^ { u } = (- \\ sin { (u) } ) ^ { u } and - \\ sin { (u) } + ( \\ frac { d } { d u } \\ cos { (u) } ) ^ { u } = (- \\ sin { (u) } ) ^ { u } - \\ sin { (u) }", "SR_flan-t5-large": "operatorname { a ^ { \\ dagger } } { (u) } = \\ cos { (u) } and \\ frac { d } { d u } \\ operatorname { a ^ { \\ dagger } } { (u) } = \\ frac { d } { d u } \\ cos { (u) } and ( \\ frac { d } { d u } \\ operatorname { a ^ { \\ dagger } } { (u) } ) ^ { u } = ( \\ frac { d } { d u } \\ cos { (u) } ) ^ { u } and \\ frac { d } { d u } ( \\ frac { d } { d u } \\ operatorname { a ^ { \\ dagger } } { (u) } ) ^ { u } = \\ frac { d } { d u } ( \\ frac { d } { d u } \\ cos { (u) } ) ^ { u } and \\ frac { d } { d u } ( \\ frac { d } { d u } \\ cos { (u) } ) ^ { u } = \\ frac { d } { d u } (- \\ sin { (u) } ) ^ { u }", "static_rouge": 1.0, "static_bleu": 0.996131532880095, "static_bleurt": 0.8477187156677246, "static_gleu": 0.996116504854369, "VR_rouge": 0.01388888888888884, "EE_rouge": 0.0, "AG_rouge": 0.0, "SR_rouge": 0.10559006211180122, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.0, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.10559006211180122, "VR_bleu": 0.00397483255424258, "EE_bleu": 0.0, "AG_bleu": 1.5023135482294947e-05, "SR_bleu": 0.11602812468851664, "VR_bleu_abs": -0.0014798152816389853, "EE_bleu_abs": 0.0030047115723107476, "AG_bleu_abs": 0.0002901681911117171, "SR_bleu_abs": 0.11631165415554112, "VR_bleurt": 0.08555722236633301, "EE_bleurt": 0.03719496726989746, "AG_bleurt": -0.0025644302368164062, "SR_bleurt": 0.23005497455596924, "VR_bleurt_abs": 0.004767775535583496, "EE_bleurt_abs": 0.05526679754257202, "AG_bleurt_abs": -0.0179750919342041, "SR_bleurt_abs": 0.23369699716567993, "VR_gleu": 0.003975051023327736, "EE_gleu": 0.0, "AG_gleu": 1.514033195182396e-05, "SR_gleu": 0.11456310679611659, "VR_gleu_abs": -0.0012850356744070757, "EE_gleu_abs": 0.002980752853006363, "AG_gleu_abs": 0.00028766630708376706, "SR_gleu_abs": 0.115009746588694, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 1.0026287570089425, "ratio_VR_bleurt": 1.0173693199701688, "ratio_VR_gleu": 1.0022170632238514, "ratio_EE_rouge": 1.0, "ratio_EE_bleu": 0.9969502646777268, "ratio_EE_bleurt": 0.9327005903794425, "ratio_EE_gleu": 0.9969751966122201, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9996866113090978, "ratio_AG_bleurt": 1.0229394770591538, "ratio_AG_gleu": 0.9996894168801925, "ratio_SR_rouge": 0.8944099378881988, "ratio_SR_bleu": 0.8836883458444589, "ratio_SR_bleurt": 0.7336916591606976, "ratio_SR_gleu": 0.884990253411306}, {"prompt": "Given \\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})} = \\log{(\\mathbf{B}^{\\hat{H}})} and \\hat{H}_{\\lambda}{(y)} = \\cos{(y)}, then derive \\frac{\\hat{H}_{\\lambda}{(y)}}{\\log{(\\mathbf{B})}} = \\frac{\\cos{(y)}}{\\log{(\\mathbf{B})}}, then obtain (\\frac{\\hat{H}_{\\lambda}{(y)}}{\\log{(\\mathbf{B})}})^{y} = (\\frac{\\cos{(y)}}{\\log{(\\mathbf{B})}})^{y}", "derivation": "\\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})} = \\log{(\\mathbf{B}^{\\hat{H}})} and \\hat{H}_{\\lambda}{(y)} = \\cos{(y)} and \\frac{\\hat{H}_{\\lambda}{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})}} = \\frac{\\cos{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})}} and \\frac{\\hat{H}_{\\lambda}{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\log{(\\mathbf{B}^{\\hat{H}})}} = \\frac{\\cos{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\log{(\\mathbf{B}^{\\hat{H}})}} and \\frac{\\hat{H}_{\\lambda}{(y)}}{\\log{(\\mathbf{B})}} = \\frac{\\cos{(y)}}{\\log{(\\mathbf{B})}} and (\\frac{\\hat{H}_{\\lambda}{(y)}}{\\log{(\\mathbf{B})}})^{y} = (\\frac{\\cos{(y)}}{\\log{(\\mathbf{B})}})^{y}", "srepr_derivation": [["premise", "Equality(Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)), log(Pow(Symbol('\\\\mathbf{B}', commutative=True), Symbol('\\\\hat{H}', commutative=True))))"], ["get_premise", "Equality(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), cos(Symbol('y', commutative=True)))"], [["divide", 2, "Derivative(Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1)))"], "Equality(Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(Derivative(Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))), Mul(cos(Symbol('y', commutative=True)), Pow(Derivative(Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(Derivative(log(Pow(Symbol('\\\\mathbf{B}', commutative=True), Symbol('\\\\hat{H}', commutative=True))), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))), Mul(cos(Symbol('y', commutative=True)), Pow(Derivative(log(Pow(Symbol('\\\\mathbf{B}', commutative=True), Symbol('\\\\hat{H}', commutative=True))), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))))"], [["evaluate_derivatives", 4], "Equality(Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1))), Mul(Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1)), cos(Symbol('y', commutative=True))))"], [["power", 5, "Symbol('y', commutative=True)"], "Equality(Pow(Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1))), Symbol('y', commutative=True)), Pow(Mul(Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1)), cos(Symbol('y', commutative=True))), Symbol('y', commutative=True)))"]], "EE prompt": "Given \\log{(\\mathbf{B}^{\\hat{H}})} = \\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})} and \\cos{(y)} = \\hat{H}_{\\lambda}{(y)}, then derive \\frac{\\cos{(y)}}{\\log{(\\mathbf{B})}} = \\frac{\\hat{H}_{\\lambda}{(y)}}{\\log{(\\mathbf{B})}}, then obtain (\\frac{\\cos{(y)}}{\\log{(\\mathbf{B})}})^{y} = (\\frac{\\hat{H}_{\\lambda}{(y)}}{\\log{(\\mathbf{B})}})^{y}", "EE derivation": "\\log{(\\mathbf{B}^{\\hat{H}})} = \\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})} and \\cos{(y)} = \\hat{H}_{\\lambda}{(y)} and \\frac{\\cos{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})}} = \\frac{\\hat{H}_{\\lambda}{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})}} and \\frac{\\cos{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\log{(\\mathbf{B}^{\\hat{H}})}} = \\frac{\\hat{H}_{\\lambda}{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\log{(\\mathbf{B}^{\\hat{H}})}} and \\frac{\\cos{(y)}}{\\log{(\\mathbf{B})}} = \\frac{\\hat{H}_{\\lambda}{(y)}}{\\log{(\\mathbf{B})}} and (\\frac{\\cos{(y)}}{\\log{(\\mathbf{B})}})^{y} = (\\frac{\\hat{H}_{\\lambda}{(y)}}{\\log{(\\mathbf{B})}})^{y}", "EE srepr_derivation": [["premise", "Equality(log(Pow(Symbol('\\\\mathbf{B}', commutative=True), Symbol('\\\\hat{H}', commutative=True))), Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)))"], ["get_premise", "Equality(cos(Symbol('y', commutative=True)), Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)))"], [["divide", 2, "Derivative(Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1)))"], "Equality(Mul(cos(Symbol('y', commutative=True)), Pow(Derivative(Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))), Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(Derivative(Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Mul(cos(Symbol('y', commutative=True)), Pow(Derivative(log(Pow(Symbol('\\\\mathbf{B}', commutative=True), Symbol('\\\\hat{H}', commutative=True))), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))), Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(Derivative(log(Pow(Symbol('\\\\mathbf{B}', commutative=True), Symbol('\\\\hat{H}', commutative=True))), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))))"], [["evaluate_derivatives", 4], "Equality(Mul(Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1)), cos(Symbol('y', commutative=True))), Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1))))"], [["power", 5, "Symbol('y', commutative=True)"], "Equality(Pow(Mul(Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1)), cos(Symbol('y', commutative=True))), Symbol('y', commutative=True)), Pow(Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1))), Symbol('y', commutative=True)))"]], "AG prompt": "Given \\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})} = \\log{(\\mathbf{B}^{\\hat{H}})} and \\hat{H}_{\\lambda}{(y)} = \\cos{(y)}, then derive \\frac{\\hat{H}_{\\lambda}{(y)}}{\\log{(\\mathbf{B})}} = \\frac{\\cos{(y)}}{\\log{(\\mathbf{B})}}, then obtain (\\frac{\\hat{H}_{\\lambda}{(y)}}{\\log{(\\mathbf{B})}})^{\\mathbf{B}} = (\\frac{\\cos{(y)}}{\\log{(\\mathbf{B})}})^{\\mathbf{B}}", "AG derivation": "\\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})} = \\log{(\\mathbf{B}^{\\hat{H}})} and \\hat{H}_{\\lambda}{(y)} = \\cos{(y)} and \\frac{\\hat{H}_{\\lambda}{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})}} = \\frac{\\cos{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})}} and \\frac{\\hat{H}_{\\lambda}{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\log{(\\mathbf{B}^{\\hat{H}})}} = \\frac{\\cos{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\log{(\\mathbf{B}^{\\hat{H}})}} and \\frac{\\hat{H}_{\\lambda}{(y)}}{\\log{(\\mathbf{B})}} = \\frac{\\cos{(y)}}{\\log{(\\mathbf{B})}} and (\\frac{\\hat{H}_{\\lambda}{(y)}}{\\log{(\\mathbf{B})}})^{\\mathbf{B}} = (\\frac{\\cos{(y)}}{\\log{(\\mathbf{B})}})^{\\mathbf{B}}", "AG srepr_derivation": [["premise", "Equality(Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)), log(Pow(Symbol('\\\\mathbf{B}', commutative=True), Symbol('\\\\hat{H}', commutative=True))))"], ["get_premise", "Equality(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), cos(Symbol('y', commutative=True)))"], [["divide", 2, "Derivative(Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1)))"], "Equality(Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(Derivative(Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))), Mul(cos(Symbol('y', commutative=True)), Pow(Derivative(Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(Derivative(log(Pow(Symbol('\\\\mathbf{B}', commutative=True), Symbol('\\\\hat{H}', commutative=True))), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))), Mul(cos(Symbol('y', commutative=True)), Pow(Derivative(log(Pow(Symbol('\\\\mathbf{B}', commutative=True), Symbol('\\\\hat{H}', commutative=True))), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))))"], [["evaluate_derivatives", 4], "Equality(Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1))), Mul(Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1)), cos(Symbol('y', commutative=True))))"], [["power", 5, "Symbol('\\\\mathbf{B}', commutative=True)"], "Equality(Pow(Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1))), Symbol('\\\\mathbf{B}', commutative=True)), Pow(Mul(Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1)), cos(Symbol('y', commutative=True))), Symbol('\\\\mathbf{B}', commutative=True)))"]], "SR prompt": "Given \\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})} = \\log{(\\mathbf{B}^{\\hat{H}})} and \\hat{H}_{\\lambda}{(y)} = \\cos{(y)}, then obtain (\\frac{\\hat{H}_{\\lambda}{(y)}}{\\log{(\\mathbf{B})}})^{y} = (\\frac{\\cos{(y)}}{\\log{(\\mathbf{B})}})^{y}", "SR derivation": "\\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})} = \\log{(\\mathbf{B}^{\\hat{H}})} and \\hat{H}_{\\lambda}{(y)} = \\cos{(y)} and \\frac{\\hat{H}_{\\lambda}{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})}} = \\frac{\\cos{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\operatorname{A_{2}}{(\\hat{H},\\mathbf{B})}} and \\frac{\\hat{H}_{\\lambda}{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\log{(\\mathbf{B}^{\\hat{H}})}} = \\frac{\\cos{(y)}}{\\frac{\\partial}{\\partial \\hat{H}} \\log{(\\mathbf{B}^{\\hat{H}})}} and \\frac{\\hat{H}_{\\lambda}{(y)}}{\\log{(\\mathbf{B})}} = \\frac{\\cos{(y)}}{\\log{(\\mathbf{B})}} and (\\frac{\\hat{H}_{\\lambda}{(y)}}{\\log{(\\mathbf{B})}})^{y} = (\\frac{\\cos{(y)}}{\\log{(\\mathbf{B})}})^{y}", "SR srepr_derivation": [["premise", "Equality(Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)), log(Pow(Symbol('\\\\mathbf{B}', commutative=True), Symbol('\\\\hat{H}', commutative=True))))"], ["get_premise", "Equality(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), cos(Symbol('y', commutative=True)))"], [["divide", 2, "Derivative(Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1)))"], "Equality(Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(Derivative(Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))), Mul(cos(Symbol('y', commutative=True)), Pow(Derivative(Function('A_2')(Symbol('\\\\hat{H}', commutative=True), Symbol('\\\\mathbf{B}', commutative=True)), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(Derivative(log(Pow(Symbol('\\\\mathbf{B}', commutative=True), Symbol('\\\\hat{H}', commutative=True))), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))), Mul(cos(Symbol('y', commutative=True)), Pow(Derivative(log(Pow(Symbol('\\\\mathbf{B}', commutative=True), Symbol('\\\\hat{H}', commutative=True))), Tuple(Symbol('\\\\hat{H}', commutative=True), Integer(1))), Integer(-1))))"], [["evaluate_derivatives", 4], "Equality(Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1))), Mul(Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1)), cos(Symbol('y', commutative=True))))"], [["power", 5, "Symbol('y', commutative=True)"], "Equality(Pow(Mul(Function('\\\\hat{H}_{\\\\lambda}')(Symbol('y', commutative=True)), Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1))), Symbol('y', commutative=True)), Pow(Mul(Pow(log(Symbol('\\\\mathbf{B}', commutative=True)), Integer(-1)), cos(Symbol('y', commutative=True))), Symbol('y', commutative=True)))"]], "VR prompt": "Given \\nu{(\\tau,\\beta)} = \\log{(\\beta^{\\tau})} and \\zeta{(\\xi)} = \\cos{(\\xi)}, then derive \\frac{\\zeta{(\\xi)}}{\\log{(\\beta)}} = \\frac{\\cos{(\\xi)}}{\\log{(\\beta)}}, then obtain (\\frac{\\zeta{(\\xi)}}{\\log{(\\beta)}})^{\\xi} = (\\frac{\\cos{(\\xi)}}{\\log{(\\beta)}})^{\\xi}", "VR derivation": "\\nu{(\\tau,\\beta)} = \\log{(\\beta^{\\tau})} and \\zeta{(\\xi)} = \\cos{(\\xi)} and \\frac{\\zeta{(\\xi)}}{\\frac{\\partial}{\\partial \\tau} \\nu{(\\tau,\\beta)}} = \\frac{\\cos{(\\xi)}}{\\frac{\\partial}{\\partial \\tau} \\nu{(\\tau,\\beta)}} and \\frac{\\zeta{(\\xi)}}{\\frac{\\partial}{\\partial \\tau} \\log{(\\beta^{\\tau})}} = \\frac{\\cos{(\\xi)}}{\\frac{\\partial}{\\partial \\tau} \\log{(\\beta^{\\tau})}} and \\frac{\\zeta{(\\xi)}}{\\log{(\\beta)}} = \\frac{\\cos{(\\xi)}}{\\log{(\\beta)}} and (\\frac{\\zeta{(\\xi)}}{\\log{(\\beta)}})^{\\xi} = (\\frac{\\cos{(\\xi)}}{\\log{(\\beta)}})^{\\xi}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\nu')(Symbol('\\\\tau', commutative=True), Symbol('\\\\beta', commutative=True)), log(Pow(Symbol('\\\\beta', commutative=True), Symbol('\\\\tau', commutative=True))))"], ["get_premise", "Equality(Function('\\\\zeta')(Symbol('\\\\xi', commutative=True)), cos(Symbol('\\\\xi', commutative=True)))"], [["divide", 2, "Derivative(Function('\\\\nu')(Symbol('\\\\tau', commutative=True), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1)))"], "Equality(Mul(Function('\\\\zeta')(Symbol('\\\\xi', commutative=True)), Pow(Derivative(Function('\\\\nu')(Symbol('\\\\tau', commutative=True), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Integer(-1))), Mul(cos(Symbol('\\\\xi', commutative=True)), Pow(Derivative(Function('\\\\nu')(Symbol('\\\\tau', commutative=True), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Integer(-1))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Mul(Function('\\\\zeta')(Symbol('\\\\xi', commutative=True)), Pow(Derivative(log(Pow(Symbol('\\\\beta', commutative=True), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Integer(-1))), Mul(cos(Symbol('\\\\xi', commutative=True)), Pow(Derivative(log(Pow(Symbol('\\\\beta', commutative=True), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Integer(-1))))"], [["evaluate_derivatives", 4], "Equality(Mul(Function('\\\\zeta')(Symbol('\\\\xi', commutative=True)), Pow(log(Symbol('\\\\beta', commutative=True)), Integer(-1))), Mul(Pow(log(Symbol('\\\\beta', commutative=True)), Integer(-1)), cos(Symbol('\\\\xi', commutative=True))))"], [["power", 5, "Symbol('\\\\xi', commutative=True)"], "Equality(Pow(Mul(Function('\\\\zeta')(Symbol('\\\\xi', commutative=True)), Pow(log(Symbol('\\\\beta', commutative=True)), Integer(-1))), Symbol('\\\\xi', commutative=True)), Pow(Mul(Pow(log(Symbol('\\\\beta', commutative=True)), Integer(-1)), cos(Symbol('\\\\xi', commutative=True))), Symbol('\\\\xi', commutative=True)))"]], "static_flan-t5-large": "operatorname { A_ { 2 } } { ( \\ hat { H }, \\ mathbf { B } ) } = \\ log { ( \\ mathbf { B } ^ { \\ hat { H } } ) } and \\ frac { \\ operatorname { A_ { 2 } } { ( \\ hat { H }, \\ mathbf { B } ) } } { \\ log { ( \\ mathbf { B } ^ { \\ hat { H } } ) } } = \\ frac { \\ cos { (y) } } { \\ log { ( \\ mathbf { B } ) } } and \\ hat { H } _ { \\ lambda } { (y) } = \\ cos { (y) } and \\ frac { \\ hat { H } _ { \\ lambda } { (y) } } { \\ log { ( \\ mathbf { B } ) } } = \\ frac { \\ cos { (y) } } { \\ log { ( \\ mathbf { B } ) } } and ( \\ frac { \\ hat { H } _ { \\ lambda } { (y) } } { \\ log { ( \\ mathbf { B } ) } } ) ^ { y } = ( \\ frac { \\ cos { (y) } } { \\ log { ( \\ mathbf { B } ) } } ) ^ { y }", "VR_flan-t5-large": "nu { ( \\ tau, \\ beta) } = \\ log { ( \\ beta ^ { \\ tau } ) } and \\ frac { \\ partial } { \\ partial \\ xi } \\ nu { ( \\ tau, \\ beta) } = \\ frac { \\ partial } { \\ partial \\ x } \\ log { ( \\ beta ^ { \\ tau } ) } and \\ zeta { ( \\ xi) } = \\ cos { ( \\ xi) } and \\ frac { \\ zeta { ( \\ xi) } } { \\ log { ( \\ beta) } } = \\ frac { \\ cos { ( \\ xi) } } { \\ log { ( \\ beta) } } and \\ frac { \\ zeta { ( \\ xi) } } { \\ log { ( \\ beta) } } = \\ frac { \\ cos { ( \\ xi) } } { \\ log { ( \\ beta) } } and ( \\ frac { \\ zeta { ( \\ xi) } } { \\ log { ( \\ beta) } } ) ^ { xi } = ( \\ frac { \\ cos { ( \\ xi) } } { \\ log { ( \\ beta) } } ) ^ { xi }", "EE_flan-t5-large": "log { ( \\ mathbf { B } ^ { \\ hat { H } } ) } = \\ operatorname { A_ { 2 } } { ( \\ hat { H }, \\ mathbf { B } ) } and \\ cos { (y) } = \\ hat { H } _ { \\ lambda } { (y) } and \\ frac { \\ cos { (y) } } { \\ log { ( \\ mathbf { B } ) } } = \\ frac { \\ hat { H } _ { \\ lambda } { (y) } } { \\ log { ( \\ mathbf { B } ) } } and \\ frac { \\ cos { (y) } } { \\ log { ( \\ mathbf { B } ) } } = \\ frac { \\ hat { H } _ { \\ lambda } { (y) } } { \\ log { ( \\ mathbf { B } ) } } and \\ operatorname { A_ { 2 } } { ( \\ hat { H }, \\ mathbf { B } ) } = \\ frac { \\ operatorname { A_ { 2 } } { ( \\ hat { H }, \\ mathbf { B } ) } } { \\ log { ( \\ mathbf { B } ) } } and \\ frac { \\ cos { (y) } } { \\ log { ( \\ mathbf { B } ) } } = \\ frac { \\ hat { H } _ { \\ lambda } { (y) } } { \\ log { ( \\ mathbf { B } ) } } and ( \\ frac { \\ cos { (y) } } { \\ log { ( \\ mathbf { B } ) } } ) ^ { y } = ( \\ frac { \\ hat { H } _ { \\ lambda } { (y) } } { \\ log { ( \\ mathbf { B } ) } } ) ^ { y }", "AG_flan-t5-large": "operatorname { A_ { 2 } } { ( \\ hat { H }, \\ mathbf { B } ) } = \\ log { ( \\ mathbf { B } ^ { \\ hat { H } } ) } and \\ frac { \\ operatorname { A_ { 2 } } { ( \\ hat { H }, \\ mathbf { B } ) } } { \\ log { ( \\ mathbf { B } ^ { \\ hat { H } } ) } } = \\ frac { \\ cos { (y) } } { \\ log { ( \\ mathbf { B } ) } } and \\ hat { H } _ { \\ lambda } { (y) } = \\ cos { (y) } and \\ frac { \\ hat { H } _ { \\ lambda } { (y) } } { \\ log { ( \\ mathbf { B } ) } } = \\ frac { \\ cos { (y) } } { \\ log { ( \\ mathbf { B } ) } } and ( \\ frac { \\ hat { H } _ { \\ lambda } { (y) } } { \\ log { ( \\ mathbf { B } ) } } ) ^ { \\ mathbf { B } } = ( \\ frac { \\ cos { (y) } } { \\ log { ( \\ mathbf { B } ) } } ) ^ { \\ mathbf { B } }", "SR_flan-t5-large": "operatorname { A_ { 2 } } { ( \\ hat { H }, \\ mathbf { B } ) } = \\ log { ( \\ mathbf { B } ^ { \\ hat { H } } ) } and \\ hat { H } _ { \\ lambda } { (y) } = \\ cos { (y) } and \\ frac { \\ hat { H } _ { \\ lambda } { (y) } } { \\ operatorname { A_ { 2 } } { ( \\ hat { H }, \\ mathbf { B } ) } } = \\ frac { \\ cos { (y) } } { \\ operatorname { A_ { 2 } } { ( \\ hat { H }, \\ mathbf { B } ) } } and ( \\ frac { \\ hat { H } _ { \\ lambda } { (y) } } { \\ operatorname { A_ { 2 } } { ( \\ hat { H }, \\ mathbf { B } ) } } ) ^ { y } = ( \\ frac { \\ cos { (y) } } { \\ operatorname { A_ { 2 } } { ( \\ hat { H }, \\ mathbf { B } ) } } ) ^ { y } and ( \\ frac { \\ hat { H } _ { \\ lambda } { (y) } } { \\ log { ( \\ mathbf { B } ) } } ) ^ { y } = ( \\ frac { \\ cos { (y) } } { \\ log { ( \\ mathbf { B } ) } } ) ^ { y }", "static_rouge": 0.7362637362637362, "static_bleu": 0.5816829816449084, "static_bleurt": 0.49270209670066833, "static_gleu": 0.6454545454545455, "VR_rouge": -0.028442146089205145, "EE_rouge": -0.04098744857038694, "AG_rouge": -0.005671747607231548, "SR_rouge": 0.03882783882783891, "VR_rouge_abs": 0.07790507364975449, "EE_rouge_abs": 0.2068892645815723, "AG_rouge_abs": 0.02093979808051838, "SR_rouge_abs": 0.2549019607843137, "VR_bleu": -0.14424490129882672, "EE_bleu": -0.23987700115933241, "AG_bleu": -0.009143557489168841, "SR_bleu": -0.07615557817962637, "VR_bleu_abs": -0.030031728013277192, "EE_bleu_abs": 0.2974765316825919, "AG_bleu_abs": 0.015193666323909838, "SR_bleu_abs": 0.22578449371976372, "VR_bleurt": -0.11306962370872498, "EE_bleurt": -0.06544861197471619, "AG_bleurt": 0.0, "SR_bleurt": -0.03725966811180115, "VR_bleurt_abs": 0.02641262114048004, "EE_bleurt_abs": 0.11464256048202515, "AG_bleurt_abs": -0.036617159843444824, "SR_bleurt_abs": 0.04470205307006836, "VR_gleu": -0.10166242324397179, "EE_gleu": -0.17999999999999994, "AG_gleu": -0.006745216733326065, "SR_gleu": -0.039393939393939315, "VR_gleu_abs": -0.0143693922464872, "EE_gleu_abs": 0.2973342991669684, "AG_gleu_abs": 0.015171811737082153, "SR_gleu_abs": 0.22424722662440566, "ratio_VR_rouge": 0.5423076923076924, "ratio_VR_bleu": 1.0676600683899036, "ratio_VR_bleurt": 1.1466882529631917, "ratio_VR_gleu": 1.030050059831057, "ratio_EE_rouge": 0.7854481700635546, "ratio_EE_bleu": 0.7008817674114618, "ratio_EE_bleurt": 0.8599848044971234, "ratio_EE_gleu": 0.7010349825560647, "ratio_AG_rouge": 0.9782917689623983, "ratio_AG_bleu": 0.9843501723046961, "ratio_AG_bleurt": 1.0437608452221188, "ratio_AG_gleu": 0.9843729410032014, "ratio_SR_rouge": 0.7450980392156863, "ratio_SR_bleu": 0.7742155062802363, "ratio_SR_bleurt": 0.9465769700906939, "ratio_SR_gleu": 0.7757527733755943}, {"prompt": "Given f{(C_{d})} = C_{d}, then derive \\frac{d}{d C_{d}} f{(C_{d})} = 1, then obtain 1 = \\frac{1}{\\frac{d}{d f{(C_{d})}} f{(C_{d})}}", "derivation": "f{(C_{d})} = C_{d} and \\frac{d}{d C_{d}} f{(C_{d})} = \\frac{d}{d C_{d}} C_{d} and \\frac{d}{d C_{d}} f{(C_{d})} = 1 and 1 = \\frac{1}{\\frac{d}{d C_{d}} f{(C_{d})}} and 1 = \\frac{1}{\\frac{d}{d C_{d}} C_{d}} and 1 = \\frac{1}{\\frac{d}{d f{(C_{d})}} f{(C_{d})}}", "srepr_derivation": [["renaming_premise", "Equality(Function('f')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))"], [["differentiate", 1, "Symbol('C_d', commutative=True)"], "Equality(Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))), Derivative(Symbol('C_d', commutative=True), Tuple(Symbol('C_d', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))), Integer(1))"], [["divide", 3, "Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1)))"], "Equality(Integer(1), Pow(Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))), Integer(-1)))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Integer(1), Pow(Derivative(Symbol('C_d', commutative=True), Tuple(Symbol('C_d', commutative=True), Integer(1))), Integer(-1)))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(Integer(1), Pow(Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Function('f')(Symbol('C_d', commutative=True)), Integer(1))), Integer(-1)))"]], "EE prompt": "Given C_{d} = f{(C_{d})}, then derive 1 = \\frac{d}{d C_{d}} f{(C_{d})}, then obtain \\frac{1}{\\frac{d}{d f{(C_{d})}} f{(C_{d})}} = 1", "EE derivation": "C_{d} = f{(C_{d})} and \\frac{d}{d C_{d}} C_{d} = \\frac{d}{d C_{d}} f{(C_{d})} and 1 = \\frac{d}{d C_{d}} f{(C_{d})} and \\frac{1}{\\frac{d}{d C_{d}} f{(C_{d})}} = 1 and \\frac{1}{\\frac{d}{d C_{d}} C_{d}} = 1 and \\frac{1}{\\frac{d}{d f{(C_{d})}} f{(C_{d})}} = 1", "EE srepr_derivation": [["renaming_premise", "Equality(Symbol('C_d', commutative=True), Function('f')(Symbol('C_d', commutative=True)))"], [["differentiate", 1, "Symbol('C_d', commutative=True)"], "Equality(Derivative(Symbol('C_d', commutative=True), Tuple(Symbol('C_d', commutative=True), Integer(1))), Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Integer(1), Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))))"], [["divide", 3, "Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1)))"], "Equality(Pow(Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))), Integer(-1)), Integer(1))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Pow(Derivative(Symbol('C_d', commutative=True), Tuple(Symbol('C_d', commutative=True), Integer(1))), Integer(-1)), Integer(1))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Pow(Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Function('f')(Symbol('C_d', commutative=True)), Integer(1))), Integer(-1)), Integer(1))"]], "AG prompt": "Given f{(C_{d})} = C_{d}, then derive \\frac{d}{d C_{d}} f{(C_{d})} = 1, then obtain 2 = 1 + \\frac{1}{\\frac{d}{d C_{d}} C_{d}}", "AG derivation": "f{(C_{d})} = C_{d} and \\frac{d}{d C_{d}} f{(C_{d})} = \\frac{d}{d C_{d}} C_{d} and \\frac{d}{d C_{d}} f{(C_{d})} = 1 and 1 = \\frac{1}{\\frac{d}{d C_{d}} f{(C_{d})}} and 1 = \\frac{1}{\\frac{d}{d C_{d}} C_{d}} and 2 = 1 + \\frac{1}{\\frac{d}{d C_{d}} C_{d}}", "AG srepr_derivation": [["renaming_premise", "Equality(Function('f')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))"], [["differentiate", 1, "Symbol('C_d', commutative=True)"], "Equality(Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))), Derivative(Symbol('C_d', commutative=True), Tuple(Symbol('C_d', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))), Integer(1))"], [["divide", 3, "Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1)))"], "Equality(Integer(1), Pow(Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))), Integer(-1)))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Integer(1), Pow(Derivative(Symbol('C_d', commutative=True), Tuple(Symbol('C_d', commutative=True), Integer(1))), Integer(-1)))"], [["add", 5, 1], "Equality(Integer(2), Add(Integer(1), Pow(Derivative(Symbol('C_d', commutative=True), Tuple(Symbol('C_d', commutative=True), Integer(1))), Integer(-1))))"]], "SR prompt": "Given f{(C_{d})} = C_{d}, then obtain 1 = \\frac{1}{\\frac{d}{d f{(C_{d})}} f{(C_{d})}}", "SR derivation": "f{(C_{d})} = C_{d} and \\frac{d}{d C_{d}} f{(C_{d})} = \\frac{d}{d C_{d}} C_{d} and \\frac{d}{d C_{d}} f{(C_{d})} = 1 and 1 = \\frac{1}{\\frac{d}{d C_{d}} f{(C_{d})}} and 1 = \\frac{1}{\\frac{d}{d C_{d}} C_{d}} and 1 = \\frac{1}{\\frac{d}{d f{(C_{d})}} f{(C_{d})}}", "SR srepr_derivation": [["renaming_premise", "Equality(Function('f')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))"], [["differentiate", 1, "Symbol('C_d', commutative=True)"], "Equality(Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))), Derivative(Symbol('C_d', commutative=True), Tuple(Symbol('C_d', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))), Integer(1))"], [["divide", 3, "Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1)))"], "Equality(Integer(1), Pow(Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))), Integer(-1)))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Integer(1), Pow(Derivative(Symbol('C_d', commutative=True), Tuple(Symbol('C_d', commutative=True), Integer(1))), Integer(-1)))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(Integer(1), Pow(Derivative(Function('f')(Symbol('C_d', commutative=True)), Tuple(Function('f')(Symbol('C_d', commutative=True)), Integer(1))), Integer(-1)))"]], "VR prompt": "Given \\upsilon{(\\kappa)} = \\kappa, then derive \\frac{d}{d \\kappa} \\upsilon{(\\kappa)} = 1, then obtain 1 = \\frac{1}{\\frac{d}{d \\upsilon{(\\kappa)}} \\upsilon{(\\kappa)}}", "VR derivation": "\\upsilon{(\\kappa)} = \\kappa and \\frac{d}{d \\kappa} \\upsilon{(\\kappa)} = \\frac{d}{d \\kappa} \\kappa and \\frac{d}{d \\kappa} \\upsilon{(\\kappa)} = 1 and 1 = \\frac{1}{\\frac{d}{d \\kappa} \\upsilon{(\\kappa)}} and 1 = \\frac{1}{\\frac{d}{d \\kappa} \\kappa} and 1 = \\frac{1}{\\frac{d}{d \\upsilon{(\\kappa)}} \\upsilon{(\\kappa)}}", "VR srepr_derivation": [["renaming_premise", "Equality(Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True)), Symbol('\\\\kappa', commutative=True))"], [["differentiate", 1, "Symbol('\\\\kappa', commutative=True)"], "Equality(Derivative(Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Derivative(Symbol('\\\\kappa', commutative=True), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Integer(1))"], [["divide", 3, "Derivative(Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1)))"], "Equality(Integer(1), Pow(Derivative(Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Integer(-1)))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Integer(1), Pow(Derivative(Symbol('\\\\kappa', commutative=True), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Integer(-1)))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(Integer(1), Pow(Derivative(Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True)), Tuple(Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True)), Integer(1))), Integer(-1)))"]], "static_flan-t5-large": "f { (C_ { d } ) } = C_ { d } and \\ frac { d } { d C_ { d } } f { (C_ { d } ) } = \\ frac { d } { d C_ { d } } C_ { d } and \\ frac { d } { d C_ { d } } f { (C_ { d } ) } = 1 and \\ frac { d } { d C_ { d } } C_ { d } = 1 and 1 = \\ frac { 1 } { \\ frac { d } { d C_ { d } } C_ { d } } and 1 = \\ frac { 1 } { \\ frac { d } { d f { (C_ { d } ) } } f { (C_ { d } ) } }", "VR_flan-t5-large": "kappa + \\ frac { d } { d \\ kappa } \\ upsilon { ( \\ kappa) } = \\ frac { d } { d \\ kappa } \\ kappa and \\ frac { d } { d \\ kappa } ( \\ kappa + \\ frac { d } { d \\ kappa } \\ upsilon { ( \\ kappa) } ) = \\ frac { d } { d \\ kappa } ( \\ kappa + \\ frac { d } { d \\ kappa } \\ kappa) and \\ frac { d } { d \\ kappa } \\ kappa = 1 and \\ frac { \\ frac { d } { d \\ kappa } ( \\ kappa + \\ frac { d } { d \\ kappa } \\ kappa) } { \\ frac { d } { d \\ kappa } \\ kappa } = \\ frac { 1 } { \\ frac { d } { d \\ kappa } ( \\ kappa + \\ frac { d } { d \\ kappa } \\ kappa) } and 1 = \\ frac { 1 } { \\ frac { d } { d \\ kappa } \\ kappa } and 1 = \\ frac { 1 } { \\ frac { d } { d \\ kappa } \\ kappa } and 1 = \\ frac { 1 } { \\ frac { d } { d \\ kappa } \\ esilon { ( \\ kappa) } }", "EE_flan-t5-large": "c_ { d } = f { (C_ { d } ) } and \\ frac { d } { d C_ { d } } C_ { d } = \\ frac { d } { d C_ { d } } f { (C_ { d } ) } and 1 = \\ frac { \\ frac { d } { d C_ { d } } f { (C_ { d } ) } } { \\ frac { d } { d C_ { d } } C_ { d } } and 1 = \\ frac { d } { d C_ { d } } f { (C_ { d } ) } and \\ frac { 1 } { \\ frac { d } { d C_ { d } } C_ { d } } = 1 and \\ frac { 1 } { \\ frac { d } { d f { (C_ { d } ) } } f { (C_ { d } ) } } = 1", "AG_flan-t5-large": "f { (C_ { d } ) } = C_ { d } and \\ frac { d } { d C_ { d } } f { (C_ { d } ) } = \\ frac { d } { d C_ { d } } C_ { d } and \\ frac { d } { d C_ { d } } f { (C_ { d } ) } = 1 and \\ frac { d } { d C_ { d } } C_ { d } = 1 and 1 = \\ frac { 1 } { \\ frac { d } { d C_ { d } } C_ { d } } and 2 = 1 + \\ frac { 1 } { \\ frac { d } { d C_ { d } } C_ { d } }", "SR_flan-t5-large": "f { (C_ { d } ) } = C_ { d } and \\ frac { d } { d f { (C_ { d } ) } } f { (C_ { d } ) } = \\ frac { d } { d C_ { d } } C_ { d } and 1 = \\ frac { \\ frac { d } { d C_ { d } } C_ { d } } { \\ frac { d } { d f { (C_ { d } ) } } f { (C_ { d } ) } } and 1 = \\ frac { 1 } { \\ frac { d } { d f { (C_ { d } ) } } f { (C_ { d } ) } }", "static_rouge": 0.9147286821705426, "static_bleu": 0.9035899036891322, "static_bleurt": 0.7136284112930298, "static_gleu": 0.9054794520547945, "VR_rouge": 0.3107018365329588, "EE_rouge": 0.01617795753286133, "AG_rouge": 0.001342855398889009, "SR_rouge": 0.09119927040583664, "VR_rouge_abs": 0.15762711864406787, "EE_rouge_abs": -0.009427609427609451, "AG_rouge_abs": 0.0032977099236641827, "SR_rouge_abs": 0.18965517241379315, "VR_bleu": 0.4254092806493871, "EE_bleu": 0.020395418164386614, "AG_bleu": 0.004509929366484755, "SR_bleu": 0.12084854913254339, "VR_bleu_abs": 0.12103950709486305, "EE_bleu_abs": 0.10977147229395001, "AG_bleu_abs": 0.006726967969115649, "SR_bleu_abs": 0.19393571627604533, "VR_bleurt": 0.07299059629440308, "EE_bleurt": -0.0516851544380188, "AG_bleurt": 0.05227005481719971, "SR_bleurt": 0.0696946382522583, "VR_bleurt_abs": -0.17484451830387115, "EE_bleurt_abs": -0.05099821090698242, "AG_bleurt_abs": 0.02776581048965454, "SR_bleurt_abs": 0.10537052154541016, "VR_gleu": 0.4245999109458079, "EE_gleu": 0.022020805438253133, "AG_gleu": 0.004333320249636952, "SR_gleu": 0.11232876712328765, "VR_gleu_abs": 0.1167762382461563, "EE_gleu_abs": 0.11070484430253713, "AG_gleu_abs": 0.006556059936528413, "SR_gleu_abs": 0.1891495601173021, "ratio_VR_rouge": 0.6555555555555554, "ratio_VR_bleu": 0.722962214922835, "ratio_VR_bleurt": -2.57193386318444, "ratio_VR_gleu": 0.7440040422832009, "ratio_EE_rouge": 1.0103703703703704, "ratio_EE_bleu": 0.8819331152060157, "ratio_EE_bleurt": 1.0715914652324856, "ratio_EE_gleu": 0.881155093616394, "ratio_AG_rouge": 0.9964590163934426, "ratio_AG_bleu": 0.9925725647040832, "ratio_AG_bleurt": 0.95774077005595, "ratio_AG_gleu": 0.9927705079249762, "ratio_SR_rouge": 0.8103448275862069, "ratio_SR_bleu": 0.8060642837239547, "ratio_SR_bleurt": 0.860563746103895, "ratio_SR_gleu": 0.8108504398826979}, {"prompt": "Given \\hat{X}{(f^{\\prime})} = \\cos{(f^{\\prime})}, then derive \\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})} = - \\cos{(f^{\\prime})}, then obtain \\frac{\\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})}}{\\operatorname{P_{e}}{(f^{\\prime})}} = - \\frac{\\cos{(f^{\\prime})}}{\\operatorname{P_{e}}{(f^{\\prime})}}", "derivation": "\\hat{X}{(f^{\\prime})} = \\cos{(f^{\\prime})} and \\frac{d}{d f^{\\prime}} \\hat{X}{(f^{\\prime})} = \\frac{d}{d f^{\\prime}} \\cos{(f^{\\prime})} and \\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})} = \\frac{d^{2}}{d (f^{\\prime})^{2}} \\cos{(f^{\\prime})} and \\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})} = - \\cos{(f^{\\prime})} and \\frac{\\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})}}{\\operatorname{P_{e}}{(f^{\\prime})}} = - \\frac{\\cos{(f^{\\prime})}}{\\operatorname{P_{e}}{(f^{\\prime})}}", "srepr_derivation": [["premise", "Equality(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), cos(Symbol('f^{\\\\prime}', commutative=True)))"], [["differentiate", 1, "Symbol('f^{\\\\prime}', commutative=True)"], "Equality(Derivative(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(1))), Derivative(cos(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(1))))"], [["differentiate", 2, "Symbol('f^{\\\\prime}', commutative=True)"], "Equality(Derivative(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2))), Derivative(cos(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2))), Mul(Integer(-1), cos(Symbol('f^{\\\\prime}', commutative=True))))"], [["divide", 4, "Function('P_e')(Symbol('f^{\\\\prime}', commutative=True))"], "Equality(Mul(Pow(Function('P_e')(Symbol('f^{\\\\prime}', commutative=True)), Integer(-1)), Derivative(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2)))), Mul(Integer(-1), Pow(Function('P_e')(Symbol('f^{\\\\prime}', commutative=True)), Integer(-1)), cos(Symbol('f^{\\\\prime}', commutative=True))))"]], "EE prompt": "Given \\cos{(f^{\\prime})} = \\hat{X}{(f^{\\prime})}, then derive - \\cos{(f^{\\prime})} = \\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})}, then obtain - \\frac{\\cos{(f^{\\prime})}}{\\operatorname{P_{e}}{(f^{\\prime})}} = \\frac{\\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})}}{\\operatorname{P_{e}}{(f^{\\prime})}}", "EE derivation": "\\cos{(f^{\\prime})} = \\hat{X}{(f^{\\prime})} and \\frac{d}{d f^{\\prime}} \\cos{(f^{\\prime})} = \\frac{d}{d f^{\\prime}} \\hat{X}{(f^{\\prime})} and \\frac{d^{2}}{d (f^{\\prime})^{2}} \\cos{(f^{\\prime})} = \\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})} and - \\cos{(f^{\\prime})} = \\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})} and - \\frac{\\cos{(f^{\\prime})}}{\\operatorname{P_{e}}{(f^{\\prime})}} = \\frac{\\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})}}{\\operatorname{P_{e}}{(f^{\\prime})}}", "EE srepr_derivation": [["premise", "Equality(cos(Symbol('f^{\\\\prime}', commutative=True)), Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)))"], [["differentiate", 1, "Symbol('f^{\\\\prime}', commutative=True)"], "Equality(Derivative(cos(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(1))), Derivative(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(1))))"], [["differentiate", 2, "Symbol('f^{\\\\prime}', commutative=True)"], "Equality(Derivative(cos(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2))), Derivative(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2))))"], [["evaluate_derivatives", 3], "Equality(Mul(Integer(-1), cos(Symbol('f^{\\\\prime}', commutative=True))), Derivative(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2))))"], [["divide", 4, "Function('P_e')(Symbol('f^{\\\\prime}', commutative=True))"], "Equality(Mul(Integer(-1), Pow(Function('P_e')(Symbol('f^{\\\\prime}', commutative=True)), Integer(-1)), cos(Symbol('f^{\\\\prime}', commutative=True))), Mul(Pow(Function('P_e')(Symbol('f^{\\\\prime}', commutative=True)), Integer(-1)), Derivative(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2)))))"]], "AG prompt": "Given \\hat{X}{(f^{\\prime})} = \\cos{(f^{\\prime})}, then derive \\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})} = - \\cos{(f^{\\prime})}, then obtain \\frac{d^{2}}{d (f^{\\prime})^{2}} \\cos{(f^{\\prime})} = - \\cos{(f^{\\prime})}", "AG derivation": "\\hat{X}{(f^{\\prime})} = \\cos{(f^{\\prime})} and \\frac{d}{d f^{\\prime}} \\hat{X}{(f^{\\prime})} = \\frac{d}{d f^{\\prime}} \\cos{(f^{\\prime})} and \\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})} = \\frac{d^{2}}{d (f^{\\prime})^{2}} \\cos{(f^{\\prime})} and \\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})} = - \\cos{(f^{\\prime})} and \\frac{d^{2}}{d (f^{\\prime})^{2}} \\cos{(f^{\\prime})} = - \\cos{(f^{\\prime})}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), cos(Symbol('f^{\\\\prime}', commutative=True)))"], [["differentiate", 1, "Symbol('f^{\\\\prime}', commutative=True)"], "Equality(Derivative(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(1))), Derivative(cos(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(1))))"], [["differentiate", 2, "Symbol('f^{\\\\prime}', commutative=True)"], "Equality(Derivative(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2))), Derivative(cos(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2))), Mul(Integer(-1), cos(Symbol('f^{\\\\prime}', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Derivative(cos(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2))), Mul(Integer(-1), cos(Symbol('f^{\\\\prime}', commutative=True))))"]], "SR prompt": "Given \\hat{X}{(f^{\\prime})} = \\cos{(f^{\\prime})}, then obtain \\frac{\\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})}}{\\operatorname{P_{e}}{(f^{\\prime})}} = - \\frac{\\cos{(f^{\\prime})}}{\\operatorname{P_{e}}{(f^{\\prime})}}", "SR derivation": "\\hat{X}{(f^{\\prime})} = \\cos{(f^{\\prime})} and \\frac{d}{d f^{\\prime}} \\hat{X}{(f^{\\prime})} = \\frac{d}{d f^{\\prime}} \\cos{(f^{\\prime})} and \\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})} = \\frac{d^{2}}{d (f^{\\prime})^{2}} \\cos{(f^{\\prime})} and \\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})} = - \\cos{(f^{\\prime})} and \\frac{\\frac{d^{2}}{d (f^{\\prime})^{2}} \\hat{X}{(f^{\\prime})}}{\\operatorname{P_{e}}{(f^{\\prime})}} = - \\frac{\\cos{(f^{\\prime})}}{\\operatorname{P_{e}}{(f^{\\prime})}}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), cos(Symbol('f^{\\\\prime}', commutative=True)))"], [["differentiate", 1, "Symbol('f^{\\\\prime}', commutative=True)"], "Equality(Derivative(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(1))), Derivative(cos(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(1))))"], [["differentiate", 2, "Symbol('f^{\\\\prime}', commutative=True)"], "Equality(Derivative(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2))), Derivative(cos(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2))), Mul(Integer(-1), cos(Symbol('f^{\\\\prime}', commutative=True))))"], [["divide", 4, "Function('P_e')(Symbol('f^{\\\\prime}', commutative=True))"], "Equality(Mul(Pow(Function('P_e')(Symbol('f^{\\\\prime}', commutative=True)), Integer(-1)), Derivative(Function('\\\\hat{X}')(Symbol('f^{\\\\prime}', commutative=True)), Tuple(Symbol('f^{\\\\prime}', commutative=True), Integer(2)))), Mul(Integer(-1), Pow(Function('P_e')(Symbol('f^{\\\\prime}', commutative=True)), Integer(-1)), cos(Symbol('f^{\\\\prime}', commutative=True))))"]], "VR prompt": "Given \\alpha{(\\nu)} = \\cos{(\\nu)}, then derive \\frac{d^{2}}{d \\nu^{2}} \\alpha{(\\nu)} = - \\cos{(\\nu)}, then obtain \\frac{\\frac{d^{2}}{d \\nu^{2}} \\alpha{(\\nu)}}{\\tau{(\\nu)}} = - \\frac{\\cos{(\\nu)}}{\\tau{(\\nu)}}", "VR derivation": "\\alpha{(\\nu)} = \\cos{(\\nu)} and \\frac{d}{d \\nu} \\alpha{(\\nu)} = \\frac{d}{d \\nu} \\cos{(\\nu)} and \\frac{d^{2}}{d \\nu^{2}} \\alpha{(\\nu)} = \\frac{d^{2}}{d \\nu^{2}} \\cos{(\\nu)} and \\frac{d^{2}}{d \\nu^{2}} \\alpha{(\\nu)} = - \\cos{(\\nu)} and \\frac{\\frac{d^{2}}{d \\nu^{2}} \\alpha{(\\nu)}}{\\tau{(\\nu)}} = - \\frac{\\cos{(\\nu)}}{\\tau{(\\nu)}}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\alpha')(Symbol('\\\\nu', commutative=True)), cos(Symbol('\\\\nu', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\nu', commutative=True)"], "Equality(Derivative(Function('\\\\alpha')(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))), Derivative(cos(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))))"], [["differentiate", 2, "Symbol('\\\\nu', commutative=True)"], "Equality(Derivative(Function('\\\\alpha')(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(2))), Derivative(cos(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(2))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('\\\\alpha')(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(2))), Mul(Integer(-1), cos(Symbol('\\\\nu', commutative=True))))"], [["divide", 4, "Function('\\\\tau')(Symbol('\\\\nu', commutative=True))"], "Equality(Mul(Pow(Function('\\\\tau')(Symbol('\\\\nu', commutative=True)), Integer(-1)), Derivative(Function('\\\\alpha')(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(2)))), Mul(Integer(-1), Pow(Function('\\\\tau')(Symbol('\\\\nu', commutative=True)), Integer(-1)), cos(Symbol('\\\\nu', commutative=True))))"]], "static_flan-t5-large": "hat { X } { (f ^ { \\ prime } ) } = \\ cos { (f ^ { \\ prime } ) } and \\ frac { d } { d f ^ { \\ prime } } \\ hat { X } { (f ^ { \\ prime } ) } = \\ frac { d } { d f ^ { \\ prime } } \\ cos { (f ^ { \\ prime } ) } and \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ hat { X } { (f ^ { \\ prime } ) } = \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ cos { (f ^ { \\ prime } ) } and \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ hat { X } { (f ^ { \\ prime } ) } = - \\ cos { (f ^ { \\ prime } ) } and \\ frac { \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ hat { X } { (f ^ { \\ prime } ) } } { \\ operatorname { P_ { e } } { (f ^ { \\ prime } ) } } = - \\ frac { \\ cos { (f ^ { \\ prime } ) } } { \\ operatorname { P_ { e } } { (f ^ { \\ prime } ) } }", "VR_flan-t5-large": "alpha { ( \\ nu) } = \\ cos { ( \\ nu) } and \\ frac { d } { d \\ nu } \\ alpha { ( \\ nu) } = \\ frac { d } { d \\ nu } \\ cos { ( \\ nu) } and \\ frac { d ^ { 2 } } { d \\ nu ^ { 2 } } \\ alpha { ( \\ nu) } = \\ frac { d ^ { 2 } } { d \\ nu ^ { 2 } } \\ cos { ( \\ nu) } and \\ frac { d ^ { 2 } } { d \\ nu ^ { 2 } } \\ alpha { ( \\ nu) } = - \\ cos { ( \\ nu) } and \\ frac { \\ frac { d ^ { 2 } } { d \\ nu ^ { 2 } } \\ alpha { ( \\ nu) } } { \\ tau { ( \\ nu) } } = - \\ frac { \\ cos { ( \\ nu) } } { \\ tau { ( \\ nu) } }", "EE_flan-t5-large": "cos { (f ^ { \\ prime } ) } = \\ hat { X } { (f ^ { \\ prime } ) } and \\ frac { d } { d f ^ { \\ prime } } \\ cos { (f ^ { \\ prime } ) } = \\ frac { d } { d f ^ { \\ prime } } \\ hat { X } { (f ^ { \\ prime } ) } and \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ cos { (f ^ { \\ prime } ) } = \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ hat { X } { (f ^ { \\ prime } ) } and - \\ cos { (f ^ { \\ prime } ) } = \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ hat { X } { (f ^ { \\ prime } ) } and - \\ cos { (f ^ { \\ prime } ) } = \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ cos { (f ^ { \\ prime } ) } and - \\ cos { (f ^ { \\ prime } ) } = \\ frac { \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ hat { X } { (f ^ { \\ prime } ) } } { \\ operatorname { P_ { e } } { (f ^ { \\ prime } ) } } and - \\ frac { \\ cos { (f ^ { \\ prime } ) } } { \\ operatorname { P_ { e } } { (f ^ { \\ prime } ) } } = \\ frac { \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ hat { X } { (f ^ { \\ prime } ) } } { \\ operatorname", "AG_flan-t5-large": "hat { X } { (f ^ { \\ prime } ) } = \\ cos { (f ^ { \\ prime } ) } and \\ frac { d } { d f ^ { \\ prime } } \\ hat { X } { (f ^ { \\ prime } ) } = \\ frac { d } { d f ^ { \\ prime } } \\ cos { (f ^ { \\ prime } ) } and \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ hat { X } { (f ^ { \\ prime } ) } = \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ cos { (f ^ { \\ prime } ) } and \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ hat { X } { (f ^ { \\ prime } ) } = - \\ cos { (f ^ { \\ prime } ) } and \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ cos { (f ^ { \\ prime } ) } = - \\ cos { (f ^ { \\ prime } ) }", "SR_flan-t5-large": "hat { X } { (f ^ { \\ prime } ) } = \\ cos { (f ^ { \\ prime } ) } and \\ frac { d } { d f ^ { \\ prime } } \\ hat { X } { (f ^ { \\ prime } ) } = \\ frac { d } { d f ^ { \\ prime } } \\ cos { (f ^ { \\ prime } ) } and \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ hat { X } { (f ^ { \\ prime } ) } = \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ cos { (f ^ { \\ prime } ) } and \\ frac { \\ frac { d ^ { 2 } } { d (f ^ { \\ prime } ) ^ { 2 } } \\ hat { X } { (f ^ { \\ prime } ) } } { \\ operatorname { P_ { e } } { (f ^ { \\ prime } ) } } = - \\ frac { \\ cos { (f ^ { \\ prime } ) } } { \\ operatorname { P_ { e } } { (f ^ { \\ prime } ) } }", "static_rouge": 1.0, "static_bleu": 0.9968701121052579, "static_bleurt": 0.8023872375488281, "static_gleu": 0.9968602825745683, "VR_rouge": 0.0, "EE_rouge": 0.1497584541062802, "AG_rouge": 0.0, "SR_rouge": 0.09316770186335399, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.14465305226174796, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.09316770186335399, "VR_bleu": 0.0016206969738944421, "EE_bleu": 0.2553122150911886, "AG_bleu": 0.0006224529099666531, "SR_bleu": 0.18429520024143697, "VR_bleu_abs": -0.0003691095183103732, "EE_bleu_abs": 0.25524223102609944, "AG_bleu_abs": 0.0006496720428980085, "SR_bleu_abs": 0.18435297491957903, "VR_bleurt": 0.014272689819335938, "EE_bleurt": 0.05296957492828369, "AG_bleurt": 7.027387619018555e-05, "SR_bleurt": 0.1159064769744873, "VR_bleurt_abs": 0.031919658184051514, "EE_bleurt_abs": -0.0937148928642273, "AG_bleurt_abs": -0.026327311992645264, "SR_bleurt_abs": 0.12379956245422363, "VR_gleu": 0.0016335522643057265, "EE_gleu": 0.2553003291403424, "AG_gleu": 0.0006267609173178368, "SR_gleu": 0.1695447409733124, "VR_gleu_abs": -0.0005599574778427097, "EE_gleu_abs": 0.25529119142955836, "AG_gleu_abs": 0.0005636658055105936, "SR_gleu_abs": 0.17007874015748037, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 1.0009776591689203, "ratio_VR_bleurt": 2.2223800063284838, "ratio_VR_gleu": 1.0013089648197644, "ratio_EE_rouge": 0.8502415458937198, "ratio_EE_bleu": 0.7391782028968497, "ratio_EE_bleurt": 1.149593134076893, "ratio_EE_gleu": 0.7391812527014777, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9991954771159748, "ratio_AG_bleurt": 1.0314076608414342, "ratio_AG_gleu": 0.9993134701374565, "ratio_SR_rouge": 0.906832298136646, "ratio_SR_bleu": 0.815647025080421, "ratio_SR_bleurt": 0.8549690007631365, "ratio_SR_gleu": 0.8299212598425196}, {"prompt": "Given W{(P_{e})} = \\log{(P_{e})}, then derive \\frac{d}{d P_{e}} W{(P_{e})} = \\frac{1}{P_{e}}, then obtain \\int \\frac{d}{d P_{e}} \\log{(P_{e})} dP_{e} = \\int \\frac{1}{P_{e}} dP_{e}", "derivation": "W{(P_{e})} = \\log{(P_{e})} and \\frac{d}{d P_{e}} W{(P_{e})} = \\frac{d}{d P_{e}} \\log{(P_{e})} and \\frac{d}{d P_{e}} W{(P_{e})} = \\frac{1}{P_{e}} and \\frac{d}{d P_{e}} \\log{(P_{e})} = \\frac{1}{P_{e}} and \\int \\frac{d}{d P_{e}} \\log{(P_{e})} dP_{e} = \\int \\frac{1}{P_{e}} dP_{e}", "srepr_derivation": [["premise", "Equality(Function('W')(Symbol('P_e', commutative=True)), log(Symbol('P_e', commutative=True)))"], [["differentiate", 1, "Symbol('P_e', commutative=True)"], "Equality(Derivative(Function('W')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(log(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('W')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Pow(Symbol('P_e', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(log(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Pow(Symbol('P_e', commutative=True), Integer(-1)))"], [["integrate", 4, "Symbol('P_e', commutative=True)"], "Equality(Integral(Derivative(log(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Tuple(Symbol('P_e', commutative=True))), Integral(Pow(Symbol('P_e', commutative=True), Integer(-1)), Tuple(Symbol('P_e', commutative=True))))"]], "EE prompt": "Given \\log{(P_{e})} = W{(P_{e})}, then derive \\frac{1}{P_{e}} = \\frac{d}{d P_{e}} W{(P_{e})}, then obtain \\int \\frac{1}{P_{e}} dP_{e} = \\int \\frac{d}{d P_{e}} \\log{(P_{e})} dP_{e}", "EE derivation": "\\log{(P_{e})} = W{(P_{e})} and \\frac{d}{d P_{e}} \\log{(P_{e})} = \\frac{d}{d P_{e}} W{(P_{e})} and \\frac{1}{P_{e}} = \\frac{d}{d P_{e}} W{(P_{e})} and \\frac{1}{P_{e}} = \\frac{d}{d P_{e}} \\log{(P_{e})} and \\int \\frac{1}{P_{e}} dP_{e} = \\int \\frac{d}{d P_{e}} \\log{(P_{e})} dP_{e}", "EE srepr_derivation": [["premise", "Equality(log(Symbol('P_e', commutative=True)), Function('W')(Symbol('P_e', commutative=True)))"], [["differentiate", 1, "Symbol('P_e', commutative=True)"], "Equality(Derivative(log(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(Function('W')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Pow(Symbol('P_e', commutative=True), Integer(-1)), Derivative(Function('W')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 3, 2], "Equality(Pow(Symbol('P_e', commutative=True), Integer(-1)), Derivative(log(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["integrate", 4, "Symbol('P_e', commutative=True)"], "Equality(Integral(Pow(Symbol('P_e', commutative=True), Integer(-1)), Tuple(Symbol('P_e', commutative=True))), Integral(Derivative(log(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Tuple(Symbol('P_e', commutative=True))))"]], "AG prompt": "Given W{(P_{e})} = \\log{(P_{e})}, then derive \\frac{d}{d P_{e}} W{(P_{e})} = \\frac{1}{P_{e}}, then obtain - P_{e} + \\frac{d}{d P_{e}} \\log{(P_{e})} = - P_{e} + \\frac{1}{P_{e}}", "AG derivation": "W{(P_{e})} = \\log{(P_{e})} and \\frac{d}{d P_{e}} W{(P_{e})} = \\frac{d}{d P_{e}} \\log{(P_{e})} and \\frac{d}{d P_{e}} W{(P_{e})} = \\frac{1}{P_{e}} and \\frac{d}{d P_{e}} \\log{(P_{e})} = \\frac{1}{P_{e}} and - P_{e} + \\frac{d}{d P_{e}} \\log{(P_{e})} = - P_{e} + \\frac{1}{P_{e}}", "AG srepr_derivation": [["premise", "Equality(Function('W')(Symbol('P_e', commutative=True)), log(Symbol('P_e', commutative=True)))"], [["differentiate", 1, "Symbol('P_e', commutative=True)"], "Equality(Derivative(Function('W')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(log(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('W')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Pow(Symbol('P_e', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(log(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Pow(Symbol('P_e', commutative=True), Integer(-1)))"], [["minus", 4, "Symbol('P_e', commutative=True)"], "Equality(Add(Mul(Integer(-1), Symbol('P_e', commutative=True)), Derivative(log(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1)))), Add(Mul(Integer(-1), Symbol('P_e', commutative=True)), Pow(Symbol('P_e', commutative=True), Integer(-1))))"]], "SR prompt": "Given W{(P_{e})} = \\log{(P_{e})}, then obtain \\int \\frac{d}{d P_{e}} \\log{(P_{e})} dP_{e} = \\int \\frac{1}{P_{e}} dP_{e}", "SR derivation": "W{(P_{e})} = \\log{(P_{e})} and \\frac{d}{d P_{e}} W{(P_{e})} = \\frac{d}{d P_{e}} \\log{(P_{e})} and \\frac{d}{d P_{e}} W{(P_{e})} = \\frac{1}{P_{e}} and \\frac{d}{d P_{e}} \\log{(P_{e})} = \\frac{1}{P_{e}} and \\int \\frac{d}{d P_{e}} \\log{(P_{e})} dP_{e} = \\int \\frac{1}{P_{e}} dP_{e}", "SR srepr_derivation": [["premise", "Equality(Function('W')(Symbol('P_e', commutative=True)), log(Symbol('P_e', commutative=True)))"], [["differentiate", 1, "Symbol('P_e', commutative=True)"], "Equality(Derivative(Function('W')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(log(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('W')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Pow(Symbol('P_e', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(log(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Pow(Symbol('P_e', commutative=True), Integer(-1)))"], [["integrate", 4, "Symbol('P_e', commutative=True)"], "Equality(Integral(Derivative(log(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True), Integer(1))), Tuple(Symbol('P_e', commutative=True))), Integral(Pow(Symbol('P_e', commutative=True), Integer(-1)), Tuple(Symbol('P_e', commutative=True))))"]], "VR prompt": "Given \\alpha{(\\zeta)} = \\log{(\\zeta)}, then derive \\frac{d}{d \\zeta} \\alpha{(\\zeta)} = \\frac{1}{\\zeta}, then obtain \\int \\frac{d}{d \\zeta} \\log{(\\zeta)} d\\zeta = \\int \\frac{1}{\\zeta} d\\zeta", "VR derivation": "\\alpha{(\\zeta)} = \\log{(\\zeta)} and \\frac{d}{d \\zeta} \\alpha{(\\zeta)} = \\frac{d}{d \\zeta} \\log{(\\zeta)} and \\frac{d}{d \\zeta} \\alpha{(\\zeta)} = \\frac{1}{\\zeta} and \\frac{d}{d \\zeta} \\log{(\\zeta)} = \\frac{1}{\\zeta} and \\int \\frac{d}{d \\zeta} \\log{(\\zeta)} d\\zeta = \\int \\frac{1}{\\zeta} d\\zeta", "VR srepr_derivation": [["premise", "Equality(Function('\\\\alpha')(Symbol('\\\\zeta', commutative=True)), log(Symbol('\\\\zeta', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\zeta', commutative=True)"], "Equality(Derivative(Function('\\\\alpha')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Derivative(log(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\alpha')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Pow(Symbol('\\\\zeta', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(log(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Pow(Symbol('\\\\zeta', commutative=True), Integer(-1)))"], [["integrate", 4, "Symbol('\\\\zeta', commutative=True)"], "Equality(Integral(Derivative(log(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Tuple(Symbol('\\\\zeta', commutative=True))), Integral(Pow(Symbol('\\\\zeta', commutative=True), Integer(-1)), Tuple(Symbol('\\\\zeta', commutative=True))))"]], "static_flan-t5-large": "{ (P_ { e } ) } = \\ log { (P_ { e } ) } and \\ frac { d } { d P_ { e } } W { (P_ { e } ) } = \\ frac { d } { d P_ { e } } \\ log { (P_ { e } ) } and \\ frac { d } { d P_ { e } } W { (P_ { e } ) } = \\ frac { 1 } { P_ { e } } and \\ frac { d } { d P_ { e } } \\ log { (P_ { e } ) } = \\ frac { 1 } { P_ { e } } and \\ int \\ frac { d } { d P_ { e } } \\ log { (P_ { e } ) } dP_ { e } = \\ int \\ frac { 1 } { P_ { e } } dP_ { e }", "VR_flan-t5-large": "alpha { ( \\ zeta) } = \\ log { ( \\ zeta) } and \\ frac { d } { d \\ zeta } \\ alpha { ( \\ zeta) } = \\ frac { d } { d \\ zeta } \\ log { ( \\ zeta) } and \\ frac { d } { d \\ zeta } \\ alpha { ( \\ zeta) } = \\ frac { 1 } { \\ zeta } and \\ frac { d } { d \\ zeta } \\ log { ( \\ zeta) } = \\ frac { 1 } { \\ zeta } and \\ int \\ frac { d } { d \\ zeta } \\ log { ( \\ zeta) } d \\ zeta = \\ int \\ frac { 1 } { \\ zeta } d \\ zeta", "EE_flan-t5-large": "log { (P_ { e } ) } = W { (P_ { e } ) } and \\ frac { d } { d P_ { e } } \\ log { (P_ { e } ) } = \\ frac { d } { d P_ { e } } W { (P_ { e } ) } and \\ frac { 1 } { P_ { e } } = \\ frac { d } { d P_ { e } } W { (P_ { e } ) } and \\ frac { 1 } { P_ { e } } = \\ frac { d } { d P_ { e } } \\ log { (P_ { e } ) } and \\ int \\ frac { 1 } { P_ { e } } dP_ { e } = \\ int \\ frac { d } { d P_ { e } } \\ log { (P_ { e } ) } dP_ { e }", "AG_flan-t5-large": "{ (P_ { e } ) } = \\ log { (P_ { e } ) } and \\ frac { d } { d P_ { e } } W { (P_ { e } ) } = \\ frac { d } { d P_ { e } } \\ log { (P_ { e } ) } and \\ frac { d } { d P_ { e } } W { (P_ { e } ) } = \\ frac { 1 } { P_ { e } } and - P_ { e } + \\ frac { d } { d P_ { e } } W { (P_ { e } ) } = - P_ { e } + \\ frac { 1 } { P_ { e } } and - P_ { e } + \\ frac { d } { d P_ { e } } \\ log { (P_ { e } ) } = - P_ { e } + \\ frac { 1 } { P_ { e } }", "SR_flan-t5-large": "{ (P_ { e } ) } = \\ log { (P_ { e } ) } and \\ frac { d } { d P_ { e } } W { (P_ { e } ) } = \\ frac { d } { d P_ { e } } \\ log { (P_ { e } ) } and \\ int \\ frac { d } { d P_ { e } } W { (P_ { e } ) } dP_ { e } = \\ int \\ frac { d } { d P_ { e } } \\ log { (P_ { e } ) } dP_ { e } and \\ int \\ frac { d } { d P_ { e } } \\ log { (P_ { e } ) } dP_ { e } = \\ int \\ frac { 1 } { P_ { e } } dP_ { e }", "static_rouge": 0.9924812030075187, "static_bleu": 0.9949367197054511, "static_bleurt": 0.6644906997680664, "static_gleu": 0.9949109414758269, "VR_rouge": -0.007518796992481258, "EE_rouge": -0.007518796992481258, "AG_rouge": 0.06015037593984962, "SR_rouge": 0.1463273568536726, "VR_rouge_abs": -0.0027061672126478253, "EE_rouge_abs": 0.007631017843115151, "AG_rouge_abs": 0.07304387155133418, "SR_rouge_abs": 0.1472868217054264, "VR_bleu": 0.001537355727019074, "EE_bleu": 0.0, "AG_bleu": 0.08390514778448255, "SR_bleu": 0.12196084356103176, "VR_bleu_abs": -0.0019029190537346863, "EE_bleu_abs": 0.00523847211988826, "AG_bleu_abs": 0.09056283819601685, "SR_bleu_abs": 0.12229255884306112, "VR_bleurt": -0.034850239753723145, "EE_bleurt": 0.005015015602111816, "AG_bleurt": -0.0915631651878357, "SR_bleurt": 0.03375720977783203, "VR_bleurt_abs": -0.028583168983459473, "EE_bleurt_abs": 0.025754332542419434, "AG_bleurt_abs": 0.03016453981399536, "SR_bleurt_abs": 0.10761672258377075, "VR_gleu": 0.0015554597482522192, "EE_gleu": 0.0, "AG_gleu": 0.08363995826239767, "SR_gleu": 0.11959287531806606, "VR_gleu_abs": -0.0022061263934714526, "EE_gleu_abs": 0.005232228968587105, "AG_gleu_abs": 0.0898639866732569, "SR_gleu_abs": 0.12020460358056262, "ratio_VR_rouge": 1.0084745762711866, "ratio_VR_bleu": 1.0046737672661672, "ratio_VR_bleurt": 0.877659416715899, "ratio_VR_gleu": 1.0051150895140666, "ratio_EE_rouge": 0.9922533606744134, "ratio_EE_bleu": 0.9946366394868974, "ratio_EE_bleurt": 0.9619291455622536, "ratio_EE_gleu": 0.9946451406649617, "ratio_AG_rouge": 0.9182899064002025, "ratio_AG_bleu": 0.9032341691406668, "ratio_AG_bleurt": 0.9558049527425099, "ratio_AG_gleu": 0.9040311229277447, "ratio_SR_rouge": 0.8527131782945736, "ratio_SR_bleu": 0.8777074411569389, "ratio_SR_bleurt": 0.864364335036978, "ratio_SR_gleu": 0.8797953964194374}, {"prompt": "Given \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} = \\int e^{\\hat{H}_l} d\\hat{H}_l, then derive 0 = (A_{y} + e^{\\hat{H}_l}) (A_{y} - \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + e^{\\hat{H}_l})^{2}, then obtain 0 = (A_{y} + e^{\\hat{H}_l}) (A_{y} + e^{\\hat{H}_l} - \\int e^{\\hat{H}_l} d\\hat{H}_l)^{2}", "derivation": "\\operatorname{E_{\\lambda}}{(\\hat{H}_l)} = \\int e^{\\hat{H}_l} d\\hat{H}_l and 0 = - \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + \\int e^{\\hat{H}_l} d\\hat{H}_l and 0 = (- \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + \\int e^{\\hat{H}_l} d\\hat{H}_l) \\int e^{\\hat{H}_l} d\\hat{H}_l and 0 = ((- \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + \\int e^{\\hat{H}_l} d\\hat{H}_l)^{2}) \\int e^{\\hat{H}_l} d\\hat{H}_l and 0 = (A_{y} + e^{\\hat{H}_l}) (A_{y} - \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + e^{\\hat{H}_l})^{2} and 0 = (A_{y} + e^{\\hat{H}_l}) (A_{y} + e^{\\hat{H}_l} - \\int e^{\\hat{H}_l} d\\hat{H}_l)^{2}", "srepr_derivation": [["premise", "Equality(Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True)), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))"], [["minus", 1, "Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))"], "Equality(Integer(0), Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["times", 2, "Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))"], "Equality(Integer(0), Mul(Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["times", 3, "Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))"], "Equality(Integer(0), Mul(Pow(Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))), Integer(2)), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["evaluate_integrals", 4], "Equality(Integer(0), Mul(Add(Symbol('A_y', commutative=True), exp(Symbol('\\\\hat{H}_l', commutative=True))), Pow(Add(Symbol('A_y', commutative=True), Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), exp(Symbol('\\\\hat{H}_l', commutative=True))), Integer(2))))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Integer(0), Mul(Add(Symbol('A_y', commutative=True), exp(Symbol('\\\\hat{H}_l', commutative=True))), Pow(Add(Symbol('A_y', commutative=True), exp(Symbol('\\\\hat{H}_l', commutative=True)), Mul(Integer(-1), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))), Integer(2))))"]], "EE prompt": "Given \\int e^{\\hat{H}_l} d\\hat{H}_l = \\operatorname{E_{\\lambda}}{(\\hat{H}_l)}, then derive (A_{y} + e^{\\hat{H}_l}) (A_{y} - \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + e^{\\hat{H}_l})^{2} = 0, then obtain (A_{y} + e^{\\hat{H}_l}) (A_{y} + e^{\\hat{H}_l} - \\int e^{\\hat{H}_l} d\\hat{H}_l)^{2} = 0", "EE derivation": "\\int e^{\\hat{H}_l} d\\hat{H}_l = \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} and - \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + \\int e^{\\hat{H}_l} d\\hat{H}_l = 0 and (- \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + \\int e^{\\hat{H}_l} d\\hat{H}_l) \\int e^{\\hat{H}_l} d\\hat{H}_l = 0 and ((- \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + \\int e^{\\hat{H}_l} d\\hat{H}_l)^{2}) \\int e^{\\hat{H}_l} d\\hat{H}_l = 0 and (A_{y} + e^{\\hat{H}_l}) (A_{y} - \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + e^{\\hat{H}_l})^{2} = 0 and (A_{y} + e^{\\hat{H}_l}) (A_{y} + e^{\\hat{H}_l} - \\int e^{\\hat{H}_l} d\\hat{H}_l)^{2} = 0", "EE srepr_derivation": [["premise", "Equality(Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True)))"], [["minus", 1, "Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))"], "Equality(Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))), Integer(0))"], [["times", 2, "Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))"], "Equality(Mul(Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))), Integer(0))"], [["times", 3, "Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))"], "Equality(Mul(Pow(Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))), Integer(2)), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))), Integer(0))"], [["evaluate_integrals", 4], "Equality(Mul(Add(Symbol('A_y', commutative=True), exp(Symbol('\\\\hat{H}_l', commutative=True))), Pow(Add(Symbol('A_y', commutative=True), Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), exp(Symbol('\\\\hat{H}_l', commutative=True))), Integer(2))), Integer(0))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(Mul(Add(Symbol('A_y', commutative=True), exp(Symbol('\\\\hat{H}_l', commutative=True))), Pow(Add(Symbol('A_y', commutative=True), exp(Symbol('\\\\hat{H}_l', commutative=True)), Mul(Integer(-1), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))), Integer(2))), Integer(0))"]], "AG prompt": "Given \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} = \\int e^{\\hat{H}_l} d\\hat{H}_l, then derive 0 = (A_{y} + e^{\\hat{H}_l}) (A_{y} - \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + e^{\\hat{H}_l})^{2}, then obtain 0 = (A_{y} + e^{\\hat{H}_l})^{2} (A_{y} - \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + e^{\\hat{H}_l})^{4}", "AG derivation": "\\operatorname{E_{\\lambda}}{(\\hat{H}_l)} = \\int e^{\\hat{H}_l} d\\hat{H}_l and 0 = - \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + \\int e^{\\hat{H}_l} d\\hat{H}_l and 0 = (- \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + \\int e^{\\hat{H}_l} d\\hat{H}_l) \\int e^{\\hat{H}_l} d\\hat{H}_l and 0 = ((- \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + \\int e^{\\hat{H}_l} d\\hat{H}_l)^{2}) \\int e^{\\hat{H}_l} d\\hat{H}_l and 0 = (A_{y} + e^{\\hat{H}_l}) (A_{y} - \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + e^{\\hat{H}_l})^{2} and 0 = (A_{y} + e^{\\hat{H}_l})^{2} (A_{y} - \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + e^{\\hat{H}_l})^{4}", "AG srepr_derivation": [["premise", "Equality(Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True)), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))"], [["minus", 1, "Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))"], "Equality(Integer(0), Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["times", 2, "Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))"], "Equality(Integer(0), Mul(Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["times", 3, "Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))"], "Equality(Integer(0), Mul(Pow(Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))), Integer(2)), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["evaluate_integrals", 4], "Equality(Integer(0), Mul(Add(Symbol('A_y', commutative=True), exp(Symbol('\\\\hat{H}_l', commutative=True))), Pow(Add(Symbol('A_y', commutative=True), Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), exp(Symbol('\\\\hat{H}_l', commutative=True))), Integer(2))))"], [["power", 5, 2], "Equality(Integer(0), Mul(Pow(Add(Symbol('A_y', commutative=True), exp(Symbol('\\\\hat{H}_l', commutative=True))), Integer(2)), Pow(Add(Symbol('A_y', commutative=True), Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), exp(Symbol('\\\\hat{H}_l', commutative=True))), Integer(4))))"]], "SR prompt": "Given \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} = \\int e^{\\hat{H}_l} d\\hat{H}_l, then obtain 0 = (A_{y} + e^{\\hat{H}_l}) (A_{y} + e^{\\hat{H}_l} - \\int e^{\\hat{H}_l} d\\hat{H}_l)^{2}", "SR derivation": "\\operatorname{E_{\\lambda}}{(\\hat{H}_l)} = \\int e^{\\hat{H}_l} d\\hat{H}_l and 0 = - \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + \\int e^{\\hat{H}_l} d\\hat{H}_l and 0 = (- \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + \\int e^{\\hat{H}_l} d\\hat{H}_l) \\int e^{\\hat{H}_l} d\\hat{H}_l and 0 = ((- \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + \\int e^{\\hat{H}_l} d\\hat{H}_l)^{2}) \\int e^{\\hat{H}_l} d\\hat{H}_l and 0 = (A_{y} + e^{\\hat{H}_l}) (A_{y} - \\operatorname{E_{\\lambda}}{(\\hat{H}_l)} + e^{\\hat{H}_l})^{2} and 0 = (A_{y} + e^{\\hat{H}_l}) (A_{y} + e^{\\hat{H}_l} - \\int e^{\\hat{H}_l} d\\hat{H}_l)^{2}", "SR srepr_derivation": [["premise", "Equality(Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True)), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))"], [["minus", 1, "Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))"], "Equality(Integer(0), Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["times", 2, "Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))"], "Equality(Integer(0), Mul(Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["times", 3, "Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))"], "Equality(Integer(0), Mul(Pow(Add(Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))), Integer(2)), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["evaluate_integrals", 4], "Equality(Integer(0), Mul(Add(Symbol('A_y', commutative=True), exp(Symbol('\\\\hat{H}_l', commutative=True))), Pow(Add(Symbol('A_y', commutative=True), Mul(Integer(-1), Function('E_{\\\\lambda}')(Symbol('\\\\hat{H}_l', commutative=True))), exp(Symbol('\\\\hat{H}_l', commutative=True))), Integer(2))))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Integer(0), Mul(Add(Symbol('A_y', commutative=True), exp(Symbol('\\\\hat{H}_l', commutative=True))), Pow(Add(Symbol('A_y', commutative=True), exp(Symbol('\\\\hat{H}_l', commutative=True)), Mul(Integer(-1), Integral(exp(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))), Integer(2))))"]], "VR prompt": "Given \\xi{(\\zeta)} = \\int e^{\\zeta} d\\zeta, then derive 0 = (\\alpha + e^{\\zeta}) (\\alpha - \\xi{(\\zeta)} + e^{\\zeta})^{2}, then obtain 0 = (\\alpha + e^{\\zeta}) (\\alpha + e^{\\zeta} - \\int e^{\\zeta} d\\zeta)^{2}", "VR derivation": "\\xi{(\\zeta)} = \\int e^{\\zeta} d\\zeta and 0 = - \\xi{(\\zeta)} + \\int e^{\\zeta} d\\zeta and 0 = (- \\xi{(\\zeta)} + \\int e^{\\zeta} d\\zeta) \\int e^{\\zeta} d\\zeta and 0 = ((- \\xi{(\\zeta)} + \\int e^{\\zeta} d\\zeta)^{2}) \\int e^{\\zeta} d\\zeta and 0 = (\\alpha + e^{\\zeta}) (\\alpha - \\xi{(\\zeta)} + e^{\\zeta})^{2} and 0 = (\\alpha + e^{\\zeta}) (\\alpha + e^{\\zeta} - \\int e^{\\zeta} d\\zeta)^{2}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\xi')(Symbol('\\\\zeta', commutative=True)), Integral(exp(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True))))"], [["minus", 1, "Function('\\\\xi')(Symbol('\\\\zeta', commutative=True))"], "Equality(Integer(0), Add(Mul(Integer(-1), Function('\\\\xi')(Symbol('\\\\zeta', commutative=True))), Integral(exp(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True)))))"], [["times", 2, "Integral(exp(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True)))"], "Equality(Integer(0), Mul(Add(Mul(Integer(-1), Function('\\\\xi')(Symbol('\\\\zeta', commutative=True))), Integral(exp(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True)))), Integral(exp(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True)))))"], [["times", 3, "Add(Mul(Integer(-1), Function('\\\\xi')(Symbol('\\\\zeta', commutative=True))), Integral(exp(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True))))"], "Equality(Integer(0), Mul(Pow(Add(Mul(Integer(-1), Function('\\\\xi')(Symbol('\\\\zeta', commutative=True))), Integral(exp(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True)))), Integer(2)), Integral(exp(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True)))))"], [["evaluate_integrals", 4], "Equality(Integer(0), Mul(Add(Symbol('\\\\alpha', commutative=True), exp(Symbol('\\\\zeta', commutative=True))), Pow(Add(Symbol('\\\\alpha', commutative=True), Mul(Integer(-1), Function('\\\\xi')(Symbol('\\\\zeta', commutative=True))), exp(Symbol('\\\\zeta', commutative=True))), Integer(2))))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Integer(0), Mul(Add(Symbol('\\\\alpha', commutative=True), exp(Symbol('\\\\zeta', commutative=True))), Pow(Add(Symbol('\\\\alpha', commutative=True), exp(Symbol('\\\\zeta', commutative=True)), Mul(Integer(-1), Integral(exp(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True))))), Integer(2))))"]], "static_flan-t5-large": "operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } = \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l and 0 = - \\ operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } + \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l and 0 = (- \\ operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } + \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l) ^ { 2 } and 0 = (A_ { y } + e ^ { \\ hat { H } _l } ) (A_ { y } - \\ operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } + e ^ { \\ hat { H } _l } ) ^ { 2 } and 0 = (A_ { y } + e ^ { \\ hat { H } _l } ) (A_ { y } + e ^ { \\ hat { H } _l } - \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l) ^ { 2 }", "VR_flan-t5-large": "xi { ( \\ zeta) } = \\ int e ^ { \\ zeta } d \\ zeta and 0 = - \\ xi { ( \\ zeta) } + \\ int e ^ { \\ zeta } d \\ zeta and 0 = \\ alpha - \\ xi { ( \\ zeta) } + e ^ { \\ zeta } and 0 = ( \\ alpha + e ^ { \\ zeta } ) ( \\ xi { ( \\ zeta) } + \\ int e ^ { \\ zeta } d \\ zeta) and 0 = ( \\ alpha + e ^ { \\ zeta } ) ( \\ xi { ( \\ zeta) } + \\ int e ^ { \\ zeta } d \\ zeta) and 0 = ( \\ alpha + e ^ { \\ zeta } ) ( \\ alpha - \\ xi { ( \\ zeta) } + e ^ { \\ zeta } ) ^ { 2 } and 0 = ( \\ alpha + e ^ { \\ zeta } ) ( \\ alpha + e ^ { \\ zeta } - \\ int e ^ { \\ zeta } d \\ zeta) ^ { 2 }", "EE_flan-t5-large": "operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } = \\ operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } and \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l = \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l and \\ operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } - \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l = 0 and A_ { y } + e ^ { \\ hat { H } _l } = A_ { y } - \\ operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } + e ^ { \\ hat { H } _l } and (A_ { y } + e ^ { \\ hat { H } _l } ) (A_ { y } - \\ operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } + e ^ { \\ hat { H } _l } ) ^ { 2 } = 0 and (A_ { y } + e ^ { \\ hat { H } _l } ) (A_ { y } + e ^ { \\ hat { H } _l } - \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l) ^ { 2 } = 0", "AG_flan-t5-large": "operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } = \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l and 0 = - \\ operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } + \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l and 0 = (- \\ operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } + \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l) ^ { 2 } and 0 = (A_ { y } + e ^ { \\ hat { H } _l } ) (- \\ operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } + \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l) ^ { 2 } and 0 = (A_ { y } + e ^ { \\ hat { H } _l } ) (A_ { y } - \\ operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } + e ^ { \\ hat { H } _l } ) ^ { 2 } and 0 = (A_ { y } + e ^ { \\ hat { H } _l } ) ^ { 2 } (A_ { y } - \\ operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } + e ^ { \\ hat { H } _l } ) ^ { 4 }", "SR_flan-t5-large": "operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } = \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l and 0 = - \\ operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } + \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l and 0 = (- \\ operatorname { E_ { \\ lambda } } { ( \\ hat { H } _l) } + \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l) ^ { 2 } and 0 = (A_ { y } + e ^ { \\ hat { H } _l } ) (A_ { y } + e ^ { \\ hat { H } _l } - \\ int e ^ { \\ hat { H } _l } d \\ hat { H } _l) ^ { 2 }", "static_rouge": 0.8340807174887891, "static_bleu": 0.7074527564470203, "static_bleurt": 0.5809949040412903, "static_gleu": 0.7408412483039348, "VR_rouge": 0.0055092889173604664, "EE_rouge": -0.007585949177877471, "AG_rouge": -0.06303862407499705, "SR_rouge": 0.11130844026106634, "VR_rouge_abs": 0.03232323232323234, "EE_rouge_abs": 0.08372093023255811, "AG_rouge_abs": 0.05178571428571421, "SR_rouge_abs": 0.12574850299401208, "VR_bleu": -0.1302510760501333, "EE_bleu": -0.0946921964724976, "AG_bleu": -0.19216116313533105, "SR_bleu": 0.2445947383162828, "VR_bleu_abs": -0.04555888445813752, "EE_bleu_abs": 0.16259540989717636, "AG_bleu_abs": 0.16936694732083613, "SR_bleu_abs": 0.27426777093384613, "VR_bleurt": -0.1678794026374817, "EE_bleurt": 0.23147830367088318, "AG_bleurt": -0.11859172582626343, "SR_bleurt": 0.09647029638290405, "VR_bleurt_abs": -0.09970173239707947, "EE_bleurt_abs": 0.04978072643280029, "AG_bleurt_abs": 0.0037351250648498535, "SR_bleurt_abs": 0.1832808256149292, "VR_gleu": -0.09873720602861791, "EE_gleu": -0.06919945725915877, "AG_gleu": -0.1605010335752598, "SR_gleu": 0.1777476255088195, "VR_gleu_abs": -0.0017597061883824483, "EE_gleu_abs": 0.16210175338950072, "AG_gleu_abs": 0.1695612212658809, "SR_gleu_abs": 0.24408014571949, "ratio_VR_rouge": 0.7714285714285714, "ratio_VR_bleu": 1.184131601546594, "ratio_VR_bleurt": 0.748365964156177, "ratio_VR_gleu": 1.005426374313129, "ratio_EE_rouge": 0.9052631578947369, "ratio_EE_bleu": 0.8278149088861303, "ratio_EE_bleurt": 0.9250947098792449, "ratio_EE_gleu": 0.8284723729388915, "ratio_AG_rouge": 0.9447619047619048, "ratio_AG_bleu": 0.8209749524203788, "ratio_AG_bleurt": 0.9956249265177557, "ratio_AG_gleu": 0.820818283910523, "ratio_SR_rouge": 0.8742514970059879, "ratio_SR_bleu": 0.7257322290661539, "ratio_SR_bleurt": 0.785317207314461, "ratio_SR_gleu": 0.75591985428051}, {"prompt": "Given \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} = \\cos{(V_{\\mathbf{B}} + \\mu_0)}, then derive \\int \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} d\\mu_0 = C_{2} + \\sin{(V_{\\mathbf{B}} + \\mu_0)}, then obtain \\int \\cos{(V_{\\mathbf{B}} + \\mu_0)} d\\mu_0 = C_{2} + \\sin{(V_{\\mathbf{B}} + \\mu_0)}", "derivation": "\\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} = \\cos{(V_{\\mathbf{B}} + \\mu_0)} and \\int \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} d\\mu_0 = \\int \\cos{(V_{\\mathbf{B}} + \\mu_0)} d\\mu_0 and \\int \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} d\\mu_0 = C_{2} + \\sin{(V_{\\mathbf{B}} + \\mu_0)} and \\int \\cos{(V_{\\mathbf{B}} + \\mu_0)} d\\mu_0 = C_{2} + \\sin{(V_{\\mathbf{B}} + \\mu_0)}", "srepr_derivation": [["premise", "Equality(Function('n_2')(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)), cos(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True))))"], [["integrate", 1, "Symbol('\\\\mu_0', commutative=True)"], "Equality(Integral(Function('n_2')(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)), Tuple(Symbol('\\\\mu_0', commutative=True))), Integral(cos(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True))), Tuple(Symbol('\\\\mu_0', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('n_2')(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)), Tuple(Symbol('\\\\mu_0', commutative=True))), Add(Symbol('C_2', commutative=True), sin(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Integral(cos(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True))), Tuple(Symbol('\\\\mu_0', commutative=True))), Add(Symbol('C_2', commutative=True), sin(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)))))"]], "EE prompt": "Given \\cos{(V_{\\mathbf{B}} + \\mu_0)} = \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)}, then derive C_{2} + \\sin{(V_{\\mathbf{B}} + \\mu_0)} = \\int \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} d\\mu_0, then obtain C_{2} + \\sin{(V_{\\mathbf{B}} + \\mu_0)} = \\int \\cos{(V_{\\mathbf{B}} + \\mu_0)} d\\mu_0", "EE derivation": "\\cos{(V_{\\mathbf{B}} + \\mu_0)} = \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} and \\int \\cos{(V_{\\mathbf{B}} + \\mu_0)} d\\mu_0 = \\int \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} d\\mu_0 and C_{2} + \\sin{(V_{\\mathbf{B}} + \\mu_0)} = \\int \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} d\\mu_0 and C_{2} + \\sin{(V_{\\mathbf{B}} + \\mu_0)} = \\int \\cos{(V_{\\mathbf{B}} + \\mu_0)} d\\mu_0", "EE srepr_derivation": [["premise", "Equality(cos(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True))), Function('n_2')(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)))"], [["integrate", 1, "Symbol('\\\\mu_0', commutative=True)"], "Equality(Integral(cos(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True))), Tuple(Symbol('\\\\mu_0', commutative=True))), Integral(Function('n_2')(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)), Tuple(Symbol('\\\\mu_0', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Add(Symbol('C_2', commutative=True), sin(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)))), Integral(Function('n_2')(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)), Tuple(Symbol('\\\\mu_0', commutative=True))))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Add(Symbol('C_2', commutative=True), sin(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)))), Integral(cos(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True))), Tuple(Symbol('\\\\mu_0', commutative=True))))"]], "AG prompt": "Given \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} = \\cos{(V_{\\mathbf{B}} + \\mu_0)}, then derive \\int \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} d\\mu_0 = C_{2} + \\sin{(V_{\\mathbf{B}} + \\mu_0)}, then obtain \\int \\cos{(V_{\\mathbf{B}} + \\mu_0)} d\\mu_0 = C_{2} + \\sin{(V_{\\mathbf{B}} + \\mu_0)}", "AG derivation": "\\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} = \\cos{(V_{\\mathbf{B}} + \\mu_0)} and \\int \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} d\\mu_0 = \\int \\cos{(V_{\\mathbf{B}} + \\mu_0)} d\\mu_0 and \\int \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} d\\mu_0 = C_{2} + \\sin{(V_{\\mathbf{B}} + \\mu_0)} and \\int \\cos{(V_{\\mathbf{B}} + \\mu_0)} d\\mu_0 = C_{2} + \\sin{(V_{\\mathbf{B}} + \\mu_0)}", "AG srepr_derivation": [["premise", "Equality(Function('n_2')(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)), cos(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True))))"], [["integrate", 1, "Symbol('\\\\mu_0', commutative=True)"], "Equality(Integral(Function('n_2')(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)), Tuple(Symbol('\\\\mu_0', commutative=True))), Integral(cos(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True))), Tuple(Symbol('\\\\mu_0', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('n_2')(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)), Tuple(Symbol('\\\\mu_0', commutative=True))), Add(Symbol('C_2', commutative=True), sin(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Integral(cos(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True))), Tuple(Symbol('\\\\mu_0', commutative=True))), Add(Symbol('C_2', commutative=True), sin(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)))))"]], "SR prompt": "Given \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} = \\cos{(V_{\\mathbf{B}} + \\mu_0)}, then obtain \\int \\cos{(V_{\\mathbf{B}} + \\mu_0)} d\\mu_0 = C_{2} + \\sin{(V_{\\mathbf{B}} + \\mu_0)}", "SR derivation": "\\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} = \\cos{(V_{\\mathbf{B}} + \\mu_0)} and \\int \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} d\\mu_0 = \\int \\cos{(V_{\\mathbf{B}} + \\mu_0)} d\\mu_0 and \\int \\operatorname{n_{2}}{(V_{\\mathbf{B}},\\mu_0)} d\\mu_0 = C_{2} + \\sin{(V_{\\mathbf{B}} + \\mu_0)} and \\int \\cos{(V_{\\mathbf{B}} + \\mu_0)} d\\mu_0 = C_{2} + \\sin{(V_{\\mathbf{B}} + \\mu_0)}", "SR srepr_derivation": [["premise", "Equality(Function('n_2')(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)), cos(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True))))"], [["integrate", 1, "Symbol('\\\\mu_0', commutative=True)"], "Equality(Integral(Function('n_2')(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)), Tuple(Symbol('\\\\mu_0', commutative=True))), Integral(cos(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True))), Tuple(Symbol('\\\\mu_0', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('n_2')(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)), Tuple(Symbol('\\\\mu_0', commutative=True))), Add(Symbol('C_2', commutative=True), sin(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Integral(cos(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True))), Tuple(Symbol('\\\\mu_0', commutative=True))), Add(Symbol('C_2', commutative=True), sin(Add(Symbol('V_{\\\\mathbf{B}}', commutative=True), Symbol('\\\\mu_0', commutative=True)))))"]], "VR prompt": "Given \\omicron{(\\beta,\\alpha)} = \\cos{(\\alpha + \\beta)}, then derive \\int \\omicron{(\\beta,\\alpha)} d\\alpha = \\gamma + \\sin{(\\alpha + \\beta)}, then obtain \\int \\cos{(\\alpha + \\beta)} d\\alpha = \\gamma + \\sin{(\\alpha + \\beta)}", "VR derivation": "\\omicron{(\\beta,\\alpha)} = \\cos{(\\alpha + \\beta)} and \\int \\omicron{(\\beta,\\alpha)} d\\alpha = \\int \\cos{(\\alpha + \\beta)} d\\alpha and \\int \\omicron{(\\beta,\\alpha)} d\\alpha = \\gamma + \\sin{(\\alpha + \\beta)} and \\int \\cos{(\\alpha + \\beta)} d\\alpha = \\gamma + \\sin{(\\alpha + \\beta)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\omicron')(Symbol('\\\\beta', commutative=True), Symbol('\\\\alpha', commutative=True)), cos(Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\beta', commutative=True))))"], [["integrate", 1, "Symbol('\\\\alpha', commutative=True)"], "Equality(Integral(Function('\\\\omicron')(Symbol('\\\\beta', commutative=True), Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Integral(cos(Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\omicron')(Symbol('\\\\beta', commutative=True), Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Add(Symbol('\\\\gamma', commutative=True), sin(Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\beta', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Integral(cos(Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True))), Add(Symbol('\\\\gamma', commutative=True), sin(Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\beta', commutative=True)))))"]], "static_flan-t5-large": "operatorname { n_ { 2 } } { (V_ { \\ mathbf { B } }, \\ mu_0) } = \\ cos { (V_ { \\ mathbf { B } } + \\ mu_0) } and \\ int \\ operatorname { n_ { 2 } } { (V_ { \\ mathbf { B } }, \\ mu_0) } d \\ mu_0 = \\ int \\ cos { (V_ { \\ mathbf { B } } + \\ mu_0) } d \\ mu_0 and \\ int \\ operatorname { n_ { 2 } } { (V_ { \\ mathbf { B } }, \\ mu_0) } d \\ mu_0 = C_ { 2 } + \\ sin { (V_ { \\ mathbf { B } } + \\ mu_0) } and \\ int \\ cos { (V_ { \\ mathbf { B } } + \\ mu_0) } d \\ mu_0 = C_ { 2 } + \\ sin { (V_ { \\ mathbf { B } } + \\ mu_0) }", "VR_flan-t5-large": "omicron { ( \\ beta, \\ alpha) } = \\ cos { ( \\ alpha + \\ beta) } and \\ int \\ omicron { ( \\ beta, \\ alpha) } d \\ alpha = \\ int \\ cos { ( \\ alpha + \\ beta) } d \\ alpha and \\ int \\ omicron { ( \\ beta, \\ alpha) } d \\ alpha = \\ gamma + \\ sin { ( \\ alpha + \\ beta) } and \\ int \\ cos { ( \\ alpha + \\ beta) } d \\ alpha = \\ gamma + \\ sin { ( \\ alpha + \\ beta) }", "EE_flan-t5-large": "cos { (V_ { \\ mathbf { B } } + \\ mu_0) } = \\ operatorname { n_ { 2 } } { (V_ { \\ mathbf { B } }, \\ mu_0) } and \\ int \\ cos { (V_ { \\ mathbf { B } } + \\ mu_0) } d \\ mu_0 = \\ int \\ operatorname { n_ { 2 } } { (V_ { \\ mathbf { B } }, \\ mu_0) } d \\ mu_0 and C_ { 2 } + \\ sin { (V_ { \\ mathbf { B } } + \\ mu_0) } = \\ int \\ operatorname { n_ { 2 } } { (V_ { \\ mathbf { B } }, \\ mu_0) } d \\ mu_0 and C_ { 2 } + \\ sin { (V_ { \\ mathbf { B } } + \\ mu_0) } = \\ int \\ cos { (V_ { \\ mathbf { B } } + \\ mu_0) } d \\ mu_0", "AG_flan-t5-large": "operatorname { n_ { 2 } } { (V_ { \\ mathbf { B } }, \\ mu_0) } = \\ cos { (V_ { \\ mathbf { B } } + \\ mu_0) } and \\ int \\ operatorname { n_ { 2 } } { (V_ { \\ mathbf { B } }, \\ mu_0) } d \\ mu_0 = \\ int \\ cos { (V_ { \\ mathbf { B } } + \\ mu_0) } d \\ mu_0 and \\ int \\ operatorname { n_ { 2 } } { (V_ { \\ mathbf { B } }, \\ mu_0) } d \\ mu_0 = C_ { 2 } + \\ sin { (V_ { \\ mathbf { B } } + \\ mu_0) } and \\ int \\ cos { (V_ { \\ mathbf { B } } + \\ mu_0) } d \\ mu_0 = C_ { 2 } + \\ sin { (V_ { \\ mathbf { B } } + \\ mu_0) }", "SR_flan-t5-large": "operatorname { n_ { 2 } } { (V_ { \\ mathbf { B } }, \\ mu_0) } = \\ cos { (V_ { \\ mathbf { B } } + \\ mu_0) } and \\ int \\ operatorname { n_ { 2 } } { (V_ { \\ mathbf { B } }, \\ mu_0) } d \\ mu_0 = \\ int \\ cos { (V_ { \\ mathbf { B } } + \\ mu_0) } d \\ mu_0 and \\ int \\ cos { (V_ { \\ mathbf { B } } + \\ mu_0) } d \\ mu_0 = C_ { 2 } + \\ sin { (V_ { \\ mathbf { B } } + \\ mu_0) }", "static_rouge": 1.0, "static_bleu": 0.995604402697384, "static_bleurt": 0.8313319087028503, "static_gleu": 0.9955849889624724, "VR_rouge": 0.0, "EE_rouge": 0.0, "AG_rouge": 0.0, "SR_rouge": 0.16030534351145043, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.0, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.16030534351145043, "VR_bleu": 0.0039031100585080747, "EE_bleu": 0.0, "AG_bleu": 0.0, "SR_bleu": 0.3129852482007266, "VR_bleu_abs": 0.0002731450810264102, "EE_bleu_abs": 0.0035635764098109757, "AG_bleu_abs": 0.0, "SR_bleu_abs": 0.31323119772999153, "VR_bleurt": -0.01052236557006836, "EE_bleurt": 0.013486921787261963, "AG_bleurt": 0.0, "SR_bleurt": 0.19405150413513184, "VR_bleurt_abs": -0.005958080291748047, "EE_bleurt_abs": 0.11057758331298828, "AG_bleurt_abs": 0.01237797737121582, "SR_bleurt_abs": 0.22051656246185303, "VR_gleu": 0.003953189799292489, "EE_gleu": 0.0, "AG_gleu": 0.0, "SR_gleu": 0.27373068432671077, "VR_gleu_abs": 4.6499561925178456e-05, "EE_gleu_abs": 0.0035021512165753776, "AG_gleu_abs": 0.0, "SR_gleu_abs": 0.2749445676274944, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 0.9983625265400455, "ratio_VR_bleurt": 0.9906792153495682, "ratio_VR_gleu": 0.99980585897187, "ratio_EE_rouge": 1.0, "ratio_EE_bleu": 0.996286868485607, "ratio_EE_bleurt": 0.8529856563099588, "ratio_EE_gleu": 0.9963529321813595, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 1.0, "ratio_AG_bleurt": 0.9858139963177651, "ratio_AG_gleu": 1.0, "ratio_SR_rouge": 0.8396946564885496, "ratio_SR_bleu": 0.6867688022700085, "ratio_SR_bleurt": 0.7472730258537915, "ratio_SR_gleu": 0.7250554323725056}, {"prompt": "Given \\operatorname{E_{n}}{(S)} = \\int e^{S} dS, then derive \\operatorname{E_{n}}{(S)} = x + e^{S}, then derive x + e^{S} = T + e^{S}, then derive \\int \\operatorname{E_{n}}{(S)} dT = \\frac{T^{2}}{2} + T e^{S} + \\psi^*, then obtain \\frac{T^{2}}{2} + T e^{S} + \\psi^* = \\frac{T^{2}}{2} + T e^{S} + t_{2}", "derivation": "\\operatorname{E_{n}}{(S)} = \\int e^{S} dS and \\operatorname{E_{n}}{(S)} = x + e^{S} and x + e^{S} = \\int e^{S} dS and x + e^{S} = T + e^{S} and \\int (x + e^{S}) dT = \\int (T + e^{S}) dT and \\int \\operatorname{E_{n}}{(S)} dT = \\int (T + e^{S}) dT and \\int \\operatorname{E_{n}}{(S)} dT = \\frac{T^{2}}{2} + T e^{S} + \\psi^* and \\frac{T^{2}}{2} + T e^{S} + \\psi^* = \\int (T + e^{S}) dT and \\frac{T^{2}}{2} + T e^{S} + \\psi^* = \\frac{T^{2}}{2} + T e^{S} + t_{2}", "srepr_derivation": [["get_premise", "Equality(Function('E_n')(Symbol('S', commutative=True)), Integral(exp(Symbol('S', commutative=True)), Tuple(Symbol('S', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('E_n')(Symbol('S', commutative=True)), Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))), Integral(exp(Symbol('S', commutative=True)), Tuple(Symbol('S', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))), Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))))"], [["integrate", 4, "Symbol('T', commutative=True)"], "Equality(Integral(Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))), Integral(Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))))"], [["substitute_RHS_for_LHS", 5, 2], "Equality(Integral(Function('E_n')(Symbol('S', commutative=True)), Tuple(Symbol('T', commutative=True))), Integral(Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))))"], [["evaluate_integrals", 6], "Equality(Integral(Function('E_n')(Symbol('S', commutative=True)), Tuple(Symbol('T', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('\\\\psi^*', commutative=True)))"], [["substitute_LHS_for_RHS", 6, 7], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('\\\\psi^*', commutative=True)), Integral(Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))))"], [["evaluate_integrals", 8], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('\\\\psi^*', commutative=True)), Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('t_2', commutative=True)))"]], "EE prompt": "Given \\int e^{S} dS = \\operatorname{E_{n}}{(S)}, then derive x + e^{S} = \\operatorname{E_{n}}{(S)}, then derive T + e^{S} = x + e^{S}, then derive \\frac{T^{2}}{2} + T e^{S} + \\psi^* = \\int \\operatorname{E_{n}}{(S)} dT, then obtain \\frac{T^{2}}{2} + T e^{S} + t_{2} = \\frac{T^{2}}{2} + T e^{S} + \\psi^*", "EE derivation": "\\int e^{S} dS = \\operatorname{E_{n}}{(S)} and x + e^{S} = \\operatorname{E_{n}}{(S)} and \\int e^{S} dS = x + e^{S} and T + e^{S} = x + e^{S} and \\int (T + e^{S}) dT = \\int (x + e^{S}) dT and \\int (T + e^{S}) dT = \\int \\operatorname{E_{n}}{(S)} dT and \\frac{T^{2}}{2} + T e^{S} + \\psi^* = \\int \\operatorname{E_{n}}{(S)} dT and \\int (T + e^{S}) dT = \\frac{T^{2}}{2} + T e^{S} + \\psi^* and \\frac{T^{2}}{2} + T e^{S} + t_{2} = \\frac{T^{2}}{2} + T e^{S} + \\psi^*", "EE srepr_derivation": [["get_premise", "Equality(Integral(exp(Symbol('S', commutative=True)), Tuple(Symbol('S', commutative=True))), Function('E_n')(Symbol('S', commutative=True)))"], [["evaluate_integrals", 1], "Equality(Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))), Function('E_n')(Symbol('S', commutative=True)))"], [["substitute_RHS_for_LHS", 1, 2], "Equality(Integral(exp(Symbol('S', commutative=True)), Tuple(Symbol('S', commutative=True))), Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))))"], [["integrate", 4, "Symbol('T', commutative=True)"], "Equality(Integral(Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))), Integral(Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Integral(Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))), Integral(Function('E_n')(Symbol('S', commutative=True)), Tuple(Symbol('T', commutative=True))))"], [["evaluate_integrals", 6], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('\\\\psi^*', commutative=True)), Integral(Function('E_n')(Symbol('S', commutative=True)), Tuple(Symbol('T', commutative=True))))"], [["substitute_RHS_for_LHS", 6, 7], "Equality(Integral(Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('\\\\psi^*', commutative=True)))"], [["evaluate_integrals", 8], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('t_2', commutative=True)), Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('\\\\psi^*', commutative=True)))"]], "AG prompt": "Given \\operatorname{E_{n}}{(S)} = \\int e^{S} dS, then derive \\operatorname{E_{n}}{(S)} = x + e^{S}, then derive x + e^{S} = T + e^{S}, then derive \\int \\operatorname{E_{n}}{(S)} dT = \\frac{T^{2}}{2} + T e^{S} + \\psi^*, then obtain \\frac{T^{2}}{2} + T e^{S} + \\psi^* = \\frac{T^{2}}{2} + T e^{S} + \\mathbf{S}", "AG derivation": "\\operatorname{E_{n}}{(S)} = \\int e^{S} dS and \\operatorname{E_{n}}{(S)} = x + e^{S} and x + e^{S} = \\int e^{S} dS and x + e^{S} = T + e^{S} and \\int (x + e^{S}) dT = \\int (T + e^{S}) dT and \\int \\operatorname{E_{n}}{(S)} dT = \\int (T + e^{S}) dT and \\int \\operatorname{E_{n}}{(S)} dT = \\frac{T^{2}}{2} + T e^{S} + \\psi^* and \\frac{T^{2}}{2} + T e^{S} + \\psi^* = \\int (T + e^{S}) dT and \\frac{T^{2}}{2} + T e^{S} + \\psi^* = \\frac{T^{2}}{2} + T e^{S} + \\mathbf{S}", "AG srepr_derivation": [["get_premise", "Equality(Function('E_n')(Symbol('S', commutative=True)), Integral(exp(Symbol('S', commutative=True)), Tuple(Symbol('S', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('E_n')(Symbol('S', commutative=True)), Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))), Integral(exp(Symbol('S', commutative=True)), Tuple(Symbol('S', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))), Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))))"], [["integrate", 4, "Symbol('T', commutative=True)"], "Equality(Integral(Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))), Integral(Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))))"], [["substitute_RHS_for_LHS", 5, 2], "Equality(Integral(Function('E_n')(Symbol('S', commutative=True)), Tuple(Symbol('T', commutative=True))), Integral(Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))))"], [["evaluate_integrals", 6], "Equality(Integral(Function('E_n')(Symbol('S', commutative=True)), Tuple(Symbol('T', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('\\\\psi^*', commutative=True)))"], [["substitute_LHS_for_RHS", 6, 7], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('\\\\psi^*', commutative=True)), Integral(Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))))"], [["evaluate_integrals", 8], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('\\\\psi^*', commutative=True)), Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('\\\\mathbf{S}', commutative=True)))"]], "SR prompt": "Given \\operatorname{E_{n}}{(S)} = \\int e^{S} dS, then obtain \\frac{T^{2}}{2} + T e^{S} + \\psi^* = \\frac{T^{2}}{2} + T e^{S} + t_{2}", "SR derivation": "\\operatorname{E_{n}}{(S)} = \\int e^{S} dS and \\operatorname{E_{n}}{(S)} = x + e^{S} and x + e^{S} = \\int e^{S} dS and x + e^{S} = T + e^{S} and \\int (x + e^{S}) dT = \\int (T + e^{S}) dT and \\int \\operatorname{E_{n}}{(S)} dT = \\int (T + e^{S}) dT and \\int \\operatorname{E_{n}}{(S)} dT = \\frac{T^{2}}{2} + T e^{S} + \\psi^* and \\frac{T^{2}}{2} + T e^{S} + \\psi^* = \\int (T + e^{S}) dT and \\frac{T^{2}}{2} + T e^{S} + \\psi^* = \\frac{T^{2}}{2} + T e^{S} + t_{2}", "SR srepr_derivation": [["get_premise", "Equality(Function('E_n')(Symbol('S', commutative=True)), Integral(exp(Symbol('S', commutative=True)), Tuple(Symbol('S', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('E_n')(Symbol('S', commutative=True)), Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))), Integral(exp(Symbol('S', commutative=True)), Tuple(Symbol('S', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))), Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))))"], [["integrate", 4, "Symbol('T', commutative=True)"], "Equality(Integral(Add(Symbol('x', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))), Integral(Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))))"], [["substitute_RHS_for_LHS", 5, 2], "Equality(Integral(Function('E_n')(Symbol('S', commutative=True)), Tuple(Symbol('T', commutative=True))), Integral(Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))))"], [["evaluate_integrals", 6], "Equality(Integral(Function('E_n')(Symbol('S', commutative=True)), Tuple(Symbol('T', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('\\\\psi^*', commutative=True)))"], [["substitute_LHS_for_RHS", 6, 7], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('\\\\psi^*', commutative=True)), Integral(Add(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Tuple(Symbol('T', commutative=True))))"], [["evaluate_integrals", 8], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('\\\\psi^*', commutative=True)), Add(Mul(Rational(1, 2), Pow(Symbol('T', commutative=True), Integer(2))), Mul(Symbol('T', commutative=True), exp(Symbol('S', commutative=True))), Symbol('t_2', commutative=True)))"]], "VR prompt": "Given \\upsilon{(\\tau)} = \\int e^{\\tau} d\\tau, then derive \\upsilon{(\\tau)} = \\kappa + e^{\\tau}, then derive \\kappa + e^{\\tau} = \\alpha + e^{\\tau}, then derive \\int \\upsilon{(\\tau)} d\\alpha = \\frac{\\alpha^{2}}{2} + \\alpha e^{\\tau} + \\iota, then obtain \\frac{\\alpha^{2}}{2} + \\alpha e^{\\tau} + \\iota = \\frac{\\alpha^{2}}{2} + \\alpha e^{\\tau} + \\xi", "VR derivation": "\\upsilon{(\\tau)} = \\int e^{\\tau} d\\tau and \\upsilon{(\\tau)} = \\kappa + e^{\\tau} and \\kappa + e^{\\tau} = \\int e^{\\tau} d\\tau and \\kappa + e^{\\tau} = \\alpha + e^{\\tau} and \\int (\\kappa + e^{\\tau}) d\\alpha = \\int (\\alpha + e^{\\tau}) d\\alpha and \\int \\upsilon{(\\tau)} d\\alpha = \\int (\\alpha + e^{\\tau}) d\\alpha and \\int \\upsilon{(\\tau)} d\\alpha = \\frac{\\alpha^{2}}{2} + \\alpha e^{\\tau} + \\iota and \\frac{\\alpha^{2}}{2} + \\alpha e^{\\tau} + \\iota = \\int (\\alpha + e^{\\tau}) d\\alpha and \\frac{\\alpha^{2}}{2} + \\alpha e^{\\tau} + \\iota = \\frac{\\alpha^{2}}{2} + \\alpha e^{\\tau} + \\xi", "VR srepr_derivation": [["get_premise", "Equality(Function('\\\\upsilon')(Symbol('\\\\tau', commutative=True)), Integral(exp(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\upsilon')(Symbol('\\\\tau', commutative=True)), Add(Symbol('\\\\kappa', commutative=True), exp(Symbol('\\\\tau', commutative=True))))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(Add(Symbol('\\\\kappa', commutative=True), exp(Symbol('\\\\tau', commutative=True))), Integral(exp(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('\\\\kappa', commutative=True), exp(Symbol('\\\\tau', commutative=True))), Add(Symbol('\\\\alpha', commutative=True), exp(Symbol('\\\\tau', commutative=True))))"], [["integrate", 4, "Symbol('\\\\alpha', commutative=True)"], "Equality(Integral(Add(Symbol('\\\\kappa', commutative=True), exp(Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True))), Integral(Add(Symbol('\\\\alpha', commutative=True), exp(Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True))))"], [["substitute_RHS_for_LHS", 5, 2], "Equality(Integral(Function('\\\\upsilon')(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Integral(Add(Symbol('\\\\alpha', commutative=True), exp(Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True))))"], [["evaluate_integrals", 6], "Equality(Integral(Function('\\\\upsilon')(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\alpha', commutative=True), Integer(2))), Mul(Symbol('\\\\alpha', commutative=True), exp(Symbol('\\\\tau', commutative=True))), Symbol('\\\\iota', commutative=True)))"], [["substitute_LHS_for_RHS", 6, 7], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\alpha', commutative=True), Integer(2))), Mul(Symbol('\\\\alpha', commutative=True), exp(Symbol('\\\\tau', commutative=True))), Symbol('\\\\iota', commutative=True)), Integral(Add(Symbol('\\\\alpha', commutative=True), exp(Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True))))"], [["evaluate_integrals", 8], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\alpha', commutative=True), Integer(2))), Mul(Symbol('\\\\alpha', commutative=True), exp(Symbol('\\\\tau', commutative=True))), Symbol('\\\\iota', commutative=True)), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\alpha', commutative=True), Integer(2))), Mul(Symbol('\\\\alpha', commutative=True), exp(Symbol('\\\\tau', commutative=True))), Symbol('\\\\xi', commutative=True)))"]], "static_flan-t5-large": "operatorname { E_ { n } } { (S) } = \\ int e ^ { S } dS and \\ operatorname { E_ { n } } { (S) } = x + e ^ { S } and x + e ^ { S } = \\ int e ^ { S } dS and x + e ^ { S } = T + e ^ { S } and \\ int \\ operatorname { E_ { n } } { (S) } dT = \\ frac { T ^ { 2 } } { 2 } + T e ^ { S } + \\ psi ^ * and \\ int \\ operatorname { E_ { n } } { (S) } dT = \\ frac { T ^ { 2 } } { 2 } + T e ^ { S } + \\ psi ^ * and \\ frac { T ^ { 2 } } { 2 } + T e ^ { S } + \\ psi ^ * = \\ frac { T ^ { 2 } } { 2 } + T e ^ { S } + t_ { 2 }", "VR_flan-t5-large": "e ^ { \\ tau } = \\ int e ^ { \\ tau } d \\ tau and \\ int \\ e ^ { \\ tau } d \\ alpha = \\ int ( \\ int e ^ { \\ tau } d \\ omega) d \\ alpha and \\ kappa + e ^ { \\ tau } = \\ int e ^ { \\ tau } d \\ alpha and \\ kappa + e ^ { \\ tau } = \\ int ( \\ int e ^ { \\ tau } d \\ alpha and \\ int \\ e ^ { \\ tau } d \\ alpha = \\ frac { \\ int ( \\ int e ^ { \\ tau } d \\ alpha) ^ { 2 } } { 2 } + \\ int e ^ { \\ tau } d \\ alpha and \\ int \\ e ^ { \\ tau } d \\ alpha = \\ frac { \\ alpha ^ { 2 } } { 2 } + \\ alpha e ^ { \\ tau } + \\ iota and \\ int \\ e ^ { \\ tau } d \\ alpha = \\ frac { \\ alpha ^ { 2 } } { 2 } + \\ alpha e ^ { \\ tau } + \\ iota and \\ frac { \\ alpha ^ { 2 } } { 2 } + \\ alpha e ^ { \\ tau } + \\ iota = \\ frac { \\ alpha ^ { 2 } } { 2 } + \\ alpha e ^ { \\ tau } + \\ xi", "EE_flan-t5-large": "operatorname { E_ { n } } { (S) } = \\ operatorname { E_ { n } } { (S) } and \\ int e ^ { S } dS = \\ int \\ operatorname { E_ { n } } { (S) } dS and \\ int e ^ { S } dS = \\ operatorname { E_ { n } } { (S) } and x + e ^ { S } = \\ operatorname { E_ { n } } { (S) } and T + e ^ { S } = x + e ^ { S } and \\ int e ^ { S } dT = \\ int \\ operatorname { E_ { n } } { (S) } dT and T + e ^ { S } = \\ operatorname { E_ { n } } { (S) } and T + e ^ { S } = \\ int \\ operatorname { E_ { n } } { (S) } dT and \\ frac { T ^ { 2 } } { 2 } + T e ^ { S } + \\ psi ^ * = \\ int \\ operatorname { E_ { n } } { (S) } dT and \\ frac { T ^ { 2 } } { 2 } + T e ^ { S } + t_ { 2 } = \\ frac { T ^ { 2 } } { 2 } + T e ^ { S } + \\ psi ^ *", "AG_flan-t5-large": "operatorname { E_ { n } } { (S) } = \\ int e ^ { S } dS and \\ operatorname { E_ { n } } { (S) } = x + e ^ { S } and x + e ^ { S } = \\ int e ^ { S } dS and x + e ^ { S } = T + e ^ { S } and \\ int \\ operatorname { E_ { n } } { (S) } dT = \\ frac { T ^ { 2 } } { 2 } + T e ^ { S } + \\ psi ^ * and \\ int \\ operatorname { E_ { n } } { (S) } dT = \\ frac { T ^ { 2 } } { 2 } + T e ^ { S } + \\ psi ^ * and \\ frac { T ^ { 2 } } { 2 } + T e ^ { S } + \\ psi ^ * = \\ frac { T ^ { 2 } } { 2 } + T e ^ { S } + \\ mathbf { S }", "SR_flan-t5-large": "operatorname { E_ { n } } { (S) } = \\ int e ^ { S } dS and T \\ operatorname { E_ { n } } { (S) } = T \\ int e ^ { S } dS and T e ^ { S } + \\ int e ^ { S } dS = T e ^ { S } + \\ int e ^ { S } dS and \\ frac { T e ^ { S } + \\ int e ^ { S } dS } { \\ int e ^ { S } dS } = \\ frac { T e ^ { S } + \\ int e ^ { S } dS } { \\ int e ^ { S } dS } and \\ frac { T ^ { 2 } } { 2 } + T e ^ { S } + \\ psi ^ * = \\ frac { T ^ { 2 } } { 2 } + T e ^ { S } + t_ { 2 }", "static_rouge": 0.853932584269663, "static_bleu": 0.773216942786215, "static_bleurt": 0.6420783996582031, "static_gleu": 0.7926829268292683, "VR_rouge": 0.13472076160956448, "EE_rouge": 0.0990306234853493, "AG_rouge": 0.0, "SR_rouge": 0.2743871297242084, "VR_rouge_abs": 0.01165166491799656, "EE_rouge_abs": 0.2386813186813187, "AG_rouge_abs": 0.005641025641025643, "SR_rouge_abs": 0.4155844155844156, "VR_bleu": 0.013864567768280045, "EE_bleu": 0.0433964297186199, "AG_bleu": 0.0, "SR_bleu": 0.2529252765964658, "VR_bleu_abs": 0.0796232058281734, "EE_bleu_abs": 0.30468621574083876, "AG_bleu_abs": 0.004201036901141597, "SR_bleu_abs": 0.37247526585770196, "VR_bleurt": 0.26408153772354126, "EE_bleurt": 0.1507118046283722, "AG_bleurt": -0.0009305477142333984, "SR_bleurt": 0.5402527526021004, "VR_bleurt_abs": -0.11984632816165686, "EE_bleurt_abs": 0.0566367506980896, "AG_bleurt_abs": 0.13806307315826416, "SR_bleurt_abs": 0.44345349073410034, "VR_gleu": 0.027029975129804984, "EE_gleu": 0.05969863363555106, "AG_gleu": 0.0, "SR_gleu": 0.23076923076923084, "VR_gleu_abs": 0.08451224032619381, "EE_gleu_abs": 0.3032916515230396, "AG_gleu_abs": 0.004191729901446006, "SR_gleu_abs": 0.3583138173302107, "ratio_VR_rouge": 0.8946053946053948, "ratio_VR_bleu": 0.7786684246282239, "ratio_VR_bleurt": 0.10635058103455651, "ratio_VR_gleu": 0.7881509312002586, "ratio_EE_rouge": 0.7405637840420449, "ratio_EE_bleu": 0.6769219196406437, "ratio_EE_bleurt": 0.9276089902541788, "ratio_EE_gleu": 0.6789385297680633, "ratio_AG_rouge": 0.9942438513867086, "ratio_AG_bleu": 0.9957267368999582, "ratio_AG_bleurt": 0.8310310668110051, "ratio_AG_gleu": 0.9957362747376513, "ratio_SR_rouge": 0.5844155844155844, "ratio_SR_bleu": 0.627524734142298, "ratio_SR_bleurt": 0.4572780285545048, "ratio_SR_gleu": 0.6416861826697893}, {"prompt": "Given \\operatorname{A_{x}}{(Z,\\rho)} = \\frac{\\partial}{\\partial \\rho} Z \\rho, then derive \\operatorname{A_{x}}{(Z,\\rho)} = Z, then obtain \\frac{\\partial}{\\partial Z} \\int (2 Z + \\rho) d\\rho = \\frac{\\partial}{\\partial Z} \\int (Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho) d\\rho", "derivation": "\\operatorname{A_{x}}{(Z,\\rho)} = \\frac{\\partial}{\\partial \\rho} Z \\rho and \\operatorname{A_{x}}{(Z,\\rho)} = Z and Z + \\operatorname{A_{x}}{(Z,\\rho)} = Z + \\frac{\\partial}{\\partial \\rho} Z \\rho and Z + \\rho + \\operatorname{A_{x}}{(Z,\\rho)} = Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho and \\int (Z + \\rho + \\operatorname{A_{x}}{(Z,\\rho)}) d\\rho = \\int (Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho) d\\rho and \\int (2 Z + \\rho) d\\rho = \\int (Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho) d\\rho and \\frac{\\partial}{\\partial Z} \\int (2 Z + \\rho) d\\rho = \\frac{\\partial}{\\partial Z} \\int (Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho) d\\rho", "srepr_derivation": [["premise", "Equality(Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1))))"], [["evaluate_derivatives", 1], "Equality(Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Symbol('Z', commutative=True))"], [["add", 1, "Symbol('Z', commutative=True)"], "Equality(Add(Symbol('Z', commutative=True), Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True))), Add(Symbol('Z', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))))"], [["add", 3, "Symbol('\\\\rho', commutative=True)"], "Equality(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True))), Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))))"], [["integrate", 4, "Symbol('\\\\rho', commutative=True)"], "Equality(Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True))), Tuple(Symbol('\\\\rho', commutative=True))), Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))), Tuple(Symbol('\\\\rho', commutative=True))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Integral(Add(Mul(Integer(2), Symbol('Z', commutative=True)), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True))), Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))), Tuple(Symbol('\\\\rho', commutative=True))))"], [["differentiate", 6, "Symbol('Z', commutative=True)"], "Equality(Derivative(Integral(Add(Mul(Integer(2), Symbol('Z', commutative=True)), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True))), Tuple(Symbol('Z', commutative=True), Integer(1))), Derivative(Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))), Tuple(Symbol('\\\\rho', commutative=True))), Tuple(Symbol('Z', commutative=True), Integer(1))))"]], "EE prompt": "Given \\frac{\\partial}{\\partial \\rho} Z \\rho = \\operatorname{A_{x}}{(Z,\\rho)}, then derive Z = \\operatorname{A_{x}}{(Z,\\rho)}, then obtain \\frac{\\partial}{\\partial Z} \\int (Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho) d\\rho = \\frac{\\partial}{\\partial Z} \\int (2 Z + \\rho) d\\rho", "EE derivation": "\\frac{\\partial}{\\partial \\rho} Z \\rho = \\operatorname{A_{x}}{(Z,\\rho)} and Z = \\operatorname{A_{x}}{(Z,\\rho)} and Z + \\frac{\\partial}{\\partial \\rho} Z \\rho = Z + \\operatorname{A_{x}}{(Z,\\rho)} and Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho = Z + \\rho + \\operatorname{A_{x}}{(Z,\\rho)} and \\int (Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho) d\\rho = \\int (Z + \\rho + \\operatorname{A_{x}}{(Z,\\rho)}) d\\rho and \\int (Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho) d\\rho = \\int (2 Z + \\rho) d\\rho and \\frac{\\partial}{\\partial Z} \\int (Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho) d\\rho = \\frac{\\partial}{\\partial Z} \\int (2 Z + \\rho) d\\rho", "EE srepr_derivation": [["premise", "Equality(Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1))), Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)))"], [["evaluate_derivatives", 1], "Equality(Symbol('Z', commutative=True), Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)))"], [["add", 1, "Symbol('Z', commutative=True)"], "Equality(Add(Symbol('Z', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))), Add(Symbol('Z', commutative=True), Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True))))"], [["add", 3, "Symbol('\\\\rho', commutative=True)"], "Equality(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))), Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True))))"], [["integrate", 4, "Symbol('\\\\rho', commutative=True)"], "Equality(Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))), Tuple(Symbol('\\\\rho', commutative=True))), Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True))), Tuple(Symbol('\\\\rho', commutative=True))))"], [["substitute_RHS_for_LHS", 5, 2], "Equality(Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))), Tuple(Symbol('\\\\rho', commutative=True))), Integral(Add(Mul(Integer(2), Symbol('Z', commutative=True)), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True))))"], [["differentiate", 6, "Symbol('Z', commutative=True)"], "Equality(Derivative(Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))), Tuple(Symbol('\\\\rho', commutative=True))), Tuple(Symbol('Z', commutative=True), Integer(1))), Derivative(Integral(Add(Mul(Integer(2), Symbol('Z', commutative=True)), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True))), Tuple(Symbol('Z', commutative=True), Integer(1))))"]], "AG prompt": "Given \\operatorname{A_{x}}{(Z,\\rho)} = \\frac{\\partial}{\\partial \\rho} Z \\rho, then derive \\operatorname{A_{x}}{(Z,\\rho)} = Z, then obtain \\int (2 Z + \\rho) d\\rho = \\int (Z + \\rho + \\operatorname{A_{x}}{(Z,\\rho)}) d\\rho", "AG derivation": "\\operatorname{A_{x}}{(Z,\\rho)} = \\frac{\\partial}{\\partial \\rho} Z \\rho and \\operatorname{A_{x}}{(Z,\\rho)} = Z and Z + \\operatorname{A_{x}}{(Z,\\rho)} = Z + \\frac{\\partial}{\\partial \\rho} Z \\rho and Z + \\rho + \\operatorname{A_{x}}{(Z,\\rho)} = Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho and \\int (Z + \\rho + \\operatorname{A_{x}}{(Z,\\rho)}) d\\rho = \\int (Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho) d\\rho and \\int (2 Z + \\rho) d\\rho = \\int (Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho) d\\rho and \\int (2 Z + \\rho) d\\rho = \\int (Z + \\rho + \\operatorname{A_{x}}{(Z,\\rho)}) d\\rho", "AG srepr_derivation": [["premise", "Equality(Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1))))"], [["evaluate_derivatives", 1], "Equality(Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Symbol('Z', commutative=True))"], [["add", 1, "Symbol('Z', commutative=True)"], "Equality(Add(Symbol('Z', commutative=True), Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True))), Add(Symbol('Z', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))))"], [["add", 3, "Symbol('\\\\rho', commutative=True)"], "Equality(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True))), Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))))"], [["integrate", 4, "Symbol('\\\\rho', commutative=True)"], "Equality(Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True))), Tuple(Symbol('\\\\rho', commutative=True))), Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))), Tuple(Symbol('\\\\rho', commutative=True))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Integral(Add(Mul(Integer(2), Symbol('Z', commutative=True)), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True))), Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))), Tuple(Symbol('\\\\rho', commutative=True))))"], [["substitute_RHS_for_LHS", 6, 5], "Equality(Integral(Add(Mul(Integer(2), Symbol('Z', commutative=True)), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True))), Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True))), Tuple(Symbol('\\\\rho', commutative=True))))"]], "SR prompt": "Given \\operatorname{A_{x}}{(Z,\\rho)} = \\frac{\\partial}{\\partial \\rho} Z \\rho, then obtain \\frac{\\partial}{\\partial Z} \\int (2 Z + \\rho) d\\rho = \\frac{\\partial}{\\partial Z} \\int (Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho) d\\rho", "SR derivation": "\\operatorname{A_{x}}{(Z,\\rho)} = \\frac{\\partial}{\\partial \\rho} Z \\rho and \\operatorname{A_{x}}{(Z,\\rho)} = Z and Z + \\operatorname{A_{x}}{(Z,\\rho)} = Z + \\frac{\\partial}{\\partial \\rho} Z \\rho and Z + \\rho + \\operatorname{A_{x}}{(Z,\\rho)} = Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho and \\int (Z + \\rho + \\operatorname{A_{x}}{(Z,\\rho)}) d\\rho = \\int (Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho) d\\rho and \\int (2 Z + \\rho) d\\rho = \\int (Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho) d\\rho and \\frac{\\partial}{\\partial Z} \\int (2 Z + \\rho) d\\rho = \\frac{\\partial}{\\partial Z} \\int (Z + \\rho + \\frac{\\partial}{\\partial \\rho} Z \\rho) d\\rho", "SR srepr_derivation": [["premise", "Equality(Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1))))"], [["evaluate_derivatives", 1], "Equality(Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Symbol('Z', commutative=True))"], [["add", 1, "Symbol('Z', commutative=True)"], "Equality(Add(Symbol('Z', commutative=True), Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True))), Add(Symbol('Z', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))))"], [["add", 3, "Symbol('\\\\rho', commutative=True)"], "Equality(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True))), Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))))"], [["integrate", 4, "Symbol('\\\\rho', commutative=True)"], "Equality(Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Function('A_x')(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True))), Tuple(Symbol('\\\\rho', commutative=True))), Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))), Tuple(Symbol('\\\\rho', commutative=True))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Integral(Add(Mul(Integer(2), Symbol('Z', commutative=True)), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True))), Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))), Tuple(Symbol('\\\\rho', commutative=True))))"], [["differentiate", 6, "Symbol('Z', commutative=True)"], "Equality(Derivative(Integral(Add(Mul(Integer(2), Symbol('Z', commutative=True)), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True))), Tuple(Symbol('Z', commutative=True), Integer(1))), Derivative(Integral(Add(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True), Derivative(Mul(Symbol('Z', commutative=True), Symbol('\\\\rho', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1)))), Tuple(Symbol('\\\\rho', commutative=True))), Tuple(Symbol('Z', commutative=True), Integer(1))))"]], "VR prompt": "Given \\zeta{(\\alpha,\\nu)} = \\frac{\\partial}{\\partial \\alpha} \\alpha \\nu, then derive \\zeta{(\\alpha,\\nu)} = \\nu, then obtain \\frac{\\partial}{\\partial \\nu} \\int (\\alpha + 2 \\nu) d\\alpha = \\frac{\\partial}{\\partial \\nu} \\int (\\alpha + \\nu + \\frac{\\partial}{\\partial \\alpha} \\alpha \\nu) d\\alpha", "VR derivation": "\\zeta{(\\alpha,\\nu)} = \\frac{\\partial}{\\partial \\alpha} \\alpha \\nu and \\zeta{(\\alpha,\\nu)} = \\nu and \\nu + \\zeta{(\\alpha,\\nu)} = \\nu + \\frac{\\partial}{\\partial \\alpha} \\alpha \\nu and \\alpha + \\nu + \\zeta{(\\alpha,\\nu)} = \\alpha + \\nu + \\frac{\\partial}{\\partial \\alpha} \\alpha \\nu and \\int (\\alpha + \\nu + \\zeta{(\\alpha,\\nu)}) d\\alpha = \\int (\\alpha + \\nu + \\frac{\\partial}{\\partial \\alpha} \\alpha \\nu) d\\alpha and \\int (\\alpha + 2 \\nu) d\\alpha = \\int (\\alpha + \\nu + \\frac{\\partial}{\\partial \\alpha} \\alpha \\nu) d\\alpha and \\frac{\\partial}{\\partial \\nu} \\int (\\alpha + 2 \\nu) d\\alpha = \\frac{\\partial}{\\partial \\nu} \\int (\\alpha + \\nu + \\frac{\\partial}{\\partial \\alpha} \\alpha \\nu) d\\alpha", "VR srepr_derivation": [["premise", "Equality(Function('\\\\zeta')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True)), Derivative(Mul(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))))"], [["evaluate_derivatives", 1], "Equality(Function('\\\\zeta')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True)), Symbol('\\\\nu', commutative=True))"], [["add", 1, "Symbol('\\\\nu', commutative=True)"], "Equality(Add(Symbol('\\\\nu', commutative=True), Function('\\\\zeta')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True))), Add(Symbol('\\\\nu', commutative=True), Derivative(Mul(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1)))))"], [["add", 3, "Symbol('\\\\alpha', commutative=True)"], "Equality(Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True), Function('\\\\zeta')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True))), Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True), Derivative(Mul(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1)))))"], [["integrate", 4, "Symbol('\\\\alpha', commutative=True)"], "Equality(Integral(Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True), Function('\\\\zeta')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True))), Integral(Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True), Derivative(Mul(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1)))), Tuple(Symbol('\\\\alpha', commutative=True))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Integral(Add(Symbol('\\\\alpha', commutative=True), Mul(Integer(2), Symbol('\\\\nu', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True))), Integral(Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True), Derivative(Mul(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1)))), Tuple(Symbol('\\\\alpha', commutative=True))))"], [["differentiate", 6, "Symbol('\\\\nu', commutative=True)"], "Equality(Derivative(Integral(Add(Symbol('\\\\alpha', commutative=True), Mul(Integer(2), Symbol('\\\\nu', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True))), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))), Derivative(Integral(Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True), Derivative(Mul(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1)))), Tuple(Symbol('\\\\alpha', commutative=True))), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))))"]], "static_flan-t5-large": "operatorname { A_ { x } } { (Z, \\ rho) } = \\ frac { \\ partial } { \\ partial \\ rho } Z \\ rho and \\ operatorname { A_ { x } } { (Z, \\ rho) } = Z and Z + \\ operatorname { A_ { x } } { (Z, \\ rho) } = Z + \\ frac { \\ partial } { \\ partial \\ rho } Z \\ rho and 2 Z + \\ rho = Z + \\ rho + \\ frac { \\ partial } { \\ partial \\ rho } Z \\ rho and \\ int (2 Z + \\ rho) d \\ rho = \\ int (Z + \\ rho + \\ frac { \\ partial } { \\ partial \\ rho } Z \\ rho) d \\ rho and \\ frac { \\ partial } { \\ partial Z } \\ int (2 Z + \\ rho) d \\ rho = \\ frac { \\ partial } { \\ partial Z } \\ int (Z + \\ rho + \\ frac { \\ partial } { \\ partial \\ rho } Z \\ rho) d \\ rho", "VR_flan-t5-large": "zeta { ( \\ alpha, \\ nu) } = \\ frac { \\ partial } { \\ partial \\ alpha } \\ alpha \\ nu and \\ zeta { ( \\ alpha, \\ nu) } = \\ nu and \\ frac { \\ partial } { \\ partial \\ alpha } \\ alpha \\ nu = \\ nu and \\ frac { \\ partial } { \\ partial \\ alpha } \\ alpha \\ nu = \\ nu and \\ frac { \\ partial } { \\ partial \\ alpha } \\ alpha \\ n + \\ frac { \\ partial } { \\ partial \\ alpha } \\ alpha \\ nu = \\ frac { \\ partial } { \\ partial \\ alpha } \\ alpha \\ n + \\ frac { \\ partial } { \\ partial \\ alpha } \\ alpha \\ frac { \\ partial } { \\ partial \\ alpha } \\ alpha \\ frac { \\ partial } { \\ partial \\ alpha } \\ alpha \\ frac { \\ partial } { \\ partial \\ alpha } \\ partial \\ alpha } \\ zeta { ( \\ alpha, \\ ) } and \\ int ( \\ int ( \\ frac { \\ partial } { \\ partial \\ alpha } \\ partial \\ alpha } \\ alpha \\ frac { \\ partial } { \\ partial \\ alpha } \\ partial \\ alpha \\ zeta { ( \\ alpha, \\ ) } d \\ alpha = \\ int ( \\ int ( \\ frac { \\ partial } { \\ partial \\ alpha } \\ partial \\ alpha } \\ alpha \\ frac { \\ partial } { \\ partial \\ alpha } \\ partial \\ alpha } \\ alpha \\ frac { \\ partial } { \\ partial \\ alpha } \\ partial \\ alpha } \\ partial \\ alpha \\ zeta { ( \\ alpha, \\ ) } d \\ alpha and \\ int ( \\ alpha + 2 \\ n) d \\ alpha = \\ int ( \\ alpha + \\ nu + \\ frac { \\ partial } { \\ partial \\ alpha } \\ alpha \\ n) d \\ alpha and \\ frac { \\ partial } { \\ partial \\ nu } \\ int ( \\ alpha + 2 \\ nu) d \\ alpha = \\ frac", "EE_flan-t5-large": "frac { \\ partial } { \\ partial \\ rho } Z \\ rho = \\ operatorname { A_ { x } } { (Z, \\ rho) } and Z = \\ operatorname { A_ { x } } { (Z, \\ rho) } and \\ frac { \\ partial } { \\ partial \\ rho } Z \\ rho = \\ operatorname { A_ { x } } { (Z, \\ rho) } and Z + \\ rho + \\ frac { \\ partial } { \\ partial \\ rho } Z \\ rho = 2 Z + \\ rho and \\ int (Z + \\ rho + \\ frac { \\ partial } { \\ partial \\ rho } Z \\ rho) d \\ rho = \\ int (2 Z + \\ rho) d \\ rho and \\ frac { \\ partial } { \\ partial Z } \\ int (Z + \\ rho + \\ frac { \\ partial } { \\ partial \\ rho } Z \\ rho) d \\ rho = \\ frac { \\ partial } { \\ partial Z } \\ int (2 Z + \\ rho) d \\ rho", "AG_flan-t5-large": "operatorname { A_ { x } } { (Z, \\ rho) } = \\ frac { \\ partial } { \\ partial \\ rho } Z \\ rho and \\ operatorname { A_ { x } } { (Z, \\ rho) } = Z and Z + \\ operatorname { A_ { x } } { (Z, \\ rho) } = 2 Z + \\ rho and \\ int (Z + \\ operatorname { A_ { x } } { (Z, \\ rho) } ) d \\ rho = \\ int (2 Z + \\ rho) d \\ rho and \\ int (2 Z + \\ rho) d \\ rho = \\ int (2 Z + \\ rho) d \\ rho", "SR_flan-t5-large": "operatorname { A_ { x } } { (Z, \\ rho) } = \\ frac { \\ partial } { \\ partial \\ rho } Z \\ rho and Z + \\ operatorname { A_ { x } } { (Z, \\ rho) } = Z + \\ rho + \\ frac { \\ partial } { \\ partial \\ rho } Z \\ rho and 2 Z + \\ rho = Z + \\ rho + \\ frac { \\ partial } { \\ partial \\ rho } Z \\ rho and \\ int (2 Z + \\ rho) d \\ rho = \\ int (Z + \\ rho + \\ frac { \\ partial } { \\ partial \\ rho } Z \\ rho) d \\ rho and \\ frac { \\ partial } { \\ partial Z } \\ int (2 Z + \\ rho) d \\ rho = \\ frac { \\ partial } { \\ partial Z } \\ int (Z + \\ rho + \\ frac { \\ partial } { \\ partial \\ rho } Z \\ rho) d \\ rho", "static_rouge": 0.8500000000000001, "static_bleu": 0.6976233255108438, "static_bleurt": 0.6171845197677612, "static_gleu": 0.7309644670050761, "VR_rouge": 0.2785714285714286, "EE_rouge": 0.02171717171717169, "AG_rouge": 0.21250000000000013, "SR_rouge": 0.035567010309278446, "VR_rouge_abs": 0.04033270558694291, "EE_rouge_abs": 0.045997118748713595, "AG_rouge_abs": 0.2458831491089556, "SR_rouge_abs": 0.04761904761904767, "VR_bleu": 0.15289275718746853, "EE_bleu": 0.019731845221728217, "AG_bleu": 0.3167543079275817, "SR_bleu": 0.07477234057433357, "VR_bleu_abs": 0.17391677736502528, "EE_bleu_abs": 0.03907602666489329, "AG_bleu_abs": 0.37491873686940624, "SR_bleu_abs": 0.09481289322156206, "VR_bleurt": 0.29715779423713684, "EE_bleurt": 0.0444527268409729, "AG_bleurt": 0.3868616372346878, "SR_bleurt": 0.07506978511810303, "VR_bleurt_abs": 0.14881258364766836, "EE_bleurt_abs": 0.06202822923660278, "AG_bleurt_abs": 0.5045564472675323, "SR_bleurt_abs": 0.1913164258003235, "VR_gleu": 0.18261685378598191, "EE_gleu": 0.016074450084602288, "AG_gleu": 0.23459423107041188, "SR_gleu": 0.05752961082910324, "VR_gleu_abs": 0.1878079391608522, "EE_gleu_abs": 0.0383042524735111, "AG_gleu_abs": 0.32093205215668585, "SR_gleu_abs": 0.092255125284738, "ratio_VR_rouge": 0.7707404103479035, "ratio_VR_bleu": 0.5624251111416624, "ratio_VR_bleurt": 130.36810244112152, "ratio_VR_gleu": 0.5621519051516227, "ratio_EE_rouge": 0.9523149135907831, "ratio_EE_bleu": 0.9590620452993891, "ratio_EE_bleurt": 0.8997423280305021, "ratio_EE_gleu": 0.9598975850985916, "ratio_AG_rouge": 0.7277722277722277, "ratio_AG_bleu": 0.572419895715182, "ratio_AG_bleurt": 0.42932155956517876, "ratio_AG_gleu": 0.6348973189131831, "ratio_SR_rouge": 0.9523809523809523, "ratio_SR_bleu": 0.9051871067784379, "ratio_SR_bleurt": 0.7836116056061376, "ratio_SR_gleu": 0.907744874715262}, {"prompt": "Given \\mathbf{p}{(\\phi)} = \\cos{(e^{\\phi})}, then derive \\int \\mathbf{p}{(\\phi)} d\\phi = \\omega + \\operatorname{Ci}{(e^{\\phi})}, then obtain \\frac{d}{d \\phi} \\iint \\mathbf{p}{(\\phi)} d\\phi d\\phi = \\frac{\\partial}{\\partial \\phi} \\int (\\omega + \\operatorname{Ci}{(e^{\\phi})}) d\\phi", "derivation": "\\mathbf{p}{(\\phi)} = \\cos{(e^{\\phi})} and \\int \\mathbf{p}{(\\phi)} d\\phi = \\int \\cos{(e^{\\phi})} d\\phi and \\iint \\mathbf{p}{(\\phi)} d\\phi d\\phi = \\iint \\cos{(e^{\\phi})} d\\phi d\\phi and \\int \\mathbf{p}{(\\phi)} d\\phi = \\omega + \\operatorname{Ci}{(e^{\\phi})} and \\int \\cos{(e^{\\phi})} d\\phi = \\omega + \\operatorname{Ci}{(e^{\\phi})} and \\iint \\cos{(e^{\\phi})} d\\phi d\\phi = \\int (\\omega + \\operatorname{Ci}{(e^{\\phi})}) d\\phi and \\frac{d}{d \\phi} \\iint \\mathbf{p}{(\\phi)} d\\phi d\\phi = \\frac{d}{d \\phi} \\iint \\cos{(e^{\\phi})} d\\phi d\\phi and \\frac{d}{d \\phi} \\iint \\mathbf{p}{(\\phi)} d\\phi d\\phi = \\frac{\\partial}{\\partial \\phi} \\int (\\omega + \\operatorname{Ci}{(e^{\\phi})}) d\\phi", "srepr_derivation": [["get_premise", "Equality(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), cos(exp(Symbol('\\\\phi', commutative=True))))"], [["integrate", 1, "Symbol('\\\\phi', commutative=True)"], "Equality(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True))))"], [["integrate", 2, "Symbol('\\\\phi', commutative=True)"], "Equality(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Add(Symbol('\\\\omega', commutative=True), Ci(exp(Symbol('\\\\phi', commutative=True)))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True))), Add(Symbol('\\\\omega', commutative=True), Ci(exp(Symbol('\\\\phi', commutative=True)))))"], [["integrate", 5, "Symbol('\\\\phi', commutative=True)"], "Equality(Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Integral(Add(Symbol('\\\\omega', commutative=True), Ci(exp(Symbol('\\\\phi', commutative=True)))), Tuple(Symbol('\\\\phi', commutative=True))))"], [["differentiate", 3, "Symbol('\\\\phi', commutative=True)"], "Equality(Derivative(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 7, 6], "Equality(Derivative(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(Integral(Add(Symbol('\\\\omega', commutative=True), Ci(exp(Symbol('\\\\phi', commutative=True)))), Tuple(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"]], "EE prompt": "Given \\cos{(e^{\\phi})} = \\mathbf{p}{(\\phi)}, then derive \\omega + \\operatorname{Ci}{(e^{\\phi})} = \\int \\mathbf{p}{(\\phi)} d\\phi, then obtain \\frac{\\partial}{\\partial \\phi} \\int (\\omega + \\operatorname{Ci}{(e^{\\phi})}) d\\phi = \\frac{d}{d \\phi} \\iint \\mathbf{p}{(\\phi)} d\\phi d\\phi", "EE derivation": "\\cos{(e^{\\phi})} = \\mathbf{p}{(\\phi)} and \\int \\cos{(e^{\\phi})} d\\phi = \\int \\mathbf{p}{(\\phi)} d\\phi and \\iint \\cos{(e^{\\phi})} d\\phi d\\phi = \\iint \\mathbf{p}{(\\phi)} d\\phi d\\phi and \\omega + \\operatorname{Ci}{(e^{\\phi})} = \\int \\mathbf{p}{(\\phi)} d\\phi and \\omega + \\operatorname{Ci}{(e^{\\phi})} = \\int \\cos{(e^{\\phi})} d\\phi and \\int (\\omega + \\operatorname{Ci}{(e^{\\phi})}) d\\phi = \\iint \\cos{(e^{\\phi})} d\\phi d\\phi and \\frac{d}{d \\phi} \\iint \\cos{(e^{\\phi})} d\\phi d\\phi = \\frac{d}{d \\phi} \\iint \\mathbf{p}{(\\phi)} d\\phi d\\phi and \\frac{\\partial}{\\partial \\phi} \\int (\\omega + \\operatorname{Ci}{(e^{\\phi})}) d\\phi = \\frac{d}{d \\phi} \\iint \\mathbf{p}{(\\phi)} d\\phi d\\phi", "EE srepr_derivation": [["get_premise", "Equality(cos(exp(Symbol('\\\\phi', commutative=True))), Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)))"], [["integrate", 1, "Symbol('\\\\phi', commutative=True)"], "Equality(Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True))), Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))))"], [["integrate", 2, "Symbol('\\\\phi', commutative=True)"], "Equality(Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Add(Symbol('\\\\omega', commutative=True), Ci(exp(Symbol('\\\\phi', commutative=True)))), Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Add(Symbol('\\\\omega', commutative=True), Ci(exp(Symbol('\\\\phi', commutative=True)))), Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True))))"], [["integrate", 5, "Symbol('\\\\phi', commutative=True)"], "Equality(Integral(Add(Symbol('\\\\omega', commutative=True), Ci(exp(Symbol('\\\\phi', commutative=True)))), Tuple(Symbol('\\\\phi', commutative=True))), Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))))"], [["differentiate", 3, "Symbol('\\\\phi', commutative=True)"], "Equality(Derivative(Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 7, 6], "Equality(Derivative(Integral(Add(Symbol('\\\\omega', commutative=True), Ci(exp(Symbol('\\\\phi', commutative=True)))), Tuple(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"]], "AG prompt": "Given \\mathbf{p}{(\\phi)} = \\cos{(e^{\\phi})}, then derive \\int \\mathbf{p}{(\\phi)} d\\phi = \\omega + \\operatorname{Ci}{(e^{\\phi})}, then obtain \\int \\mathbf{p}{(\\phi)} d\\phi = \\operatorname{Ci}{(e^{\\phi})}", "AG derivation": "\\mathbf{p}{(\\phi)} = \\cos{(e^{\\phi})} and \\int \\mathbf{p}{(\\phi)} d\\phi = \\int \\cos{(e^{\\phi})} d\\phi and \\iint \\mathbf{p}{(\\phi)} d\\phi d\\phi = \\iint \\cos{(e^{\\phi})} d\\phi d\\phi and \\int \\mathbf{p}{(\\phi)} d\\phi = \\omega + \\operatorname{Ci}{(e^{\\phi})} and \\int \\cos{(e^{\\phi})} d\\phi = \\omega + \\operatorname{Ci}{(e^{\\phi})} and \\iint \\cos{(e^{\\phi})} d\\phi d\\phi = \\int (\\omega + \\operatorname{Ci}{(e^{\\phi})}) d\\phi and \\frac{d}{d \\phi} \\iint \\mathbf{p}{(\\phi)} d\\phi d\\phi = \\frac{d}{d \\phi} \\iint \\cos{(e^{\\phi})} d\\phi d\\phi and \\int \\mathbf{p}{(\\phi)} d\\phi = \\operatorname{Ci}{(e^{\\phi})}", "AG srepr_derivation": [["get_premise", "Equality(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), cos(exp(Symbol('\\\\phi', commutative=True))))"], [["integrate", 1, "Symbol('\\\\phi', commutative=True)"], "Equality(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True))))"], [["integrate", 2, "Symbol('\\\\phi', commutative=True)"], "Equality(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Add(Symbol('\\\\omega', commutative=True), Ci(exp(Symbol('\\\\phi', commutative=True)))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True))), Add(Symbol('\\\\omega', commutative=True), Ci(exp(Symbol('\\\\phi', commutative=True)))))"], [["integrate", 5, "Symbol('\\\\phi', commutative=True)"], "Equality(Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Integral(Add(Symbol('\\\\omega', commutative=True), Ci(exp(Symbol('\\\\phi', commutative=True)))), Tuple(Symbol('\\\\phi', commutative=True))))"], [["differentiate", 3, "Symbol('\\\\phi', commutative=True)"], "Equality(Derivative(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["evaluate_derivatives", 7], "Equality(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Ci(exp(Symbol('\\\\phi', commutative=True))))"]], "SR prompt": "Given \\mathbf{p}{(\\phi)} = \\cos{(e^{\\phi})}, then obtain \\frac{d}{d \\phi} \\iint \\mathbf{p}{(\\phi)} d\\phi d\\phi = \\frac{\\partial}{\\partial \\phi} \\int (\\omega + \\operatorname{Ci}{(e^{\\phi})}) d\\phi", "SR derivation": "\\mathbf{p}{(\\phi)} = \\cos{(e^{\\phi})} and \\int \\mathbf{p}{(\\phi)} d\\phi = \\int \\cos{(e^{\\phi})} d\\phi and \\iint \\mathbf{p}{(\\phi)} d\\phi d\\phi = \\iint \\cos{(e^{\\phi})} d\\phi d\\phi and \\int \\mathbf{p}{(\\phi)} d\\phi = \\omega + \\operatorname{Ci}{(e^{\\phi})} and \\int \\cos{(e^{\\phi})} d\\phi = \\omega + \\operatorname{Ci}{(e^{\\phi})} and \\iint \\cos{(e^{\\phi})} d\\phi d\\phi = \\int (\\omega + \\operatorname{Ci}{(e^{\\phi})}) d\\phi and \\frac{d}{d \\phi} \\iint \\mathbf{p}{(\\phi)} d\\phi d\\phi = \\frac{d}{d \\phi} \\iint \\cos{(e^{\\phi})} d\\phi d\\phi and \\frac{d}{d \\phi} \\iint \\mathbf{p}{(\\phi)} d\\phi d\\phi = \\frac{\\partial}{\\partial \\phi} \\int (\\omega + \\operatorname{Ci}{(e^{\\phi})}) d\\phi", "SR srepr_derivation": [["get_premise", "Equality(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), cos(exp(Symbol('\\\\phi', commutative=True))))"], [["integrate", 1, "Symbol('\\\\phi', commutative=True)"], "Equality(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True))))"], [["integrate", 2, "Symbol('\\\\phi', commutative=True)"], "Equality(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Add(Symbol('\\\\omega', commutative=True), Ci(exp(Symbol('\\\\phi', commutative=True)))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True))), Add(Symbol('\\\\omega', commutative=True), Ci(exp(Symbol('\\\\phi', commutative=True)))))"], [["integrate", 5, "Symbol('\\\\phi', commutative=True)"], "Equality(Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Integral(Add(Symbol('\\\\omega', commutative=True), Ci(exp(Symbol('\\\\phi', commutative=True)))), Tuple(Symbol('\\\\phi', commutative=True))))"], [["differentiate", 3, "Symbol('\\\\phi', commutative=True)"], "Equality(Derivative(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(Integral(cos(exp(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 7, 6], "Equality(Derivative(Integral(Function('\\\\mathbf{p}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(Integral(Add(Symbol('\\\\omega', commutative=True), Ci(exp(Symbol('\\\\phi', commutative=True)))), Tuple(Symbol('\\\\phi', commutative=True))), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"]], "VR prompt": "Given \\zeta{(\\beta)} = \\cos{(e^{\\beta})}, then derive \\int \\zeta{(\\beta)} d\\beta = \\kappa + \\operatorname{Ci}{(e^{\\beta})}, then obtain \\frac{d}{d \\beta} \\iint \\zeta{(\\beta)} d\\beta d\\beta = \\frac{\\partial}{\\partial \\beta} \\int (\\kappa + \\operatorname{Ci}{(e^{\\beta})}) d\\beta", "VR derivation": "\\zeta{(\\beta)} = \\cos{(e^{\\beta})} and \\int \\zeta{(\\beta)} d\\beta = \\int \\cos{(e^{\\beta})} d\\beta and \\iint \\zeta{(\\beta)} d\\beta d\\beta = \\iint \\cos{(e^{\\beta})} d\\beta d\\beta and \\int \\zeta{(\\beta)} d\\beta = \\kappa + \\operatorname{Ci}{(e^{\\beta})} and \\int \\cos{(e^{\\beta})} d\\beta = \\kappa + \\operatorname{Ci}{(e^{\\beta})} and \\iint \\cos{(e^{\\beta})} d\\beta d\\beta = \\int (\\kappa + \\operatorname{Ci}{(e^{\\beta})}) d\\beta and \\frac{d}{d \\beta} \\iint \\zeta{(\\beta)} d\\beta d\\beta = \\frac{d}{d \\beta} \\iint \\cos{(e^{\\beta})} d\\beta d\\beta and \\frac{d}{d \\beta} \\iint \\zeta{(\\beta)} d\\beta d\\beta = \\frac{\\partial}{\\partial \\beta} \\int (\\kappa + \\operatorname{Ci}{(e^{\\beta})}) d\\beta", "VR srepr_derivation": [["get_premise", "Equality(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), cos(exp(Symbol('\\\\beta', commutative=True))))"], [["integrate", 1, "Symbol('\\\\beta', commutative=True)"], "Equality(Integral(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))), Integral(cos(exp(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True))))"], [["integrate", 2, "Symbol('\\\\beta', commutative=True)"], "Equality(Integral(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))), Integral(cos(exp(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))), Add(Symbol('\\\\kappa', commutative=True), Ci(exp(Symbol('\\\\beta', commutative=True)))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Integral(cos(exp(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True))), Add(Symbol('\\\\kappa', commutative=True), Ci(exp(Symbol('\\\\beta', commutative=True)))))"], [["integrate", 5, "Symbol('\\\\beta', commutative=True)"], "Equality(Integral(cos(exp(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))), Integral(Add(Symbol('\\\\kappa', commutative=True), Ci(exp(Symbol('\\\\beta', commutative=True)))), Tuple(Symbol('\\\\beta', commutative=True))))"], [["differentiate", 3, "Symbol('\\\\beta', commutative=True)"], "Equality(Derivative(Integral(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Derivative(Integral(cos(exp(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 7, 6], "Equality(Derivative(Integral(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Derivative(Integral(Add(Symbol('\\\\kappa', commutative=True), Ci(exp(Symbol('\\\\beta', commutative=True)))), Tuple(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))))"]], "static_flan-t5-large": "mathbf { p } { ( \\ phi) } = \\ cos { (e ^ { \\ phi } ) } and \\ int \\ mathbf { p } { ( \\ phi) } d \\ phi = \\ int \\ cos { (e ^ { \\ phi } ) } d \\ phi and \\ int \\ mathbf { p } { ( \\ phi) } d \\ phi = \\ omega + \\ operatorname { Ci } { (e ^ { \\ phi } ) } and \\ iint \\ mathbf { p } { ( \\ phi) } d \\ phi d \\ phi = \\ int ( \\ omega + \\ operatorname { Ci } { (e ^ { \\ phi } ) } ) d \\ phi and \\ frac { d } { d \\ phi } \\ iint \\ mathbf { p } { ( \\ phi) } d \\ phi d \\ phi = \\ frac { \\ partial } { \\ partial \\ phi } \\ int ( \\ omega + \\ operatorname { Ci } { (e ^ { \\ phi } ) } ) d \\ phi", "VR_flan-t5-large": "zeta { ( \\ beta) } = \\ cos { (e ^ { \\ beta } ) } and \\ int \\ zeta { ( \\ beta) } d \\ beta = \\ int \\ cos { (e ^ { \\ beta } ) } d \\ beta and \\ int \\ zeta { ( \\ beta) } d \\ beta = \\ kappa + \\ operatorname { Ci } { (e ^ { \\ beta } ) } and \\ iint \\ zeta { ( \\ beta) } d \\ beta d \\ beta = \\ int ( \\ kappa + \\ operatorname { Ci } { (e ^ { \\ beta } ) } ) d \\ beta and \\ frac { d } { d \\ beta } \\ iint \\ zeta { ( \\ beta) } d \\ beta d \\ beta = \\ frac { \\ partial } { \\ partial \\ beta } \\ int ( \\ kappa + \\ operatorname { Ci } { (e ^ { \\ beta } ) } ) d \\ beta", "EE_flan-t5-large": "cos { (e ^ { \\ phi } ) } = \\ mathbf { p } { ( \\ phi) } and \\ int \\ cos { (e ^ { \\ phi } ) } d \\ phi = \\ int \\ mathbf { p } { ( \\ phi) } d \\ phi and \\ int \\ cos { (e ^ { \\ phi } ) } d \\ phi = \\ int \\ mathbf { p } { ( \\ phi) } d \\ phi and \\ omega + \\ operatorname { Ci } { (e ^ { \\ phi } ) } = \\ int \\ mathbf { p } { ( \\ phi) } d \\ phi and \\ int ( \\ omega + \\ operatorname { Ci } { (e ^ { \\ phi } ) } ) d \\ phi = \\ iint \\ mathbf { p } { ( \\ phi) } d \\ phi d \\ phi and \\ frac { \\ partial } { \\ partial \\ phi } \\ int ( \\ omega + \\ operatorname { Ci } { (e ^ { \\ phi } ) } ) d \\ phi = \\ frac { d } { d \\ phi } \\ iint \\ mathbf { p } { ( \\ phi) } d \\ phi d \\ phi", "AG_flan-t5-large": "mathbf { p } { ( \\ phi) } = \\ cos { (e ^ { \\ phi } ) } and \\ int \\ mathbf { p } { ( \\ phi) } d \\ phi = \\ int \\ cos { (e ^ { \\ phi } ) } d \\ phi and \\ int \\ mathbf { p } { ( \\ phi) } d \\ phi = \\ omega + \\ operatorname { Ci } { (e ^ { \\ phi } ) } and \\ int \\ cos { (e ^ { \\ phi } ) } d \\ phi = \\ omega + \\ operatorname { Ci } { (e ^ { \\ phi } ) } and \\ int \\ mathbf { p } { ( \\ phi) } d \\ phi = \\ operatorname { Ci } { (e ^ { \\ phi } ) }", "SR_flan-t5-large": "mathbf { p } { ( \\ phi) } = \\ cos { (e ^ { \\ phi } ) } and \\ int \\ mathbf { p } { ( \\ phi) } d \\ phi = \\ int \\ cos { (e ^ { \\ phi } ) } d \\ phi and \\ iint \\ mathbf { p } { ( \\ phi) } d \\ phi d \\ phi = \\ iint \\ cos { (e ^ { \\ phi } ) } d \\ phi d \\ phi and \\ frac { d } { d \\ phi } \\ iint \\ mathbf { p } { ( \\ phi) } d \\ phi d \\ phi = \\ frac { d } { d \\ phi } \\ iint \\ cos { (e ^ { \\ phi } ) } d \\ phi d \\ phi and \\ frac { d } { d \\ phi } \\ iint \\ mathbf { p } { ( \\ phi) } d \\ phi d \\ phi = \\ frac { \\ partial } { \\ partial \\ phi } \\ int ( \\ omega + \\ operatorname { Ci } { (e ^ { \\ phi } ) } ) d \\ phi", "static_rouge": 0.7272727272727273, "static_bleu": 0.5076898164748794, "static_bleurt": 0.4440436065196991, "static_gleu": 0.5942446043165468, "VR_rouge": 0.010695187165775444, "EE_rouge": -0.05945713054717783, "AG_rouge": 0.08484848484848484, "SR_rouge": -0.0784144765187419, "VR_rouge_abs": 0.03181844768087966, "EE_rouge_abs": 0.0813365685977151, "AG_rouge_abs": 0.19596638655462184, "SR_rouge_abs": 0.22292993630573255, "VR_bleu": 0.018510377885158358, "EE_bleu": -0.13139727594606931, "AG_bleu": 0.10765023527865664, "SR_bleu": -0.08050224198247857, "VR_bleu_abs": 0.022622993556755566, "EE_bleu_abs": 0.13362051505786265, "AG_bleu_abs": 0.1868509973350413, "SR_bleu_abs": 0.19640656746684648, "VR_bleurt": -0.017329633235931396, "EE_bleurt": -0.21365651488304138, "AG_bleurt": 0.21466156840324402, "SR_bleurt": -0.10300830006599426, "VR_bleurt_abs": 0.11574198305606842, "EE_bleurt_abs": 0.051164209842681885, "AG_bleurt_abs": 0.3958835303783417, "SR_bleurt_abs": 0.23979222774505615, "VR_gleu": 0.013060992783921588, "EE_gleu": -0.09280575539568336, "AG_gleu": 0.0750446043165468, "SR_gleu": -0.05755395683453235, "VR_gleu_abs": 0.02067692093298723, "EE_gleu_abs": 0.13374890149991803, "AG_gleu_abs": 0.16981726967094612, "SR_gleu_abs": 0.19536423841059603, "ratio_VR_rouge": 0.8848920863309353, "ratio_VR_bleu": 0.9621147105781637, "ratio_VR_bleurt": 0.5630602372036712, "ratio_VR_gleu": 0.9663848887756114, "ratio_EE_rouge": 0.9153024161709744, "ratio_EE_bleu": 0.8623606896422978, "ratio_EE_bleurt": 0.9309294927114491, "ratio_EE_gleu": 0.8622881680852695, "ratio_AG_rouge": 0.7860550458715596, "ratio_AG_bleu": 0.7892499998742385, "ratio_AG_bleurt": 0.5562343283983969, "ratio_AG_gleu": 0.80948667890023, "ratio_SR_rouge": 0.7770700636942675, "ratio_SR_bleu": 0.8035934325331535, "ratio_SR_bleurt": 0.7312048852135046, "ratio_SR_gleu": 0.804635761589404}, {"prompt": "Given y{(A_{x})} = \\frac{1}{A_{x}}, then derive \\int y{(A_{x})} dA_{x} = \\varepsilon_0 + \\log{(A_{x})}, then obtain \\frac{\\partial}{\\partial x} (\\int \\frac{1}{A_{x}} dA_{x} - \\frac{x}{A_{x}}) = \\frac{\\partial}{\\partial x} (\\varepsilon_0 + \\log{(A_{x})} - \\frac{x}{A_{x}})", "derivation": "y{(A_{x})} = \\frac{1}{A_{x}} and \\int y{(A_{x})} dA_{x} = \\int \\frac{1}{A_{x}} dA_{x} and \\int y{(A_{x})} dA_{x} = \\varepsilon_0 + \\log{(A_{x})} and \\int \\frac{1}{A_{x}} dA_{x} = \\varepsilon_0 + \\log{(A_{x})} and \\int \\frac{1}{A_{x}} dA_{x} - \\frac{x}{A_{x}} = \\varepsilon_0 + \\log{(A_{x})} - \\frac{x}{A_{x}} and \\frac{\\partial}{\\partial x} (\\int \\frac{1}{A_{x}} dA_{x} - \\frac{x}{A_{x}}) = \\frac{\\partial}{\\partial x} (\\varepsilon_0 + \\log{(A_{x})} - \\frac{x}{A_{x}})", "srepr_derivation": [["renaming_premise", "Equality(Function('y')(Symbol('A_x', commutative=True)), Pow(Symbol('A_x', commutative=True), Integer(-1)))"], [["integrate", 1, "Symbol('A_x', commutative=True)"], "Equality(Integral(Function('y')(Symbol('A_x', commutative=True)), Tuple(Symbol('A_x', commutative=True))), Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('y')(Symbol('A_x', commutative=True)), Tuple(Symbol('A_x', commutative=True))), Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))), Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True))))"], [["minus", 4, "Mul(Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))"], "Equality(Add(Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))), Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True)), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))))"], [["differentiate", 5, "Symbol('x', commutative=True)"], "Equality(Derivative(Add(Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))), Tuple(Symbol('x', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True)), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))), Tuple(Symbol('x', commutative=True), Integer(1))))"]], "EE prompt": "Given \\frac{1}{A_{x}} = y{(A_{x})}, then derive \\varepsilon_0 + \\log{(A_{x})} = \\int y{(A_{x})} dA_{x}, then obtain \\frac{\\partial}{\\partial x} (\\varepsilon_0 + \\log{(A_{x})} - \\frac{x}{A_{x}}) = \\frac{\\partial}{\\partial x} (\\int \\frac{1}{A_{x}} dA_{x} - \\frac{x}{A_{x}})", "EE derivation": "\\frac{1}{A_{x}} = y{(A_{x})} and \\int \\frac{1}{A_{x}} dA_{x} = \\int y{(A_{x})} dA_{x} and \\varepsilon_0 + \\log{(A_{x})} = \\int y{(A_{x})} dA_{x} and \\varepsilon_0 + \\log{(A_{x})} = \\int \\frac{1}{A_{x}} dA_{x} and \\varepsilon_0 + \\log{(A_{x})} - \\frac{x}{A_{x}} = \\int \\frac{1}{A_{x}} dA_{x} - \\frac{x}{A_{x}} and \\frac{\\partial}{\\partial x} (\\varepsilon_0 + \\log{(A_{x})} - \\frac{x}{A_{x}}) = \\frac{\\partial}{\\partial x} (\\int \\frac{1}{A_{x}} dA_{x} - \\frac{x}{A_{x}})", "EE srepr_derivation": [["renaming_premise", "Equality(Pow(Symbol('A_x', commutative=True), Integer(-1)), Function('y')(Symbol('A_x', commutative=True)))"], [["integrate", 1, "Symbol('A_x', commutative=True)"], "Equality(Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))), Integral(Function('y')(Symbol('A_x', commutative=True)), Tuple(Symbol('A_x', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True))), Integral(Function('y')(Symbol('A_x', commutative=True)), Tuple(Symbol('A_x', commutative=True))))"], [["substitute_RHS_for_LHS", 3, 2], "Equality(Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True))), Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))))"], [["minus", 4, "Mul(Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))"], "Equality(Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True)), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))), Add(Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))))"], [["differentiate", 5, "Symbol('x', commutative=True)"], "Equality(Derivative(Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True)), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))), Tuple(Symbol('x', commutative=True), Integer(1))), Derivative(Add(Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))), Tuple(Symbol('x', commutative=True), Integer(1))))"]], "AG prompt": "Given y{(A_{x})} = \\frac{1}{A_{x}}, then derive \\int y{(A_{x})} dA_{x} = \\varepsilon_0 + \\log{(A_{x})}, then obtain \\frac{\\partial}{\\partial \\varepsilon_0} (\\int \\frac{1}{A_{x}} dA_{x} - \\frac{x}{A_{x}}) = \\frac{\\partial}{\\partial \\varepsilon_0} (\\varepsilon_0 + \\log{(A_{x})} - \\frac{x}{A_{x}})", "AG derivation": "y{(A_{x})} = \\frac{1}{A_{x}} and \\int y{(A_{x})} dA_{x} = \\int \\frac{1}{A_{x}} dA_{x} and \\int y{(A_{x})} dA_{x} = \\varepsilon_0 + \\log{(A_{x})} and \\int \\frac{1}{A_{x}} dA_{x} = \\varepsilon_0 + \\log{(A_{x})} and \\int \\frac{1}{A_{x}} dA_{x} - \\frac{x}{A_{x}} = \\varepsilon_0 + \\log{(A_{x})} - \\frac{x}{A_{x}} and \\frac{\\partial}{\\partial \\varepsilon_0} (\\int \\frac{1}{A_{x}} dA_{x} - \\frac{x}{A_{x}}) = \\frac{\\partial}{\\partial \\varepsilon_0} (\\varepsilon_0 + \\log{(A_{x})} - \\frac{x}{A_{x}})", "AG srepr_derivation": [["renaming_premise", "Equality(Function('y')(Symbol('A_x', commutative=True)), Pow(Symbol('A_x', commutative=True), Integer(-1)))"], [["integrate", 1, "Symbol('A_x', commutative=True)"], "Equality(Integral(Function('y')(Symbol('A_x', commutative=True)), Tuple(Symbol('A_x', commutative=True))), Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('y')(Symbol('A_x', commutative=True)), Tuple(Symbol('A_x', commutative=True))), Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))), Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True))))"], [["minus", 4, "Mul(Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))"], "Equality(Add(Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))), Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True)), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))))"], [["differentiate", 5, "Symbol('\\\\varepsilon_0', commutative=True)"], "Equality(Derivative(Add(Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True)), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))))"]], "SR prompt": "Given y{(A_{x})} = \\frac{1}{A_{x}}, then obtain \\frac{\\partial}{\\partial x} (\\int \\frac{1}{A_{x}} dA_{x} - \\frac{x}{A_{x}}) = \\frac{\\partial}{\\partial x} (\\varepsilon_0 + \\log{(A_{x})} - \\frac{x}{A_{x}})", "SR derivation": "y{(A_{x})} = \\frac{1}{A_{x}} and \\int y{(A_{x})} dA_{x} = \\int \\frac{1}{A_{x}} dA_{x} and \\int y{(A_{x})} dA_{x} = \\varepsilon_0 + \\log{(A_{x})} and \\int \\frac{1}{A_{x}} dA_{x} = \\varepsilon_0 + \\log{(A_{x})} and \\int \\frac{1}{A_{x}} dA_{x} - \\frac{x}{A_{x}} = \\varepsilon_0 + \\log{(A_{x})} - \\frac{x}{A_{x}} and \\frac{\\partial}{\\partial x} (\\int \\frac{1}{A_{x}} dA_{x} - \\frac{x}{A_{x}}) = \\frac{\\partial}{\\partial x} (\\varepsilon_0 + \\log{(A_{x})} - \\frac{x}{A_{x}})", "SR srepr_derivation": [["renaming_premise", "Equality(Function('y')(Symbol('A_x', commutative=True)), Pow(Symbol('A_x', commutative=True), Integer(-1)))"], [["integrate", 1, "Symbol('A_x', commutative=True)"], "Equality(Integral(Function('y')(Symbol('A_x', commutative=True)), Tuple(Symbol('A_x', commutative=True))), Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('y')(Symbol('A_x', commutative=True)), Tuple(Symbol('A_x', commutative=True))), Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))), Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True))))"], [["minus", 4, "Mul(Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))"], "Equality(Add(Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))), Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True)), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))))"], [["differentiate", 5, "Symbol('x', commutative=True)"], "Equality(Derivative(Add(Integral(Pow(Symbol('A_x', commutative=True), Integer(-1)), Tuple(Symbol('A_x', commutative=True))), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))), Tuple(Symbol('x', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\varepsilon_0', commutative=True), log(Symbol('A_x', commutative=True)), Mul(Integer(-1), Pow(Symbol('A_x', commutative=True), Integer(-1)), Symbol('x', commutative=True))), Tuple(Symbol('x', commutative=True), Integer(1))))"]], "VR prompt": "Given \\gamma{(\\zeta)} = \\frac{1}{\\zeta}, then derive \\int \\gamma{(\\zeta)} d\\zeta = \\omicron + \\log{(\\zeta)}, then obtain \\frac{\\partial}{\\partial \\beta} (- \\frac{\\beta}{\\zeta} + \\int \\frac{1}{\\zeta} d\\zeta) = \\frac{\\partial}{\\partial \\beta} (- \\frac{\\beta}{\\zeta} + \\omicron + \\log{(\\zeta)})", "VR derivation": "\\gamma{(\\zeta)} = \\frac{1}{\\zeta} and \\int \\gamma{(\\zeta)} d\\zeta = \\int \\frac{1}{\\zeta} d\\zeta and \\int \\gamma{(\\zeta)} d\\zeta = \\omicron + \\log{(\\zeta)} and \\int \\frac{1}{\\zeta} d\\zeta = \\omicron + \\log{(\\zeta)} and - \\frac{\\beta}{\\zeta} + \\int \\frac{1}{\\zeta} d\\zeta = - \\frac{\\beta}{\\zeta} + \\omicron + \\log{(\\zeta)} and \\frac{\\partial}{\\partial \\beta} (- \\frac{\\beta}{\\zeta} + \\int \\frac{1}{\\zeta} d\\zeta) = \\frac{\\partial}{\\partial \\beta} (- \\frac{\\beta}{\\zeta} + \\omicron + \\log{(\\zeta)})", "VR srepr_derivation": [["renaming_premise", "Equality(Function('\\\\gamma')(Symbol('\\\\zeta', commutative=True)), Pow(Symbol('\\\\zeta', commutative=True), Integer(-1)))"], [["integrate", 1, "Symbol('\\\\zeta', commutative=True)"], "Equality(Integral(Function('\\\\gamma')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True))), Integral(Pow(Symbol('\\\\zeta', commutative=True), Integer(-1)), Tuple(Symbol('\\\\zeta', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\gamma')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True))), Add(Symbol('\\\\omicron', commutative=True), log(Symbol('\\\\zeta', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Integral(Pow(Symbol('\\\\zeta', commutative=True), Integer(-1)), Tuple(Symbol('\\\\zeta', commutative=True))), Add(Symbol('\\\\omicron', commutative=True), log(Symbol('\\\\zeta', commutative=True))))"], [["minus", 4, "Mul(Symbol('\\\\beta', commutative=True), Pow(Symbol('\\\\zeta', commutative=True), Integer(-1)))"], "Equality(Add(Mul(Integer(-1), Symbol('\\\\beta', commutative=True), Pow(Symbol('\\\\zeta', commutative=True), Integer(-1))), Integral(Pow(Symbol('\\\\zeta', commutative=True), Integer(-1)), Tuple(Symbol('\\\\zeta', commutative=True)))), Add(Mul(Integer(-1), Symbol('\\\\beta', commutative=True), Pow(Symbol('\\\\zeta', commutative=True), Integer(-1))), Symbol('\\\\omicron', commutative=True), log(Symbol('\\\\zeta', commutative=True))))"], [["differentiate", 5, "Symbol('\\\\beta', commutative=True)"], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('\\\\beta', commutative=True), Pow(Symbol('\\\\zeta', commutative=True), Integer(-1))), Integral(Pow(Symbol('\\\\zeta', commutative=True), Integer(-1)), Tuple(Symbol('\\\\zeta', commutative=True)))), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Symbol('\\\\beta', commutative=True), Pow(Symbol('\\\\zeta', commutative=True), Integer(-1))), Symbol('\\\\omicron', commutative=True), log(Symbol('\\\\zeta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))))"]], "static_flan-t5-large": "y { (A_ { x } ) } = \\ frac { 1 } { A_ { x } } and \\ int y { (A_ { x } ) } dA_ { x } = \\ int \\ frac { 1 } { A_ { x } } dA_ { x } and \\ int y { (A_ { x } ) } dA_ { x } = \\ varepsilon_0 + \\ log { (A_ { x } ) } and \\ int \\ frac { 1 } { A_ { x } } dA_ { x } = \\ varepsilon_0 + \\ log { (A_ { x } ) } and \\ int \\ frac { 1 } { A_ { x } } dA_ { x } - \\ frac { x } { A_ { x } } = \\ varepsilon_0 + \\ log { (A_ { x } ) } - \\ frac { x } { A_ { x } } and \\ frac { \\ partial } { \\ partial x } ( \\ int \\ frac { 1 } { A_ { x } } dA_ { x } - \\ frac { x } { A_ { x } } ) = \\ frac { \\ partial } { \\ partial x } ( \\ varepsilon_0 + \\ log { (A_ { x } ) } - \\ frac { x } { A_ { x } } )", "VR_flan-t5-large": "gamma { ( \\ zeta) } = \\ frac { 1 } { \\ zeta } and \\ int \\ gamma { ( \\ zeta) } d \\ zeta = \\ int \\ frac { 1 } { \\ zeta } d \\ zeta and \\ int \\ gamma { ( \\ zeta) } d \\ zeta = \\ omicron + \\ log { ( \\ zeta) } and \\ int \\ frac { 1 } { \\ zeta } d \\ zeta = \\ omicron + \\ log { ( \\ zeta) } and - \\ frac { \\ beta } { \\ zeta } + \\ int \\ frac { 1 } { \\ zeta } d \\ zeta = - \\ frac { \\ beta } { \\ zeta } + \\ omicron + \\ log { ( \\ zeta) } and \\ frac { \\ partial } { \\ partial \\ beta } (- \\ frac { \\ beta } { \\ zeta } + \\ int \\ frac { 1 } { \\ zeta } d \\ zeta) = \\ frac { \\ partial } { \\ partial \\ beta } (- \\ frac { \\ beta } { \\ zeta } + \\ omicron + \\ log { ( \\ zeta) } )", "EE_flan-t5-large": "frac { 1 } { A_ { x } } = y { (A_ { x } ) } and \\ int \\ frac { 1 } { A_ { x } } dA_ { x } = \\ int y { (A_ { x } ) } dA_ { x } and \\ int \\ frac { 1 } { A_ { x } } dA_ { x } - \\ frac { x } { A_ { x } } = \\ int y { (A_ { x } ) } dA_ { x } and \\ varepsilon_0 + \\ log { (A_ { x } ) } = \\ int y { (A_ { x } ) } dA_ { x } and \\ varepsilon_0 + \\ log { (A_ { x } ) } - \\ frac { x } { A_ { x } } = \\ int \\ frac { 1 } { A_ { x } } dA_ { x } - \\ frac { x } { A_ { x } } and \\ frac { \\ partial } { \\ partial x } ( \\ varepsilon_0 + \\ log { (A_ { x } ) } - \\ frac { x } { A_ { x } } ) = \\ frac { \\ partial } { \\ partial x } ( \\ int \\ frac { 1 } { A_ { x } } dA_ { x } - \\ frac { x } { A_ { x } } )", "AG_flan-t5-large": "y { (A_ { x } ) } = \\ frac { 1 } { A_ { x } } and \\ int y { (A_ { x } ) } dA_ { x } = \\ int \\ frac { 1 } { A_ { x } } dA_ { x } and \\ int y { (A_ { x } ) } dA_ { x } = \\ varepsilon_0 + \\ log { (A_ { x } ) } and \\ int \\ frac { 1 } { A_ { x } } dA_ { x } = \\ varepsilon_0 + \\ log { (A_ { x } ) } and \\ int \\ frac { 1 } { A_ { x } } dA_ { x } - \\ frac { x } { A_ { x } } = \\ varepsilon_0 + \\ log { (A_ { x } ) } - \\ frac { x } { A_ { x } } and \\ frac { \\ partial } { \\ partial \\ varepsilon_0 } ( \\ int \\ frac { 1 } { A_ { x } } dA_ { x } - \\ frac { x } { A_ { x } } ) = \\ frac { \\ partial } { \\ partial \\ varepsilon_0 } ( \\ varepsilon_0 + \\ log { (A_ { x } ) } - \\ frac { x } { A_ { x } } )", "SR_flan-t5-large": "y { (A_ { x } ) } = \\ frac { 1 } { A_ { x } } and \\ int y { (A_ { x } ) } dA_ { x } = \\ int \\ frac { 1 } { A_ { x } } dA_ { x } and \\ int \\ frac { 1 } { A_ { x } } dA_ { x } - \\ frac { x } { A_ { x } } = \\ int \\ frac { 1 } { A_ { x } } dA_ { x } - \\ frac { x } { A_ { x } } and \\ frac { \\ partial } { \\ partial x } ( \\ int \\ frac { 1 } { A_ { x } } dA_ { x } - \\ frac { x } { A_ { x } } ) = \\ frac { \\ partial } { \\ partial x } ( \\ int \\ frac { 1 } { A_ { x } } dA_ { x } - \\ frac { x } { A_ { x } } ) and \\ frac { \\ partial } { \\ partial x } ( \\ int \\ frac { 1 } { A_ { x } } dA_ { x } - \\ frac { x } { A_ { x } } ) = \\ frac { \\ partial } { \\ partial x } ( \\ varepsilon_0 + \\ log { (A_ { x } ) } - \\ frac { x } { A_ { x } } )", "static_rouge": 1.0, "static_bleu": 1.0, "static_bleurt": 0.8590381145477295, "static_gleu": 1.0, "VR_rouge": 0.0, "EE_rouge": 0.06666666666666665, "AG_rouge": 0.0, "SR_rouge": 0.21212121212121215, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.03400809716599196, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.21212121212121215, "VR_bleu": 0.0043572915659156886, "EE_bleu": 0.0726075611834176, "AG_bleu": 0.0, "SR_bleu": 0.22452636882286015, "VR_bleu_abs": 0.0003356298420247872, "EE_bleu_abs": 0.06272298285292699, "AG_bleu_abs": 0.0, "SR_bleu_abs": 0.22452636882286015, "VR_bleurt": 0.08848172426223755, "EE_bleurt": 0.04918086528778076, "AG_bleurt": 0.049160003662109375, "SR_bleurt": 0.4075324237346649, "VR_bleurt_abs": -0.04737076908349991, "EE_bleurt_abs": 0.0150718092918396, "AG_bleurt_abs": 0.0, "SR_bleurt_abs": 0.4075324237346649, "VR_gleu": 0.004376367614879695, "EE_gleu": 0.07251264755480602, "AG_gleu": 0.0, "SR_gleu": 0.22267536704730828, "VR_gleu_abs": 0.0, "EE_gleu_abs": 0.06272770803405991, "AG_gleu_abs": 0.0, "SR_gleu_abs": 0.22267536704730828, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 0.9989755525840919, "ratio_VR_bleurt": 0.6004910104779734, "ratio_VR_gleu": 1.0, "ratio_EE_rouge": 0.9632867132867132, "ratio_EE_bleu": 0.9352361130759261, "ratio_EE_bleurt": 0.9797639648073546, "ratio_EE_gleu": 0.935274594257849, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 1.0, "ratio_AG_bleurt": 1.0, "ratio_AG_gleu": 1.0, "ratio_SR_rouge": 0.7878787878787878, "ratio_SR_bleu": 0.7754736311771399, "ratio_SR_bleurt": 0.5255944796474781, "ratio_SR_gleu": 0.7773246329526917}, {"prompt": "Given \\theta_{1}{(g)} = e^{g}, then derive \\frac{d}{d g} (\\int \\theta_{1}{(g)} dg)^{g} = \\frac{\\partial}{\\partial g} (\\mathbf{g} + e^{g})^{g}, then obtain \\frac{\\partial}{\\partial g} (\\mathbf{g} + \\theta_{1}{(g)})^{g} = \\frac{d}{d g} (\\int e^{g} dg)^{g}", "derivation": "\\theta_{1}{(g)} = e^{g} and \\int \\theta_{1}{(g)} dg = \\int e^{g} dg and (\\int \\theta_{1}{(g)} dg)^{g} = (\\int e^{g} dg)^{g} and \\frac{d}{d g} (\\int \\theta_{1}{(g)} dg)^{g} = \\frac{d}{d g} (\\int e^{g} dg)^{g} and \\frac{d}{d g} (\\int \\theta_{1}{(g)} dg)^{g} = \\frac{\\partial}{\\partial g} (\\mathbf{g} + e^{g})^{g} and \\frac{\\partial}{\\partial g} (\\mathbf{g} + e^{g})^{g} = \\frac{d}{d g} (\\int e^{g} dg)^{g} and \\frac{\\partial}{\\partial g} (\\mathbf{g} + \\theta_{1}{(g)})^{g} = \\frac{d}{d g} (\\int e^{g} dg)^{g}", "srepr_derivation": [["premise", "Equality(Function('\\\\theta_1')(Symbol('g', commutative=True)), exp(Symbol('g', commutative=True)))"], [["integrate", 1, "Symbol('g', commutative=True)"], "Equality(Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))))"], [["power", 2, "Symbol('g', commutative=True)"], "Equality(Pow(Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Pow(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)))"], [["differentiate", 3, "Symbol('g', commutative=True)"], "Equality(Derivative(Pow(Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["evaluate_integrals", 4], "Equality(Derivative(Pow(Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Add(Symbol('\\\\mathbf{g}', commutative=True), exp(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Derivative(Pow(Add(Symbol('\\\\mathbf{g}', commutative=True), exp(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 6, 1], "Equality(Derivative(Pow(Add(Symbol('\\\\mathbf{g}', commutative=True), Function('\\\\theta_1')(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"]], "EE prompt": "Given e^{g} = \\theta_{1}{(g)}, then derive \\frac{\\partial}{\\partial g} (\\mathbf{g} + e^{g})^{g} = \\frac{d}{d g} (\\int \\theta_{1}{(g)} dg)^{g}, then obtain \\frac{d}{d g} (\\int e^{g} dg)^{g} = \\frac{\\partial}{\\partial g} (\\mathbf{g} + \\theta_{1}{(g)})^{g}", "EE derivation": "e^{g} = \\theta_{1}{(g)} and \\int e^{g} dg = \\int \\theta_{1}{(g)} dg and (\\int e^{g} dg)^{g} = (\\int \\theta_{1}{(g)} dg)^{g} and \\frac{d}{d g} (\\int e^{g} dg)^{g} = \\frac{d}{d g} (\\int \\theta_{1}{(g)} dg)^{g} and \\frac{\\partial}{\\partial g} (\\mathbf{g} + e^{g})^{g} = \\frac{d}{d g} (\\int \\theta_{1}{(g)} dg)^{g} and \\frac{d}{d g} (\\int e^{g} dg)^{g} = \\frac{\\partial}{\\partial g} (\\mathbf{g} + e^{g})^{g} and \\frac{d}{d g} (\\int e^{g} dg)^{g} = \\frac{\\partial}{\\partial g} (\\mathbf{g} + \\theta_{1}{(g)})^{g}", "EE srepr_derivation": [["premise", "Equality(exp(Symbol('g', commutative=True)), Function('\\\\theta_1')(Symbol('g', commutative=True)))"], [["integrate", 1, "Symbol('g', commutative=True)"], "Equality(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))))"], [["power", 2, "Symbol('g', commutative=True)"], "Equality(Pow(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Pow(Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)))"], [["differentiate", 3, "Symbol('g', commutative=True)"], "Equality(Derivative(Pow(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["evaluate_integrals", 4], "Equality(Derivative(Pow(Add(Symbol('\\\\mathbf{g}', commutative=True), exp(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 4, 5], "Equality(Derivative(Pow(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Add(Symbol('\\\\mathbf{g}', commutative=True), exp(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 6, 1], "Equality(Derivative(Pow(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Add(Symbol('\\\\mathbf{g}', commutative=True), Function('\\\\theta_1')(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"]], "AG prompt": "Given \\theta_{1}{(g)} = e^{g}, then derive \\frac{d}{d g} (\\int \\theta_{1}{(g)} dg)^{g} = \\frac{\\partial}{\\partial g} (\\mathbf{g} + e^{g})^{g}, then obtain \\frac{\\partial}{\\partial g} (\\mathbf{g} + e^{g})^{g} = \\frac{\\partial}{\\partial g} (L + e^{g})^{g}", "AG derivation": "\\theta_{1}{(g)} = e^{g} and \\int \\theta_{1}{(g)} dg = \\int e^{g} dg and (\\int \\theta_{1}{(g)} dg)^{g} = (\\int e^{g} dg)^{g} and \\frac{d}{d g} (\\int \\theta_{1}{(g)} dg)^{g} = \\frac{d}{d g} (\\int e^{g} dg)^{g} and \\frac{d}{d g} (\\int \\theta_{1}{(g)} dg)^{g} = \\frac{\\partial}{\\partial g} (\\mathbf{g} + e^{g})^{g} and \\frac{\\partial}{\\partial g} (\\mathbf{g} + e^{g})^{g} = \\frac{d}{d g} (\\int e^{g} dg)^{g} and \\frac{\\partial}{\\partial g} (\\mathbf{g} + e^{g})^{g} = \\frac{\\partial}{\\partial g} (L + e^{g})^{g}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\theta_1')(Symbol('g', commutative=True)), exp(Symbol('g', commutative=True)))"], [["integrate", 1, "Symbol('g', commutative=True)"], "Equality(Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))))"], [["power", 2, "Symbol('g', commutative=True)"], "Equality(Pow(Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Pow(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)))"], [["differentiate", 3, "Symbol('g', commutative=True)"], "Equality(Derivative(Pow(Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["evaluate_integrals", 4], "Equality(Derivative(Pow(Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Add(Symbol('\\\\mathbf{g}', commutative=True), exp(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Derivative(Pow(Add(Symbol('\\\\mathbf{g}', commutative=True), exp(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["evaluate_integrals", 6], "Equality(Derivative(Pow(Add(Symbol('\\\\mathbf{g}', commutative=True), exp(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Add(Symbol('L', commutative=True), exp(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"]], "SR prompt": "Given \\theta_{1}{(g)} = e^{g}, then obtain \\frac{\\partial}{\\partial g} (\\mathbf{g} + \\theta_{1}{(g)})^{g} = \\frac{d}{d g} (\\int e^{g} dg)^{g}", "SR derivation": "\\theta_{1}{(g)} = e^{g} and \\int \\theta_{1}{(g)} dg = \\int e^{g} dg and (\\int \\theta_{1}{(g)} dg)^{g} = (\\int e^{g} dg)^{g} and \\frac{d}{d g} (\\int \\theta_{1}{(g)} dg)^{g} = \\frac{d}{d g} (\\int e^{g} dg)^{g} and \\frac{d}{d g} (\\int \\theta_{1}{(g)} dg)^{g} = \\frac{\\partial}{\\partial g} (\\mathbf{g} + e^{g})^{g} and \\frac{\\partial}{\\partial g} (\\mathbf{g} + e^{g})^{g} = \\frac{d}{d g} (\\int e^{g} dg)^{g} and \\frac{\\partial}{\\partial g} (\\mathbf{g} + \\theta_{1}{(g)})^{g} = \\frac{d}{d g} (\\int e^{g} dg)^{g}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\theta_1')(Symbol('g', commutative=True)), exp(Symbol('g', commutative=True)))"], [["integrate", 1, "Symbol('g', commutative=True)"], "Equality(Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))))"], [["power", 2, "Symbol('g', commutative=True)"], "Equality(Pow(Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Pow(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)))"], [["differentiate", 3, "Symbol('g', commutative=True)"], "Equality(Derivative(Pow(Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["evaluate_integrals", 4], "Equality(Derivative(Pow(Integral(Function('\\\\theta_1')(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Add(Symbol('\\\\mathbf{g}', commutative=True), exp(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Derivative(Pow(Add(Symbol('\\\\mathbf{g}', commutative=True), exp(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 6, 1], "Equality(Derivative(Pow(Add(Symbol('\\\\mathbf{g}', commutative=True), Function('\\\\theta_1')(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))), Derivative(Pow(Integral(exp(Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True), Integer(1))))"]], "VR prompt": "Given \\beta{(\\tau)} = e^{\\tau}, then derive \\frac{d}{d \\tau} (\\int \\beta{(\\tau)} d\\tau)^{\\tau} = \\frac{\\partial}{\\partial \\tau} (\\iota + e^{\\tau})^{\\tau}, then obtain \\frac{\\partial}{\\partial \\tau} (\\iota + \\beta{(\\tau)})^{\\tau} = \\frac{d}{d \\tau} (\\int e^{\\tau} d\\tau)^{\\tau}", "VR derivation": "\\beta{(\\tau)} = e^{\\tau} and \\int \\beta{(\\tau)} d\\tau = \\int e^{\\tau} d\\tau and (\\int \\beta{(\\tau)} d\\tau)^{\\tau} = (\\int e^{\\tau} d\\tau)^{\\tau} and \\frac{d}{d \\tau} (\\int \\beta{(\\tau)} d\\tau)^{\\tau} = \\frac{d}{d \\tau} (\\int e^{\\tau} d\\tau)^{\\tau} and \\frac{d}{d \\tau} (\\int \\beta{(\\tau)} d\\tau)^{\\tau} = \\frac{\\partial}{\\partial \\tau} (\\iota + e^{\\tau})^{\\tau} and \\frac{\\partial}{\\partial \\tau} (\\iota + e^{\\tau})^{\\tau} = \\frac{d}{d \\tau} (\\int e^{\\tau} d\\tau)^{\\tau} and \\frac{\\partial}{\\partial \\tau} (\\iota + \\beta{(\\tau)})^{\\tau} = \\frac{d}{d \\tau} (\\int e^{\\tau} d\\tau)^{\\tau}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\beta')(Symbol('\\\\tau', commutative=True)), exp(Symbol('\\\\tau', commutative=True)))"], [["integrate", 1, "Symbol('\\\\tau', commutative=True)"], "Equality(Integral(Function('\\\\beta')(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True))), Integral(exp(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True))))"], [["power", 2, "Symbol('\\\\tau', commutative=True)"], "Equality(Pow(Integral(Function('\\\\beta')(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True))), Symbol('\\\\tau', commutative=True)), Pow(Integral(exp(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True))), Symbol('\\\\tau', commutative=True)))"], [["differentiate", 3, "Symbol('\\\\tau', commutative=True)"], "Equality(Derivative(Pow(Integral(Function('\\\\beta')(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True))), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Derivative(Pow(Integral(exp(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True))), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))))"], [["evaluate_integrals", 4], "Equality(Derivative(Pow(Integral(Function('\\\\beta')(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True))), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Derivative(Pow(Add(Symbol('\\\\iota', commutative=True), exp(Symbol('\\\\tau', commutative=True))), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Derivative(Pow(Add(Symbol('\\\\iota', commutative=True), exp(Symbol('\\\\tau', commutative=True))), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Derivative(Pow(Integral(exp(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True))), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 6, 1], "Equality(Derivative(Pow(Add(Symbol('\\\\iota', commutative=True), Function('\\\\beta')(Symbol('\\\\tau', commutative=True))), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Derivative(Pow(Integral(exp(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True))), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))))"]], "static_flan-t5-large": "theta_ { 1 } { (g) } = e ^ { g } and \\ int \\ theta_ { 1 } { (g) } dg = \\ int e ^ { g } dg and ( \\ int \\ theta_ { 1 } { (g) } dg) ^ { g } = ( \\ int e ^ { g } dg) ^ { g } and \\ frac { d } { d g } ( \\ int \\ theta_ { 1 } { (g) } dg) ^ { g } = \\ frac { d } { d g } ( \\ int e ^ { g } dg) ^ { g } and \\ frac { d } { d g } ( \\ int \\ theta_ { 1 } { (g) } dg) ^ { g } = \\ frac { \\ partial } { \\ partial g } ( \\ mathbf { g } + e ^ { g } ) ^ { g } and \\ frac { \\ partial } { \\ partial g } ( \\ mathbf { g } + \\ theta_ { 1 } { (g) } ) ^ { g } = \\ frac { d } { d g } ( \\ int e ^ { g } dg) ^ { g }", "VR_flan-t5-large": "beta { ( \\ tau) } = e ^ { \\ tau } and \\ int \\ beta { ( \\ tau) } d \\ tau = \\ int e ^ { \\ tau } d \\ tau and ( \\ int \\ beta { ( \\ tau) } d \\ tau) ^ { \\ tau } = ( \\ int e ^ { \\ tau } d \\ tau) ^ { \\ tau } and \\ frac { d } { d \\ tau } ( \\ int \\ beta { ( \\ tau) } d \\ tau) ^ { \\ tau } = \\ frac { d } { d \\ tau } ( \\ int e ^ { \\ tau } d \\ tau) ^ { \\ tau } and \\ frac { d } { d \\ tau } ( \\ int \\ beta { ( \\ tau) } d \\ tau) ^ { \\ tau } = \\ frac { \\ partial } { \\ partial \\ tau } ( \\ iota + e ^ { \\ tau } ) ^ { \\ tau } and \\ frac { \\ partial } { \\ partial \\ tau } ( \\ iota + \\ beta { ( \\ tau) } ) ^ { \\ tau } = \\ frac { d } { d \\ tau } ( \\ int e ^ { \\ tau } d \\ tau) ^ { \\ tau }", "EE_flan-t5-large": "theta_ { 1 } { (g) } = e ^ { g } and \\ int \\ theta_ { 1 } { (g) } dg = \\ int e ^ { g } dg and ( \\ int \\ theta_ { 1 } { (g) } dg) ^ { g } = ( \\ int e ^ { g } dg) ^ { g } and \\ frac { d } { d g } ( \\ int \\ theta_ { 1 } { (g) } dg) ^ { g } = \\ frac { d } { d g } ( \\ int e ^ { g } dg) ^ { g } and \\ frac { \\ partial } { \\ partial g } ( \\ mathbf { g } + e ^ { g } ) ^ { g } = \\ frac { d } { d g } ( \\ int \\ theta_ { 1 } { (g) } dg) ^ { g } and \\ frac { d } { d g } ( \\ int e ^ { g } dg) ^ { g } = \\ frac { \\ partial } { \\ partial g } ( \\ mathbf { g } + \\ theta_ { 1 } { (g) } ) ^ { g }", "AG_flan-t5-large": "theta_ { 1 } { (g) } = e ^ { g } and \\ int \\ theta_ { 1 } { (g) } dg = \\ int e ^ { g } dg and ( \\ int \\ theta_ { 1 } { (g) } dg) ^ { g } = ( \\ int e ^ { g } dg) ^ { g } and \\ frac { d } { d g } ( \\ int \\ theta_ { 1 } { (g) } dg) ^ { g } = \\ frac { d } { d g } ( \\ int e ^ { g } dg) ^ { g } and \\ frac { d } { d g } ( \\ int \\ theta_ { 1 } { (g) } dg) ^ { g } = \\ frac { \\ partial } { \\ partial g } ( \\ mathbf { g } + e ^ { g } ) ^ { g } and \\ frac { \\ partial } { \\ partial g } ( \\ mathbf { g } + e ^ { g } ) ^ { g } = \\ frac { \\ partial } { \\ partial g } (L + e ^ { g } ) ^ { g }", "SR_flan-t5-large": "theta_ { 1 } { (g) } = e ^ { g } and \\ frac { d } { d g } \\ theta_ { 1 } { (g) } = \\ frac { d } { d g } e ^ { g } and \\ int \\ frac { d } { d g } \\ theta_ { 1 } { (g) } dg = \\ int \\ frac { d } { d g } e ^ { g } dg and ( \\ int \\ frac { d } { d g } \\ theta_ { 1 } { (g) } dg) ^ { g } = ( \\ int \\ frac { d } { d g } e ^ { g } dg) ^ { g } and \\ frac { \\ partial } { \\ partial g } ( \\ mathbf { g } + \\ theta_ { 1 } { (g) } ) ^ { g } = \\ frac { d } { d g } ( \\ int e ^ { g } dg) ^ { g }", "static_rouge": 0.900523560209424, "static_bleu": 0.8043329846881633, "static_bleurt": 0.7713594436645508, "static_gleu": 0.8202995008319468, "VR_rouge": 0.0, "EE_rouge": 0.0, "AG_rouge": 0.0021278382842904175, "SR_rouge": 0.2154406872812472, "VR_rouge_abs": 0.01295681063122922, "EE_rouge_abs": -0.00952380952380949, "AG_rouge_abs": 0.019343891402714974, "SR_rouge_abs": 0.28395061728395055, "VR_bleu": 0.007350898441571552, "EE_bleu": 0.009897243754258711, "AG_bleu": 0.0035955817713551053, "SR_bleu": 0.24198506423566668, "VR_bleu_abs": 0.012863979628153277, "EE_bleu_abs": -0.012611721127141595, "AG_bleu_abs": 0.015696824112365282, "SR_bleu_abs": 0.29724620994291395, "VR_bleurt": -0.0295945405960083, "EE_bleurt": 0.09278321266174316, "AG_bleurt": 0.017704784870147705, "SR_bleurt": 0.24144011735916138, "VR_bleurt_abs": 0.016240066848695278, "EE_bleurt_abs": -0.09580600261688232, "AG_bleurt_abs": 0.0710752010345459, "SR_bleurt_abs": 0.2617073059082031, "VR_gleu": 0.006126272485490136, "EE_gleu": 0.009983361064891949, "AG_gleu": 0.003040617583215832, "SR_gleu": 0.20965058236272882, "VR_gleu_abs": 0.011733349578884833, "EE_gleu_abs": -0.012479201331114798, "AG_gleu_abs": 0.015491422342073458, "SR_gleu_abs": 0.2829614604462475, "ratio_VR_rouge": 0.9496124031007752, "ratio_VR_bleu": 0.9713870746306462, "ratio_VR_bleurt": 3.3281721200757133, "ratio_VR_gleu": 0.975246920323615, "ratio_EE_rouge": 1.0096153846153846, "ratio_EE_bleu": 1.0127728082224536, "ratio_EE_bleurt": 1.1378283079508191, "ratio_EE_gleu": 1.012636899747262, "ratio_AG_rouge": 0.9788235294117646, "ratio_AG_bleu": 0.9831012888822481, "ratio_AG_bleurt": 0.9147767173780328, "ratio_AG_gleu": 0.9833297317321644, "ratio_SR_rouge": 0.7160493827160495, "ratio_SR_bleu": 0.702753790057086, "ratio_SR_bleurt": 0.6861977824753834, "ratio_SR_gleu": 0.7170385395537525}, {"prompt": "Given \\chi{(P_{e})} = \\cos{(P_{e})}, then derive \\frac{d}{d P_{e}} \\int \\chi{(P_{e})} dP_{e} = \\frac{\\partial}{\\partial P_{e}} (\\psi + \\sin{(P_{e})}), then obtain \\frac{\\partial}{\\partial P_{e}} (\\psi + \\sin{(P_{e})}) = \\frac{d}{d P_{e}} \\int \\cos{(P_{e})} dP_{e}", "derivation": "\\chi{(P_{e})} = \\cos{(P_{e})} and \\int \\chi{(P_{e})} dP_{e} = \\int \\cos{(P_{e})} dP_{e} and \\frac{d}{d P_{e}} \\int \\chi{(P_{e})} dP_{e} = \\frac{d}{d P_{e}} \\int \\cos{(P_{e})} dP_{e} and \\frac{d}{d P_{e}} \\int \\chi{(P_{e})} dP_{e} = \\frac{\\partial}{\\partial P_{e}} (\\psi + \\sin{(P_{e})}) and \\frac{\\partial}{\\partial P_{e}} (\\psi + \\sin{(P_{e})}) = \\frac{d}{d P_{e}} \\int \\cos{(P_{e})} dP_{e}", "srepr_derivation": [["premise", "Equality(Function('\\\\chi')(Symbol('P_e', commutative=True)), cos(Symbol('P_e', commutative=True)))"], [["integrate", 1, "Symbol('P_e', commutative=True)"], "Equality(Integral(Function('\\\\chi')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Integral(cos(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))))"], [["differentiate", 2, "Symbol('P_e', commutative=True)"], "Equality(Derivative(Integral(Function('\\\\chi')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(Integral(cos(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["evaluate_integrals", 3], "Equality(Derivative(Integral(Function('\\\\chi')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\psi', commutative=True), sin(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Derivative(Add(Symbol('\\\\psi', commutative=True), sin(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(Integral(cos(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))))"]], "EE prompt": "Given \\cos{(P_{e})} = \\chi{(P_{e})}, then derive \\frac{\\partial}{\\partial P_{e}} (\\psi + \\sin{(P_{e})}) = \\frac{d}{d P_{e}} \\int \\chi{(P_{e})} dP_{e}, then obtain \\frac{d}{d P_{e}} \\int \\cos{(P_{e})} dP_{e} = \\frac{\\partial}{\\partial P_{e}} (\\psi + \\sin{(P_{e})})", "EE derivation": "\\cos{(P_{e})} = \\chi{(P_{e})} and \\int \\cos{(P_{e})} dP_{e} = \\int \\chi{(P_{e})} dP_{e} and \\frac{d}{d P_{e}} \\int \\cos{(P_{e})} dP_{e} = \\frac{d}{d P_{e}} \\int \\chi{(P_{e})} dP_{e} and \\frac{\\partial}{\\partial P_{e}} (\\psi + \\sin{(P_{e})}) = \\frac{d}{d P_{e}} \\int \\chi{(P_{e})} dP_{e} and \\frac{d}{d P_{e}} \\int \\cos{(P_{e})} dP_{e} = \\frac{\\partial}{\\partial P_{e}} (\\psi + \\sin{(P_{e})})", "EE srepr_derivation": [["premise", "Equality(cos(Symbol('P_e', commutative=True)), Function('\\\\chi')(Symbol('P_e', commutative=True)))"], [["integrate", 1, "Symbol('P_e', commutative=True)"], "Equality(Integral(cos(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Integral(Function('\\\\chi')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))))"], [["differentiate", 2, "Symbol('P_e', commutative=True)"], "Equality(Derivative(Integral(cos(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(Integral(Function('\\\\chi')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["evaluate_integrals", 3], "Equality(Derivative(Add(Symbol('\\\\psi', commutative=True), sin(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(Integral(Function('\\\\chi')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 3, 4], "Equality(Derivative(Integral(cos(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\psi', commutative=True), sin(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))))"]], "AG prompt": "Given \\chi{(P_{e})} = \\cos{(P_{e})}, then derive \\frac{d}{d P_{e}} \\int \\chi{(P_{e})} dP_{e} = \\frac{\\partial}{\\partial P_{e}} (\\psi + \\sin{(P_{e})}), then obtain \\frac{d}{d P_{e}} \\int \\cos{(P_{e})} dP_{e} = \\frac{\\partial}{\\partial P_{e}} (\\psi + \\sin{(P_{e})})", "AG derivation": "\\chi{(P_{e})} = \\cos{(P_{e})} and \\int \\chi{(P_{e})} dP_{e} = \\int \\cos{(P_{e})} dP_{e} and \\frac{d}{d P_{e}} \\int \\chi{(P_{e})} dP_{e} = \\frac{d}{d P_{e}} \\int \\cos{(P_{e})} dP_{e} and \\frac{d}{d P_{e}} \\int \\chi{(P_{e})} dP_{e} = \\frac{\\partial}{\\partial P_{e}} (\\psi + \\sin{(P_{e})}) and \\frac{d}{d P_{e}} \\int \\cos{(P_{e})} dP_{e} = \\frac{\\partial}{\\partial P_{e}} (\\psi + \\sin{(P_{e})})", "AG srepr_derivation": [["premise", "Equality(Function('\\\\chi')(Symbol('P_e', commutative=True)), cos(Symbol('P_e', commutative=True)))"], [["integrate", 1, "Symbol('P_e', commutative=True)"], "Equality(Integral(Function('\\\\chi')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Integral(cos(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))))"], [["differentiate", 2, "Symbol('P_e', commutative=True)"], "Equality(Derivative(Integral(Function('\\\\chi')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(Integral(cos(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["evaluate_integrals", 3], "Equality(Derivative(Integral(Function('\\\\chi')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\psi', commutative=True), sin(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Derivative(Integral(cos(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\psi', commutative=True), sin(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))))"]], "SR prompt": "Given \\chi{(P_{e})} = \\cos{(P_{e})}, then obtain \\frac{\\partial}{\\partial P_{e}} (\\psi + \\sin{(P_{e})}) = \\frac{d}{d P_{e}} \\int \\cos{(P_{e})} dP_{e}", "SR derivation": "\\chi{(P_{e})} = \\cos{(P_{e})} and \\int \\chi{(P_{e})} dP_{e} = \\int \\cos{(P_{e})} dP_{e} and \\frac{d}{d P_{e}} \\int \\chi{(P_{e})} dP_{e} = \\frac{d}{d P_{e}} \\int \\cos{(P_{e})} dP_{e} and \\frac{d}{d P_{e}} \\int \\chi{(P_{e})} dP_{e} = \\frac{\\partial}{\\partial P_{e}} (\\psi + \\sin{(P_{e})}) and \\frac{\\partial}{\\partial P_{e}} (\\psi + \\sin{(P_{e})}) = \\frac{d}{d P_{e}} \\int \\cos{(P_{e})} dP_{e}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\chi')(Symbol('P_e', commutative=True)), cos(Symbol('P_e', commutative=True)))"], [["integrate", 1, "Symbol('P_e', commutative=True)"], "Equality(Integral(Function('\\\\chi')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Integral(cos(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))))"], [["differentiate", 2, "Symbol('P_e', commutative=True)"], "Equality(Derivative(Integral(Function('\\\\chi')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(Integral(cos(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["evaluate_integrals", 3], "Equality(Derivative(Integral(Function('\\\\chi')(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\psi', commutative=True), sin(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Derivative(Add(Symbol('\\\\psi', commutative=True), sin(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))), Derivative(Integral(cos(Symbol('P_e', commutative=True)), Tuple(Symbol('P_e', commutative=True))), Tuple(Symbol('P_e', commutative=True), Integer(1))))"]], "VR prompt": "Given \\kappa{(\\upsilon)} = \\cos{(\\upsilon)}, then derive \\frac{d}{d \\upsilon} \\int \\kappa{(\\upsilon)} d\\upsilon = \\frac{\\partial}{\\partial \\upsilon} (\\alpha + \\sin{(\\upsilon)}), then obtain \\frac{\\partial}{\\partial \\upsilon} (\\alpha + \\sin{(\\upsilon)}) = \\frac{d}{d \\upsilon} \\int \\cos{(\\upsilon)} d\\upsilon", "VR derivation": "\\kappa{(\\upsilon)} = \\cos{(\\upsilon)} and \\int \\kappa{(\\upsilon)} d\\upsilon = \\int \\cos{(\\upsilon)} d\\upsilon and \\frac{d}{d \\upsilon} \\int \\kappa{(\\upsilon)} d\\upsilon = \\frac{d}{d \\upsilon} \\int \\cos{(\\upsilon)} d\\upsilon and \\frac{d}{d \\upsilon} \\int \\kappa{(\\upsilon)} d\\upsilon = \\frac{\\partial}{\\partial \\upsilon} (\\alpha + \\sin{(\\upsilon)}) and \\frac{\\partial}{\\partial \\upsilon} (\\alpha + \\sin{(\\upsilon)}) = \\frac{d}{d \\upsilon} \\int \\cos{(\\upsilon)} d\\upsilon", "VR srepr_derivation": [["premise", "Equality(Function('\\\\kappa')(Symbol('\\\\upsilon', commutative=True)), cos(Symbol('\\\\upsilon', commutative=True)))"], [["integrate", 1, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Integral(Function('\\\\kappa')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Integral(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Derivative(Integral(Function('\\\\kappa')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Derivative(Integral(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))))"], [["evaluate_integrals", 3], "Equality(Derivative(Integral(Function('\\\\kappa')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\alpha', commutative=True), sin(Symbol('\\\\upsilon', commutative=True))), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Derivative(Add(Symbol('\\\\alpha', commutative=True), sin(Symbol('\\\\upsilon', commutative=True))), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Derivative(Integral(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))))"]], "static_flan-t5-large": "chi { (P_ { e } ) } = \\ cos { (P_ { e } ) } and \\ int \\ chi { (P_ { e } ) } dP_ { e } = \\ int \\ cos { (P_ { e } ) } dP_ { e } and \\ frac { d } { d P_ { e } } \\ int \\ chi { (P_ { e } ) } dP_ { e } = \\ frac { d } { d P_ { e } } \\ int \\ cos { (P_ { e } ) } dP_ { e } and \\ frac { d } { d P_ { e } } \\ int \\ chi { (P_ { e } ) } dP_ { e } = \\ frac { \\ partial } { \\ partial P_ { e } } ( \\ psi + \\ sin { (P_ { e } ) } ) and \\ frac { \\ partial } { \\ partial P_ { e } } ( \\ psi + \\ sin { (P_ { e } ) } ) = \\ frac { d } { d P_ { e } } \\ int \\ cos { (P_ { e } ) } dP_ { e }", "VR_flan-t5-large": "kappa { ( \\ upsilon) } = \\ cos { ( \\ upsilon) } and \\ int \\ kappa { ( \\ upsilon) } d \\ upsilon = \\ int \\ cos { ( \\ upsilon) } d \\ upsilon and \\ frac { d } { d \\ upsilon } \\ int \\ kappa { ( \\ upsilon) } d \\ upsilon = \\ frac { d } { d \\ upsilon } \\ int \\ cos { ( \\ upsilon) } d \\ upsilon and \\ frac { d } { d \\ upsilon } \\ int \\ kappa { ( \\ upsilon) } d \\ upsilon = \\ frac { \\ partial } { \\ partial \\ upsilon } ( \\ alpha + \\ sin { ( \\ upsilon) } ) and \\ frac { \\ partial } { \\ partial \\ upsilon } ( \\ alpha + \\ sin { ( \\ upsilon) } ) = \\ frac { d } { d \\ upsilon } \\ int \\ cos { ( \\ upsilon) } d \\ upsilon", "EE_flan-t5-large": "cos { (P_ { e } ) } = \\ chi { (P_ { e } ) } and \\ int \\ cos { (P_ { e } ) } dP_ { e } = \\ int \\ chi { (P_ { e } ) } dP_ { e } and \\ frac { d } { d P_ { e } } \\ int \\ cos { (P_ { e } ) } dP_ { e } = \\ frac { d } { d P_ { e } } \\ int \\ chi { (P_ { e } ) } dP_ { e } and \\ frac { \\ partial } { \\ partial P_ { e } } ( \\ psi + \\ sin { (P_ { e } ) } ) = \\ frac { d } { d P_ { e } } \\ int \\ chi { (P_ { e } ) } dP_ { e } and \\ frac { d } { d P_ { e } } \\ int \\ cos { (P_ { e } ) } dP_ { e } = \\ frac { \\ partial } { \\ partial P_ { e } } ( \\ psi + \\ sin { (P_ { e } ) } )", "AG_flan-t5-large": "chi { (P_ { e } ) } = \\ cos { (P_ { e } ) } and \\ int \\ chi { (P_ { e } ) } dP_ { e } = \\ int \\ cos { (P_ { e } ) } dP_ { e } and \\ frac { d } { d P_ { e } } \\ int \\ chi { (P_ { e } ) } dP_ { e } = \\ frac { d } { d P_ { e } } \\ int \\ cos { (P_ { e } ) } dP_ { e } and \\ frac { d } { d P_ { e } } \\ int \\ chi { (P_ { e } ) } dP_ { e } = \\ frac { \\ partial } { \\ partial P_ { e } } ( \\ psi + \\ sin { (P_ { e } ) } ) and \\ frac { d } { d P_ { e } } \\ int \\ cos { (P_ { e } ) } dP_ { e } = \\ frac { \\ partial } { \\ partial P_ { e } } ( \\ psi + \\ sin { (P_ { e } ) } )", "SR_flan-t5-large": "chi { (P_ { e } ) } = \\ cos { (P_ { e } ) } and \\ int \\ chi { (P_ { e } ) } dP_ { e } = \\ int \\ cos { (P_ { e } ) } dP_ { e } and \\ frac { d } { d P_ { e } } \\ int \\ chi { (P_ { e } ) } dP_ { e } = \\ frac { d } { d P_ { e } } \\ int \\ cos { (P_ { e } ) } dP_ { e } and \\ frac { \\ partial } { \\ partial P_ { e } } ( \\ psi + \\ sin { (P_ { e } ) } ) = \\ frac { d } { d P_ { e } } \\ int \\ cos { (P_ { e } ) } dP_ { e }", "static_rouge": 1.0, "static_bleu": 0.9960396091471395, "static_bleurt": 0.681132972240448, "static_gleu": 0.9960238568588469, "VR_rouge": 0.0, "EE_rouge": 0.0, "AG_rouge": 0.0, "SR_rouge": 0.14482758620689662, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.0, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.14482758620689662, "VR_bleu": 0.0012344026293023003, "EE_bleu": 0.0, "AG_bleu": 0.0, "SR_bleu": 0.28834645749199006, "VR_bleu_abs": -0.0006457979071336495, "EE_bleu_abs": 0.003047017590049106, "AG_bleu_abs": 2.4049983160967514e-05, "SR_bleu_abs": 0.28853249379217627, "VR_bleurt": -0.10504299402236938, "EE_bleurt": -0.052051842212677, "AG_bleurt": -0.027132272720336914, "SR_bleurt": 0.06178098917007446, "VR_bleurt_abs": 0.003026902675628662, "EE_bleurt_abs": 0.05070292949676514, "AG_bleurt_abs": -0.028230905532836914, "SR_bleurt_abs": 0.09488141536712646, "VR_gleu": 0.0012457889737294003, "EE_gleu": 0.0, "AG_gleu": 0.0, "SR_gleu": 0.25447316103379714, "VR_gleu_abs": -0.000561501251969243, "EE_gleu_abs": 0.003029725836597219, "AG_gleu_abs": 2.3809240366268192e-05, "SR_gleu_abs": 0.2554890219560878, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 1.0017867067155775, "ratio_VR_bleurt": 1.0131894843321467, "ratio_VR_gleu": 1.001437328904532, "ratio_EE_rouge": 1.0, "ratio_EE_bleu": 0.996925279400865, "ratio_EE_bleurt": 0.9176251918825777, "ratio_EE_gleu": 0.9969429245821296, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9999758049881636, "ratio_AG_bleurt": 1.041774306414885, "ratio_AG_gleu": 0.9999760479041916, "ratio_SR_rouge": 0.8551724137931034, "ratio_SR_bleu": 0.7114675062078237, "ratio_SR_bleurt": 0.8670866422595653, "ratio_SR_gleu": 0.7445109780439122}, {"prompt": "Given \\phi{(x^\\prime)} = \\int \\log{(x^\\prime)} dx^\\prime and \\operatorname{t_{1}}{(x^\\prime,n_{2})} = \\frac{\\partial}{\\partial x^\\prime} (n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime), then derive \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} = \\frac{\\partial}{\\partial x^\\prime} (n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime), then obtain \\operatorname{t_{1}}{(x^\\prime,n_{2})} e^{- \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}} = e^{- \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}} \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}", "derivation": "\\phi{(x^\\prime)} = \\int \\log{(x^\\prime)} dx^\\prime and \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} = \\frac{d}{d x^\\prime} \\int \\log{(x^\\prime)} dx^\\prime and \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} = \\frac{\\partial}{\\partial x^\\prime} (n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime) and \\operatorname{t_{1}}{(x^\\prime,n_{2})} = \\frac{\\partial}{\\partial x^\\prime} (n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime) and \\operatorname{t_{1}}{(x^\\prime,n_{2})} = \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} and \\operatorname{t_{1}}{(x^\\prime,n_{2})} e^{- \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}} = e^{- \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}} \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}", "srepr_derivation": [["premise", "Equality(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Integral(log(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True))))"], [["differentiate", 1, "Symbol('x^\\\\prime', commutative=True)"], "Equality(Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))), Derivative(Integral(log(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True))), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], [["evaluate_integrals", 2], "Equality(Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))), Derivative(Add(Symbol('n_2', commutative=True), Mul(Symbol('x^\\\\prime', commutative=True), log(Symbol('x^\\\\prime', commutative=True))), Mul(Integer(-1), Symbol('x^\\\\prime', commutative=True))), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], ["renaming_premise", "Equality(Function('t_1')(Symbol('x^\\\\prime', commutative=True), Symbol('n_2', commutative=True)), Derivative(Add(Symbol('n_2', commutative=True), Mul(Symbol('x^\\\\prime', commutative=True), log(Symbol('x^\\\\prime', commutative=True))), Mul(Integer(-1), Symbol('x^\\\\prime', commutative=True))), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Function('t_1')(Symbol('x^\\\\prime', commutative=True), Symbol('n_2', commutative=True)), Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], [["divide", 5, "exp(Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], "Equality(Mul(Function('t_1')(Symbol('x^\\\\prime', commutative=True), Symbol('n_2', commutative=True)), exp(Mul(Integer(-1), Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1)))))), Mul(exp(Mul(Integer(-1), Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))), Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1)))))"]], "EE prompt": "Given \\int \\log{(x^\\prime)} dx^\\prime = \\phi{(x^\\prime)} and \\frac{\\partial}{\\partial x^\\prime} (n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime) = \\operatorname{t_{1}}{(x^\\prime,n_{2})}, then derive \\frac{\\partial}{\\partial x^\\prime} (n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime) = \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}, then obtain e^{- \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}} \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} = \\operatorname{t_{1}}{(x^\\prime,n_{2})} e^{- \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}}", "EE derivation": "\\int \\log{(x^\\prime)} dx^\\prime = \\phi{(x^\\prime)} and \\frac{d}{d x^\\prime} \\int \\log{(x^\\prime)} dx^\\prime = \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} and \\frac{\\partial}{\\partial x^\\prime} (n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime) = \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} and \\frac{\\partial}{\\partial x^\\prime} (n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime) = \\operatorname{t_{1}}{(x^\\prime,n_{2})} and \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} = \\operatorname{t_{1}}{(x^\\prime,n_{2})} and e^{- \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}} \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} = \\operatorname{t_{1}}{(x^\\prime,n_{2})} e^{- \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}}", "EE srepr_derivation": [["premise", "Equality(Integral(log(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True))), Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)))"], [["differentiate", 1, "Symbol('x^\\\\prime', commutative=True)"], "Equality(Derivative(Integral(log(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True))), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))), Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], [["evaluate_integrals", 2], "Equality(Derivative(Add(Symbol('n_2', commutative=True), Mul(Symbol('x^\\\\prime', commutative=True), log(Symbol('x^\\\\prime', commutative=True))), Mul(Integer(-1), Symbol('x^\\\\prime', commutative=True))), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))), Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], ["renaming_premise", "Equality(Derivative(Add(Symbol('n_2', commutative=True), Mul(Symbol('x^\\\\prime', commutative=True), log(Symbol('x^\\\\prime', commutative=True))), Mul(Integer(-1), Symbol('x^\\\\prime', commutative=True))), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))), Function('t_1')(Symbol('x^\\\\prime', commutative=True), Symbol('n_2', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))), Function('t_1')(Symbol('x^\\\\prime', commutative=True), Symbol('n_2', commutative=True)))"], [["divide", 5, "exp(Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], "Equality(Mul(exp(Mul(Integer(-1), Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))), Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1)))), Mul(Function('t_1')(Symbol('x^\\\\prime', commutative=True), Symbol('n_2', commutative=True)), exp(Mul(Integer(-1), Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1)))))))"]], "AG prompt": "Given \\phi{(x^\\prime)} = \\int \\log{(x^\\prime)} dx^\\prime and \\operatorname{t_{1}}{(x^\\prime,n_{2})} = \\frac{\\partial}{\\partial x^\\prime} (n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime), then derive \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} = \\frac{\\partial}{\\partial x^\\prime} (n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime), then obtain \\frac{\\operatorname{t_{1}}{(x^\\prime,n_{2})}}{n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime} = \\frac{\\frac{d}{d x^\\prime} \\phi{(x^\\prime)}}{n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime}", "AG derivation": "\\phi{(x^\\prime)} = \\int \\log{(x^\\prime)} dx^\\prime and \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} = \\frac{d}{d x^\\prime} \\int \\log{(x^\\prime)} dx^\\prime and \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} = \\frac{\\partial}{\\partial x^\\prime} (n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime) and \\operatorname{t_{1}}{(x^\\prime,n_{2})} = \\frac{\\partial}{\\partial x^\\prime} (n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime) and \\operatorname{t_{1}}{(x^\\prime,n_{2})} = \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} and \\frac{\\operatorname{t_{1}}{(x^\\prime,n_{2})}}{n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime} = \\frac{\\frac{d}{d x^\\prime} \\phi{(x^\\prime)}}{n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Integral(log(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True))))"], [["differentiate", 1, "Symbol('x^\\\\prime', commutative=True)"], "Equality(Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))), Derivative(Integral(log(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True))), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], [["evaluate_integrals", 2], "Equality(Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))), Derivative(Add(Symbol('n_2', commutative=True), Mul(Symbol('x^\\\\prime', commutative=True), log(Symbol('x^\\\\prime', commutative=True))), Mul(Integer(-1), Symbol('x^\\\\prime', commutative=True))), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], ["renaming_premise", "Equality(Function('t_1')(Symbol('x^\\\\prime', commutative=True), Symbol('n_2', commutative=True)), Derivative(Add(Symbol('n_2', commutative=True), Mul(Symbol('x^\\\\prime', commutative=True), log(Symbol('x^\\\\prime', commutative=True))), Mul(Integer(-1), Symbol('x^\\\\prime', commutative=True))), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Function('t_1')(Symbol('x^\\\\prime', commutative=True), Symbol('n_2', commutative=True)), Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], [["divide", 5, "Add(Symbol('n_2', commutative=True), Mul(Symbol('x^\\\\prime', commutative=True), log(Symbol('x^\\\\prime', commutative=True))), Mul(Integer(-1), Symbol('x^\\\\prime', commutative=True)))"], "Equality(Mul(Pow(Add(Symbol('n_2', commutative=True), Mul(Symbol('x^\\\\prime', commutative=True), log(Symbol('x^\\\\prime', commutative=True))), Mul(Integer(-1), Symbol('x^\\\\prime', commutative=True))), Integer(-1)), Function('t_1')(Symbol('x^\\\\prime', commutative=True), Symbol('n_2', commutative=True))), Mul(Pow(Add(Symbol('n_2', commutative=True), Mul(Symbol('x^\\\\prime', commutative=True), log(Symbol('x^\\\\prime', commutative=True))), Mul(Integer(-1), Symbol('x^\\\\prime', commutative=True))), Integer(-1)), Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1)))))"]], "SR prompt": "Given \\phi{(x^\\prime)} = \\int \\log{(x^\\prime)} dx^\\prime and \\operatorname{t_{1}}{(x^\\prime,n_{2})} = \\frac{\\partial}{\\partial x^\\prime} (n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime), then obtain \\operatorname{t_{1}}{(x^\\prime,n_{2})} e^{- \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}} = e^{- \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}} \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}", "SR derivation": "\\phi{(x^\\prime)} = \\int \\log{(x^\\prime)} dx^\\prime and \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} = \\frac{d}{d x^\\prime} \\int \\log{(x^\\prime)} dx^\\prime and \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} = \\frac{\\partial}{\\partial x^\\prime} (n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime) and \\operatorname{t_{1}}{(x^\\prime,n_{2})} = \\frac{\\partial}{\\partial x^\\prime} (n_{2} + x^\\prime \\log{(x^\\prime)} - x^\\prime) and \\operatorname{t_{1}}{(x^\\prime,n_{2})} = \\frac{d}{d x^\\prime} \\phi{(x^\\prime)} and \\operatorname{t_{1}}{(x^\\prime,n_{2})} e^{- \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}} = e^{- \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}} \\frac{d}{d x^\\prime} \\phi{(x^\\prime)}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Integral(log(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True))))"], [["differentiate", 1, "Symbol('x^\\\\prime', commutative=True)"], "Equality(Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))), Derivative(Integral(log(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True))), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], [["evaluate_integrals", 2], "Equality(Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))), Derivative(Add(Symbol('n_2', commutative=True), Mul(Symbol('x^\\\\prime', commutative=True), log(Symbol('x^\\\\prime', commutative=True))), Mul(Integer(-1), Symbol('x^\\\\prime', commutative=True))), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], ["renaming_premise", "Equality(Function('t_1')(Symbol('x^\\\\prime', commutative=True), Symbol('n_2', commutative=True)), Derivative(Add(Symbol('n_2', commutative=True), Mul(Symbol('x^\\\\prime', commutative=True), log(Symbol('x^\\\\prime', commutative=True))), Mul(Integer(-1), Symbol('x^\\\\prime', commutative=True))), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Function('t_1')(Symbol('x^\\\\prime', commutative=True), Symbol('n_2', commutative=True)), Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], [["divide", 5, "exp(Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))"], "Equality(Mul(Function('t_1')(Symbol('x^\\\\prime', commutative=True), Symbol('n_2', commutative=True)), exp(Mul(Integer(-1), Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1)))))), Mul(exp(Mul(Integer(-1), Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1))))), Derivative(Function('\\\\phi')(Symbol('x^\\\\prime', commutative=True)), Tuple(Symbol('x^\\\\prime', commutative=True), Integer(1)))))"]], "VR prompt": "Given \\xi{(\\alpha)} = \\int \\log{(\\alpha)} d\\alpha and \\tau{(\\alpha,\\nu)} = \\frac{\\partial}{\\partial \\alpha} (\\alpha \\log{(\\alpha)} - \\alpha + \\nu), then derive \\frac{d}{d \\alpha} \\xi{(\\alpha)} = \\frac{\\partial}{\\partial \\alpha} (\\alpha \\log{(\\alpha)} - \\alpha + \\nu), then obtain \\tau{(\\alpha,\\nu)} e^{- \\frac{d}{d \\alpha} \\xi{(\\alpha)}} = e^{- \\frac{d}{d \\alpha} \\xi{(\\alpha)}} \\frac{d}{d \\alpha} \\xi{(\\alpha)}", "VR derivation": "\\xi{(\\alpha)} = \\int \\log{(\\alpha)} d\\alpha and \\frac{d}{d \\alpha} \\xi{(\\alpha)} = \\frac{d}{d \\alpha} \\int \\log{(\\alpha)} d\\alpha and \\frac{d}{d \\alpha} \\xi{(\\alpha)} = \\frac{\\partial}{\\partial \\alpha} (\\alpha \\log{(\\alpha)} - \\alpha + \\nu) and \\tau{(\\alpha,\\nu)} = \\frac{\\partial}{\\partial \\alpha} (\\alpha \\log{(\\alpha)} - \\alpha + \\nu) and \\tau{(\\alpha,\\nu)} = \\frac{d}{d \\alpha} \\xi{(\\alpha)} and \\tau{(\\alpha,\\nu)} e^{- \\frac{d}{d \\alpha} \\xi{(\\alpha)}} = e^{- \\frac{d}{d \\alpha} \\xi{(\\alpha)}} \\frac{d}{d \\alpha} \\xi{(\\alpha)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\xi')(Symbol('\\\\alpha', commutative=True)), Integral(log(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\alpha', commutative=True)"], "Equality(Derivative(Function('\\\\xi')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))), Derivative(Integral(log(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))))"], [["evaluate_integrals", 2], "Equality(Derivative(Function('\\\\xi')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))), Derivative(Add(Mul(Symbol('\\\\alpha', commutative=True), log(Symbol('\\\\alpha', commutative=True))), Mul(Integer(-1), Symbol('\\\\alpha', commutative=True)), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))))"], ["renaming_premise", "Equality(Function('\\\\tau')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True)), Derivative(Add(Mul(Symbol('\\\\alpha', commutative=True), log(Symbol('\\\\alpha', commutative=True))), Mul(Integer(-1), Symbol('\\\\alpha', commutative=True)), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Function('\\\\tau')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True)), Derivative(Function('\\\\xi')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))))"], [["divide", 5, "exp(Derivative(Function('\\\\xi')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))))"], "Equality(Mul(Function('\\\\tau')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True)), exp(Mul(Integer(-1), Derivative(Function('\\\\xi')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1)))))), Mul(exp(Mul(Integer(-1), Derivative(Function('\\\\xi')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))))), Derivative(Function('\\\\xi')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1)))))"]], "static_flan-t5-large": "phi { (x ^ \\ prime) } = \\ int \\ log { (x ^ \\ prime) } dx ^ \\ prime and \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } = \\ frac { d } { d x ^ \\ prime } \\ int \\ log { (x ^ \\ prime) } dx ^ \\ prime and \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } = \\ frac { \\ partial } { \\ partial x ^ \\ prime } (n_ { 2 } + x ^ \\ prime \\ log { (x ^ \\ prime) } - x ^ \\ prime) and \\ operatorname { t_ { 1 } } { (x ^ \\ prime,n_ { 2 } ) } = \\ frac { \\ partial } { \\ partial x ^ \\ prime } (n_ { 2 } + x ^ \\ prime \\ log { (x ^ \\ prime) } - x ^ \\ prime) and \\ operatorname { t_ { 1 } } { (x ^ \\ prime,n_ { 2 } ) } e ^ { - \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } } = e ^ { - \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } } \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) }", "VR_flan-t5-large": "xi { ( \\ alpha) } = \\ int \\ log { ( \\ alpha) } d \\ alpha and \\ frac { d } { d \\ alpha } \\ xi { ( \\ alpha) } = \\ frac { d } { d \\ alpha } \\ int \\ log { ( \\ alpha) } d \\ alpha and \\ frac { d } { d \\ alpha } \\ xi { ( \\ alpha) } = \\ frac { \\ partial } { \\ partial \\ alpha } ( \\ alpha \\ log { ( \\ alpha) } - \\ alpha + \\ nu) and \\ frac { d } { d \\ alpha } \\ xi { ( \\ alpha) } = \\ frac { \\ partial } { \\ partial \\ alpha } ( \\ alpha \\ log { ( \\ alpha) } - \\ alpha + \\ nu) and \\ tau { ( \\ alpha, \\ nu) } = \\ frac { \\ partial } { \\ partial \\ alpha } ( \\ alpha \\ log { ( \\ alpha) } - \\ alpha + \\ nu) and \\ tau { ( \\ alpha, \\ nu) } = \\ frac { d } { d \\ alpha } \\ int \\ log { ( \\ alpha) } d \\ alpha and \\ tau { ( \\ alpha, \\ nu) } e ^ { - \\ frac { d } { d \\ alpha } \\ int \\ log { ( \\ alpha) } d \\ alpha } = e ^ { - \\ frac { d } { d \\ alpha } \\ int \\ log { ( \\ alpha) } d \\ alpha } \\ frac { d } { d \\ alpha } \\ int \\ log { ( \\ alpha) } d \\ alpha and \\ tau { ( \\ alpha, \\ nu) } e ^ { - \\ frac { d } { d \\ alpha } { xi { ( \\ alpha) } } = e ^ { - \\ frac { d } { d \\ alpha } { xi { ( \\ alpha) } } \\ frac { d", "EE_flan-t5-large": "int \\ log { (x ^ \\ prime) } dx ^ \\ prime = \\ phi { (x ^ \\ prime) } and \\ frac { d } { d x ^ \\ prime } \\ int \\ log { (x ^ \\ prime) } dx ^ \\ prime = \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } and \\ frac { \\ partial } { \\ partial x ^ \\ prime } (n_ { 2 } + x ^ \\ prime \\ log { (x ^ \\ prime) } - x ^ \\ prime) = \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } and \\ frac { \\ partial } { \\ partial x ^ \\ prime } (n_ { 2 } + x ^ \\ prime \\ log { (x ^ \\ prime) } - x ^ \\ prime) = \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } and \\ frac { \\ partial } { \\ partial x ^ \\ prime } (n_ { 2 } + x ^ \\ prime \\ log { (x ^ \\ prime) } - x ^ \\ prime) = \\ operatorname { t_ { 1 } } { (x ^ \\ prime,n_ { 2 } ) } and e ^ { - \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } } \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } = \\ operatorname { t_ { 1 } } { (x ^ \\ prime,n_ { 2 } ) } e ^ { - \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } }", "AG_flan-t5-large": "phi { (x ^ \\ prime) } = \\ int \\ log { (x ^ \\ prime) } dx ^ \\ prime and \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } = \\ frac { d } { d x ^ \\ prime } \\ int \\ log { (x ^ \\ prime) } dx ^ \\ prime and \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } = \\ frac { \\ partial } { \\ partial x ^ \\ prime } (n_ { 2 } + x ^ \\ prime \\ log { (x ^ \\ prime) } - x ^ \\ prime) and \\ operatorname { t_ { 1 } } { (x ^ \\ prime,n_ { 2 } ) } = \\ frac { \\ partial } { \\ partial x ^ \\ prime } (n_ { 2 } + x ^ \\ prime \\ log { (x ^ \\ prime) } - x ^ \\ prime) and \\ frac { \\ operatorname { t_ { 1 } } { (x ^ \\ prime,n_ { 2 } ) } } { n_ { 2 } + x ^ \\ prime \\ log { (x ^ \\ prime) } - x ^ \\ prime } = \\ frac { \\ frac { d } { d x ^ \\ prime } \\ int \\ log { (x ^ \\ prime) } dx ^ \\ prime } { n_ { 2 } + x ^ \\ prime \\ log { (x ^ \\ prime) } - x ^ \\ prime } and \\ frac { \\ operatorname { t_ { 1 } } { (x ^ \\ prime,n_ { 2 } ) } } { n_ { 2 } + x ^ \\ prime \\ log { (x ^ \\ prime) } - x ^ \\ prime } = \\ frac { \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } } { n_ { 2 } + x ^ \\ prime \\ log { (x ^ \\ prime) } - x ^ \\ prime }", "SR_flan-t5-large": "phi { (x ^ \\ prime) } = \\ int \\ log { (x ^ \\ prime) } dx ^ \\ prime and \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } = \\ frac { d } { d x ^ \\ prime } \\ int \\ log { (x ^ \\ prime) } dx ^ \\ prime and \\ operatorname { t_ { 1 } } { (x ^ \\ prime,n_ { 2 } ) } = \\ frac { \\ partial } { \\ partial x ^ \\ prime } (n_ { 2 } + x ^ \\ prime \\ log { (x ^ \\ prime) } - x ^ \\ prime) and \\ operatorname { t_ { 1 } } { (x ^ \\ prime,n_ { 2 } ) } = \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } and \\ operatorname { t_ { 1 } } { (x ^ \\ prime,n_ { 2 } ) } e ^ { - \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } } = e ^ { - \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) } } \\ frac { d } { d x ^ \\ prime } \\ phi { (x ^ \\ prime) }", "static_rouge": 0.9304347826086956, "static_bleu": 0.8565533201040872, "static_bleurt": 0.7175920009613037, "static_gleu": 0.8653576437587658, "VR_rouge": 0.16896689270043863, "EE_rouge": -0.002371541501976271, "AG_rouge": 0.043987896161809203, "SR_rouge": 0.03357379606161037, "VR_rouge_abs": 0.047435897435897434, "EE_rouge_abs": 0.06606977462179686, "AG_rouge_abs": 0.12586970271979758, "SR_rouge_abs": 0.08212560386473433, "VR_bleu": 0.2091823652150917, "EE_bleu": -0.05958366939591542, "AG_bleu": 0.02464831651892052, "SR_bleu": 0.05954801928925091, "VR_bleu_abs": 0.04503320297596819, "EE_bleu_abs": 0.16777022586166235, "AG_bleu_abs": 0.23794057794075496, "SR_bleu_abs": 0.1045705222798472, "VR_bleurt": 0.004338502883911133, "EE_bleurt": 0.13009047508239746, "AG_bleurt": -0.05584216117858887, "SR_bleurt": 0.19966411590576172, "VR_bleurt_abs": -0.0014186501502990723, "EE_bleurt_abs": 0.2970256507396698, "AG_bleurt_abs": 0.019901037216186523, "SR_bleurt_abs": 0.2214134931564331, "VR_gleu": 0.21781666015220835, "EE_gleu": -0.050974350886481834, "AG_gleu": 0.033376183735590814, "SR_gleu": 0.05119214586255261, "VR_gleu_abs": 0.06230357139698872, "EE_gleu_abs": 0.16787486552098996, "AG_gleu_abs": 0.2382174028455304, "SR_gleu_abs": 0.10291734197730962, "ratio_VR_rouge": 0.7944444444444444, "ratio_VR_bleu": 0.8674048954519387, "ratio_VR_bleurt": 0.8491816776506677, "ratio_VR_gleu": 0.8360795335570002, "ratio_EE_rouge": 0.9287141905396402, "ratio_EE_bleu": 0.8238097605401749, "ratio_EE_bleurt": 0.5697564257706331, "ratio_EE_gleu": 0.8238487430221253, "ratio_AG_rouge": 0.8554829339143065, "ratio_AG_bleu": 0.7353118175852416, "ratio_AG_bleurt": 0.9755503628810507, "ratio_AG_gleu": 0.7352736483622079, "ratio_SR_rouge": 0.9178743961352657, "ratio_SR_bleu": 0.8954294777201528, "ratio_SR_bleurt": 0.7279800292765299, "ratio_SR_gleu": 0.8970826580226904}, {"prompt": "Given f{(t_{1})} = e^{t_{1}}, then derive \\frac{d}{d t_{1}} f{(t_{1})} = e^{t_{1}}, then obtain (\\frac{d}{d t_{1}} f{(t_{1})})^{4} = (\\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})})^{4}", "derivation": "f{(t_{1})} = e^{t_{1}} and \\frac{d}{d t_{1}} f{(t_{1})} = \\frac{d}{d t_{1}} e^{t_{1}} and \\frac{d}{d t_{1}} f{(t_{1})} = e^{t_{1}} and \\frac{d}{d t_{1}} f{(t_{1})} = \\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})} and (\\frac{d}{d t_{1}} f{(t_{1})})^{2} = (\\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})})^{2} and (\\frac{d}{d t_{1}} f{(t_{1})})^{4} = (\\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})})^{4}", "srepr_derivation": [["premise", "Equality(Function('f')(Symbol('t_1', commutative=True)), exp(Symbol('t_1', commutative=True)))"], [["differentiate", 1, "Symbol('t_1', commutative=True)"], "Equality(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), Derivative(exp(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), exp(Symbol('t_1', commutative=True)))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(2))))"], [["power", 4, 2], "Equality(Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), Integer(2)), Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(2))), Integer(2)))"], [["power", 5, 2], "Equality(Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), Integer(4)), Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(2))), Integer(4)))"]], "EE prompt": "Given e^{t_{1}} = f{(t_{1})}, then derive e^{t_{1}} = \\frac{d}{d t_{1}} f{(t_{1})}, then obtain (\\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})})^{4} = (\\frac{d}{d t_{1}} f{(t_{1})})^{4}", "EE derivation": "e^{t_{1}} = f{(t_{1})} and \\frac{d}{d t_{1}} e^{t_{1}} = \\frac{d}{d t_{1}} f{(t_{1})} and e^{t_{1}} = \\frac{d}{d t_{1}} f{(t_{1})} and \\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})} = \\frac{d}{d t_{1}} f{(t_{1})} and (\\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})})^{2} = (\\frac{d}{d t_{1}} f{(t_{1})})^{2} and (\\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})})^{4} = (\\frac{d}{d t_{1}} f{(t_{1})})^{4}", "EE srepr_derivation": [["premise", "Equality(exp(Symbol('t_1', commutative=True)), Function('f')(Symbol('t_1', commutative=True)))"], [["differentiate", 1, "Symbol('t_1', commutative=True)"], "Equality(Derivative(exp(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(exp(Symbol('t_1', commutative=True)), Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(2))), Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))))"], [["power", 4, 2], "Equality(Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(2))), Integer(2)), Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), Integer(2)))"], [["power", 5, 2], "Equality(Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(2))), Integer(4)), Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), Integer(4)))"]], "AG prompt": "Given f{(t_{1})} = e^{t_{1}}, then derive \\frac{d}{d t_{1}} f{(t_{1})} = e^{t_{1}}, then obtain e^{- t_{1}} (\\frac{d}{d t_{1}} f{(t_{1})})^{2} = e^{- t_{1}} (\\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})})^{2}", "AG derivation": "f{(t_{1})} = e^{t_{1}} and \\frac{d}{d t_{1}} f{(t_{1})} = \\frac{d}{d t_{1}} e^{t_{1}} and \\frac{d}{d t_{1}} f{(t_{1})} = e^{t_{1}} and \\frac{d}{d t_{1}} f{(t_{1})} = \\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})} and (\\frac{d}{d t_{1}} f{(t_{1})})^{2} = (\\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})})^{2} and e^{- t_{1}} (\\frac{d}{d t_{1}} f{(t_{1})})^{2} = e^{- t_{1}} (\\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})})^{2}", "AG srepr_derivation": [["premise", "Equality(Function('f')(Symbol('t_1', commutative=True)), exp(Symbol('t_1', commutative=True)))"], [["differentiate", 1, "Symbol('t_1', commutative=True)"], "Equality(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), Derivative(exp(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), exp(Symbol('t_1', commutative=True)))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(2))))"], [["power", 4, 2], "Equality(Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), Integer(2)), Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(2))), Integer(2)))"], [["divide", 5, "exp(Symbol('t_1', commutative=True))"], "Equality(Mul(exp(Mul(Integer(-1), Symbol('t_1', commutative=True))), Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), Integer(2))), Mul(exp(Mul(Integer(-1), Symbol('t_1', commutative=True))), Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(2))), Integer(2))))"]], "SR prompt": "Given f{(t_{1})} = e^{t_{1}}, then obtain (\\frac{d}{d t_{1}} f{(t_{1})})^{4} = (\\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})})^{4}", "SR derivation": "f{(t_{1})} = e^{t_{1}} and \\frac{d}{d t_{1}} f{(t_{1})} = \\frac{d}{d t_{1}} e^{t_{1}} and \\frac{d}{d t_{1}} f{(t_{1})} = e^{t_{1}} and \\frac{d}{d t_{1}} f{(t_{1})} = \\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})} and (\\frac{d}{d t_{1}} f{(t_{1})})^{2} = (\\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})})^{2} and (\\frac{d}{d t_{1}} f{(t_{1})})^{4} = (\\frac{d^{2}}{d t_{1}^{2}} f{(t_{1})})^{4}", "SR srepr_derivation": [["premise", "Equality(Function('f')(Symbol('t_1', commutative=True)), exp(Symbol('t_1', commutative=True)))"], [["differentiate", 1, "Symbol('t_1', commutative=True)"], "Equality(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), Derivative(exp(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), exp(Symbol('t_1', commutative=True)))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(2))))"], [["power", 4, 2], "Equality(Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), Integer(2)), Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(2))), Integer(2)))"], [["power", 5, 2], "Equality(Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(1))), Integer(4)), Pow(Derivative(Function('f')(Symbol('t_1', commutative=True)), Tuple(Symbol('t_1', commutative=True), Integer(2))), Integer(4)))"]], "VR prompt": "Given \\upsilon{(\\alpha)} = e^{\\alpha}, then derive \\frac{d}{d \\alpha} \\upsilon{(\\alpha)} = e^{\\alpha}, then obtain (\\frac{d}{d \\alpha} \\upsilon{(\\alpha)})^{4} = (\\frac{d^{2}}{d \\alpha^{2}} \\upsilon{(\\alpha)})^{4}", "VR derivation": "\\upsilon{(\\alpha)} = e^{\\alpha} and \\frac{d}{d \\alpha} \\upsilon{(\\alpha)} = \\frac{d}{d \\alpha} e^{\\alpha} and \\frac{d}{d \\alpha} \\upsilon{(\\alpha)} = e^{\\alpha} and \\frac{d}{d \\alpha} \\upsilon{(\\alpha)} = \\frac{d^{2}}{d \\alpha^{2}} \\upsilon{(\\alpha)} and (\\frac{d}{d \\alpha} \\upsilon{(\\alpha)})^{2} = (\\frac{d^{2}}{d \\alpha^{2}} \\upsilon{(\\alpha)})^{2} and (\\frac{d}{d \\alpha} \\upsilon{(\\alpha)})^{4} = (\\frac{d^{2}}{d \\alpha^{2}} \\upsilon{(\\alpha)})^{4}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\upsilon')(Symbol('\\\\alpha', commutative=True)), exp(Symbol('\\\\alpha', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\alpha', commutative=True)"], "Equality(Derivative(Function('\\\\upsilon')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))), Derivative(exp(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\upsilon')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))), exp(Symbol('\\\\alpha', commutative=True)))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Derivative(Function('\\\\upsilon')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))), Derivative(Function('\\\\upsilon')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(2))))"], [["power", 4, 2], "Equality(Pow(Derivative(Function('\\\\upsilon')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))), Integer(2)), Pow(Derivative(Function('\\\\upsilon')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(2))), Integer(2)))"], [["power", 5, 2], "Equality(Pow(Derivative(Function('\\\\upsilon')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))), Integer(4)), Pow(Derivative(Function('\\\\upsilon')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(2))), Integer(4)))"]], "static_flan-t5-large": "f { (t_ { 1 } ) } = e ^ { t_ { 1 } } and \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } = \\ frac { d } { d t_ { 1 } } e ^ { t_ { 1 } } and \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } = e ^ { t_ { 1 } } and \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } = \\ frac { d ^ { 2 } } { d t_ { 1 } ^ { 2 } } f { (t_ { 1 } ) } and ( \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } ) ^ { 2 } = ( \\ frac { d ^ { 2 } } { d t_ { 1 } ^ { 2 } } f { (t_ { 1 } ) } ) ^ { 2 } and ( \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } ) ^ { 4 } = ( \\ frac { d ^ { 2 } } { d t_ { 1 } ^ { 2 } } f { (t_ { 1 } ) } ) ^ { 4 }", "VR_flan-t5-large": "e ^ { \\ alpha } = \\ frac { d } { d \\ alpha } e ^ { \\ alpha } and \\ frac { d } { d \\ alpha } \\ upsilon { ( \\ alpha) } = e ^ { \\ alpha } and \\ frac { d } { d \\ alpha } \\ e ^ { \\ alpha } = e ^ { \\ alpha } and ( \\ frac { d } { d \\ alpha } \\ e ^ { \\ alpha } ) ^ { 2 } = ( \\ frac { d } { d \\ alpha } e ^ { \\ alpha } ) ^ { 2 } and ( \\ frac { d } { d \\ alpha } \\ e ^ { \\ alpha } ) ^ { 4 } = ( \\ frac { d ^ { 2 } } { d \\ alpha ^ { 2 } } e ^ { \\ alpha } ) ^ { 4 } and ( \\ frac { d } { d \\ alpha } \\ upsilon { ( \\ alpha) } ) ^ { 4 } = ( \\ frac { d ^ { 2 } } { d \\ alpha ^ { 2 } } \\ upsilon { ( \\ alpha) } ) ^ { 4 }", "EE_flan-t5-large": "e ^ { t_ { 1 } } = f { (t_ { 1 } ) } and \\ frac { d } { d t_ { 1 } } e ^ { t_ { 1 } } = \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } and e ^ { t_ { 1 } } = \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } and \\ frac { d ^ { 2 } } { d t_ { 1 } ^ { 2 } } f { (t_ { 1 } ) } = \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } and ( \\ frac { d ^ { 2 } } { d t_ { 1 } ^ { 2 } } f { (t_ { 1 } ) } ) ^ { 4 } = ( \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } ) ^ { 4 }", "AG_flan-t5-large": "f { (t_ { 1 } ) } = e ^ { t_ { 1 } } and \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } = \\ frac { d } { d t_ { 1 } } e ^ { t_ { 1 } } and \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } = e ^ { t_ { 1 } } and \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } = \\ frac { d ^ { 2 } } { d t_ { 1 } ^ { 2 } } f { (t_ { 1 } ) } and ( \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } ) ^ { 2 } = ( \\ frac { d ^ { 2 } } { d t_ { 1 } ^ { 2 } } f { (t_ { 1 } ) } ) ^ { 2 } and e ^ { - t_ { 1 } } ( \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } ) ^ { 2 } = e ^ { - t_ { 1 } } ( \\ frac { d ^ { 2 } } { d t_ { 1 } ^ { 2 } } f { (t_ { 1 } ) } ) ^ { 2 }", "SR_flan-t5-large": "f { (t_ { 1 } ) } = e ^ { t_ { 1 } } and \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } = \\ frac { d } { d t_ { 1 } } e ^ { t_ { 1 } } and ( \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } ) ^ { 2 } = ( \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } ) ^ { 2 } and ( \\ frac { d } { d t_ { 1 } } f { (t_ { 1 } ) } ) ^ { 4 } = ( \\ frac { d ^ { 2 } } { d t_ { 1 } ^ { 2 } } f { (t_ { 1 } ) } ) ^ { 4 }", "static_rouge": 1.0, "static_bleu": 1.0, "static_bleurt": 0.7999016046524048, "static_gleu": 1.0, "VR_rouge": 0.21621621621621623, "EE_rouge": 0.12426035502958577, "AG_rouge": 0.0, "SR_rouge": 0.21019108280254772, "VR_rouge_abs": 0.023668639053254448, "EE_rouge_abs": 0.11635004671441906, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.21019108280254772, "VR_bleu": 0.21545879748147556, "EE_bleu": 0.2608262142043126, "AG_bleu": 0.0, "SR_bleu": 0.3958118292319205, "VR_bleu_abs": 0.05959802502423067, "EE_bleu_abs": 0.25991954396162553, "AG_bleu_abs": 0.0, "SR_bleu_abs": 0.3958118292319205, "VR_bleurt": 0.16994917392730713, "EE_bleurt": 0.1766728162765503, "AG_bleurt": -0.0025197267532348633, "SR_bleurt": 0.2492818832397461, "VR_bleurt_abs": -0.11754202097654343, "EE_bleurt_abs": 0.1387559175491333, "AG_bleurt_abs": 0.0, "SR_bleurt_abs": 0.2492818832397461, "VR_gleu": 0.21052631578947367, "EE_gleu": 0.23327615780445965, "AG_gleu": 0.0, "SR_gleu": 0.3370497427101201, "VR_gleu_abs": 0.055746140651801, "EE_gleu_abs": 0.23327615780445965, "AG_gleu_abs": 0.0, "SR_gleu_abs": 0.3370497427101201, "ratio_VR_rouge": 0.9310344827586207, "ratio_VR_bleu": 0.8709391271328512, "ratio_VR_bleurt": -0.1845505288955364, "ratio_VR_gleu": 0.8839285714285715, "ratio_EE_rouge": 0.8798559300231542, "ratio_EE_bleu": 0.7323978129981512, "ratio_EE_bleurt": 0.8021432334158382, "ratio_EE_gleu": 0.7599293909973522, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 1.0, "ratio_AG_bleurt": 1.0, "ratio_AG_gleu": 1.0, "ratio_SR_rouge": 0.7898089171974523, "ratio_SR_bleu": 0.6041881707680795, "ratio_SR_bleurt": 0.6883593159585285, "ratio_SR_gleu": 0.6629502572898799}, {"prompt": "Given q{(c_{0})} = e^{c_{0}}, then derive e^{- c_{0}} \\int q{(c_{0})} dc_{0} = (n + e^{c_{0}}) e^{- c_{0}}, then obtain \\frac{\\int q{(c_{0})} dc_{0}}{q{(c_{0})}} = \\frac{n + q{(c_{0})}}{q{(c_{0})}}", "derivation": "q{(c_{0})} = e^{c_{0}} and \\int q{(c_{0})} dc_{0} = \\int e^{c_{0}} dc_{0} and e^{- c_{0}} \\int q{(c_{0})} dc_{0} = e^{- c_{0}} \\int e^{c_{0}} dc_{0} and e^{- c_{0}} \\int q{(c_{0})} dc_{0} = (n + e^{c_{0}}) e^{- c_{0}} and \\frac{\\int q{(c_{0})} dc_{0}}{q{(c_{0})}} = \\frac{n + q{(c_{0})}}{q{(c_{0})}}", "srepr_derivation": [["premise", "Equality(Function('q')(Symbol('c_0', commutative=True)), exp(Symbol('c_0', commutative=True)))"], [["integrate", 1, "Symbol('c_0', commutative=True)"], "Equality(Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True))), Integral(exp(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True))))"], [["divide", 2, "exp(Symbol('c_0', commutative=True))"], "Equality(Mul(exp(Mul(Integer(-1), Symbol('c_0', commutative=True))), Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))), Mul(exp(Mul(Integer(-1), Symbol('c_0', commutative=True))), Integral(exp(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))))"], [["evaluate_integrals", 3], "Equality(Mul(exp(Mul(Integer(-1), Symbol('c_0', commutative=True))), Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))), Mul(Add(Symbol('n', commutative=True), exp(Symbol('c_0', commutative=True))), exp(Mul(Integer(-1), Symbol('c_0', commutative=True)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Mul(Pow(Function('q')(Symbol('c_0', commutative=True)), Integer(-1)), Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))), Mul(Add(Symbol('n', commutative=True), Function('q')(Symbol('c_0', commutative=True))), Pow(Function('q')(Symbol('c_0', commutative=True)), Integer(-1))))"]], "EE prompt": "Given e^{c_{0}} = q{(c_{0})}, then derive (n + e^{c_{0}}) e^{- c_{0}} = e^{- c_{0}} \\int q{(c_{0})} dc_{0}, then obtain \\frac{n + q{(c_{0})}}{q{(c_{0})}} = \\frac{\\int q{(c_{0})} dc_{0}}{q{(c_{0})}}", "EE derivation": "e^{c_{0}} = q{(c_{0})} and \\int e^{c_{0}} dc_{0} = \\int q{(c_{0})} dc_{0} and e^{- c_{0}} \\int e^{c_{0}} dc_{0} = e^{- c_{0}} \\int q{(c_{0})} dc_{0} and (n + e^{c_{0}}) e^{- c_{0}} = e^{- c_{0}} \\int q{(c_{0})} dc_{0} and \\frac{n + q{(c_{0})}}{q{(c_{0})}} = \\frac{\\int q{(c_{0})} dc_{0}}{q{(c_{0})}}", "EE srepr_derivation": [["premise", "Equality(exp(Symbol('c_0', commutative=True)), Function('q')(Symbol('c_0', commutative=True)))"], [["integrate", 1, "Symbol('c_0', commutative=True)"], "Equality(Integral(exp(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True))), Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True))))"], [["divide", 2, "exp(Symbol('c_0', commutative=True))"], "Equality(Mul(exp(Mul(Integer(-1), Symbol('c_0', commutative=True))), Integral(exp(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))), Mul(exp(Mul(Integer(-1), Symbol('c_0', commutative=True))), Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))))"], [["evaluate_integrals", 3], "Equality(Mul(Add(Symbol('n', commutative=True), exp(Symbol('c_0', commutative=True))), exp(Mul(Integer(-1), Symbol('c_0', commutative=True)))), Mul(exp(Mul(Integer(-1), Symbol('c_0', commutative=True))), Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Mul(Add(Symbol('n', commutative=True), Function('q')(Symbol('c_0', commutative=True))), Pow(Function('q')(Symbol('c_0', commutative=True)), Integer(-1))), Mul(Pow(Function('q')(Symbol('c_0', commutative=True)), Integer(-1)), Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))))"]], "AG prompt": "Given q{(c_{0})} = e^{c_{0}}, then derive e^{- c_{0}} \\int q{(c_{0})} dc_{0} = (n + e^{c_{0}}) e^{- c_{0}}, then obtain e^{- c_{0}} = \\frac{(n + e^{c_{0}}) e^{- c_{0}}}{\\int q{(c_{0})} dc_{0}}", "AG derivation": "q{(c_{0})} = e^{c_{0}} and \\int q{(c_{0})} dc_{0} = \\int e^{c_{0}} dc_{0} and e^{- c_{0}} \\int q{(c_{0})} dc_{0} = e^{- c_{0}} \\int e^{c_{0}} dc_{0} and e^{- c_{0}} \\int q{(c_{0})} dc_{0} = (n + e^{c_{0}}) e^{- c_{0}} and e^{- c_{0}} = \\frac{(n + e^{c_{0}}) e^{- c_{0}}}{\\int q{(c_{0})} dc_{0}}", "AG srepr_derivation": [["premise", "Equality(Function('q')(Symbol('c_0', commutative=True)), exp(Symbol('c_0', commutative=True)))"], [["integrate", 1, "Symbol('c_0', commutative=True)"], "Equality(Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True))), Integral(exp(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True))))"], [["divide", 2, "exp(Symbol('c_0', commutative=True))"], "Equality(Mul(exp(Mul(Integer(-1), Symbol('c_0', commutative=True))), Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))), Mul(exp(Mul(Integer(-1), Symbol('c_0', commutative=True))), Integral(exp(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))))"], [["evaluate_integrals", 3], "Equality(Mul(exp(Mul(Integer(-1), Symbol('c_0', commutative=True))), Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))), Mul(Add(Symbol('n', commutative=True), exp(Symbol('c_0', commutative=True))), exp(Mul(Integer(-1), Symbol('c_0', commutative=True)))))"], [["divide", 4, "Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))"], "Equality(exp(Mul(Integer(-1), Symbol('c_0', commutative=True))), Mul(Add(Symbol('n', commutative=True), exp(Symbol('c_0', commutative=True))), exp(Mul(Integer(-1), Symbol('c_0', commutative=True))), Pow(Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True))), Integer(-1))))"]], "SR prompt": "Given q{(c_{0})} = e^{c_{0}}, then obtain \\frac{\\int q{(c_{0})} dc_{0}}{q{(c_{0})}} = \\frac{n + q{(c_{0})}}{q{(c_{0})}}", "SR derivation": "q{(c_{0})} = e^{c_{0}} and \\int q{(c_{0})} dc_{0} = \\int e^{c_{0}} dc_{0} and e^{- c_{0}} \\int q{(c_{0})} dc_{0} = e^{- c_{0}} \\int e^{c_{0}} dc_{0} and e^{- c_{0}} \\int q{(c_{0})} dc_{0} = (n + e^{c_{0}}) e^{- c_{0}} and \\frac{\\int q{(c_{0})} dc_{0}}{q{(c_{0})}} = \\frac{n + q{(c_{0})}}{q{(c_{0})}}", "SR srepr_derivation": [["premise", "Equality(Function('q')(Symbol('c_0', commutative=True)), exp(Symbol('c_0', commutative=True)))"], [["integrate", 1, "Symbol('c_0', commutative=True)"], "Equality(Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True))), Integral(exp(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True))))"], [["divide", 2, "exp(Symbol('c_0', commutative=True))"], "Equality(Mul(exp(Mul(Integer(-1), Symbol('c_0', commutative=True))), Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))), Mul(exp(Mul(Integer(-1), Symbol('c_0', commutative=True))), Integral(exp(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))))"], [["evaluate_integrals", 3], "Equality(Mul(exp(Mul(Integer(-1), Symbol('c_0', commutative=True))), Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))), Mul(Add(Symbol('n', commutative=True), exp(Symbol('c_0', commutative=True))), exp(Mul(Integer(-1), Symbol('c_0', commutative=True)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Mul(Pow(Function('q')(Symbol('c_0', commutative=True)), Integer(-1)), Integral(Function('q')(Symbol('c_0', commutative=True)), Tuple(Symbol('c_0', commutative=True)))), Mul(Add(Symbol('n', commutative=True), Function('q')(Symbol('c_0', commutative=True))), Pow(Function('q')(Symbol('c_0', commutative=True)), Integer(-1))))"]], "VR prompt": "Given \\zeta{(\\iota)} = e^{\\iota}, then derive e^{- \\iota} \\int \\zeta{(\\iota)} d\\iota = (\\alpha + e^{\\iota}) e^{- \\iota}, then obtain \\frac{\\int \\zeta{(\\iota)} d\\iota}{\\zeta{(\\iota)}} = \\frac{\\alpha + \\zeta{(\\iota)}}{\\zeta{(\\iota)}}", "VR derivation": "\\zeta{(\\iota)} = e^{\\iota} and \\int \\zeta{(\\iota)} d\\iota = \\int e^{\\iota} d\\iota and e^{- \\iota} \\int \\zeta{(\\iota)} d\\iota = e^{- \\iota} \\int e^{\\iota} d\\iota and e^{- \\iota} \\int \\zeta{(\\iota)} d\\iota = (\\alpha + e^{\\iota}) e^{- \\iota} and \\frac{\\int \\zeta{(\\iota)} d\\iota}{\\zeta{(\\iota)}} = \\frac{\\alpha + \\zeta{(\\iota)}}{\\zeta{(\\iota)}}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\zeta')(Symbol('\\\\iota', commutative=True)), exp(Symbol('\\\\iota', commutative=True)))"], [["integrate", 1, "Symbol('\\\\iota', commutative=True)"], "Equality(Integral(Function('\\\\zeta')(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True))), Integral(exp(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True))))"], [["divide", 2, "exp(Symbol('\\\\iota', commutative=True))"], "Equality(Mul(exp(Mul(Integer(-1), Symbol('\\\\iota', commutative=True))), Integral(Function('\\\\zeta')(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True)))), Mul(exp(Mul(Integer(-1), Symbol('\\\\iota', commutative=True))), Integral(exp(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True)))))"], [["evaluate_integrals", 3], "Equality(Mul(exp(Mul(Integer(-1), Symbol('\\\\iota', commutative=True))), Integral(Function('\\\\zeta')(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True)))), Mul(Add(Symbol('\\\\alpha', commutative=True), exp(Symbol('\\\\iota', commutative=True))), exp(Mul(Integer(-1), Symbol('\\\\iota', commutative=True)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Mul(Pow(Function('\\\\zeta')(Symbol('\\\\iota', commutative=True)), Integer(-1)), Integral(Function('\\\\zeta')(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True)))), Mul(Add(Symbol('\\\\alpha', commutative=True), Function('\\\\zeta')(Symbol('\\\\iota', commutative=True))), Pow(Function('\\\\zeta')(Symbol('\\\\iota', commutative=True)), Integer(-1))))"]], "static_flan-t5-large": "q { (c_ { 0 } ) } = e ^ { c_ { 0 } } and \\ int q { (c_ { 0 } ) } dc_ { 0 } = \\ int e ^ { c_ { 0 } } dc_ { 0 } and e ^ { - c_ { 0 } } \\ int q { (c_ { 0 } ) } dc_ { 0 } = e ^ { - c_ { 0 } } \\ int e ^ { c_ { 0 } } dc_ { 0 } and e ^ { - c_ { 0 } } \\ int q { (c_ { 0 } ) } dc_ { 0 } = (n + e ^ { c_ { 0 } } ) e ^ { - c_ { 0 } } and \\ frac { \\ int q { (c_ { 0 } ) } dc_ { 0 } } { q { (c_ { 0 } ) } } = \\ frac { (n + e ^ { c_ { 0 } } ) e ^ { - c_ { 0 } } } { q { (c_ { 0 } ) } } and \\ frac { \\ int q { (c_ { 0 } ) } dc_ { 0 } } { q { (c_ { 0 } ) } } = \\ frac { n + q { (c_ { 0 } ) } } { q { (c_ { 0 } ) } }", "VR_flan-t5-large": "zeta { ( \\ iota) } = e ^ { \\ iota } and \\ int \\ zeta { ( \\ iota) } d \\ iota = \\ int e ^ { \\ iota } d \\ iota and e ^ { - \\ iota } \\ int \\ zeta { ( \\ iota) } d \\ iota = e ^ { - \\ iota } \\ int e ^ { \\ iota } d \\ iota and e ^ { - \\ iota } \\ int \\ zeta { ( \\ iota) } d \\ iota = ( \\ alpha + e ^ { \\ iota } ) e ^ { - \\ iota } and \\ frac { \\ int \\ zeta { ( \\ iota) } d \\ iota } { \\ zeta { ( \\ iota) } } = \\ frac { ( \\ alpha + e ^ { \\ iota } ) e ^ { - \\ iota } } { \\ zeta { ( \\ iota) } } and \\ frac { \\ int \\ zeta { ( \\ iota) } d \\ iota } { \\ zeta { ( \\ iota) } } = \\ frac { \\ alpha + \\ zeta { ( \\ iota) } } { \\ zeta { ( \\ iota) } }", "EE_flan-t5-large": "e ^ { c_ { 0 } } = q { (c_ { 0 } ) } and \\ int e ^ { c_ { 0 } } dc_ { 0 } = \\ int q { (c_ { 0 } ) } dc_ { 0 } and ( \\ int e ^ { c_ { 0 } } dc_ { 0 } ) e ^ { - c_ { 0 } } = ( \\ int q { (c_ { 0 } ) } dc_ { 0 } ) e ^ { - c_ { 0 } } and (n + e ^ { c_ { 0 } } ) e ^ { - c_ { 0 } } = e ^ { - c_ { 0 } } \\ int q { (c_ { 0 } ) } dc_ { 0 } and (n + e ^ { c_ { 0 } } ) e ^ { - c_ { 0 } } = e ^ { - c_ { 0 } } \\ int q { (c_ { 0 } ) } dc_ { 0 } and \\ frac { n + e ^ { c_ { 0 } } } { q { (c_ { 0 } ) } } = \\ frac { \\ int q { (c_ { 0 } ) } dc_ { 0 } } { q { (c_ { 0 } ) } } and \\ frac { n + q { (c_ { 0 } ) } } { q { (c_ { 0 } ) } } = \\ frac { \\ int q { (c_ { 0 } ) } dc_ { 0 } } { q { (c_ { 0 } ) } }", "AG_flan-t5-large": "q { (c_ { 0 } ) } = e ^ { c_ { 0 } } and \\ int q { (c_ { 0 } ) } dc_ { 0 } = \\ int e ^ { c_ { 0 } } dc_ { 0 } and e ^ { - c_ { 0 } } \\ int q { (c_ { 0 } ) } dc_ { 0 } = e ^ { - c_ { 0 } } \\ int e ^ { c_ { 0 } } dc_ { 0 } and e ^ { - c_ { 0 } } \\ int q { (c_ { 0 } ) } dc_ { 0 } = (n + e ^ { c_ { 0 } } ) e ^ { - c_ { 0 } } and \\ frac { (n + e ^ { c_ { 0 } } ) e ^ { - c_ { 0 } } } { \\ int q { (c_ { 0 } ) } dc_ { 0 } } = \\ frac { (n + e ^ { c_ { 0 } } ) e ^ { - c_ { 0 } } } { \\ int q { (c_ { 0 } ) } dc_ { 0 } }", "SR_flan-t5-large": "q { (c_ { 0 } ) } = e ^ { c_ { 0 } } and \\ int q { (c_ { 0 } ) } dc_ { 0 } = \\ int e ^ { c_ { 0 } } dc_ { 0 } and \\ frac { \\ int q { (c_ { 0 } ) } dc_ { 0 } } { q { (c_ { 0 } ) } } = \\ frac { \\ int e ^ { c_ { 0 } } dc_ { 0 } } { q { (c_ { 0 } ) } } and \\ frac { \\ int q { (c_ { 0 } ) } dc_ { 0 } } { q { (c_ { 0 } ) } } = \\ frac { n + q { (c_ { 0 } ) } } { q { (c_ { 0 } ) } }", "static_rouge": 0.869047619047619, "static_bleu": 0.7512564094857268, "static_bleurt": 0.8508814573287964, "static_gleu": 0.7512605042016807, "VR_rouge": -0.0011813885859689455, "EE_rouge": 0.07783882783882767, "AG_rouge": -0.047081413210445566, "SR_rouge": 0.09042166484914571, "VR_rouge_abs": 0.0011834319526627113, "EE_rouge_abs": 0.0706419554123019, "AG_rouge_abs": 0.03138318481208824, "SR_rouge_abs": 0.2549019607843137, "VR_bleu": 0.008222634395011585, "EE_bleu": 0.10788307151385645, "AG_bleu": -0.10135880637718997, "SR_bleu": 0.027254709315065795, "VR_bleu_abs": -0.02044123698787939, "EE_bleu_abs": 0.13101038539405385, "AG_bleu_abs": 0.09050184816616236, "SR_bleu_abs": 0.4659629905982726, "VR_bleurt": -0.020310044288635254, "EE_bleurt": -0.0005304813385009766, "AG_bleurt": -0.03625887632369995, "SR_bleurt": 0.1676337718963623, "VR_bleurt_abs": -0.029944658279418945, "EE_bleurt_abs": -0.026057541370391846, "AG_bleurt_abs": -0.06700563430786133, "SR_bleurt_abs": 0.30097439885139465, "VR_gleu": 0.00821981897684132, "EE_gleu": 0.10777587755453577, "AG_gleu": -0.10139175513034293, "SR_gleu": 0.011886902411971545, "VR_gleu_abs": -0.0183990374673359, "EE_gleu_abs": 0.13089377368564137, "AG_gleu_abs": 0.08170435959618749, "SR_gleu_abs": 0.38991596638655457, "ratio_VR_rouge": 0.9890109890109892, "ratio_VR_bleu": 1.0843900150515016, "ratio_VR_bleurt": 0.914199289377579, "ratio_VR_gleu": 1.0655328266764872, "ratio_EE_rouge": 0.9273681303507318, "ratio_EE_bleu": 0.8651528589554469, "ratio_EE_bleurt": 1.035893803937938, "ratio_EE_gleu": 0.8653405826525162, "ratio_AG_rouge": 0.9649956784788246, "ratio_AG_bleu": 0.8976948917866974, "ratio_AG_bleurt": 1.0867730743868342, "ratio_AG_gleu": 0.9077731092436975, "ratio_SR_rouge": 0.7450980392156863, "ratio_SR_bleu": 0.5340370094017274, "ratio_SR_bleurt": 0.6096587554766105, "ratio_SR_gleu": 0.6100840336134454}, {"prompt": "Given b{(A_{x},i)} = \\frac{\\partial}{\\partial A_{x}} (- A_{x} + i), then derive - (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)} = 0, then obtain \\int \\frac{- (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)}}{i} di = \\int 0 di", "derivation": "b{(A_{x},i)} = \\frac{\\partial}{\\partial A_{x}} (- A_{x} + i) and b^{A_{x}}{(A_{x},i)} = (\\frac{\\partial}{\\partial A_{x}} (- A_{x} + i))^{A_{x}} and b^{A_{x}}{(A_{x},i)} - (\\frac{\\partial}{\\partial A_{x}} (- A_{x} + i))^{A_{x}} = 0 and - (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)} = 0 and \\frac{- (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)}}{i} = 0 and \\int \\frac{- (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)}}{i} di = \\int 0 di", "srepr_derivation": [["premise", "Equality(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))))"], [["power", 1, "Symbol('A_x', commutative=True)"], "Equality(Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True)), Pow(Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))), Symbol('A_x', commutative=True)))"], [["minus", 2, "Pow(Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))), Symbol('A_x', commutative=True))"], "Equality(Add(Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True)), Mul(Integer(-1), Pow(Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))), Symbol('A_x', commutative=True)))), Integer(0))"], [["evaluate_derivatives", 3], "Equality(Add(Mul(Integer(-1), Pow(Integer(-1), Symbol('A_x', commutative=True))), Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True))), Integer(0))"], [["divide", 4, "Symbol('i', commutative=True)"], "Equality(Mul(Pow(Symbol('i', commutative=True), Integer(-1)), Add(Mul(Integer(-1), Pow(Integer(-1), Symbol('A_x', commutative=True))), Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True)))), Integer(0))"], [["integrate", 5, "Symbol('i', commutative=True)"], "Equality(Integral(Mul(Pow(Symbol('i', commutative=True), Integer(-1)), Add(Mul(Integer(-1), Pow(Integer(-1), Symbol('A_x', commutative=True))), Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True)))), Tuple(Symbol('i', commutative=True))), Integral(Integer(0), Tuple(Symbol('i', commutative=True))))"]], "EE prompt": "Given \\frac{\\partial}{\\partial A_{x}} (- A_{x} + i) = b{(A_{x},i)}, then derive 0 = - (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)}, then obtain \\int 0 di = \\int \\frac{- (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)}}{i} di", "EE derivation": "\\frac{\\partial}{\\partial A_{x}} (- A_{x} + i) = b{(A_{x},i)} and (\\frac{\\partial}{\\partial A_{x}} (- A_{x} + i))^{A_{x}} = b^{A_{x}}{(A_{x},i)} and 0 = b^{A_{x}}{(A_{x},i)} - (\\frac{\\partial}{\\partial A_{x}} (- A_{x} + i))^{A_{x}} and 0 = - (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)} and 0 = \\frac{- (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)}}{i} and \\int 0 di = \\int \\frac{- (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)}}{i} di", "EE srepr_derivation": [["premise", "Equality(Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))), Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)))"], [["power", 1, "Symbol('A_x', commutative=True)"], "Equality(Pow(Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))), Symbol('A_x', commutative=True)), Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True)))"], [["minus", 2, "Pow(Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))), Symbol('A_x', commutative=True))"], "Equality(Integer(0), Add(Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True)), Mul(Integer(-1), Pow(Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))), Symbol('A_x', commutative=True)))))"], [["evaluate_derivatives", 3], "Equality(Integer(0), Add(Mul(Integer(-1), Pow(Integer(-1), Symbol('A_x', commutative=True))), Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True))))"], [["divide", 4, "Symbol('i', commutative=True)"], "Equality(Integer(0), Mul(Pow(Symbol('i', commutative=True), Integer(-1)), Add(Mul(Integer(-1), Pow(Integer(-1), Symbol('A_x', commutative=True))), Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True)))))"], [["integrate", 5, "Symbol('i', commutative=True)"], "Equality(Integral(Integer(0), Tuple(Symbol('i', commutative=True))), Integral(Mul(Pow(Symbol('i', commutative=True), Integer(-1)), Add(Mul(Integer(-1), Pow(Integer(-1), Symbol('A_x', commutative=True))), Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True)))), Tuple(Symbol('i', commutative=True))))"]], "AG prompt": "Given b{(A_{x},i)} = \\frac{\\partial}{\\partial A_{x}} (- A_{x} + i), then derive - (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)} = 0, then obtain \\frac{- (-1)^{A_{x}} + (\\frac{\\partial}{\\partial A_{x}} (- A_{x} + i))^{A_{x}}}{i} = 0", "AG derivation": "b{(A_{x},i)} = \\frac{\\partial}{\\partial A_{x}} (- A_{x} + i) and b^{A_{x}}{(A_{x},i)} = (\\frac{\\partial}{\\partial A_{x}} (- A_{x} + i))^{A_{x}} and b^{A_{x}}{(A_{x},i)} - (\\frac{\\partial}{\\partial A_{x}} (- A_{x} + i))^{A_{x}} = 0 and - (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)} = 0 and \\frac{- (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)}}{i} = 0 and \\frac{- (-1)^{A_{x}} + (\\frac{\\partial}{\\partial A_{x}} (- A_{x} + i))^{A_{x}}}{i} = 0", "AG srepr_derivation": [["premise", "Equality(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))))"], [["power", 1, "Symbol('A_x', commutative=True)"], "Equality(Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True)), Pow(Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))), Symbol('A_x', commutative=True)))"], [["minus", 2, "Pow(Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))), Symbol('A_x', commutative=True))"], "Equality(Add(Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True)), Mul(Integer(-1), Pow(Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))), Symbol('A_x', commutative=True)))), Integer(0))"], [["evaluate_derivatives", 3], "Equality(Add(Mul(Integer(-1), Pow(Integer(-1), Symbol('A_x', commutative=True))), Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True))), Integer(0))"], [["divide", 4, "Symbol('i', commutative=True)"], "Equality(Mul(Pow(Symbol('i', commutative=True), Integer(-1)), Add(Mul(Integer(-1), Pow(Integer(-1), Symbol('A_x', commutative=True))), Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True)))), Integer(0))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Mul(Pow(Symbol('i', commutative=True), Integer(-1)), Add(Mul(Integer(-1), Pow(Integer(-1), Symbol('A_x', commutative=True))), Pow(Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))), Symbol('A_x', commutative=True)))), Integer(0))"]], "SR prompt": "Given b{(A_{x},i)} = \\frac{\\partial}{\\partial A_{x}} (- A_{x} + i), then obtain \\int \\frac{- (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)}}{i} di = \\int 0 di", "SR derivation": "b{(A_{x},i)} = \\frac{\\partial}{\\partial A_{x}} (- A_{x} + i) and b^{A_{x}}{(A_{x},i)} = (\\frac{\\partial}{\\partial A_{x}} (- A_{x} + i))^{A_{x}} and b^{A_{x}}{(A_{x},i)} - (\\frac{\\partial}{\\partial A_{x}} (- A_{x} + i))^{A_{x}} = 0 and - (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)} = 0 and \\frac{- (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)}}{i} = 0 and \\int \\frac{- (-1)^{A_{x}} + b^{A_{x}}{(A_{x},i)}}{i} di = \\int 0 di", "SR srepr_derivation": [["premise", "Equality(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))))"], [["power", 1, "Symbol('A_x', commutative=True)"], "Equality(Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True)), Pow(Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))), Symbol('A_x', commutative=True)))"], [["minus", 2, "Pow(Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))), Symbol('A_x', commutative=True))"], "Equality(Add(Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True)), Mul(Integer(-1), Pow(Derivative(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Symbol('i', commutative=True)), Tuple(Symbol('A_x', commutative=True), Integer(1))), Symbol('A_x', commutative=True)))), Integer(0))"], [["evaluate_derivatives", 3], "Equality(Add(Mul(Integer(-1), Pow(Integer(-1), Symbol('A_x', commutative=True))), Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True))), Integer(0))"], [["divide", 4, "Symbol('i', commutative=True)"], "Equality(Mul(Pow(Symbol('i', commutative=True), Integer(-1)), Add(Mul(Integer(-1), Pow(Integer(-1), Symbol('A_x', commutative=True))), Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True)))), Integer(0))"], [["integrate", 5, "Symbol('i', commutative=True)"], "Equality(Integral(Mul(Pow(Symbol('i', commutative=True), Integer(-1)), Add(Mul(Integer(-1), Pow(Integer(-1), Symbol('A_x', commutative=True))), Pow(Function('b')(Symbol('A_x', commutative=True), Symbol('i', commutative=True)), Symbol('A_x', commutative=True)))), Tuple(Symbol('i', commutative=True))), Integral(Integer(0), Tuple(Symbol('i', commutative=True))))"]], "VR prompt": "Given \\xi{(\\gamma,\\tau)} = \\frac{\\partial}{\\partial \\tau} (\\gamma - \\tau), then derive - (-1)^{\\tau} + \\xi^{\\tau}{(\\gamma,\\tau)} = 0, then obtain \\int \\frac{- (-1)^{\\tau} + \\xi^{\\tau}{(\\gamma,\\tau)}}{\\gamma} d\\gamma = \\int 0 d\\gamma", "VR derivation": "\\xi{(\\gamma,\\tau)} = \\frac{\\partial}{\\partial \\tau} (\\gamma - \\tau) and \\xi^{\\tau}{(\\gamma,\\tau)} = (\\frac{\\partial}{\\partial \\tau} (\\gamma - \\tau))^{\\tau} and \\xi^{\\tau}{(\\gamma,\\tau)} - (\\frac{\\partial}{\\partial \\tau} (\\gamma - \\tau))^{\\tau} = 0 and - (-1)^{\\tau} + \\xi^{\\tau}{(\\gamma,\\tau)} = 0 and \\frac{- (-1)^{\\tau} + \\xi^{\\tau}{(\\gamma,\\tau)}}{\\gamma} = 0 and \\int \\frac{- (-1)^{\\tau} + \\xi^{\\tau}{(\\gamma,\\tau)}}{\\gamma} d\\gamma = \\int 0 d\\gamma", "VR srepr_derivation": [["premise", "Equality(Function('\\\\xi')(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True)), Derivative(Add(Symbol('\\\\gamma', commutative=True), Mul(Integer(-1), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))))"], [["power", 1, "Symbol('\\\\tau', commutative=True)"], "Equality(Pow(Function('\\\\xi')(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True)), Symbol('\\\\tau', commutative=True)), Pow(Derivative(Add(Symbol('\\\\gamma', commutative=True), Mul(Integer(-1), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Symbol('\\\\tau', commutative=True)))"], [["minus", 2, "Pow(Derivative(Add(Symbol('\\\\gamma', commutative=True), Mul(Integer(-1), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Symbol('\\\\tau', commutative=True))"], "Equality(Add(Pow(Function('\\\\xi')(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True)), Symbol('\\\\tau', commutative=True)), Mul(Integer(-1), Pow(Derivative(Add(Symbol('\\\\gamma', commutative=True), Mul(Integer(-1), Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Symbol('\\\\tau', commutative=True)))), Integer(0))"], [["evaluate_derivatives", 3], "Equality(Add(Mul(Integer(-1), Pow(Integer(-1), Symbol('\\\\tau', commutative=True))), Pow(Function('\\\\xi')(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True)), Symbol('\\\\tau', commutative=True))), Integer(0))"], [["divide", 4, "Symbol('\\\\gamma', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\gamma', commutative=True), Integer(-1)), Add(Mul(Integer(-1), Pow(Integer(-1), Symbol('\\\\tau', commutative=True))), Pow(Function('\\\\xi')(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True)), Symbol('\\\\tau', commutative=True)))), Integer(0))"], [["integrate", 5, "Symbol('\\\\gamma', commutative=True)"], "Equality(Integral(Mul(Pow(Symbol('\\\\gamma', commutative=True), Integer(-1)), Add(Mul(Integer(-1), Pow(Integer(-1), Symbol('\\\\tau', commutative=True))), Pow(Function('\\\\xi')(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True)), Symbol('\\\\tau', commutative=True)))), Tuple(Symbol('\\\\gamma', commutative=True))), Integral(Integer(0), Tuple(Symbol('\\\\gamma', commutative=True))))"]], "static_flan-t5-large": "b { (A_ { x },i) } = \\ frac { \\ partial } { \\ partial A_ { x } } (- A_ { x } + i) and b { (A_ { x },i) } - \\ frac { \\ partial } { \\ partial A_ { x } } (- A_ { x } + i) = 0 and - (-1) ^ { A_ { x } } + b ^ { A_ { x } } { (A_ { x },i) } = 0 and \\ frac { - (-1) ^ { A_ { x } } + b ^ { A_ { x } } { (A_ { x },i) } } { i } = 0 and \\ int \\ frac { - (-1) ^ { A_ { x } } + b ^ { A_ { x } } { (A_ { x },i) } } { i } di = \\ int 0 di", "VR_flan-t5-large": "xi { ( \\ gamma, \\ tau) } = \\ frac { \\ partial } { \\ partial \\ tau } ( \\ gamma - \\ tau) and \\ xi ^ { \\ tau } { ( \\ gamma, \\ tau) } = ( \\ frac { \\ partial } { \\ partial \\ tau } ( \\ gamma - \\ tau)) ^ { \\ tau } and ( \\ frac { \\ partial } { \\ partial \\ tau } ( \\ gamma - \\ tau)) ^ { \\ tau } - ( \\ frac { \\ partial } { \\ partial \\ tau } ( \\ gamma - \\ tau)) ^ { \\ tau } = 0 ^ { \\ tau } - ( \\ frac { \\ partial } { \\ partial \\ tau } ( \\ gamma - \\ tau)) ^ { \\ tau } and - (-1) ^ { \\ tau } + \\ xi ^ { \\ tau } { ( \\ gamma, \\ tau) } = 0 and \\ frac { - (-1) ^ { \\ tau } + \\ xi ^ { \\ tau } { ( \\ gamma, \\ tau) } } { \\ gamma } = 0 and \\ int \\ frac { - (-1) ^ { \\ tau } + \\ xi ^ { \\ tau } { ( \\ gamma, \\ tau) } } { \\ gamma } d \\ gamma = \\ int 0 d \\ gamma", "EE_flan-t5-large": "frac { \\ partial } { \\ partial A_ { x } } (- A_ { x } + i) = b { (A_ { x },i) } and 0 = - \\ frac { \\ partial } { \\ partial A_ { x } } (- A_ { x } + i) + \\ frac { \\ partial } { \\ partial A_ { x } } (- A_ { x } + i) and 0 = - (-1) ^ { A_ { x } } + b ^ { A_ { x } } { (A_ { x },i) } and 0 = \\ frac { - (-1) ^ { A_ { x } } + b ^ { A_ { x } } { (A_ { x },i) } } { i } and \\ int 0 di = \\ int \\ frac { - (-1) ^ { A_ { x } } + b ^ { A_ { x } } { (A_ { x },i) } } { i } di", "AG_flan-t5-large": "b { (A_ { x },i) } = \\ frac { \\ partial } { \\ partial A_ { x } } (- A_ { x } + i) and b ^ { A_ { x } } { (A_ { x },i) } = ( \\ frac { \\ partial } { \\ partial A_ { x } } (- A_ { x } + i)) ^ { A_ { x } } and - b ^ { A_ { x } } { (A_ { x },i) } + ( \\ frac { \\ partial } { \\ partial A_ { x } } (- A_ { x } + i)) ^ { A_ { x } } = 0 and - (-1) ^ { A_ { x } } + b ^ { A_ { x } } { (A_ { x },i) } = 0 and \\ frac { - (-1) ^ { A_ { x } } + b ^ { A_ { x } } { (A_ { x },i) } } { i } = 0 and \\ frac { - (-1) ^ { A_ { x } } + ( \\ frac { \\ partial } { \\ partial A_ { x } } (- A_ { x } + i)) ^ { A_ { x } } } { i } = 0", "SR_flan-t5-large": "b { (A_ { x },i) } = \\ frac { \\ partial } { \\ partial A_ { x } } (- A_ { x } + i) and b ^ { A_ { x } } { (A_ { x },i) } = ( \\ frac { \\ partial } { \\ partial A_ { x } } (- A_ { x } + i)) ^ { A_ { x } } and - ( \\ frac { \\ partial } { \\ partial A_ { x } } (- A_ { x } + i)) ^ { A_ { x } } + b ^ { A_ { x } } { (A_ { x },i) } = 0 and \\ frac { - ( \\ frac { \\ partial } { \\ partial A_ { x } } (- A_ { x } + i)) ^ { A_ { x } } + b ^ { A_ { x } } { (A_ { x },i) } } { i } = 0 and \\ frac { - (-1) ^ { A_ { x } } + b ^ { A_ { x } } { (A_ { x },i) } } { i } = 0 and \\ int \\ frac { - (-1) ^ { A_ { x } } + b ^ { A_ { x } } { (A_ { x },i) } } { i } di = \\ int 0 di", "static_rouge": 0.8496732026143791, "static_bleu": 0.6806597126612389, "static_bleurt": 0.58075350522995, "static_gleu": 0.7165775401069518, "VR_rouge": -0.033085418075276096, "EE_rouge": -0.029307689105366186, "AG_rouge": -0.15032679738562094, "SR_rouge": -0.046501660773599185, "VR_rouge_abs": 0.027236652236652253, "EE_rouge_abs": 0.06473968897903992, "AG_rouge_abs": 0.1383817894974082, "SR_rouge_abs": 0.2098765432098766, "VR_bleu": -0.12688363924966228, "EE_bleu": -0.05199317181801799, "AG_bleu": -0.30291412010401175, "SR_bleu": -0.19433025036932217, "VR_bleu_abs": 0.06869059675976802, "EE_bleu_abs": 0.0906734867773411, "AG_bleu_abs": 0.2564148658828934, "SR_bleu_abs": 0.3699616918145001, "VR_bleurt": -0.1443026065826416, "EE_bleurt": 0.03928273916244507, "AG_bleurt": -0.27527791261672974, "SR_bleurt": -0.16042357683181763, "VR_bleurt_abs": -0.12652838230133057, "EE_bleurt_abs": -0.04136019945144653, "AG_bleurt_abs": 0.13065332174301147, "SR_bleurt_abs": 0.1679942011833191, "VR_gleu": -0.09146633557860573, "EE_gleu": -0.0401069518716578, "AG_gleu": -0.2670713411322908, "SR_gleu": -0.15862245989304813, "VR_gleu_abs": 0.06665265408140986, "EE_gleu_abs": 0.08965275313370624, "AG_gleu_abs": 0.25614820495899215, "SR_gleu_abs": 0.36960000000000004, "ratio_VR_rouge": 0.868923611111111, "ratio_VR_bleu": 0.795490825135882, "ratio_VR_bleurt": 0.24452644462972287, "ratio_VR_gleu": 0.8148904012887578, "ratio_EE_rouge": 0.9258900928792569, "ratio_EE_bleu": 0.902795924467291, "ratio_EE_bleurt": 1.0742749853571318, "ratio_EE_gleu": 0.9040168043740282, "ratio_AG_rouge": 0.8456510809451986, "ratio_AG_bleu": 0.718416320460361, "ratio_AG_bleurt": 0.8437652617603044, "ratio_AG_gleu": 0.718843960812784, "ratio_SR_rouge": 0.7901234567901234, "ratio_SR_bleu": 0.6300383081854999, "ratio_SR_bleurt": 0.8080386772974522, "ratio_SR_gleu": 0.6304}, {"prompt": "Given A{(\\mathbf{P})} = \\int \\log{(\\mathbf{P})} d\\mathbf{P}, then derive A{(\\mathbf{P})} = \\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1, then obtain \\frac{\\partial}{\\partial \\theta_1} A^{\\theta_1}{(\\mathbf{P})} = \\frac{\\partial}{\\partial \\theta_1} (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1}", "derivation": "A{(\\mathbf{P})} = \\int \\log{(\\mathbf{P})} d\\mathbf{P} and A{(\\mathbf{P})} = \\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1 and \\int \\log{(\\mathbf{P})} d\\mathbf{P} = \\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1 and (\\int \\log{(\\mathbf{P})} d\\mathbf{P})^{\\theta_1} = (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1} and (\\int \\log{(\\mathbf{P})} d\\mathbf{P})^{\\theta_1} = A^{\\theta_1}{(\\mathbf{P})} and A^{\\theta_1}{(\\mathbf{P})} = (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1} and \\frac{\\partial}{\\partial \\theta_1} A^{\\theta_1}{(\\mathbf{P})} = \\frac{\\partial}{\\partial \\theta_1} (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1}", "srepr_derivation": [["premise", "Equality(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["substitute_LHS_for_RHS", 2, 1], "Equality(Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))), Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["power", 3, "Symbol('\\\\theta_1', commutative=True)"], "Equality(Pow(Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))), Symbol('\\\\theta_1', commutative=True)), Pow(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Pow(Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))), Symbol('\\\\theta_1', commutative=True)), Pow(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Pow(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Pow(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["differentiate", 6, "Symbol('\\\\theta_1', commutative=True)"], "Equality(Derivative(Pow(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Tuple(Symbol('\\\\theta_1', commutative=True), Integer(1))), Derivative(Pow(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Tuple(Symbol('\\\\theta_1', commutative=True), Integer(1))))"]], "EE prompt": "Given \\int \\log{(\\mathbf{P})} d\\mathbf{P} = A{(\\mathbf{P})}, then derive \\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1 = A{(\\mathbf{P})}, then obtain \\frac{\\partial}{\\partial \\theta_1} (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1} = \\frac{\\partial}{\\partial \\theta_1} A^{\\theta_1}{(\\mathbf{P})}", "EE derivation": "\\int \\log{(\\mathbf{P})} d\\mathbf{P} = A{(\\mathbf{P})} and \\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1 = A{(\\mathbf{P})} and \\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1 = \\int \\log{(\\mathbf{P})} d\\mathbf{P} and (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1} = (\\int \\log{(\\mathbf{P})} d\\mathbf{P})^{\\theta_1} and A^{\\theta_1}{(\\mathbf{P})} = (\\int \\log{(\\mathbf{P})} d\\mathbf{P})^{\\theta_1} and (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1} = A^{\\theta_1}{(\\mathbf{P})} and \\frac{\\partial}{\\partial \\theta_1} (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1} = \\frac{\\partial}{\\partial \\theta_1} A^{\\theta_1}{(\\mathbf{P})}", "EE srepr_derivation": [["premise", "Equality(Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))), Function('A')(Symbol('\\\\mathbf{P}', commutative=True)))"], [["evaluate_integrals", 1], "Equality(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Function('A')(Symbol('\\\\mathbf{P}', commutative=True)))"], [["substitute_RHS_for_LHS", 2, 1], "Equality(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))))"], [["power", 3, "Symbol('\\\\theta_1', commutative=True)"], "Equality(Pow(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Pow(Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))), Symbol('\\\\theta_1', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Pow(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Pow(Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))), Symbol('\\\\theta_1', commutative=True)))"], [["substitute_RHS_for_LHS", 4, 5], "Equality(Pow(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Pow(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["differentiate", 6, "Symbol('\\\\theta_1', commutative=True)"], "Equality(Derivative(Pow(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Tuple(Symbol('\\\\theta_1', commutative=True), Integer(1))), Derivative(Pow(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Tuple(Symbol('\\\\theta_1', commutative=True), Integer(1))))"]], "AG prompt": "Given A{(\\mathbf{P})} = \\int \\log{(\\mathbf{P})} d\\mathbf{P}, then derive A{(\\mathbf{P})} = \\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1, then obtain \\theta_1 A^{\\theta_1}{(\\mathbf{P})} = \\theta_1 (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1}", "AG derivation": "A{(\\mathbf{P})} = \\int \\log{(\\mathbf{P})} d\\mathbf{P} and A{(\\mathbf{P})} = \\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1 and \\int \\log{(\\mathbf{P})} d\\mathbf{P} = \\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1 and (\\int \\log{(\\mathbf{P})} d\\mathbf{P})^{\\theta_1} = (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1} and (\\int \\log{(\\mathbf{P})} d\\mathbf{P})^{\\theta_1} = A^{\\theta_1}{(\\mathbf{P})} and A^{\\theta_1}{(\\mathbf{P})} = (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1} and \\theta_1 A^{\\theta_1}{(\\mathbf{P})} = \\theta_1 (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1}", "AG srepr_derivation": [["premise", "Equality(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["substitute_LHS_for_RHS", 2, 1], "Equality(Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))), Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["power", 3, "Symbol('\\\\theta_1', commutative=True)"], "Equality(Pow(Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))), Symbol('\\\\theta_1', commutative=True)), Pow(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Pow(Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))), Symbol('\\\\theta_1', commutative=True)), Pow(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Pow(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Pow(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["times", 6, "Symbol('\\\\theta_1', commutative=True)"], "Equality(Mul(Symbol('\\\\theta_1', commutative=True), Pow(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True))), Mul(Symbol('\\\\theta_1', commutative=True), Pow(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Symbol('\\\\theta_1', commutative=True))))"]], "SR prompt": "Given A{(\\mathbf{P})} = \\int \\log{(\\mathbf{P})} d\\mathbf{P}, then obtain \\frac{\\partial}{\\partial \\theta_1} A^{\\theta_1}{(\\mathbf{P})} = \\frac{\\partial}{\\partial \\theta_1} (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1}", "SR derivation": "A{(\\mathbf{P})} = \\int \\log{(\\mathbf{P})} d\\mathbf{P} and A{(\\mathbf{P})} = \\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1 and \\int \\log{(\\mathbf{P})} d\\mathbf{P} = \\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1 and (\\int \\log{(\\mathbf{P})} d\\mathbf{P})^{\\theta_1} = (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1} and (\\int \\log{(\\mathbf{P})} d\\mathbf{P})^{\\theta_1} = A^{\\theta_1}{(\\mathbf{P})} and A^{\\theta_1}{(\\mathbf{P})} = (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1} and \\frac{\\partial}{\\partial \\theta_1} A^{\\theta_1}{(\\mathbf{P})} = \\frac{\\partial}{\\partial \\theta_1} (\\mathbf{P} \\log{(\\mathbf{P})} - \\mathbf{P} + \\theta_1)^{\\theta_1}", "SR srepr_derivation": [["premise", "Equality(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["substitute_LHS_for_RHS", 2, 1], "Equality(Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))), Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["power", 3, "Symbol('\\\\theta_1', commutative=True)"], "Equality(Pow(Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))), Symbol('\\\\theta_1', commutative=True)), Pow(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Pow(Integral(log(Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True))), Symbol('\\\\theta_1', commutative=True)), Pow(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Pow(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Pow(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Symbol('\\\\theta_1', commutative=True)))"], [["differentiate", 6, "Symbol('\\\\theta_1', commutative=True)"], "Equality(Derivative(Pow(Function('A')(Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Tuple(Symbol('\\\\theta_1', commutative=True), Integer(1))), Derivative(Pow(Add(Mul(Symbol('\\\\mathbf{P}', commutative=True), log(Symbol('\\\\mathbf{P}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{P}', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Symbol('\\\\theta_1', commutative=True)), Tuple(Symbol('\\\\theta_1', commutative=True), Integer(1))))"]], "VR prompt": "Given \\alpha{(\\iota)} = \\int \\log{(\\iota)} d\\iota, then derive \\alpha{(\\iota)} = \\iota \\log{(\\iota)} - \\iota + \\xi, then obtain \\frac{\\partial}{\\partial \\xi} \\alpha^{\\xi}{(\\iota)} = \\frac{\\partial}{\\partial \\xi} (\\iota \\log{(\\iota)} - \\iota + \\xi)^{\\xi}", "VR derivation": "\\alpha{(\\iota)} = \\int \\log{(\\iota)} d\\iota and \\alpha{(\\iota)} = \\iota \\log{(\\iota)} - \\iota + \\xi and \\int \\log{(\\iota)} d\\iota = \\iota \\log{(\\iota)} - \\iota + \\xi and (\\int \\log{(\\iota)} d\\iota)^{\\xi} = (\\iota \\log{(\\iota)} - \\iota + \\xi)^{\\xi} and (\\int \\log{(\\iota)} d\\iota)^{\\xi} = \\alpha^{\\xi}{(\\iota)} and \\alpha^{\\xi}{(\\iota)} = (\\iota \\log{(\\iota)} - \\iota + \\xi)^{\\xi} and \\frac{\\partial}{\\partial \\xi} \\alpha^{\\xi}{(\\iota)} = \\frac{\\partial}{\\partial \\xi} (\\iota \\log{(\\iota)} - \\iota + \\xi)^{\\xi}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), Integral(log(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), Add(Mul(Symbol('\\\\iota', commutative=True), log(Symbol('\\\\iota', commutative=True))), Mul(Integer(-1), Symbol('\\\\iota', commutative=True)), Symbol('\\\\xi', commutative=True)))"], [["substitute_LHS_for_RHS", 2, 1], "Equality(Integral(log(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True))), Add(Mul(Symbol('\\\\iota', commutative=True), log(Symbol('\\\\iota', commutative=True))), Mul(Integer(-1), Symbol('\\\\iota', commutative=True)), Symbol('\\\\xi', commutative=True)))"], [["power", 3, "Symbol('\\\\xi', commutative=True)"], "Equality(Pow(Integral(log(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True))), Symbol('\\\\xi', commutative=True)), Pow(Add(Mul(Symbol('\\\\iota', commutative=True), log(Symbol('\\\\iota', commutative=True))), Mul(Integer(-1), Symbol('\\\\iota', commutative=True)), Symbol('\\\\xi', commutative=True)), Symbol('\\\\xi', commutative=True)))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Pow(Integral(log(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True))), Symbol('\\\\xi', commutative=True)), Pow(Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), Symbol('\\\\xi', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Pow(Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), Symbol('\\\\xi', commutative=True)), Pow(Add(Mul(Symbol('\\\\iota', commutative=True), log(Symbol('\\\\iota', commutative=True))), Mul(Integer(-1), Symbol('\\\\iota', commutative=True)), Symbol('\\\\xi', commutative=True)), Symbol('\\\\xi', commutative=True)))"], [["differentiate", 6, "Symbol('\\\\xi', commutative=True)"], "Equality(Derivative(Pow(Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))), Derivative(Pow(Add(Mul(Symbol('\\\\iota', commutative=True), log(Symbol('\\\\iota', commutative=True))), Mul(Integer(-1), Symbol('\\\\iota', commutative=True)), Symbol('\\\\xi', commutative=True)), Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))))"]], "static_flan-t5-large": "{ ( \\ mathbf { P } ) } = \\ int \\ log { ( \\ mathbf { P } ) } d \\ mathbf { P } and A ^ { \\ theta_1 } { ( \\ mathbf { P } ) } = ( \\ int \\ log { ( \\ mathbf { P } ) } d \\ mathbf { P } ) ^ { \\ theta_1 } and A { ( \\ mathbf { P } ) } = \\ mathbf { P } \\ log { ( \\ mathbf { P } ) } - \\ mathbf { P } + \\ theta_1 and ( \\ mathbf { P } \\ log { ( \\ mathbf { P } ) } - \\ mathbf { P } + \\ theta_1) ^ { \\ theta_1 } = ( \\ mathbf { P } \\ log { ( \\ mathbf { P } ) } - \\ mathbf { P } + \\ theta_1) ^ { \\ theta_1 } and \\ frac { \\ partial } { \\ partial \\ theta_1 } ( \\ mathbf { P } \\ log { ( \\ mathbf { P } ) } - \\ mathbf { P } + \\ theta_1) ^ { \\ theta_1 } = \\ frac { \\ partial } { \\ partial \\ theta_1 } ( \\ mathbf { P } \\ log { ( \\ mathbf { P } ) } - \\ mathbf { P } + \\ theta_1) ^ { \\ theta_1 } and \\ frac { \\ partial } { \\ partial \\ theta_1 } A ^ { \\ theta_1 } { ( \\ mathbf { P } ) } = \\ frac { \\ partial } { \\ partial \\ theta_1 } ( \\ mathbf { P } \\ log { ( \\ mathbf { P } ) } - \\ mathbf { P } + \\ theta_1) ^ { \\ theta_1 }", "VR_flan-t5-large": "alpha { ( \\ iota) } = \\ int \\ log { ( \\ iota) } d \\ iota and \\ alpha { ( \\ iota) } = \\ iota \\ log { ( \\ iota) } - \\ iota + \\ xi and \\ omega { ( \\ iota) } = \\ iota \\ log { ( \\ iota) } - \\ iota + \\ xi and \\ int \\ log { ( \\ iota) } d \\ iota = \\ iota \\ log { ( \\ iota) } - \\ iota + \\ xi and \\ mathbf { ( \\ iota) } = \\ iota \\ log { ( \\ iota) } - \\ iota + \\ xi and \\ mathbf { ( \\ iota) } = \\ iota \\ log { ( \\ iota) } - \\ iota + \\ xi and \\ mathbf { ( \\ iota) } = \\ iota \\ log { ( \\ iota) } - \\ iota + \\ xi and \\ mathbf { ( \\ iota) } = \\ iota \\ log { ( \\ iota) } - \\ iota + \\ xi and \\ mathbf { ( \\ iota) } = \\ iota \\ log { ( \\ iota) } - \\ iota + \\ xi and \\ mathbf { ( \\ iota) } = \\ iota \\ log { ( \\ iota) } - \\ iota + \\ xi and \\ frac { \\ partial } { \\ partial \\ xi } \\ mathbf { xi } { ( \\ iota) } = \\ frac { \\ partial } { \\ partial", "EE_flan-t5-large": "int \\ log { ( \\ mathbf { P } ) } d \\ mathbf { P } = A { ( \\ mathbf { P } ) } and \\ int \\ log { ( \\ mathbf { P } ) } d \\ mathbf { P } = A { ( \\ mathbf { P } ) } and \\ mathbf { P } \\ log { ( \\ mathbf { P } ) } - \\ mathbf { P } + \\ theta_1 = A { ( \\ mathbf { P } ) } and ( \\ mathbf { P } \\ log { ( \\ mathbf { P } ) } - \\ mathbf { P } + \\ theta_1) ^ { \\ theta_1 } = (A { ( \\ mathbf { P } ) } ) ^ { \\ theta_1 } and \\ frac { \\ partial } { \\ partial \\ theta_1 } ( \\ mathbf { P } \\ log { ( \\ mathbf { P } ) } - \\ mathbf { P } + \\ theta_1) ^ { \\ theta_1 } = \\ frac { \\ partial } { \\ partial \\ theta_1 } (A { ( \\ mathbf { P } ) } ) ^ { \\ theta_1 } and \\ frac { \\ partial } { \\ partial \\ theta_1 } ( \\ mathbf { P } \\ log { ( \\ mathbf { P } ) } - \\ mathbf { P } + \\ theta_1) ^ { \\ theta_1 } = \\ frac { \\ partial } { \\ partial \\ theta_1 } A ^ { \\ theta_1 } { ( \\ mathbf { P } ) }", "AG_flan-t5-large": "{ ( \\ mathbf { P } ) } = \\ int \\ log { ( \\ mathbf { P } ) } d \\ mathbf { P } and A ^ { \\ theta_1 } { ( \\ mathbf { P } ) } = ( \\ int \\ log { ( \\ mathbf { P } ) } d \\ mathbf { P } ) ^ { \\ theta_1 } and A ^ { \\ theta_1 } { ( \\ mathbf { P } ) } = ( \\ mathbf { P } \\ log { ( \\ mathbf { P } ) } - \\ mathbf { P } + \\ theta_1) ^ { \\ theta_1 } and \\ theta_1 A ^ { \\ theta_1 } { ( \\ mathbf { P } ) } = \\ theta_1 ( \\ mathbf { P } \\ log { ( \\ mathbf { P } ) } - \\ mathbf { P } + \\ theta_1) ^ { \\ theta_1 }", "SR_flan-t5-large": "{ ( \\ mathbf { P } ) } = \\ int \\ log { ( \\ mathbf { P } ) } d \\ mathbf { P } and A ^ { \\ theta_1 } { ( \\ mathbf { P } ) } = ( \\ int \\ log { ( \\ mathbf { P } ) } d \\ mathbf { P } ) ^ { \\ theta_1 } and \\ frac { \\ partial } { \\ partial \\ theta_1 } A ^ { \\ theta_1 } { ( \\ mathbf { P } ) } = \\ frac { \\ partial } { \\ partial \\ theta_1 } ( \\ int \\ log { ( \\ mathbf { P } ) } d \\ mathbf { P } ) ^ { \\ theta_1 } and \\ frac { \\ partial } { \\ partial \\ theta_1 } A ^ { \\ theta_1 } { ( \\ mathbf { P } ) } = \\ frac { \\ partial } { \\ partial \\ theta_1 } ( \\ mathbf { P } \\ log { ( \\ mathbf { P } ) } - \\ mathbf { P } + \\ theta_1) ^ { \\ theta_1 }", "static_rouge": 0.8571428571428571, "static_bleu": 0.8897823967042053, "static_bleurt": 0.7489609122276306, "static_gleu": 0.8906040268456376, "VR_rouge": 0.22619047619047616, "EE_rouge": 0.049967969250480415, "AG_rouge": 0.16748768472906395, "SR_rouge": 0.18703976435935188, "VR_rouge_abs": 0.04724753919066714, "EE_rouge_abs": 0.10038813731770735, "AG_rouge_abs": 0.30134099616858234, "SR_rouge_abs": 0.2989690721649484, "VR_bleu": 0.24295707365572938, "EE_bleu": 0.09590304141577677, "AG_bleu": 0.44123979170385935, "SR_bleu": 0.37423518520743637, "VR_bleu_abs": 0.06535807023826701, "EE_bleu_abs": 0.16654038712871655, "AG_bleu_abs": 0.552115058142256, "SR_bleu_abs": 0.4729449506836173, "VR_bleurt": 0.4296618103981018, "EE_bleurt": 0.04401111602783203, "AG_bleurt": 0.25316300988197327, "SR_bleurt": 0.19248801469802856, "VR_bleurt_abs": -0.15801160782575607, "EE_bleurt_abs": 0.06852924823760986, "AG_bleurt_abs": 0.46307340264320374, "SR_bleurt_abs": 0.2229498028755188, "VR_gleu": 0.23590317214478285, "EE_gleu": 0.08910334471739745, "AG_gleu": 0.3393774756190864, "SR_gleu": 0.3101128945127589, "VR_gleu_abs": 0.06783193092650414, "EE_gleu_abs": 0.15783989671937515, "AG_gleu_abs": 0.4365071371672908, "SR_gleu_abs": 0.40134228187919463, "ratio_VR_rouge": 0.6161137440758294, "ratio_VR_bleu": 0.8018302658584141, "ratio_VR_bleurt": 0.34743271756151556, "ratio_VR_gleu": 0.8205025076926804, "ratio_EE_rouge": 0.8893871449925261, "ratio_EE_bleu": 0.8274878475826181, "ratio_EE_bleurt": 0.9117821775644843, "ratio_EE_gleu": 0.836586660599856, "ratio_AG_rouge": 0.6850850850850851, "ratio_AG_bleu": 0.40747114100930265, "ratio_AG_bleurt": 0.47742990663320656, "ratio_AG_gleu": 0.5322226147023039, "ratio_SR_rouge": 0.7010309278350516, "ratio_SR_bleu": 0.5270550493163827, "ratio_SR_bleurt": 0.7484051153882916, "ratio_SR_gleu": 0.5986577181208054}, {"prompt": "Given \\operatorname{P_{e}}{(\\dot{z})} = \\sin{(\\dot{z})}, then derive \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} = \\cos{(\\dot{z})}, then obtain \\operatorname{P_{e}}{(\\dot{z})} \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} = \\operatorname{P_{e}}{(\\dot{z})} \\cos{(\\dot{z})}", "derivation": "\\operatorname{P_{e}}{(\\dot{z})} = \\sin{(\\dot{z})} and \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} = \\frac{d}{d \\dot{z}} \\sin{(\\dot{z})} and \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} = \\cos{(\\dot{z})} and \\sin{(\\dot{z})} \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} = \\sin{(\\dot{z})} \\cos{(\\dot{z})} and \\operatorname{P_{e}}{(\\dot{z})} \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} = \\operatorname{P_{e}}{(\\dot{z})} \\cos{(\\dot{z})}", "srepr_derivation": [["premise", "Equality(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), sin(Symbol('\\\\dot{z}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\dot{z}', commutative=True)"], "Equality(Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))), cos(Symbol('\\\\dot{z}', commutative=True)))"], [["times", 3, "sin(Symbol('\\\\dot{z}', commutative=True))"], "Equality(Mul(sin(Symbol('\\\\dot{z}', commutative=True)), Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\dot{z}', commutative=True)), cos(Symbol('\\\\dot{z}', commutative=True))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Mul(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1)))), Mul(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), cos(Symbol('\\\\dot{z}', commutative=True))))"]], "EE prompt": "Given \\sin{(\\dot{z})} = \\operatorname{P_{e}}{(\\dot{z})}, then derive \\cos{(\\dot{z})} = \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})}, then obtain \\operatorname{P_{e}}{(\\dot{z})} \\cos{(\\dot{z})} = \\operatorname{P_{e}}{(\\dot{z})} \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})}", "EE derivation": "\\sin{(\\dot{z})} = \\operatorname{P_{e}}{(\\dot{z})} and \\frac{d}{d \\dot{z}} \\sin{(\\dot{z})} = \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} and \\cos{(\\dot{z})} = \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} and \\sin{(\\dot{z})} \\cos{(\\dot{z})} = \\sin{(\\dot{z})} \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} and \\operatorname{P_{e}}{(\\dot{z})} \\cos{(\\dot{z})} = \\operatorname{P_{e}}{(\\dot{z})} \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})}", "EE srepr_derivation": [["premise", "Equality(sin(Symbol('\\\\dot{z}', commutative=True)), Function('P_e')(Symbol('\\\\dot{z}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\dot{z}', commutative=True)"], "Equality(Derivative(sin(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))), Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(cos(Symbol('\\\\dot{z}', commutative=True)), Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))"], [["times", 3, "sin(Symbol('\\\\dot{z}', commutative=True))"], "Equality(Mul(sin(Symbol('\\\\dot{z}', commutative=True)), cos(Symbol('\\\\dot{z}', commutative=True))), Mul(sin(Symbol('\\\\dot{z}', commutative=True)), Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Mul(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), cos(Symbol('\\\\dot{z}', commutative=True))), Mul(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1)))))"]], "AG prompt": "Given \\operatorname{P_{e}}{(\\dot{z})} = \\sin{(\\dot{z})}, then derive \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} = \\cos{(\\dot{z})}, then obtain \\frac{\\sin{(\\dot{z})} \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})}}{\\operatorname{P_{e}}{(\\dot{z})}} = \\frac{\\sin{(\\dot{z})} \\cos{(\\dot{z})}}{\\operatorname{P_{e}}{(\\dot{z})}}", "AG derivation": "\\operatorname{P_{e}}{(\\dot{z})} = \\sin{(\\dot{z})} and \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} = \\frac{d}{d \\dot{z}} \\sin{(\\dot{z})} and \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} = \\cos{(\\dot{z})} and \\sin{(\\dot{z})} \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} = \\sin{(\\dot{z})} \\cos{(\\dot{z})} and \\frac{\\sin{(\\dot{z})} \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})}}{\\operatorname{P_{e}}{(\\dot{z})}} = \\frac{\\sin{(\\dot{z})} \\cos{(\\dot{z})}}{\\operatorname{P_{e}}{(\\dot{z})}}", "AG srepr_derivation": [["premise", "Equality(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), sin(Symbol('\\\\dot{z}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\dot{z}', commutative=True)"], "Equality(Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))), cos(Symbol('\\\\dot{z}', commutative=True)))"], [["times", 3, "sin(Symbol('\\\\dot{z}', commutative=True))"], "Equality(Mul(sin(Symbol('\\\\dot{z}', commutative=True)), Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\dot{z}', commutative=True)), cos(Symbol('\\\\dot{z}', commutative=True))))"], [["divide", 4, "Function('P_e')(Symbol('\\\\dot{z}', commutative=True))"], "Equality(Mul(Pow(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Integer(-1)), sin(Symbol('\\\\dot{z}', commutative=True)), Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1)))), Mul(Pow(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Integer(-1)), sin(Symbol('\\\\dot{z}', commutative=True)), cos(Symbol('\\\\dot{z}', commutative=True))))"]], "SR prompt": "Given \\operatorname{P_{e}}{(\\dot{z})} = \\sin{(\\dot{z})}, then obtain \\operatorname{P_{e}}{(\\dot{z})} \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} = \\operatorname{P_{e}}{(\\dot{z})} \\cos{(\\dot{z})}", "SR derivation": "\\operatorname{P_{e}}{(\\dot{z})} = \\sin{(\\dot{z})} and \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} = \\frac{d}{d \\dot{z}} \\sin{(\\dot{z})} and \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} = \\cos{(\\dot{z})} and \\sin{(\\dot{z})} \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} = \\sin{(\\dot{z})} \\cos{(\\dot{z})} and \\operatorname{P_{e}}{(\\dot{z})} \\frac{d}{d \\dot{z}} \\operatorname{P_{e}}{(\\dot{z})} = \\operatorname{P_{e}}{(\\dot{z})} \\cos{(\\dot{z})}", "SR srepr_derivation": [["premise", "Equality(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), sin(Symbol('\\\\dot{z}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\dot{z}', commutative=True)"], "Equality(Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))), cos(Symbol('\\\\dot{z}', commutative=True)))"], [["times", 3, "sin(Symbol('\\\\dot{z}', commutative=True))"], "Equality(Mul(sin(Symbol('\\\\dot{z}', commutative=True)), Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\dot{z}', commutative=True)), cos(Symbol('\\\\dot{z}', commutative=True))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Mul(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Derivative(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1)))), Mul(Function('P_e')(Symbol('\\\\dot{z}', commutative=True)), cos(Symbol('\\\\dot{z}', commutative=True))))"]], "VR prompt": "Given \\beta{(\\tau)} = \\sin{(\\tau)}, then derive \\frac{d}{d \\tau} \\beta{(\\tau)} = \\cos{(\\tau)}, then obtain \\beta{(\\tau)} \\frac{d}{d \\tau} \\beta{(\\tau)} = \\beta{(\\tau)} \\cos{(\\tau)}", "VR derivation": "\\beta{(\\tau)} = \\sin{(\\tau)} and \\frac{d}{d \\tau} \\beta{(\\tau)} = \\frac{d}{d \\tau} \\sin{(\\tau)} and \\frac{d}{d \\tau} \\beta{(\\tau)} = \\cos{(\\tau)} and \\sin{(\\tau)} \\frac{d}{d \\tau} \\beta{(\\tau)} = \\sin{(\\tau)} \\cos{(\\tau)} and \\beta{(\\tau)} \\frac{d}{d \\tau} \\beta{(\\tau)} = \\beta{(\\tau)} \\cos{(\\tau)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\beta')(Symbol('\\\\tau', commutative=True)), sin(Symbol('\\\\tau', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\tau', commutative=True)"], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), cos(Symbol('\\\\tau', commutative=True)))"], [["times", 3, "sin(Symbol('\\\\tau', commutative=True))"], "Equality(Mul(sin(Symbol('\\\\tau', commutative=True)), Derivative(Function('\\\\beta')(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\tau', commutative=True)), cos(Symbol('\\\\tau', commutative=True))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Mul(Function('\\\\beta')(Symbol('\\\\tau', commutative=True)), Derivative(Function('\\\\beta')(Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1)))), Mul(Function('\\\\beta')(Symbol('\\\\tau', commutative=True)), cos(Symbol('\\\\tau', commutative=True))))"]], "static_flan-t5-large": "operatorname { P_ { e } } { ( \\ dot { z } ) } = \\ sin { ( \\ dot { z } ) } and \\ frac { d } { d \\ dot { z } } \\ operatorname { P_ { e } } { ( \\ dot { z } ) } = \\ frac { d } { d \\ dot { z } } \\ sin { ( \\ dot { z } ) } and \\ frac { d } { d \\ dot { z } } \\ operatorname { P_ { e } } { ( \\ dot { z } ) } = \\ cos { ( \\ dot { z } ) } and \\ operatorname { P_ { e } } { ( \\ dot { z } ) } \\ frac { d } { d \\ dot { z } } \\ operatorname { P_ { e } } { ( \\ dot { z } ) } = \\ operatorname { P_ { e } } { ( \\ dot { z } ) } \\ cos { ( \\ dot { z } ) }", "VR_flan-t5-large": "beta { ( \\ tau) } = \\ sin { ( \\ tau) } and \\ frac { d } { d \\ tau } \\ beta { ( \\ tau) } = \\ frac { d } { d \\ tau } \\ sin { ( \\ tau) } and \\ frac { d } { d \\ tau } \\ beta { ( \\ tau) } = \\ cos { ( \\ tau) } and \\ cos { ( \\ t) } = \\ frac { d } { d \\ tau } \\ sin { ( \\ tau) } and \\ beta { ( \\ tau) } \\ frac { d } { d \\ tau } \\ beta { ( \\ tau) } = \\ beta { ( \\ tau) } \\ cos { ( \\ tau) }", "EE_flan-t5-large": "sin { ( \\ dot { z } ) } = \\ operatorname { P_ { e } } { ( \\ dot { z } ) } and \\ frac { d } { d \\ dot { z } } \\ sin { ( \\ dot { z } ) } = \\ frac { d } { d \\ dot { z } } \\ operatorname { P_ { e } } { ( \\ dot { z } ) } and \\ cos { ( \\ dot { z } ) } = \\ frac { d } { d \\ dot { z } } \\ operatorname { P_ { e } } { ( \\ dot { z } ) } and \\ sin { ( \\ dot { z } ) } \\ cos { ( \\ dot { z } ) } = \\ sin { ( \\ dot { z } ) } \\ frac { d } { d \\ dot { z } } \\ operatorname { P_ { e } } { ( \\ dot { z } ) } and \\ operatorname { P_ { e } } { ( \\ dot { z } ) } \\ cos { ( \\ dot { z } ) } = \\ operatorname { P_ { e } } { ( \\ dot { z } ) } \\ frac { d } { d \\ dot { z } } \\ operatorname { P_ { e } } { ( \\ dot { z } ) }", "AG_flan-t5-large": "operatorname { P_ { e } } { ( \\ dot { z } ) } = \\ sin { ( \\ dot { z } ) } and \\ frac { d } { d \\ dot { z } } \\ operatorname { P_ { e } } { ( \\ dot { z } ) } = \\ frac { d } { d \\ dot { z } } \\ sin { ( \\ dot { z } ) } and \\ frac { d } { d \\ dot { z } } \\ operatorname { P_ { e } } { ( \\ dot { z } ) } = \\ cos { ( \\ dot { z } ) } and \\ sin { ( \\ dot { z } ) } \\ frac { d } { d \\ dot { z } } \\ operatorname { P_ { e } } { ( \\ dot { z } ) } = \\ sin { ( \\ dot { z } ) } \\ cos { ( \\ dot { z } ) } and \\ frac { \\ sin { ( \\ dot { z } ) } \\ frac { d } { d \\ dot { z } } \\ operatorname { P_ { e } } { ( \\ dot { z } ) } } { \\ operatorname { P_ { e } } { ( \\ dot { z } ) } } = \\ frac { \\ sin { ( \\ dot { z } ) } \\ cos { ( \\ dot { z } ) } } { \\ operatorname { P_ { e } } { ( \\ dot { z } ) } }", "SR_flan-t5-large": "operatorname { P_ { e } } { ( \\ dot { z } ) } = \\ sin { ( \\ dot { z } ) } and \\ frac { d } { d \\ dot { z } } \\ operatorname { P_ { e } } { ( \\ dot { z } ) } = \\ frac { d } { d \\ dot { z } } \\ sin { ( \\ dot { z } ) } and \\ operatorname { P_ { e } } { ( \\ dot { z } ) } \\ frac { d } { d \\ dot { z } } \\ operatorname { P_ { e } } { ( \\ dot { z } ) } = \\ operatorname { P_ { e } } { ( \\ dot { z } ) } \\ frac { d } { d \\ dot { z } } \\ sin { ( \\ dot { z } ) } and \\ operatorname { P_ { e } } { ( \\ dot { z } ) } \\ frac { d } { d \\ dot { z } } \\ operatorname { P_ { e } } { ( \\ dot { z } ) } = \\ operatorname { P_ { e } } { ( \\ dot { z } ) } \\ cos { ( \\ dot { z } ) }", "static_rouge": 0.8648648648648648, "static_bleu": 0.7268409370090516, "static_bleurt": 0.6152334213256836, "static_gleu": 0.7568058076225045, "VR_rouge": -0.033094318808604584, "EE_rouge": -0.1351351351351352, "AG_rouge": -0.1351351351351352, "SR_rouge": -0.04311059525783445, "VR_rouge_abs": 0.012412412412412394, "EE_rouge_abs": 0.11293436293436299, "AG_rouge_abs": 0.13548951048951052, "SR_rouge_abs": 0.14685314685314688, "VR_bleu": -0.14034118594589828, "EE_bleu": -0.2695424304122077, "AG_bleu": -0.26993845386294524, "SR_bleu": -0.1695730225442591, "VR_bleu_abs": -0.018423331215839334, "EE_bleu_abs": 0.23771822497579476, "AG_bleu_abs": 0.21187194067444004, "SR_bleu_abs": 0.20299219495966714, "VR_bleurt": -0.24744558334350586, "EE_bleurt": -0.20319527387619019, "AG_bleurt": -0.19858050346374512, "SR_bleurt": -0.12674295902252197, "VR_bleurt_abs": -0.09454643726348877, "EE_bleurt_abs": -0.08412051200866699, "AG_bleurt_abs": -0.029416978359222412, "SR_bleurt_abs": -0.02453899383544922, "VR_gleu": -0.11487560830669907, "EE_gleu": -0.23956442831215974, "AG_gleu": -0.23996317460689776, "SR_gleu": -0.14156079854809445, "VR_gleu_abs": 0.006473949696866821, "EE_gleu_abs": 0.23773467019725691, "AG_gleu_abs": 0.21188695103463262, "SR_gleu_abs": 0.20291262135922328, "ratio_VR_rouge": 0.9355509355509356, "ratio_VR_bleu": 1.056450286727624, "ratio_VR_bleurt": 0.8057163077125454, "ratio_VR_gleu": 0.9832528343522365, "ratio_EE_rouge": 0.8828828828828829, "ratio_EE_bleu": 0.7603058866067001, "ratio_EE_bleurt": 1.1178367391378403, "ratio_EE_gleu": 0.7603077707617776, "ratio_AG_rouge": 0.856348470806302, "ratio_AG_bleu": 0.760001721250212, "ratio_AG_bleurt": 1.0345912802653114, "ratio_AG_gleu": 0.7600036181327766, "ratio_SR_rouge": 0.8531468531468531, "ratio_SR_bleu": 0.7970078050403329, "ratio_SR_bleurt": 1.0287273085550854, "ratio_SR_gleu": 0.7970873786407767}, {"prompt": "Given \\mathbf{J}{(\\mathbf{A})} = \\sin{(e^{\\mathbf{A}})}, then derive \\frac{d}{d \\mathbf{A}} \\mathbf{J}{(\\mathbf{A})} = e^{\\mathbf{A}} \\cos{(e^{\\mathbf{A}})}, then obtain e^{- \\mathbf{A}} \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})} = \\cos{(e^{\\mathbf{A}})}", "derivation": "\\mathbf{J}{(\\mathbf{A})} = \\sin{(e^{\\mathbf{A}})} and \\frac{d}{d \\mathbf{A}} \\mathbf{J}{(\\mathbf{A})} = \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})} and \\frac{d}{d \\mathbf{A}} \\mathbf{J}{(\\mathbf{A})} = e^{\\mathbf{A}} \\cos{(e^{\\mathbf{A}})} and \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})} = e^{\\mathbf{A}} \\cos{(e^{\\mathbf{A}})} and e^{- \\mathbf{A}} \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})} = \\cos{(e^{\\mathbf{A}})}", "srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{J}')(Symbol('\\\\mathbf{A}', commutative=True)), sin(exp(Symbol('\\\\mathbf{A}', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\mathbf{A}', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{J}')(Symbol('\\\\mathbf{A}', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('\\\\mathbf{A}', commutative=True))), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\mathbf{J}')(Symbol('\\\\mathbf{A}', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))), Mul(exp(Symbol('\\\\mathbf{A}', commutative=True)), cos(exp(Symbol('\\\\mathbf{A}', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(sin(exp(Symbol('\\\\mathbf{A}', commutative=True))), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))), Mul(exp(Symbol('\\\\mathbf{A}', commutative=True)), cos(exp(Symbol('\\\\mathbf{A}', commutative=True)))))"], [["divide", 4, "exp(Symbol('\\\\mathbf{A}', commutative=True))"], "Equality(Mul(exp(Mul(Integer(-1), Symbol('\\\\mathbf{A}', commutative=True))), Derivative(sin(exp(Symbol('\\\\mathbf{A}', commutative=True))), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1)))), cos(exp(Symbol('\\\\mathbf{A}', commutative=True))))"]], "EE prompt": "Given \\sin{(e^{\\mathbf{A}})} = \\mathbf{J}{(\\mathbf{A})}, then derive e^{\\mathbf{A}} \\cos{(e^{\\mathbf{A}})} = \\frac{d}{d \\mathbf{A}} \\mathbf{J}{(\\mathbf{A})}, then obtain \\cos{(e^{\\mathbf{A}})} = e^{- \\mathbf{A}} \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})}", "EE derivation": "\\sin{(e^{\\mathbf{A}})} = \\mathbf{J}{(\\mathbf{A})} and \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})} = \\frac{d}{d \\mathbf{A}} \\mathbf{J}{(\\mathbf{A})} and e^{\\mathbf{A}} \\cos{(e^{\\mathbf{A}})} = \\frac{d}{d \\mathbf{A}} \\mathbf{J}{(\\mathbf{A})} and e^{\\mathbf{A}} \\cos{(e^{\\mathbf{A}})} = \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})} and \\cos{(e^{\\mathbf{A}})} = e^{- \\mathbf{A}} \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})}", "EE srepr_derivation": [["premise", "Equality(sin(exp(Symbol('\\\\mathbf{A}', commutative=True))), Function('\\\\mathbf{J}')(Symbol('\\\\mathbf{A}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\mathbf{A}', commutative=True)"], "Equality(Derivative(sin(exp(Symbol('\\\\mathbf{A}', commutative=True))), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))), Derivative(Function('\\\\mathbf{J}')(Symbol('\\\\mathbf{A}', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Mul(exp(Symbol('\\\\mathbf{A}', commutative=True)), cos(exp(Symbol('\\\\mathbf{A}', commutative=True)))), Derivative(Function('\\\\mathbf{J}')(Symbol('\\\\mathbf{A}', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Mul(exp(Symbol('\\\\mathbf{A}', commutative=True)), cos(exp(Symbol('\\\\mathbf{A}', commutative=True)))), Derivative(sin(exp(Symbol('\\\\mathbf{A}', commutative=True))), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))))"], [["divide", 4, "exp(Symbol('\\\\mathbf{A}', commutative=True))"], "Equality(cos(exp(Symbol('\\\\mathbf{A}', commutative=True))), Mul(exp(Mul(Integer(-1), Symbol('\\\\mathbf{A}', commutative=True))), Derivative(sin(exp(Symbol('\\\\mathbf{A}', commutative=True))), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1)))))"]], "AG prompt": "Given \\mathbf{J}{(\\mathbf{A})} = \\sin{(e^{\\mathbf{A}})}, then derive \\frac{d}{d \\mathbf{A}} \\mathbf{J}{(\\mathbf{A})} = e^{\\mathbf{A}} \\cos{(e^{\\mathbf{A}})}, then obtain \\int \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})} d\\mathbf{A} = \\int e^{\\mathbf{A}} \\cos{(e^{\\mathbf{A}})} d\\mathbf{A}", "AG derivation": "\\mathbf{J}{(\\mathbf{A})} = \\sin{(e^{\\mathbf{A}})} and \\frac{d}{d \\mathbf{A}} \\mathbf{J}{(\\mathbf{A})} = \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})} and \\frac{d}{d \\mathbf{A}} \\mathbf{J}{(\\mathbf{A})} = e^{\\mathbf{A}} \\cos{(e^{\\mathbf{A}})} and \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})} = e^{\\mathbf{A}} \\cos{(e^{\\mathbf{A}})} and \\int \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})} d\\mathbf{A} = \\int e^{\\mathbf{A}} \\cos{(e^{\\mathbf{A}})} d\\mathbf{A}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{J}')(Symbol('\\\\mathbf{A}', commutative=True)), sin(exp(Symbol('\\\\mathbf{A}', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\mathbf{A}', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{J}')(Symbol('\\\\mathbf{A}', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('\\\\mathbf{A}', commutative=True))), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\mathbf{J}')(Symbol('\\\\mathbf{A}', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))), Mul(exp(Symbol('\\\\mathbf{A}', commutative=True)), cos(exp(Symbol('\\\\mathbf{A}', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(sin(exp(Symbol('\\\\mathbf{A}', commutative=True))), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))), Mul(exp(Symbol('\\\\mathbf{A}', commutative=True)), cos(exp(Symbol('\\\\mathbf{A}', commutative=True)))))"], [["integrate", 4, "Symbol('\\\\mathbf{A}', commutative=True)"], "Equality(Integral(Derivative(sin(exp(Symbol('\\\\mathbf{A}', commutative=True))), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Integral(Mul(exp(Symbol('\\\\mathbf{A}', commutative=True)), cos(exp(Symbol('\\\\mathbf{A}', commutative=True)))), Tuple(Symbol('\\\\mathbf{A}', commutative=True))))"]], "SR prompt": "Given \\mathbf{J}{(\\mathbf{A})} = \\sin{(e^{\\mathbf{A}})}, then obtain e^{- \\mathbf{A}} \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})} = \\cos{(e^{\\mathbf{A}})}", "SR derivation": "\\mathbf{J}{(\\mathbf{A})} = \\sin{(e^{\\mathbf{A}})} and \\frac{d}{d \\mathbf{A}} \\mathbf{J}{(\\mathbf{A})} = \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})} and \\frac{d}{d \\mathbf{A}} \\mathbf{J}{(\\mathbf{A})} = e^{\\mathbf{A}} \\cos{(e^{\\mathbf{A}})} and \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})} = e^{\\mathbf{A}} \\cos{(e^{\\mathbf{A}})} and e^{- \\mathbf{A}} \\frac{d}{d \\mathbf{A}} \\sin{(e^{\\mathbf{A}})} = \\cos{(e^{\\mathbf{A}})}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{J}')(Symbol('\\\\mathbf{A}', commutative=True)), sin(exp(Symbol('\\\\mathbf{A}', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\mathbf{A}', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{J}')(Symbol('\\\\mathbf{A}', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('\\\\mathbf{A}', commutative=True))), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\mathbf{J}')(Symbol('\\\\mathbf{A}', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))), Mul(exp(Symbol('\\\\mathbf{A}', commutative=True)), cos(exp(Symbol('\\\\mathbf{A}', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(sin(exp(Symbol('\\\\mathbf{A}', commutative=True))), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1))), Mul(exp(Symbol('\\\\mathbf{A}', commutative=True)), cos(exp(Symbol('\\\\mathbf{A}', commutative=True)))))"], [["divide", 4, "exp(Symbol('\\\\mathbf{A}', commutative=True))"], "Equality(Mul(exp(Mul(Integer(-1), Symbol('\\\\mathbf{A}', commutative=True))), Derivative(sin(exp(Symbol('\\\\mathbf{A}', commutative=True))), Tuple(Symbol('\\\\mathbf{A}', commutative=True), Integer(1)))), cos(exp(Symbol('\\\\mathbf{A}', commutative=True))))"]], "VR prompt": "Given \\kappa{(\\zeta)} = \\sin{(e^{\\zeta})}, then derive \\frac{d}{d \\zeta} \\kappa{(\\zeta)} = e^{\\zeta} \\cos{(e^{\\zeta})}, then obtain e^{- \\zeta} \\frac{d}{d \\zeta} \\sin{(e^{\\zeta})} = \\cos{(e^{\\zeta})}", "VR derivation": "\\kappa{(\\zeta)} = \\sin{(e^{\\zeta})} and \\frac{d}{d \\zeta} \\kappa{(\\zeta)} = \\frac{d}{d \\zeta} \\sin{(e^{\\zeta})} and \\frac{d}{d \\zeta} \\kappa{(\\zeta)} = e^{\\zeta} \\cos{(e^{\\zeta})} and \\frac{d}{d \\zeta} \\sin{(e^{\\zeta})} = e^{\\zeta} \\cos{(e^{\\zeta})} and e^{- \\zeta} \\frac{d}{d \\zeta} \\sin{(e^{\\zeta})} = \\cos{(e^{\\zeta})}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\kappa')(Symbol('\\\\zeta', commutative=True)), sin(exp(Symbol('\\\\zeta', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\zeta', commutative=True)"], "Equality(Derivative(Function('\\\\kappa')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('\\\\zeta', commutative=True))), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\kappa')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Mul(exp(Symbol('\\\\zeta', commutative=True)), cos(exp(Symbol('\\\\zeta', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(sin(exp(Symbol('\\\\zeta', commutative=True))), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Mul(exp(Symbol('\\\\zeta', commutative=True)), cos(exp(Symbol('\\\\zeta', commutative=True)))))"], [["divide", 4, "exp(Symbol('\\\\zeta', commutative=True))"], "Equality(Mul(exp(Mul(Integer(-1), Symbol('\\\\zeta', commutative=True))), Derivative(sin(exp(Symbol('\\\\zeta', commutative=True))), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1)))), cos(exp(Symbol('\\\\zeta', commutative=True))))"]], "static_flan-t5-large": "mathbf { J } { ( \\ mathbf { A } ) } = \\ sin { (e ^ { \\ mathbf { A } } ) } and \\ frac { d } { d \\ mathbf { A } } \\ mathbf { J } { ( \\ mathbf { A } ) } = \\ frac { d } { d \\ mathbf { A } } \\ sin { (e ^ { \\ mathbf { A } } ) } and \\ frac { d } { d \\ mathbf { A } } \\ mathbf { J } { ( \\ mathbf { A } ) } = e ^ { \\ mathbf { A } } \\ cos { (e ^ { \\ mathbf { A } } ) } and e ^ { \\ mathbf { A } } \\ frac { d } { d \\ mathbf { A } } \\ mathbf { J } { ( \\ mathbf { A } ) } = e ^ { \\ mathbf { A } } \\ cos { (e ^ { \\ mathbf { A } } ) } and e ^ { - \\ mathbf { A } } \\ frac { d } { d \\ mathbf { A } } \\ sin { (e ^ { \\ mathbf { A } } ) } = \\ cos { (e ^ { \\ mathbf { A } } ) }", "VR_flan-t5-large": "kappa { ( \\ zeta) } = \\ sin { (e ^ { \\ zeta } ) } and \\ frac { d } { d \\ zeta } \\ kappa { ( \\ zeta) } = \\ frac { d } { d \\ zeta } \\ sin { (e ^ { \\ zeta } ) } and \\ frac { d } { d \\ zeta } \\ kappa { ( \\ zeta) } = e ^ { \\ zeta } \\ cos { (e ^ { \\ zeta } ) } and \\ frac { d } { d \\ zeta } \\ sin { (e ^ { \\ zeta } ) } = e ^ { \\ zeta } \\ cos { (e ^ { \\ zeta } ) } and e ^ { - \\ zeta } \\ frac { d } { d \\ zeta } \\ sin { (e ^ { \\ zeta } ) } = \\ cos { (e ^ { \\ zeta } ) }", "EE_flan-t5-large": "sin { (e ^ { \\ mathbf { A } } ) } = \\ mathbf { J } { ( \\ mathbf { A } ) } and \\ cos { (e ^ { \\ mathbf { A } } ) } = \\ frac { d } { d \\ mathbf { A } } \\ mathbf { J } { ( \\ mathbf { A } ) } and e ^ { \\ mathbf { A } } \\ cos { (e ^ { \\ mathbf { A } } ) } = e ^ { \\ mathbf { A } } \\ frac { d } { d \\ mathbf { A } } \\ mathbf { J } { ( \\ mathbf { A } ) } and e ^ { \\ mathbf { A } } \\ cos { (e ^ { \\ mathbf { A } } ) } = \\ frac { d } { d \\ mathbf { A } } \\ sin { (e ^ { \\ mathbf { A } } ) } and \\ cos { (e ^ { \\ mathbf { A } } ) } = e ^ { - \\ mathbf { A } } \\ frac { d } { d \\ mathbf { A } } \\ sin { (e ^ { \\ mathbf { A } } ) }", "AG_flan-t5-large": "mathbf { J } { ( \\ mathbf { A } ) } = \\ sin { (e ^ { \\ mathbf { A } } ) } and \\ frac { d } { d \\ mathbf { A } } \\ mathbf { J } { ( \\ mathbf { A } ) } = \\ frac { d } { d \\ mathbf { A } } \\ sin { (e ^ { \\ mathbf { A } } ) } and \\ frac { d } { d \\ mathbf { A } } \\ mathbf { J } { ( \\ mathbf { A } ) } = e ^ { \\ mathbf { A } } \\ cos { (e ^ { \\ mathbf { A } } ) } and \\ frac { d } { d \\ mathbf { A } } \\ sin { (e ^ { \\ mathbf { A } } ) } = e ^ { \\ mathbf { A } } \\ cos { (e ^ { \\ mathbf { A } } ) } and \\ int \\ frac { d } { d \\ mathbf { A } } \\ sin { (e ^ { \\ mathbf { A } } ) } d \\ mathbf { A } = \\ int e ^ { \\ mathbf { A } } \\ cos { (e ^ { \\ mathbf { A } } ) } d \\ mathbf { A }", "SR_flan-t5-large": "mathbf { J } { ( \\ mathbf { A } ) } = \\ sin { (e ^ { \\ mathbf { A } } ) } and \\ frac { d } { d \\ mathbf { A } } \\ mathbf { J } { ( \\ mathbf { A } ) } = \\ frac { d } { d \\ mathbf { A } } \\ sin { (e ^ { \\ mathbf { A } } ) } and e ^ { - \\ mathbf { A } } \\ frac { d } { d \\ mathbf { A } } \\ mathbf { J } { ( \\ mathbf { A } ) } = e ^ { - \\ mathbf { A } } \\ frac { d } { d \\ mathbf { A } } \\ sin { (e ^ { \\ mathbf { A } } ) } and e ^ { - \\ mathbf { A } } \\ frac { d } { d \\ mathbf { A } } \\ sin { (e ^ { \\ mathbf { A } } ) } = \\ cos { (e ^ { \\ mathbf { A } } ) }", "static_rouge": 0.9426751592356688, "static_bleu": 0.9487312844872229, "static_bleurt": 0.7931226491928101, "static_gleu": 0.9489194499017681, "VR_rouge": -0.0573248407643312, "EE_rouge": 0.008464632919879311, "AG_rouge": -0.0573248407643312, "SR_rouge": 0.046123435097737864, "VR_rouge_abs": 0.036377708978328094, "EE_rouge_abs": 0.031839128613322165, "AG_rouge_abs": 0.041077441077441046, "SR_rouge_abs": 0.1216216216216216, "VR_bleu": -0.04587789302381351, "EE_bleu": -0.0005230606744394128, "AG_bleu": -0.04747365366264733, "SR_bleu": 0.11368196738229097, "VR_bleu_abs": 0.04119650854598078, "EE_bleu_abs": 0.06415512313735217, "AG_bleu_abs": 0.004985301362663952, "SR_bleu_abs": 0.19222346962155967, "VR_bleurt": -0.05322730541229248, "EE_bleurt": -0.007128477096557617, "AG_bleurt": 0.01634979248046875, "SR_bleurt": 0.09864109754562378, "VR_bleurt_abs": 0.09510818123817444, "EE_bleurt_abs": 0.03525269031524658, "AG_bleurt_abs": 0.008442699909210205, "SR_bleurt_abs": 0.08306998014450073, "VR_gleu": -0.045660495897689835, "EE_gleu": -0.0005754995931813722, "AG_gleu": -0.04727102628870805, "SR_gleu": 0.10649520747752572, "VR_gleu_abs": 0.035436883570478916, "EE_gleu_abs": 0.06326725010418521, "AG_gleu_abs": 0.004133661112628584, "SR_gleu_abs": 0.18172888015717092, "ratio_VR_rouge": 0.8848039215686277, "ratio_VR_bleu": 0.9187273741711157, "ratio_VR_bleurt": 1.67437450584961, "ratio_VR_gleu": 0.9341791468390729, "ratio_EE_rouge": 0.9659498207885304, "ratio_EE_bleu": 0.9344365608376964, "ratio_EE_bleurt": 0.9520511396571503, "ratio_EE_gleu": 0.9353616330204919, "ratio_AG_rouge": 0.9556363636363636, "ratio_AG_bleu": 0.9945740737263891, "ratio_AG_bleurt": 0.9889531963200562, "ratio_AG_gleu": 0.9955022340225285, "ratio_SR_rouge": 0.8783783783783784, "ratio_SR_bleu": 0.8077765303784403, "ratio_SR_bleurt": 0.899189404060119, "ratio_SR_gleu": 0.8182711198428291}, {"prompt": "Given \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\frac{\\mathbf{f} \\varepsilon}{v_{1}}, then derive \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\frac{\\varepsilon}{v_{1}}, then obtain \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\mathbf{f} \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)}", "derivation": "\\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\frac{\\mathbf{f} \\varepsilon}{v_{1}} and \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\frac{\\partial}{\\partial \\mathbf{f}} \\frac{\\mathbf{f} \\varepsilon}{v_{1}} and \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\frac{\\varepsilon}{v_{1}} and \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\mathbf{f} \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)}", "srepr_derivation": [["premise", "Equality(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Mul(Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True), Pow(Symbol('v_1', commutative=True), Integer(-1))))"], [["differentiate", 1, "Symbol('\\\\mathbf{f}', commutative=True)"], "Equality(Derivative(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1))), Derivative(Mul(Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True), Pow(Symbol('v_1', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1))), Mul(Symbol('\\\\varepsilon', commutative=True), Pow(Symbol('v_1', commutative=True), Integer(-1))))"], [["substitute_RHS_for_LHS", 1, 3], "Equality(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Mul(Symbol('\\\\mathbf{f}', commutative=True), Derivative(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1)))))"]], "EE prompt": "Given \\frac{\\mathbf{f} \\varepsilon}{v_{1}} = \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)}, then derive \\frac{\\varepsilon}{v_{1}} = \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)}, then obtain \\mathbf{f} \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)}", "EE derivation": "\\frac{\\mathbf{f} \\varepsilon}{v_{1}} = \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} and \\frac{\\partial}{\\partial \\mathbf{f}} \\frac{\\mathbf{f} \\varepsilon}{v_{1}} = \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} and \\frac{\\varepsilon}{v_{1}} = \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} and \\mathbf{f} \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)}", "EE srepr_derivation": [["premise", "Equality(Mul(Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True), Pow(Symbol('v_1', commutative=True), Integer(-1))), Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\mathbf{f}', commutative=True)"], "Equality(Derivative(Mul(Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True), Pow(Symbol('v_1', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1))), Derivative(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Mul(Symbol('\\\\varepsilon', commutative=True), Pow(Symbol('v_1', commutative=True), Integer(-1))), Derivative(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 1, 3], "Equality(Mul(Symbol('\\\\mathbf{f}', commutative=True), Derivative(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1)))), Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)))"]], "AG prompt": "Given \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\frac{\\mathbf{f} \\varepsilon}{v_{1}}, then derive \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\frac{\\varepsilon}{v_{1}}, then obtain \\frac{\\partial}{\\partial \\mathbf{f}} \\frac{\\mathbf{f} \\varepsilon}{v_{1}} = \\frac{\\varepsilon}{v_{1}}", "AG derivation": "\\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\frac{\\mathbf{f} \\varepsilon}{v_{1}} and \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\frac{\\partial}{\\partial \\mathbf{f}} \\frac{\\mathbf{f} \\varepsilon}{v_{1}} and \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\frac{\\varepsilon}{v_{1}} and \\frac{\\partial}{\\partial \\mathbf{f}} \\frac{\\mathbf{f} \\varepsilon}{v_{1}} = \\frac{\\varepsilon}{v_{1}}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Mul(Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True), Pow(Symbol('v_1', commutative=True), Integer(-1))))"], [["differentiate", 1, "Symbol('\\\\mathbf{f}', commutative=True)"], "Equality(Derivative(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1))), Derivative(Mul(Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True), Pow(Symbol('v_1', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1))), Mul(Symbol('\\\\varepsilon', commutative=True), Pow(Symbol('v_1', commutative=True), Integer(-1))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(Mul(Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True), Pow(Symbol('v_1', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1))), Mul(Symbol('\\\\varepsilon', commutative=True), Pow(Symbol('v_1', commutative=True), Integer(-1))))"]], "SR prompt": "Given \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\frac{\\mathbf{f} \\varepsilon}{v_{1}}, then obtain \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\mathbf{f} \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)}", "SR derivation": "\\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\frac{\\mathbf{f} \\varepsilon}{v_{1}} and \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\frac{\\partial}{\\partial \\mathbf{f}} \\frac{\\mathbf{f} \\varepsilon}{v_{1}} and \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\frac{\\varepsilon}{v_{1}} and \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)} = \\mathbf{f} \\frac{\\partial}{\\partial \\mathbf{f}} \\dot{x}{(v_{1},\\mathbf{f},\\varepsilon)}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Mul(Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True), Pow(Symbol('v_1', commutative=True), Integer(-1))))"], [["differentiate", 1, "Symbol('\\\\mathbf{f}', commutative=True)"], "Equality(Derivative(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1))), Derivative(Mul(Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True), Pow(Symbol('v_1', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1))), Mul(Symbol('\\\\varepsilon', commutative=True), Pow(Symbol('v_1', commutative=True), Integer(-1))))"], [["substitute_RHS_for_LHS", 1, 3], "Equality(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Mul(Symbol('\\\\mathbf{f}', commutative=True), Derivative(Function('\\\\dot{x}')(Symbol('v_1', commutative=True), Symbol('\\\\mathbf{f}', commutative=True), Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\mathbf{f}', commutative=True), Integer(1)))))"]], "VR prompt": "Given \\iota{(\\gamma,\\tau,\\beta)} = \\frac{\\gamma \\tau}{\\beta}, then derive \\frac{\\partial}{\\partial \\tau} \\iota{(\\gamma,\\tau,\\beta)} = \\frac{\\gamma}{\\beta}, then obtain \\iota{(\\gamma,\\tau,\\beta)} = \\tau \\frac{\\partial}{\\partial \\tau} \\iota{(\\gamma,\\tau,\\beta)}", "VR derivation": "\\iota{(\\gamma,\\tau,\\beta)} = \\frac{\\gamma \\tau}{\\beta} and \\frac{\\partial}{\\partial \\tau} \\iota{(\\gamma,\\tau,\\beta)} = \\frac{\\partial}{\\partial \\tau} \\frac{\\gamma \\tau}{\\beta} and \\frac{\\partial}{\\partial \\tau} \\iota{(\\gamma,\\tau,\\beta)} = \\frac{\\gamma}{\\beta} and \\iota{(\\gamma,\\tau,\\beta)} = \\tau \\frac{\\partial}{\\partial \\tau} \\iota{(\\gamma,\\tau,\\beta)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\iota')(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True), Symbol('\\\\beta', commutative=True)), Mul(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\tau', commutative=True)"], "Equality(Derivative(Function('\\\\iota')(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Derivative(Mul(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\iota')(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Mul(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Symbol('\\\\gamma', commutative=True)))"], [["substitute_RHS_for_LHS", 1, 3], "Equality(Function('\\\\iota')(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True), Symbol('\\\\beta', commutative=True)), Mul(Symbol('\\\\tau', commutative=True), Derivative(Function('\\\\iota')(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1)))))"]], "static_flan-t5-large": "dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) } = \\ frac { \\ mathbf { f } \\ varepsilon } { v_ { 1 } } and \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) } = \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ frac { \\ mathbf { f } \\ varepsilon } { v_ { 1 } } and \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) } = \\ frac { \\ varepsilon } { v_ { 1 } } and \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ frac { \\ mathbf { f } \\ varepsilon } { v_ { 1 } } = \\ frac { \\ varepsilon } { v_ { 1 } } and \\ dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) } = \\ mathbf { f } \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) }", "VR_flan-t5-large": "iota { ( \\ gamma, \\ tau, \\ beta) } = \\ frac { \\ gamma \\ tau } { \\ beta } and \\ frac { \\ partial } { \\ partial \\ tau } \\ iota { ( \\ gamma, \\ tau, \\ beta) } = \\ frac { \\ partial } { \\ partial \\ tau } \\ frac { \\ gamma \\ tau } { \\ beta } and \\ frac { \\ partial } { \\ partial \\ tau } \\ iota { ( \\ gamma, \\ tau, \\ beta) } = \\ frac { \\ gamma } { \\ beta } and \\ frac { \\ partial } { \\ partial \\ tau } \\ frac { \\ gamma \\ tau } { \\ beta } = \\ frac { \\ gamma } { \\ beta } and \\ iota { ( \\ gamma, \\ tau, \\ beta) } = \\ frac { \\ gamma \\ frac { \\ partial } { \\ partial \\ tau } \\ iota { ( \\ gamma, \\ tau, \\ beta) }", "EE_flan-t5-large": "frac { \\ mathbf { f } \\ varepsilon } { v_ { 1 } } = \\ dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) } and \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ frac { \\ mathbf { f } \\ varepsilon } { v_ { 1 } } = \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) } and \\ frac { \\ varepsilon } { v_ { 1 } } = \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) } and \\ mathbf { f } \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) } = \\ dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) }", "AG_flan-t5-large": "dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) } = \\ frac { \\ mathbf { f } \\ varepsilon } { v_ { 1 } } and \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) } = \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ frac { \\ mathbf { f } \\ varepsilon } { v_ { 1 } } and \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) } = \\ frac { \\ varepsilon } { v_ { 1 } } and \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ frac { \\ mathbf { f } \\ varepsilon } { v_ { 1 } } = \\ frac { \\ varepsilon } { v_ { 1 } }", "SR_flan-t5-large": "dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) } = \\ frac { \\ mathbf { f } \\ varepsilon } { v_ { 1 } } and \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) } = \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ frac { \\ mathbf { f } \\ varepsilon } { v_ { 1 } } and \\ dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) } = \\ mathbf { f } \\ frac { \\ partial } { \\ partial \\ mathbf { f } } \\ dot { x } { (v_ { 1 }, \\ mathbf { f }, \\ varepsilon) }", "static_rouge": 0.9036144578313253, "static_bleu": 0.8303629589269416, "static_bleurt": 0.7911298274993896, "static_gleu": 0.8303730017761989, "VR_rouge": 0.036357820663183604, "EE_rouge": -0.09638554216867468, "AG_rouge": -0.09638554216867468, "SR_rouge": 0.031434006703505823, "VR_rouge_abs": -0.008831168831168829, "EE_rouge_abs": 0.0740562248995984, "AG_rouge_abs": 0.012499999999999956, "SR_rouge_abs": 0.2214765100671141, "VR_bleu": 0.03682741944855761, "EE_bleu": -0.1653907629659329, "AG_bleu": -0.1649966781894835, "SR_bleu": 0.08709845024756357, "VR_bleu_abs": -0.021349873427774557, "EE_bleu_abs": 0.17933304085257185, "AG_bleu_abs": 0.119022237418973, "SR_bleu_abs": 0.42589619550506397, "VR_bleurt": -0.07148760557174683, "EE_bleurt": -0.04245835542678833, "AG_bleurt": -0.01467275619506836, "SR_bleurt": 0.1046065092086792, "VR_bleurt_abs": -0.07312995195388794, "EE_bleurt_abs": 0.051370203495025635, "AG_bleurt_abs": -0.03892558813095093, "SR_bleurt_abs": 0.18005013465881348, "VR_gleu": 0.036702115700249505, "EE_gleu": -0.1653626058997073, "AG_gleu": -0.1649649935617965, "SR_gleu": 0.06065018727726501, "VR_gleu_abs": -0.017290482376243643, "EE_gleu_abs": 0.16570913511609675, "AG_gleu_abs": 0.09337542179990677, "SR_gleu_abs": 0.3587921847246892, "ratio_VR_rouge": 1.0551948051948052, "ratio_VR_bleu": 1.0759025491297227, "ratio_VR_bleurt": 0.805600279054564, "ratio_VR_gleu": 1.0528289005502167, "ratio_EE_rouge": 0.9171012407840317, "ratio_EE_bleu": 0.8152229570173386, "ratio_EE_bleurt": 0.9340922918519212, "ratio_EE_gleu": 0.8293796171911101, "ratio_AG_rouge": 0.9857142857142858, "ratio_AG_bleu": 0.8596234348940798, "ratio_AG_bleurt": 1.0474527558199769, "ratio_AG_gleu": 0.8903802933062421, "ratio_SR_rouge": 0.7785234899328859, "ratio_SR_bleu": 0.574103804494936, "ratio_SR_bleurt": 0.7877603707409832, "ratio_SR_gleu": 0.6412078152753108}, {"prompt": "Given \\lambda{(V)} = V, then derive \\frac{V \\frac{d}{d V} \\lambda{(V)}}{\\lambda^{2}{(V)}} - \\frac{1}{\\lambda{(V)}} = 0, then obtain \\frac{\\frac{d}{d \\lambda{(V)}} \\lambda{(V)}}{\\lambda{(V)}} - \\frac{1}{\\lambda{(V)}} = 0", "derivation": "\\lambda{(V)} = V and 1 = \\frac{V}{\\lambda{(V)}} and \\frac{d}{d V} 1 = \\frac{d}{d V} \\frac{V}{\\lambda{(V)}} and \\frac{d}{d V} 1 - \\frac{d}{d V} \\frac{V}{\\lambda{(V)}} = 0 and \\frac{V \\frac{d}{d V} \\lambda{(V)}}{\\lambda^{2}{(V)}} - \\frac{1}{\\lambda{(V)}} = 0 and \\frac{\\frac{d}{d V} V}{V} - \\frac{1}{V} = 0 and \\frac{\\frac{d}{d \\lambda{(V)}} \\lambda{(V)}}{\\lambda{(V)}} - \\frac{1}{\\lambda{(V)}} = 0", "srepr_derivation": [["premise", "Equality(Function('\\\\lambda')(Symbol('V', commutative=True)), Symbol('V', commutative=True))"], [["divide", 1, "Function('\\\\lambda')(Symbol('V', commutative=True))"], "Equality(Integer(1), Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))))"], [["differentiate", 2, "Symbol('V', commutative=True)"], "Equality(Derivative(Integer(1), Tuple(Symbol('V', commutative=True), Integer(1))), Derivative(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))), Tuple(Symbol('V', commutative=True), Integer(1))))"], [["minus", 3, "Derivative(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))), Tuple(Symbol('V', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Integer(1), Tuple(Symbol('V', commutative=True), Integer(1))), Mul(Integer(-1), Derivative(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))), Tuple(Symbol('V', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 4], "Equality(Add(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-2)), Derivative(Function('\\\\lambda')(Symbol('V', commutative=True)), Tuple(Symbol('V', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1)))), Integer(0))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Add(Mul(Pow(Symbol('V', commutative=True), Integer(-1)), Derivative(Symbol('V', commutative=True), Tuple(Symbol('V', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('V', commutative=True), Integer(-1)))), Integer(0))"], [["substitute_RHS_for_LHS", 6, 1], "Equality(Add(Mul(Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1)), Derivative(Function('\\\\lambda')(Symbol('V', commutative=True)), Tuple(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(1)))), Mul(Integer(-1), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1)))), Integer(0))"]], "EE prompt": "Given V = \\lambda{(V)}, then derive 0 = \\frac{V \\frac{d}{d V} \\lambda{(V)}}{\\lambda^{2}{(V)}} - \\frac{1}{\\lambda{(V)}}, then obtain 0 = \\frac{\\frac{d}{d \\lambda{(V)}} \\lambda{(V)}}{\\lambda{(V)}} - \\frac{1}{\\lambda{(V)}}", "EE derivation": "V = \\lambda{(V)} and \\frac{V}{\\lambda{(V)}} = 1 and \\frac{d}{d V} \\frac{V}{\\lambda{(V)}} = \\frac{d}{d V} 1 and 0 = \\frac{d}{d V} 1 - \\frac{d}{d V} \\frac{V}{\\lambda{(V)}} and 0 = \\frac{V \\frac{d}{d V} \\lambda{(V)}}{\\lambda^{2}{(V)}} - \\frac{1}{\\lambda{(V)}} and 0 = \\frac{\\frac{d}{d V} V}{V} - \\frac{1}{V} and 0 = \\frac{\\frac{d}{d \\lambda{(V)}} \\lambda{(V)}}{\\lambda{(V)}} - \\frac{1}{\\lambda{(V)}}", "EE srepr_derivation": [["premise", "Equality(Symbol('V', commutative=True), Function('\\\\lambda')(Symbol('V', commutative=True)))"], [["divide", 1, "Function('\\\\lambda')(Symbol('V', commutative=True))"], "Equality(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))), Integer(1))"], [["differentiate", 2, "Symbol('V', commutative=True)"], "Equality(Derivative(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))), Tuple(Symbol('V', commutative=True), Integer(1))), Derivative(Integer(1), Tuple(Symbol('V', commutative=True), Integer(1))))"], [["minus", 3, "Derivative(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))), Tuple(Symbol('V', commutative=True), Integer(1)))"], "Equality(Integer(0), Add(Derivative(Integer(1), Tuple(Symbol('V', commutative=True), Integer(1))), Mul(Integer(-1), Derivative(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))), Tuple(Symbol('V', commutative=True), Integer(1))))))"], [["evaluate_derivatives", 4], "Equality(Integer(0), Add(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-2)), Derivative(Function('\\\\lambda')(Symbol('V', commutative=True)), Tuple(Symbol('V', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1)))))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(Integer(0), Add(Mul(Pow(Symbol('V', commutative=True), Integer(-1)), Derivative(Symbol('V', commutative=True), Tuple(Symbol('V', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('V', commutative=True), Integer(-1)))))"], [["substitute_LHS_for_RHS", 6, 1], "Equality(Integer(0), Add(Mul(Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1)), Derivative(Function('\\\\lambda')(Symbol('V', commutative=True)), Tuple(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(1)))), Mul(Integer(-1), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1)))))"]], "AG prompt": "Given \\lambda{(V)} = V, then derive \\frac{V \\frac{d}{d V} \\lambda{(V)}}{\\lambda^{2}{(V)}} - \\frac{1}{\\lambda{(V)}} = 0, then obtain V (\\frac{\\frac{d}{d V} V}{V} - \\frac{1}{V}) = 0", "AG derivation": "\\lambda{(V)} = V and 1 = \\frac{V}{\\lambda{(V)}} and \\frac{d}{d V} 1 = \\frac{d}{d V} \\frac{V}{\\lambda{(V)}} and \\frac{d}{d V} 1 - \\frac{d}{d V} \\frac{V}{\\lambda{(V)}} = 0 and \\frac{V \\frac{d}{d V} \\lambda{(V)}}{\\lambda^{2}{(V)}} - \\frac{1}{\\lambda{(V)}} = 0 and \\frac{\\frac{d}{d V} V}{V} - \\frac{1}{V} = 0 and V (\\frac{\\frac{d}{d V} V}{V} - \\frac{1}{V}) = 0", "AG srepr_derivation": [["premise", "Equality(Function('\\\\lambda')(Symbol('V', commutative=True)), Symbol('V', commutative=True))"], [["divide", 1, "Function('\\\\lambda')(Symbol('V', commutative=True))"], "Equality(Integer(1), Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))))"], [["differentiate", 2, "Symbol('V', commutative=True)"], "Equality(Derivative(Integer(1), Tuple(Symbol('V', commutative=True), Integer(1))), Derivative(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))), Tuple(Symbol('V', commutative=True), Integer(1))))"], [["minus", 3, "Derivative(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))), Tuple(Symbol('V', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Integer(1), Tuple(Symbol('V', commutative=True), Integer(1))), Mul(Integer(-1), Derivative(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))), Tuple(Symbol('V', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 4], "Equality(Add(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-2)), Derivative(Function('\\\\lambda')(Symbol('V', commutative=True)), Tuple(Symbol('V', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1)))), Integer(0))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Add(Mul(Pow(Symbol('V', commutative=True), Integer(-1)), Derivative(Symbol('V', commutative=True), Tuple(Symbol('V', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('V', commutative=True), Integer(-1)))), Integer(0))"], [["times", 6, "Symbol('V', commutative=True)"], "Equality(Mul(Symbol('V', commutative=True), Add(Mul(Pow(Symbol('V', commutative=True), Integer(-1)), Derivative(Symbol('V', commutative=True), Tuple(Symbol('V', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('V', commutative=True), Integer(-1))))), Integer(0))"]], "SR prompt": "Given \\lambda{(V)} = V, then obtain \\frac{\\frac{d}{d \\lambda{(V)}} \\lambda{(V)}}{\\lambda{(V)}} - \\frac{1}{\\lambda{(V)}} = 0", "SR derivation": "\\lambda{(V)} = V and 1 = \\frac{V}{\\lambda{(V)}} and \\frac{d}{d V} 1 = \\frac{d}{d V} \\frac{V}{\\lambda{(V)}} and \\frac{d}{d V} 1 - \\frac{d}{d V} \\frac{V}{\\lambda{(V)}} = 0 and \\frac{V \\frac{d}{d V} \\lambda{(V)}}{\\lambda^{2}{(V)}} - \\frac{1}{\\lambda{(V)}} = 0 and \\frac{\\frac{d}{d V} V}{V} - \\frac{1}{V} = 0 and \\frac{\\frac{d}{d \\lambda{(V)}} \\lambda{(V)}}{\\lambda{(V)}} - \\frac{1}{\\lambda{(V)}} = 0", "SR srepr_derivation": [["premise", "Equality(Function('\\\\lambda')(Symbol('V', commutative=True)), Symbol('V', commutative=True))"], [["divide", 1, "Function('\\\\lambda')(Symbol('V', commutative=True))"], "Equality(Integer(1), Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))))"], [["differentiate", 2, "Symbol('V', commutative=True)"], "Equality(Derivative(Integer(1), Tuple(Symbol('V', commutative=True), Integer(1))), Derivative(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))), Tuple(Symbol('V', commutative=True), Integer(1))))"], [["minus", 3, "Derivative(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))), Tuple(Symbol('V', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Integer(1), Tuple(Symbol('V', commutative=True), Integer(1))), Mul(Integer(-1), Derivative(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1))), Tuple(Symbol('V', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 4], "Equality(Add(Mul(Symbol('V', commutative=True), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-2)), Derivative(Function('\\\\lambda')(Symbol('V', commutative=True)), Tuple(Symbol('V', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1)))), Integer(0))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Add(Mul(Pow(Symbol('V', commutative=True), Integer(-1)), Derivative(Symbol('V', commutative=True), Tuple(Symbol('V', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('V', commutative=True), Integer(-1)))), Integer(0))"], [["substitute_RHS_for_LHS", 6, 1], "Equality(Add(Mul(Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1)), Derivative(Function('\\\\lambda')(Symbol('V', commutative=True)), Tuple(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(1)))), Mul(Integer(-1), Pow(Function('\\\\lambda')(Symbol('V', commutative=True)), Integer(-1)))), Integer(0))"]], "VR prompt": "Given \\zeta{(\\nu)} = \\nu, then derive \\frac{\\nu \\frac{d}{d \\nu} \\zeta{(\\nu)}}{\\zeta^{2}{(\\nu)}} - \\frac{1}{\\zeta{(\\nu)}} = 0, then obtain \\frac{\\frac{d}{d \\zeta{(\\nu)}} \\zeta{(\\nu)}}{\\zeta{(\\nu)}} - \\frac{1}{\\zeta{(\\nu)}} = 0", "VR derivation": "\\zeta{(\\nu)} = \\nu and 1 = \\frac{\\nu}{\\zeta{(\\nu)}} and \\frac{d}{d \\nu} 1 = \\frac{d}{d \\nu} \\frac{\\nu}{\\zeta{(\\nu)}} and \\frac{d}{d \\nu} 1 - \\frac{d}{d \\nu} \\frac{\\nu}{\\zeta{(\\nu)}} = 0 and \\frac{\\nu \\frac{d}{d \\nu} \\zeta{(\\nu)}}{\\zeta^{2}{(\\nu)}} - \\frac{1}{\\zeta{(\\nu)}} = 0 and \\frac{\\frac{d}{d \\nu} \\nu}{\\nu} - \\frac{1}{\\nu} = 0 and \\frac{\\frac{d}{d \\zeta{(\\nu)}} \\zeta{(\\nu)}}{\\zeta{(\\nu)}} - \\frac{1}{\\zeta{(\\nu)}} = 0", "VR srepr_derivation": [["premise", "Equality(Function('\\\\zeta')(Symbol('\\\\nu', commutative=True)), Symbol('\\\\nu', commutative=True))"], [["divide", 1, "Function('\\\\zeta')(Symbol('\\\\nu', commutative=True))"], "Equality(Integer(1), Mul(Symbol('\\\\nu', commutative=True), Pow(Function('\\\\zeta')(Symbol('\\\\nu', commutative=True)), Integer(-1))))"], [["differentiate", 2, "Symbol('\\\\nu', commutative=True)"], "Equality(Derivative(Integer(1), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))), Derivative(Mul(Symbol('\\\\nu', commutative=True), Pow(Function('\\\\zeta')(Symbol('\\\\nu', commutative=True)), Integer(-1))), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))))"], [["minus", 3, "Derivative(Mul(Symbol('\\\\nu', commutative=True), Pow(Function('\\\\zeta')(Symbol('\\\\nu', commutative=True)), Integer(-1))), Tuple(Symbol('\\\\nu', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Integer(1), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))), Mul(Integer(-1), Derivative(Mul(Symbol('\\\\nu', commutative=True), Pow(Function('\\\\zeta')(Symbol('\\\\nu', commutative=True)), Integer(-1))), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 4], "Equality(Add(Mul(Symbol('\\\\nu', commutative=True), Pow(Function('\\\\zeta')(Symbol('\\\\nu', commutative=True)), Integer(-2)), Derivative(Function('\\\\zeta')(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Function('\\\\zeta')(Symbol('\\\\nu', commutative=True)), Integer(-1)))), Integer(0))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Add(Mul(Pow(Symbol('\\\\nu', commutative=True), Integer(-1)), Derivative(Symbol('\\\\nu', commutative=True), Tuple(Symbol('\\\\nu', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('\\\\nu', commutative=True), Integer(-1)))), Integer(0))"], [["substitute_RHS_for_LHS", 6, 1], "Equality(Add(Mul(Pow(Function('\\\\zeta')(Symbol('\\\\nu', commutative=True)), Integer(-1)), Derivative(Function('\\\\zeta')(Symbol('\\\\nu', commutative=True)), Tuple(Function('\\\\zeta')(Symbol('\\\\nu', commutative=True)), Integer(1)))), Mul(Integer(-1), Pow(Function('\\\\zeta')(Symbol('\\\\nu', commutative=True)), Integer(-1)))), Integer(0))"]], "static_flan-t5-large": "lambda { (V) } = V and \\ frac { d } { d V } \\ lambda { (V) } = \\ frac { d } { d V } V and \\ frac { \\ frac { d } { d V } \\ lambda { (V) } } { \\ lambda { (V) } } = \\ frac { \\ frac { d } { d V } V } { \\ lambda { (V) } } and \\ frac { V \\ frac { d } { d V } \\ lambda { (V) } } { \\ lambda ^ { 2 } { (V) } } - \\ frac { 1 } { \\ lambda { (V) } } = 0 and \\ frac { V \\ frac { d } { d V } \\ lambda { (V) } } { \\ lambda { (V) } } - \\ frac { 1 } { \\ lambda { (V) } } = 0", "VR_flan-t5-large": "zeta { ( \\ nu) } = \\ nu and \\ frac { d } { d \\ nu } \\ zeta { ( \\ nu) } = \\ frac { d } { d \\ nu } \\ nu and \\ frac { \\ frac { d } { d \\ nu } \\ zeta { ( \\ nu) } } { \\ zeta { ( \\ nu) } } = \\ frac { \\ frac { d } { d \\ nu } \\ nu } { \\ zeta { ( \\ nu) } } and \\ frac { \\ nu \\ frac { d } { d \\ nu } \\ zeta { ( \\ nu) } } { \\ zeta ^ { 2 } { ( \\ nu) } } = 1 and \\ frac { \\ frac { d } { d \\ zeta { ( \\ nu) } } { \\ zeta { ( \\ nu) } } - \\ frac { 1 } { \\ zeta { ( \\ nu) } } = 0 and \\ frac { \\ frac { d } { d \\ zeta { ( \\ nu) } } \\ zeta { ( \\ nu) } } { \\ zeta { ( \\ nu) } } - \\ frac { 1 } { \\ zeta { ( \\ nu) } } = 0", "EE_flan-t5-large": "lambda { (V) } = \\ lambda { (V) } and 1 = \\ frac { \\ lambda { (V) } } { \\ lambda { (V) } } and \\ frac { d } { d V } 1 = \\ frac { d } { d V } \\ frac { \\ lambda { (V) } } { \\ lambda { (V) } } and 0 = \\ frac { V \\ frac { d } { d V } \\ lambda { (V) } } { \\ lambda ^ { 2 } { (V) } } - \\ frac { 1 } { \\ lambda { (V) } } and 0 = \\ frac { V \\ frac { d } { d V } \\ lambda { (V) } } { \\ lambda ^ { 2 } { (V) } } - \\ frac { 1 } { \\ lambda { (V) } } and 0 = \\ frac { \\ frac { d } { d \\ lambda { (V) } } \\ lambda { (V) } } { \\ lambda { (V) } } - \\ frac { 1 } { \\ lambda { (V) } }", "AG_flan-t5-large": "lambda { (V) } = V and \\ frac { \\ lambda { (V) } } { V } = 1 and \\ frac { d } { d V } \\ frac { \\ lambda { (V) } } { V } = \\ frac { d } { d V } 1 and \\ frac { V \\ frac { d } { d V } \\ lambda { (V) } } { \\ lambda ^ { 2 } { (V) } } = \\ frac { V \\ frac { d } { d V } \\ lambda { (V) } } { \\ lambda ^ { 2 } { (V) } } and \\ frac { V \\ frac { d } { d V } \\ lambda { (V) } } { \\ lambda ^ { 2 } { (V) } } - \\ frac { 1 } { \\ lambda { (V) } } = 0 and \\ frac { V \\ frac { d } { d V } V } { V } - \\ frac { 1 } { V } = 0 and V ( \\ frac { \\ frac { d } { d V } V } { V } - \\ frac { 1 } { V } ) = 0", "SR_flan-t5-large": "lambda { (V) } = V and \\ log { ( \\ lambda { (V) } ) } = \\ log { (V) } and \\ frac { d } { d \\ lambda { (V) } } \\ log { ( \\ lambda { (V) } ) } = \\ frac { d } { d \\ lambda { (V) } } \\ log { (V) } and \\ frac { \\ frac { d } { d \\ lambda { (V) } } \\ lambda { (V) } } { \\ lambda { (V) } } = \\ frac { \\ frac { d } { d \\ lambda { (V) } } V } { \\ lambda { (V) } } and \\ frac { \\ frac { d } { d \\ lambda { (V) } } \\ lambda { (V) } } { \\ lambda { (V) } } - \\ frac { 1 } { \\ lambda { (V) } } = 0", "static_rouge": 0.870748299319728, "static_bleu": 0.7601363150474318, "static_bleurt": 0.5312308669090271, "static_gleu": 0.7765726681127982, "VR_rouge": 0.02998396810953685, "EE_rouge": 0.0809393821222758, "AG_rouge": 0.02044889812212325, "SR_rouge": 0.2791990035450801, "VR_rouge_abs": 0.07804878048780484, "EE_rouge_abs": 0.10069686411149825, "AG_rouge_abs": 0.16173425892095983, "SR_rouge_abs": 0.3440000000000001, "VR_bleu": -0.08667115229664735, "EE_bleu": -0.049189219800477524, "AG_bleu": -0.03189614349702441, "SR_bleu": 0.13755166324840062, "VR_bleu_abs": 0.11074443627224789, "EE_bleu_abs": 0.21996658030894112, "AG_bleu_abs": 0.13234076086885826, "SR_bleu_abs": 0.2896441113943664, "VR_bleurt": -0.18597298860549927, "EE_bleurt": -0.1343112587928772, "AG_bleurt": -0.16504544019699097, "SR_bleurt": 0.27718523144721985, "VR_bleurt_abs": -0.05188620090484619, "EE_bleurt_abs": -0.10078972578048706, "AG_bleurt_abs": -0.07325953245162964, "SR_bleurt_abs": 0.29214856028556824, "VR_gleu": -0.0727424003803524, "EE_gleu": -0.03606116486364719, "AG_gleu": -0.01724176487689244, "SR_gleu": 0.14099783080260297, "VR_gleu_abs": 0.11112522477106096, "EE_gleu_abs": 0.218468834625407, "AG_gleu_abs": 0.13507614553749137, "SR_gleu_abs": 0.28195488721804507, "ratio_VR_rouge": 0.7935483870967743, "ratio_VR_bleu": 0.7986926649751039, "ratio_VR_bleurt": 1.2580434218426544, "ratio_VR_gleu": 0.8041896901447857, "ratio_EE_rouge": 0.8785714285714286, "ratio_EE_bleu": 0.7607111160251904, "ratio_EE_bleurt": 1.1611137678029717, "ratio_EE_gleu": 0.7627464481453177, "ratio_AG_rouge": 0.8216492076282567, "ratio_AG_bleu": 0.8444095442342896, "ratio_AG_bleurt": 1.1108856572939587, "ratio_AG_gleu": 0.8419540530640012, "ratio_SR_rouge": 0.6559999999999999, "ratio_SR_bleu": 0.7103558886056336, "ratio_SR_bleurt": 0.6135664031437942, "ratio_SR_gleu": 0.7180451127819549}, {"prompt": "Given \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} = A + V - \\dot{z}, then derive \\int \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} dV = \\frac{V^{2}}{2} + V (A - \\dot{z}) + \\mathbf{A}, then obtain \\int (A + V - \\dot{z}) dV = \\frac{V^{2}}{2} + V (A - \\dot{z}) + \\mathbf{A}", "derivation": "\\operatorname{f^{\\prime}}{(\\dot{z},V,A)} = A + V - \\dot{z} and \\int \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} dV = \\int (A + V - \\dot{z}) dV and \\int \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} dV = \\frac{V^{2}}{2} + V (A - \\dot{z}) + \\mathbf{A} and \\int (A + V - \\dot{z}) dV = \\frac{V^{2}}{2} + V (A - \\dot{z}) + \\mathbf{A}", "srepr_derivation": [["premise", "Equality(Function('f^{\\\\prime}')(Symbol('\\\\dot{z}', commutative=True), Symbol('V', commutative=True), Symbol('A', commutative=True)), Add(Symbol('A', commutative=True), Symbol('V', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True))))"], [["integrate", 1, "Symbol('V', commutative=True)"], "Equality(Integral(Function('f^{\\\\prime}')(Symbol('\\\\dot{z}', commutative=True), Symbol('V', commutative=True), Symbol('A', commutative=True)), Tuple(Symbol('V', commutative=True))), Integral(Add(Symbol('A', commutative=True), Symbol('V', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True))), Tuple(Symbol('V', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('f^{\\\\prime}')(Symbol('\\\\dot{z}', commutative=True), Symbol('V', commutative=True), Symbol('A', commutative=True)), Tuple(Symbol('V', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('V', commutative=True), Integer(2))), Mul(Symbol('V', commutative=True), Add(Symbol('A', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True)))), Symbol('\\\\mathbf{A}', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Integral(Add(Symbol('A', commutative=True), Symbol('V', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True))), Tuple(Symbol('V', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('V', commutative=True), Integer(2))), Mul(Symbol('V', commutative=True), Add(Symbol('A', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True)))), Symbol('\\\\mathbf{A}', commutative=True)))"]], "EE prompt": "Given A + V - \\dot{z} = \\operatorname{f^{\\prime}}{(\\dot{z},V,A)}, then derive \\frac{V^{2}}{2} + V (A - \\dot{z}) + \\mathbf{A} = \\int \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} dV, then obtain \\frac{V^{2}}{2} + V (A - \\dot{z}) + \\mathbf{A} = \\int (A + V - \\dot{z}) dV", "EE derivation": "A + V - \\dot{z} = \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} and \\int (A + V - \\dot{z}) dV = \\int \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} dV and \\frac{V^{2}}{2} + V (A - \\dot{z}) + \\mathbf{A} = \\int \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} dV and \\frac{V^{2}}{2} + V (A - \\dot{z}) + \\mathbf{A} = \\int (A + V - \\dot{z}) dV", "EE srepr_derivation": [["premise", "Equality(Add(Symbol('A', commutative=True), Symbol('V', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True))), Function('f^{\\\\prime}')(Symbol('\\\\dot{z}', commutative=True), Symbol('V', commutative=True), Symbol('A', commutative=True)))"], [["integrate", 1, "Symbol('V', commutative=True)"], "Equality(Integral(Add(Symbol('A', commutative=True), Symbol('V', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True))), Tuple(Symbol('V', commutative=True))), Integral(Function('f^{\\\\prime}')(Symbol('\\\\dot{z}', commutative=True), Symbol('V', commutative=True), Symbol('A', commutative=True)), Tuple(Symbol('V', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('V', commutative=True), Integer(2))), Mul(Symbol('V', commutative=True), Add(Symbol('A', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True)))), Symbol('\\\\mathbf{A}', commutative=True)), Integral(Function('f^{\\\\prime}')(Symbol('\\\\dot{z}', commutative=True), Symbol('V', commutative=True), Symbol('A', commutative=True)), Tuple(Symbol('V', commutative=True))))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('V', commutative=True), Integer(2))), Mul(Symbol('V', commutative=True), Add(Symbol('A', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True)))), Symbol('\\\\mathbf{A}', commutative=True)), Integral(Add(Symbol('A', commutative=True), Symbol('V', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True))), Tuple(Symbol('V', commutative=True))))"]], "AG prompt": "Given \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} = A + V - \\dot{z}, then derive \\int \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} dV = \\frac{V^{2}}{2} + V (A - \\dot{z}) + \\mathbf{A}, then obtain \\iint \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} dV dV = \\int (\\frac{V^{2}}{2} + V (A - \\dot{z}) + \\mathbf{A}) dV", "AG derivation": "\\operatorname{f^{\\prime}}{(\\dot{z},V,A)} = A + V - \\dot{z} and \\int \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} dV = \\int (A + V - \\dot{z}) dV and \\int \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} dV = \\frac{V^{2}}{2} + V (A - \\dot{z}) + \\mathbf{A} and \\iint \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} dV dV = \\int (\\frac{V^{2}}{2} + V (A - \\dot{z}) + \\mathbf{A}) dV", "AG srepr_derivation": [["premise", "Equality(Function('f^{\\\\prime}')(Symbol('\\\\dot{z}', commutative=True), Symbol('V', commutative=True), Symbol('A', commutative=True)), Add(Symbol('A', commutative=True), Symbol('V', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True))))"], [["integrate", 1, "Symbol('V', commutative=True)"], "Equality(Integral(Function('f^{\\\\prime}')(Symbol('\\\\dot{z}', commutative=True), Symbol('V', commutative=True), Symbol('A', commutative=True)), Tuple(Symbol('V', commutative=True))), Integral(Add(Symbol('A', commutative=True), Symbol('V', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True))), Tuple(Symbol('V', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('f^{\\\\prime}')(Symbol('\\\\dot{z}', commutative=True), Symbol('V', commutative=True), Symbol('A', commutative=True)), Tuple(Symbol('V', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('V', commutative=True), Integer(2))), Mul(Symbol('V', commutative=True), Add(Symbol('A', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True)))), Symbol('\\\\mathbf{A}', commutative=True)))"], [["integrate", 3, "Symbol('V', commutative=True)"], "Equality(Integral(Function('f^{\\\\prime}')(Symbol('\\\\dot{z}', commutative=True), Symbol('V', commutative=True), Symbol('A', commutative=True)), Tuple(Symbol('V', commutative=True)), Tuple(Symbol('V', commutative=True))), Integral(Add(Mul(Rational(1, 2), Pow(Symbol('V', commutative=True), Integer(2))), Mul(Symbol('V', commutative=True), Add(Symbol('A', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True)))), Symbol('\\\\mathbf{A}', commutative=True)), Tuple(Symbol('V', commutative=True))))"]], "SR prompt": "Given \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} = A + V - \\dot{z}, then obtain \\int (A + V - \\dot{z}) dV = \\frac{V^{2}}{2} + V (A - \\dot{z}) + \\mathbf{A}", "SR derivation": "\\operatorname{f^{\\prime}}{(\\dot{z},V,A)} = A + V - \\dot{z} and \\int \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} dV = \\int (A + V - \\dot{z}) dV and \\int \\operatorname{f^{\\prime}}{(\\dot{z},V,A)} dV = \\frac{V^{2}}{2} + V (A - \\dot{z}) + \\mathbf{A} and \\int (A + V - \\dot{z}) dV = \\frac{V^{2}}{2} + V (A - \\dot{z}) + \\mathbf{A}", "SR srepr_derivation": [["premise", "Equality(Function('f^{\\\\prime}')(Symbol('\\\\dot{z}', commutative=True), Symbol('V', commutative=True), Symbol('A', commutative=True)), Add(Symbol('A', commutative=True), Symbol('V', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True))))"], [["integrate", 1, "Symbol('V', commutative=True)"], "Equality(Integral(Function('f^{\\\\prime}')(Symbol('\\\\dot{z}', commutative=True), Symbol('V', commutative=True), Symbol('A', commutative=True)), Tuple(Symbol('V', commutative=True))), Integral(Add(Symbol('A', commutative=True), Symbol('V', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True))), Tuple(Symbol('V', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('f^{\\\\prime}')(Symbol('\\\\dot{z}', commutative=True), Symbol('V', commutative=True), Symbol('A', commutative=True)), Tuple(Symbol('V', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('V', commutative=True), Integer(2))), Mul(Symbol('V', commutative=True), Add(Symbol('A', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True)))), Symbol('\\\\mathbf{A}', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Integral(Add(Symbol('A', commutative=True), Symbol('V', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True))), Tuple(Symbol('V', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('V', commutative=True), Integer(2))), Mul(Symbol('V', commutative=True), Add(Symbol('A', commutative=True), Mul(Integer(-1), Symbol('\\\\dot{z}', commutative=True)))), Symbol('\\\\mathbf{A}', commutative=True)))"]], "VR prompt": "Given \\beta{(\\xi,\\iota,\\alpha)} = \\alpha - \\iota + \\xi, then derive \\int \\beta{(\\xi,\\iota,\\alpha)} d\\alpha = \\frac{\\alpha^{2}}{2} + \\alpha (- \\iota + \\xi) + \\gamma, then obtain \\int (\\alpha - \\iota + \\xi) d\\alpha = \\frac{\\alpha^{2}}{2} + \\alpha (- \\iota + \\xi) + \\gamma", "VR derivation": "\\beta{(\\xi,\\iota,\\alpha)} = \\alpha - \\iota + \\xi and \\int \\beta{(\\xi,\\iota,\\alpha)} d\\alpha = \\int (\\alpha - \\iota + \\xi) d\\alpha and \\int \\beta{(\\xi,\\iota,\\alpha)} d\\alpha = \\frac{\\alpha^{2}}{2} + \\alpha (- \\iota + \\xi) + \\gamma and \\int (\\alpha - \\iota + \\xi) d\\alpha = \\frac{\\alpha^{2}}{2} + \\alpha (- \\iota + \\xi) + \\gamma", "VR srepr_derivation": [["premise", "Equality(Function('\\\\beta')(Symbol('\\\\xi', commutative=True), Symbol('\\\\iota', commutative=True), Symbol('\\\\alpha', commutative=True)), Add(Symbol('\\\\alpha', commutative=True), Mul(Integer(-1), Symbol('\\\\iota', commutative=True)), Symbol('\\\\xi', commutative=True)))"], [["integrate", 1, "Symbol('\\\\alpha', commutative=True)"], "Equality(Integral(Function('\\\\beta')(Symbol('\\\\xi', commutative=True), Symbol('\\\\iota', commutative=True), Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Integral(Add(Symbol('\\\\alpha', commutative=True), Mul(Integer(-1), Symbol('\\\\iota', commutative=True)), Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\beta')(Symbol('\\\\xi', commutative=True), Symbol('\\\\iota', commutative=True), Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\alpha', commutative=True), Integer(2))), Mul(Symbol('\\\\alpha', commutative=True), Add(Mul(Integer(-1), Symbol('\\\\iota', commutative=True)), Symbol('\\\\xi', commutative=True))), Symbol('\\\\gamma', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Integral(Add(Symbol('\\\\alpha', commutative=True), Mul(Integer(-1), Symbol('\\\\iota', commutative=True)), Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\alpha', commutative=True), Integer(2))), Mul(Symbol('\\\\alpha', commutative=True), Add(Mul(Integer(-1), Symbol('\\\\iota', commutative=True)), Symbol('\\\\xi', commutative=True))), Symbol('\\\\gamma', commutative=True)))"]], "static_flan-t5-large": "operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } = A + V - \\ dot { z } and \\ int \\ operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } dV = \\ int (A + V - \\ dot { z } ) dV and \\ int \\ operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } dV = \\ frac { V ^ { 2 } } { 2 } + V (A - \\ dot { z } ) + \\ mathbf { A } and \\ int (A + V - \\ dot { z } ) dV = \\ frac { V ^ { 2 } } { 2 } + V (A - \\ dot { z } ) + \\ mathbf { A }", "VR_flan-t5-large": "beta { ( \\ xi, \\ iota, \\ alpha) } = \\ alpha - \\ iota + \\ xi and \\ int \\ beta { ( \\ xi, \\ iota, \\ alpha) } d \\ alpha = \\ int ( \\ alpha - \\ iota + \\ xi) d \\ alpha and \\ int \\ beta { ( \\ xi, \\ iota, \\ alpha) } d \\ alpha = \\ frac { \\ alpha ^ { 2 } } { 2 } + \\ alpha (- \\ iota + \\ xi) + \\ gamma and \\ int ( \\ alpha - \\ iota + \\ xi) d \\ alpha = \\ frac { \\ alpha ^ { 2 } } { 2 } + \\ alpha (- \\ iota + \\ xi) + \\ gamma", "EE_flan-t5-large": "operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } = \\ operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } and \\ int \\ operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } dV = \\ int \\ operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } dV and V + \\ int \\ operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } dV = V + \\ int \\ operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } dV and \\ frac { V ^ { 2 } } { 2 } + V (A - \\ dot { z } ) + \\ mathbf { A } = \\ int \\ operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } dV and \\ frac { V ^ { 2 } } { 2 } + V (A - \\ dot { z } ) + \\ mathbf { A } = \\ int (A + V - \\ dot { z } ) dV", "AG_flan-t5-large": "operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } = A + V - \\ dot { z } and \\ int \\ operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } dV = \\ int (A + V - \\ dot { z } ) dV and \\ int \\ operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } dV = \\ frac { V ^ { 2 } } { 2 } + V (A - \\ dot { z } ) + \\ mathbf { A } and \\ iint \\ operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } dV dV = \\ int ( \\ frac { V ^ { 2 } } { 2 } + V (A - \\ dot { z } ) + \\ mathbf { A } ) dV", "SR_flan-t5-large": "operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } = A + V - \\ dot { z } and - \\ frac { \\ operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } } { V } = - \\ frac { A + V - \\ dot { z } } { V } and \\ int - \\ frac { \\ operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } } { V } dV = \\ int (A + V - \\ dot { z } ) dV and \\ int - \\ frac { \\ operatorname { f ^ { \\ prime } } { ( \\ dot { z },V,A) } } { V } dV = \\ int (- \\ frac { A + V - \\ dot { z } } { V } ) dV and \\ int (A + V - \\ dot { z } ) dV = \\ frac { V ^ { 2 } } { 2 } + V (A - \\ dot { z } ) + \\ mathbf { A }", "static_rouge": 1.0, "static_bleu": 0.9943342928194056, "static_bleurt": 0.6719709634780884, "static_gleu": 0.9943019943019943, "VR_rouge": 0.0, "EE_rouge": 0.2679738562091504, "AG_rouge": 0.0, "SR_rouge": 0.3055555555555556, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.23809523809523814, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.3055555555555556, "VR_bleu": 0.0009787865643711147, "EE_bleu": 0.3614488097171281, "AG_bleu": -0.0005243303605133587, "SR_bleu": 0.33998318197818544, "VR_bleu_abs": -0.0006509383342759301, "EE_bleu_abs": 0.34040908615038357, "AG_bleu_abs": 0.0007042926996867482, "SR_bleu_abs": 0.3499515559892007, "VR_bleurt": -0.18759572505950928, "EE_bleurt": -0.07400667667388916, "AG_bleurt": -0.12316477298736572, "SR_bleurt": -0.11204326152801514, "VR_bleurt_abs": 0.005815327167510986, "EE_bleurt_abs": -0.07656776905059814, "AG_bleurt_abs": 0.04530066251754761, "SR_bleurt_abs": -0.07812392711639404, "VR_gleu": 0.000990957512696622, "EE_gleu": 0.3608397119035417, "AG_gleu": -0.0005300470416749192, "SR_gleu": 0.33691441400220845, "VR_gleu_abs": -0.00016734830488412955, "EE_gleu_abs": 0.3400480528140103, "AG_gleu_abs": 0.0006980100003356471, "SR_gleu_abs": 0.34689507494646676, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 1.002805378322279, "ratio_VR_bleurt": 1.0252808106235634, "ratio_VR_gleu": 1.0005993801532074, "ratio_EE_rouge": 0.7368421052631579, "ratio_EE_bleu": 0.6378377909604502, "ratio_EE_bleurt": 1.0977887877163433, "ratio_EE_gleu": 0.6388597079040315, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9991858618619615, "ratio_AG_bleurt": 0.9381172598128306, "ratio_AG_gleu": 0.9991936421787168, "ratio_SR_rouge": 0.6944444444444444, "ratio_SR_bleu": 0.6500484440107993, "ratio_SR_bleurt": 1.1083895196003875, "ratio_SR_gleu": 0.6531049250535332}, {"prompt": "Given \\operatorname{A_{x}}{(\\mathbf{S})} = e^{\\mathbf{S}}, then derive e^{\\mathbf{S}} + \\frac{d}{d \\mathbf{S}} \\operatorname{A_{x}}{(\\mathbf{S})} = 2 e^{\\mathbf{S}}, then obtain \\frac{d}{d \\mathbf{S}} (\\operatorname{A_{x}}{(\\mathbf{S})} + e^{\\mathbf{S}}) = \\frac{d}{d \\mathbf{S}} (e^{\\mathbf{S}} + \\frac{d}{d \\mathbf{S}} \\operatorname{A_{x}}{(\\mathbf{S})})", "derivation": "\\operatorname{A_{x}}{(\\mathbf{S})} = e^{\\mathbf{S}} and \\operatorname{A_{x}}{(\\mathbf{S})} + e^{\\mathbf{S}} = 2 e^{\\mathbf{S}} and \\frac{d}{d \\mathbf{S}} (\\operatorname{A_{x}}{(\\mathbf{S})} + e^{\\mathbf{S}}) = \\frac{d}{d \\mathbf{S}} 2 e^{\\mathbf{S}} and e^{\\mathbf{S}} + \\frac{d}{d \\mathbf{S}} \\operatorname{A_{x}}{(\\mathbf{S})} = 2 e^{\\mathbf{S}} and \\frac{d}{d \\mathbf{S}} (\\operatorname{A_{x}}{(\\mathbf{S})} + e^{\\mathbf{S}}) = \\frac{d}{d \\mathbf{S}} (e^{\\mathbf{S}} + \\frac{d}{d \\mathbf{S}} \\operatorname{A_{x}}{(\\mathbf{S})})", "srepr_derivation": [["premise", "Equality(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), exp(Symbol('\\\\mathbf{S}', commutative=True)))"], [["add", 1, "exp(Symbol('\\\\mathbf{S}', commutative=True))"], "Equality(Add(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), exp(Symbol('\\\\mathbf{S}', commutative=True))), Mul(Integer(2), exp(Symbol('\\\\mathbf{S}', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\mathbf{S}', commutative=True)"], "Equality(Derivative(Add(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), exp(Symbol('\\\\mathbf{S}', commutative=True))), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1))), Derivative(Mul(Integer(2), exp(Symbol('\\\\mathbf{S}', commutative=True))), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Add(exp(Symbol('\\\\mathbf{S}', commutative=True)), Derivative(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1)))), Mul(Integer(2), exp(Symbol('\\\\mathbf{S}', commutative=True))))"], [["substitute_RHS_for_LHS", 3, 4], "Equality(Derivative(Add(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), exp(Symbol('\\\\mathbf{S}', commutative=True))), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1))), Derivative(Add(exp(Symbol('\\\\mathbf{S}', commutative=True)), Derivative(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1)))), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1))))"]], "EE prompt": "Given e^{\\mathbf{S}} = \\operatorname{A_{x}}{(\\mathbf{S})}, then derive 2 e^{\\mathbf{S}} = e^{\\mathbf{S}} + \\frac{d}{d \\mathbf{S}} \\operatorname{A_{x}}{(\\mathbf{S})}, then obtain \\frac{d}{d \\mathbf{S}} (e^{\\mathbf{S}} + \\frac{d}{d \\mathbf{S}} \\operatorname{A_{x}}{(\\mathbf{S})}) = \\frac{d}{d \\mathbf{S}} (\\operatorname{A_{x}}{(\\mathbf{S})} + e^{\\mathbf{S}})", "EE derivation": "e^{\\mathbf{S}} = \\operatorname{A_{x}}{(\\mathbf{S})} and 2 e^{\\mathbf{S}} = \\operatorname{A_{x}}{(\\mathbf{S})} + e^{\\mathbf{S}} and \\frac{d}{d \\mathbf{S}} 2 e^{\\mathbf{S}} = \\frac{d}{d \\mathbf{S}} (\\operatorname{A_{x}}{(\\mathbf{S})} + e^{\\mathbf{S}}) and 2 e^{\\mathbf{S}} = e^{\\mathbf{S}} + \\frac{d}{d \\mathbf{S}} \\operatorname{A_{x}}{(\\mathbf{S})} and \\frac{d}{d \\mathbf{S}} (e^{\\mathbf{S}} + \\frac{d}{d \\mathbf{S}} \\operatorname{A_{x}}{(\\mathbf{S})}) = \\frac{d}{d \\mathbf{S}} (\\operatorname{A_{x}}{(\\mathbf{S})} + e^{\\mathbf{S}})", "EE srepr_derivation": [["premise", "Equality(exp(Symbol('\\\\mathbf{S}', commutative=True)), Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)))"], [["add", 1, "exp(Symbol('\\\\mathbf{S}', commutative=True))"], "Equality(Mul(Integer(2), exp(Symbol('\\\\mathbf{S}', commutative=True))), Add(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), exp(Symbol('\\\\mathbf{S}', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\mathbf{S}', commutative=True)"], "Equality(Derivative(Mul(Integer(2), exp(Symbol('\\\\mathbf{S}', commutative=True))), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1))), Derivative(Add(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), exp(Symbol('\\\\mathbf{S}', commutative=True))), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Mul(Integer(2), exp(Symbol('\\\\mathbf{S}', commutative=True))), Add(exp(Symbol('\\\\mathbf{S}', commutative=True)), Derivative(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Derivative(Add(exp(Symbol('\\\\mathbf{S}', commutative=True)), Derivative(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1)))), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1))), Derivative(Add(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), exp(Symbol('\\\\mathbf{S}', commutative=True))), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1))))"]], "AG prompt": "Given \\operatorname{A_{x}}{(\\mathbf{S})} = e^{\\mathbf{S}}, then derive e^{\\mathbf{S}} + \\frac{d}{d \\mathbf{S}} \\operatorname{A_{x}}{(\\mathbf{S})} = 2 e^{\\mathbf{S}}, then obtain e^{\\mathbf{S}} + \\frac{d}{d \\mathbf{S}} e^{\\mathbf{S}} = 2 e^{\\mathbf{S}}", "AG derivation": "\\operatorname{A_{x}}{(\\mathbf{S})} = e^{\\mathbf{S}} and \\operatorname{A_{x}}{(\\mathbf{S})} + e^{\\mathbf{S}} = 2 e^{\\mathbf{S}} and \\frac{d}{d \\mathbf{S}} (\\operatorname{A_{x}}{(\\mathbf{S})} + e^{\\mathbf{S}}) = \\frac{d}{d \\mathbf{S}} 2 e^{\\mathbf{S}} and e^{\\mathbf{S}} + \\frac{d}{d \\mathbf{S}} \\operatorname{A_{x}}{(\\mathbf{S})} = 2 e^{\\mathbf{S}} and e^{\\mathbf{S}} + \\frac{d}{d \\mathbf{S}} e^{\\mathbf{S}} = 2 e^{\\mathbf{S}}", "AG srepr_derivation": [["premise", "Equality(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), exp(Symbol('\\\\mathbf{S}', commutative=True)))"], [["add", 1, "exp(Symbol('\\\\mathbf{S}', commutative=True))"], "Equality(Add(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), exp(Symbol('\\\\mathbf{S}', commutative=True))), Mul(Integer(2), exp(Symbol('\\\\mathbf{S}', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\mathbf{S}', commutative=True)"], "Equality(Derivative(Add(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), exp(Symbol('\\\\mathbf{S}', commutative=True))), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1))), Derivative(Mul(Integer(2), exp(Symbol('\\\\mathbf{S}', commutative=True))), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Add(exp(Symbol('\\\\mathbf{S}', commutative=True)), Derivative(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1)))), Mul(Integer(2), exp(Symbol('\\\\mathbf{S}', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Add(exp(Symbol('\\\\mathbf{S}', commutative=True)), Derivative(exp(Symbol('\\\\mathbf{S}', commutative=True)), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1)))), Mul(Integer(2), exp(Symbol('\\\\mathbf{S}', commutative=True))))"]], "SR prompt": "Given \\operatorname{A_{x}}{(\\mathbf{S})} = e^{\\mathbf{S}}, then obtain \\frac{d}{d \\mathbf{S}} (\\operatorname{A_{x}}{(\\mathbf{S})} + e^{\\mathbf{S}}) = \\frac{d}{d \\mathbf{S}} (e^{\\mathbf{S}} + \\frac{d}{d \\mathbf{S}} \\operatorname{A_{x}}{(\\mathbf{S})})", "SR derivation": "\\operatorname{A_{x}}{(\\mathbf{S})} = e^{\\mathbf{S}} and \\operatorname{A_{x}}{(\\mathbf{S})} + e^{\\mathbf{S}} = 2 e^{\\mathbf{S}} and \\frac{d}{d \\mathbf{S}} (\\operatorname{A_{x}}{(\\mathbf{S})} + e^{\\mathbf{S}}) = \\frac{d}{d \\mathbf{S}} 2 e^{\\mathbf{S}} and e^{\\mathbf{S}} + \\frac{d}{d \\mathbf{S}} \\operatorname{A_{x}}{(\\mathbf{S})} = 2 e^{\\mathbf{S}} and \\frac{d}{d \\mathbf{S}} (\\operatorname{A_{x}}{(\\mathbf{S})} + e^{\\mathbf{S}}) = \\frac{d}{d \\mathbf{S}} (e^{\\mathbf{S}} + \\frac{d}{d \\mathbf{S}} \\operatorname{A_{x}}{(\\mathbf{S})})", "SR srepr_derivation": [["premise", "Equality(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), exp(Symbol('\\\\mathbf{S}', commutative=True)))"], [["add", 1, "exp(Symbol('\\\\mathbf{S}', commutative=True))"], "Equality(Add(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), exp(Symbol('\\\\mathbf{S}', commutative=True))), Mul(Integer(2), exp(Symbol('\\\\mathbf{S}', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\mathbf{S}', commutative=True)"], "Equality(Derivative(Add(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), exp(Symbol('\\\\mathbf{S}', commutative=True))), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1))), Derivative(Mul(Integer(2), exp(Symbol('\\\\mathbf{S}', commutative=True))), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Add(exp(Symbol('\\\\mathbf{S}', commutative=True)), Derivative(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1)))), Mul(Integer(2), exp(Symbol('\\\\mathbf{S}', commutative=True))))"], [["substitute_RHS_for_LHS", 3, 4], "Equality(Derivative(Add(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), exp(Symbol('\\\\mathbf{S}', commutative=True))), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1))), Derivative(Add(exp(Symbol('\\\\mathbf{S}', commutative=True)), Derivative(Function('A_x')(Symbol('\\\\mathbf{S}', commutative=True)), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1)))), Tuple(Symbol('\\\\mathbf{S}', commutative=True), Integer(1))))"]], "VR prompt": "Given \\zeta{(\\beta)} = e^{\\beta}, then derive e^{\\beta} + \\frac{d}{d \\beta} \\zeta{(\\beta)} = 2 e^{\\beta}, then obtain \\frac{d}{d \\beta} (\\zeta{(\\beta)} + e^{\\beta}) = \\frac{d}{d \\beta} (e^{\\beta} + \\frac{d}{d \\beta} \\zeta{(\\beta)})", "VR derivation": "\\zeta{(\\beta)} = e^{\\beta} and \\zeta{(\\beta)} + e^{\\beta} = 2 e^{\\beta} and \\frac{d}{d \\beta} (\\zeta{(\\beta)} + e^{\\beta}) = \\frac{d}{d \\beta} 2 e^{\\beta} and e^{\\beta} + \\frac{d}{d \\beta} \\zeta{(\\beta)} = 2 e^{\\beta} and \\frac{d}{d \\beta} (\\zeta{(\\beta)} + e^{\\beta}) = \\frac{d}{d \\beta} (e^{\\beta} + \\frac{d}{d \\beta} \\zeta{(\\beta)})", "VR srepr_derivation": [["premise", "Equality(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), exp(Symbol('\\\\beta', commutative=True)))"], [["add", 1, "exp(Symbol('\\\\beta', commutative=True))"], "Equality(Add(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), exp(Symbol('\\\\beta', commutative=True))), Mul(Integer(2), exp(Symbol('\\\\beta', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\beta', commutative=True)"], "Equality(Derivative(Add(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), exp(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Derivative(Mul(Integer(2), exp(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Add(exp(Symbol('\\\\beta', commutative=True)), Derivative(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))), Mul(Integer(2), exp(Symbol('\\\\beta', commutative=True))))"], [["substitute_RHS_for_LHS", 3, 4], "Equality(Derivative(Add(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), exp(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Derivative(Add(exp(Symbol('\\\\beta', commutative=True)), Derivative(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))))"]], "static_flan-t5-large": "operatorname { A_ { x } } { ( \\ mathbf { S } ) } = e ^ { \\ mathbf { S } } and \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } + e ^ { \\ mathbf { S } } = 2 e ^ { \\ mathbf { S } } and \\ frac { d } { d \\ mathbf { S } } ( \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } + e ^ { \\ mathbf { S } } ) = \\ frac { d } { d \\ mathbf { S } } 2 e ^ { \\ mathbf { S } } and e ^ { \\ mathbf { S } } + \\ frac { d } { d \\ mathbf { S } } \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } = 2 e ^ { \\ mathbf { S } } and \\ frac { d } { d \\ mathbf { S } } ( \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } + e ^ { \\ mathbf { S } } ) = \\ frac { d } { d \\ mathbf { S } } (e ^ { \\ mathbf { S } } + \\ frac { d } { d \\ mathbf { S } } \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } )", "VR_flan-t5-large": "zeta { ( \\ beta) } = e ^ { \\ beta } and \\ frac { d } { d \\ beta } \\ zeta { ( \\ beta) } = \\ frac { d } { d \\ beta } e ^ { \\ beta } and \\ frac { d } { d \\ beta } \\ zeta { ( \\ beta) } + \\ frac { d } { d \\ beta } e ^ { \\ beta } = 2 \\ frac { d } { d \\ beta } e ^ { \\ beta } and e ^ { \\ beta } + \\ frac { d } { d \\ beta } \\ zeta { ( \\ beta) } = 2 e ^ { \\ beta } and \\ zeta { ( \\ beta) } + e ^ { \\ beta } = e ^ { \\ beta } + \\ frac { d } { d \\ beta } \\ zeta { ( \\ beta) } and \\ frac { d } { d \\ beta } ( \\ zeta { ( \\ beta) } + e ^ { \\ beta } ) = \\ frac { d } { d \\ beta } (e ^ { \\ beta } + \\ frac { d } { d \\ beta } \\ zeta { ( \\ beta) } )", "EE_flan-t5-large": "operatorname { A_ { x } } { ( \\ mathbf { S } ) } = \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } and 2 e ^ { \\ mathbf { S } } = e ^ { \\ mathbf { S } } + \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } and \\ frac { d } { d \\ mathbf { S } } 2 e ^ { \\ mathbf { S } } = \\ frac { d } { d \\ mathbf { S } } (e ^ { \\ mathbf { S } } + \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } ) and 2 e ^ { \\ mathbf { S } } = e ^ { \\ mathbf { S } } + \\ frac { d } { d \\ mathbf { S } } \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } and \\ frac { d } { d \\ mathbf { S } } 2 e ^ { \\ mathbf { S } } = \\ frac { d } { d \\ mathbf { S } } ( \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } + e ^ { \\ mathbf { S } } ) and \\ frac { d } { d \\ mathbf { S } } (e ^ { \\ mathbf { S } } + \\ frac { d } { d \\ mathbf { S } } \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } ) = \\ frac { d } { d \\ mathbf { S } } ( \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } + e ^ { \\ mathbf { S } } )", "AG_flan-t5-large": "operatorname { A_ { x } } { ( \\ mathbf { S } ) } = e ^ { \\ mathbf { S } } and \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } + e ^ { \\ mathbf { S } } = 2 e ^ { \\ mathbf { S } } and \\ frac { d } { d \\ mathbf { S } } ( \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } + e ^ { \\ mathbf { S } } ) = \\ frac { d } { d \\ mathbf { S } } 2 e ^ { \\ mathbf { S } } and e ^ { \\ mathbf { S } } + \\ frac { d } { d \\ mathbf { S } } \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } = 2 e ^ { \\ mathbf { S } } and e ^ { \\ mathbf { S } } + \\ frac { d } { d \\ mathbf { S } } e ^ { \\ mathbf { S } } = 2 e ^ { \\ mathbf { S } }", "SR_flan-t5-large": "operatorname { A_ { x } } { ( \\ mathbf { S } ) } = e ^ { \\ mathbf { S } } and \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } + e ^ { \\ mathbf { S } } = e ^ { \\ mathbf { S } } + \\ frac { d } { d \\ mathbf { S } } and \\ frac { d } { d \\ mathbf { S } } ( \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } + e ^ { \\ mathbf { S } } ) = \\ frac { d } { d \\ mathbf { S } } (e ^ { \\ mathbf { S } } + \\ frac { d } { d \\ mathbf { S } } e ^ { \\ mathbf { S } } ) and \\ frac { d } { d \\ mathbf { S } } ( \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } + e ^ { \\ mathbf { S } } ) = \\ frac { d } { d \\ mathbf { S } } (e ^ { \\ mathbf { S } } + \\ frac { d } { d \\ mathbf { S } } \\ operatorname { A_ { x } } { ( \\ mathbf { S } ) } )", "static_rouge": 1.0, "static_bleu": 0.9965457720070073, "static_bleurt": 0.8309258818626404, "static_gleu": 0.9965337954939342, "VR_rouge": 0.19718309859154937, "EE_rouge": 0.11848341232227488, "AG_rouge": 0.0, "SR_rouge": 0.11731843575418999, "VR_rouge_abs": 0.052436974789915936, "EE_rouge_abs": 0.10390867859144881, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.11731843575418999, "VR_bleu": 0.286564910556353, "EE_bleu": 0.2154398334708555, "AG_bleu": 0.0008468406309917187, "SR_bleu": 0.11109823907891025, "VR_bleu_abs": -0.02635325312189185, "EE_bleu_abs": 0.20889476587955724, "AG_bleu_abs": 0.00092655360734617, "SR_bleu_abs": 0.11130312196707826, "VR_bleurt": 0.018362462520599365, "EE_bleurt": 0.09695941209793091, "AG_bleurt": 0.000947117805480957, "SR_bleurt": 0.11608022451400757, "VR_bleurt_abs": -0.17632362246513367, "EE_bleurt_abs": -0.09997189044952393, "AG_bleurt_abs": 0.001971006393432617, "SR_bleurt_abs": 0.1258142590522766, "VR_gleu": 0.28589984866366835, "EE_gleu": 0.21532666243494925, "AG_gleu": 0.0008534499215799851, "SR_gleu": 0.1091854419410746, "VR_gleu_abs": 0.0003255218144826988, "EE_gleu_abs": 0.20878533068018912, "AG_gleu_abs": 0.0007957199909577328, "SR_gleu_abs": 0.10956521739130431, "ratio_VR_rouge": 0.7771428571428572, "ratio_VR_bleu": 1.0752611130251017, "ratio_VR_bleurt": 0.6260803034718421, "ratio_VR_gleu": 0.999199035876518, "ratio_EE_rouge": 0.891421268438149, "ratio_EE_bleu": 0.7826886735143002, "ratio_EE_bleurt": 1.1457026049341084, "ratio_EE_gleu": 0.7829384940496051, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9987684639631348, "ratio_AG_bleurt": 0.9976941261231007, "ratio_AG_gleu": 0.9989682462139716, "ratio_SR_rouge": 0.88268156424581, "ratio_SR_bleu": 0.8886968780329217, "ratio_SR_bleurt": 0.8549105379955328, "ratio_SR_gleu": 0.8904347826086957}, {"prompt": "Given J{(\\phi_1)} = \\sin{(\\phi_1)}, then derive \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)} = \\sin{(\\phi_1)} \\cos{(\\phi_1)}, then obtain J{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)} = J{(\\phi_1)} \\cos{(\\phi_1)}", "derivation": "J{(\\phi_1)} = \\sin{(\\phi_1)} and \\frac{d}{d \\phi_1} J{(\\phi_1)} = \\frac{d}{d \\phi_1} \\sin{(\\phi_1)} and \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)} = \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} \\sin{(\\phi_1)} and \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)} = \\sin{(\\phi_1)} \\cos{(\\phi_1)} and \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} \\sin{(\\phi_1)} = \\sin{(\\phi_1)} \\cos{(\\phi_1)} and J{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)} = J{(\\phi_1)} \\cos{(\\phi_1)}", "srepr_derivation": [["premise", "Equality(Function('J')(Symbol('\\\\phi_1', commutative=True)), sin(Symbol('\\\\phi_1', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\phi_1', commutative=True)"], "Equality(Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1))))"], [["times", 2, "sin(Symbol('\\\\phi_1', commutative=True))"], "Equality(Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(sin(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 3], "Equality(Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\phi_1', commutative=True)), cos(Symbol('\\\\phi_1', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(sin(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\phi_1', commutative=True)), cos(Symbol('\\\\phi_1', commutative=True))))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(Mul(Function('J')(Symbol('\\\\phi_1', commutative=True)), Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))), Mul(Function('J')(Symbol('\\\\phi_1', commutative=True)), cos(Symbol('\\\\phi_1', commutative=True))))"]], "EE prompt": "Given \\sin{(\\phi_1)} = J{(\\phi_1)}, then derive \\sin{(\\phi_1)} \\cos{(\\phi_1)} = \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)}, then obtain J{(\\phi_1)} \\cos{(\\phi_1)} = J{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)}", "EE derivation": "\\sin{(\\phi_1)} = J{(\\phi_1)} and \\frac{d}{d \\phi_1} \\sin{(\\phi_1)} = \\frac{d}{d \\phi_1} J{(\\phi_1)} and \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} \\sin{(\\phi_1)} = \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)} and \\sin{(\\phi_1)} \\cos{(\\phi_1)} = \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)} and \\sin{(\\phi_1)} \\cos{(\\phi_1)} = \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} \\sin{(\\phi_1)} and J{(\\phi_1)} \\cos{(\\phi_1)} = J{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)}", "EE srepr_derivation": [["premise", "Equality(sin(Symbol('\\\\phi_1', commutative=True)), Function('J')(Symbol('\\\\phi_1', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\phi_1', commutative=True)"], "Equality(Derivative(sin(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1))), Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1))))"], [["times", 2, "sin(Symbol('\\\\phi_1', commutative=True))"], "Equality(Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(sin(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 3], "Equality(Mul(sin(Symbol('\\\\phi_1', commutative=True)), cos(Symbol('\\\\phi_1', commutative=True))), Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Mul(sin(Symbol('\\\\phi_1', commutative=True)), cos(Symbol('\\\\phi_1', commutative=True))), Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(sin(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Mul(Function('J')(Symbol('\\\\phi_1', commutative=True)), cos(Symbol('\\\\phi_1', commutative=True))), Mul(Function('J')(Symbol('\\\\phi_1', commutative=True)), Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))))"]], "AG prompt": "Given J{(\\phi_1)} = \\sin{(\\phi_1)}, then derive \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)} = \\sin{(\\phi_1)} \\cos{(\\phi_1)}, then obtain \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} \\sin{(\\phi_1)} - \\frac{d}{d \\phi_1} J{(\\phi_1)} = \\sin{(\\phi_1)} \\cos{(\\phi_1)} - \\frac{d}{d \\phi_1} J{(\\phi_1)}", "AG derivation": "J{(\\phi_1)} = \\sin{(\\phi_1)} and \\frac{d}{d \\phi_1} J{(\\phi_1)} = \\frac{d}{d \\phi_1} \\sin{(\\phi_1)} and \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)} = \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} \\sin{(\\phi_1)} and \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)} = \\sin{(\\phi_1)} \\cos{(\\phi_1)} and \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} \\sin{(\\phi_1)} = \\sin{(\\phi_1)} \\cos{(\\phi_1)} and \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} \\sin{(\\phi_1)} - \\frac{d}{d \\phi_1} J{(\\phi_1)} = \\sin{(\\phi_1)} \\cos{(\\phi_1)} - \\frac{d}{d \\phi_1} J{(\\phi_1)}", "AG srepr_derivation": [["premise", "Equality(Function('J')(Symbol('\\\\phi_1', commutative=True)), sin(Symbol('\\\\phi_1', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\phi_1', commutative=True)"], "Equality(Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1))))"], [["times", 2, "sin(Symbol('\\\\phi_1', commutative=True))"], "Equality(Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(sin(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 3], "Equality(Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\phi_1', commutative=True)), cos(Symbol('\\\\phi_1', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(sin(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\phi_1', commutative=True)), cos(Symbol('\\\\phi_1', commutative=True))))"], [["minus", 5, "Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))"], "Equality(Add(Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(sin(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))), Mul(Integer(-1), Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1))))), Add(Mul(sin(Symbol('\\\\phi_1', commutative=True)), cos(Symbol('\\\\phi_1', commutative=True))), Mul(Integer(-1), Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1))))))"]], "SR prompt": "Given J{(\\phi_1)} = \\sin{(\\phi_1)}, then obtain J{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)} = J{(\\phi_1)} \\cos{(\\phi_1)}", "SR derivation": "J{(\\phi_1)} = \\sin{(\\phi_1)} and \\frac{d}{d \\phi_1} J{(\\phi_1)} = \\frac{d}{d \\phi_1} \\sin{(\\phi_1)} and \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)} = \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} \\sin{(\\phi_1)} and \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)} = \\sin{(\\phi_1)} \\cos{(\\phi_1)} and \\sin{(\\phi_1)} \\frac{d}{d \\phi_1} \\sin{(\\phi_1)} = \\sin{(\\phi_1)} \\cos{(\\phi_1)} and J{(\\phi_1)} \\frac{d}{d \\phi_1} J{(\\phi_1)} = J{(\\phi_1)} \\cos{(\\phi_1)}", "SR srepr_derivation": [["premise", "Equality(Function('J')(Symbol('\\\\phi_1', commutative=True)), sin(Symbol('\\\\phi_1', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\phi_1', commutative=True)"], "Equality(Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1))))"], [["times", 2, "sin(Symbol('\\\\phi_1', commutative=True))"], "Equality(Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(sin(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 3], "Equality(Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\phi_1', commutative=True)), cos(Symbol('\\\\phi_1', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Mul(sin(Symbol('\\\\phi_1', commutative=True)), Derivative(sin(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\phi_1', commutative=True)), cos(Symbol('\\\\phi_1', commutative=True))))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(Mul(Function('J')(Symbol('\\\\phi_1', commutative=True)), Derivative(Function('J')(Symbol('\\\\phi_1', commutative=True)), Tuple(Symbol('\\\\phi_1', commutative=True), Integer(1)))), Mul(Function('J')(Symbol('\\\\phi_1', commutative=True)), cos(Symbol('\\\\phi_1', commutative=True))))"]], "VR prompt": "Given \\gamma{(\\xi)} = \\sin{(\\xi)}, then derive \\sin{(\\xi)} \\frac{d}{d \\xi} \\gamma{(\\xi)} = \\sin{(\\xi)} \\cos{(\\xi)}, then obtain \\gamma{(\\xi)} \\frac{d}{d \\xi} \\gamma{(\\xi)} = \\gamma{(\\xi)} \\cos{(\\xi)}", "VR derivation": "\\gamma{(\\xi)} = \\sin{(\\xi)} and \\frac{d}{d \\xi} \\gamma{(\\xi)} = \\frac{d}{d \\xi} \\sin{(\\xi)} and \\sin{(\\xi)} \\frac{d}{d \\xi} \\gamma{(\\xi)} = \\sin{(\\xi)} \\frac{d}{d \\xi} \\sin{(\\xi)} and \\sin{(\\xi)} \\frac{d}{d \\xi} \\gamma{(\\xi)} = \\sin{(\\xi)} \\cos{(\\xi)} and \\sin{(\\xi)} \\frac{d}{d \\xi} \\sin{(\\xi)} = \\sin{(\\xi)} \\cos{(\\xi)} and \\gamma{(\\xi)} \\frac{d}{d \\xi} \\gamma{(\\xi)} = \\gamma{(\\xi)} \\cos{(\\xi)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\gamma')(Symbol('\\\\xi', commutative=True)), sin(Symbol('\\\\xi', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\xi', commutative=True)"], "Equality(Derivative(Function('\\\\gamma')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))))"], [["times", 2, "sin(Symbol('\\\\xi', commutative=True))"], "Equality(Mul(sin(Symbol('\\\\xi', commutative=True)), Derivative(Function('\\\\gamma')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\xi', commutative=True)), Derivative(sin(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 3], "Equality(Mul(sin(Symbol('\\\\xi', commutative=True)), Derivative(Function('\\\\gamma')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\xi', commutative=True)), cos(Symbol('\\\\xi', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Mul(sin(Symbol('\\\\xi', commutative=True)), Derivative(sin(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1)))), Mul(sin(Symbol('\\\\xi', commutative=True)), cos(Symbol('\\\\xi', commutative=True))))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(Mul(Function('\\\\gamma')(Symbol('\\\\xi', commutative=True)), Derivative(Function('\\\\gamma')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1)))), Mul(Function('\\\\gamma')(Symbol('\\\\xi', commutative=True)), cos(Symbol('\\\\xi', commutative=True))))"]], "static_flan-t5-large": "{ ( \\ phi_1) } = \\ sin { ( \\ phi_1) } and \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) } = \\ frac { d } { d \\ phi_1 } \\ sin { ( \\ phi_1) } and \\ sin { ( \\ phi_1) } \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) } = \\ sin { ( \\ phi_1) } \\ frac { d } { d \\ phi_1 } \\ sin { ( \\ phi_1) } and \\ sin { ( \\ phi_1) } \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) } = \\ sin { ( \\ phi_1) } \\ cos { ( \\ phi_1) } and J { ( \\ phi_1) } \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) } = J { ( \\ phi_1) } \\ cos { ( \\ phi_1) }", "VR_flan-t5-large": "gamma { ( \\ xi) } = \\ sin { ( \\ xi) } and \\ frac { d } { d \\ xi } \\ gamma { ( \\ xi) } = \\ frac { d } { d \\ xi } \\ sin { ( \\ xi) } and \\ sin { ( \\ xi) } \\ frac { d } { d \\ xi } \\ gamma { ( \\ xi) } = \\ sin { ( \\ xi) } \\ frac { d } { d \\ xi } \\ sin { ( \\ xi) } and \\ sin { ( \\ xi) } \\ frac { d } { d \\ xi } \\ gamma { ( \\ xi) } = \\ sin { ( \\ xi) } \\ cos { ( \\ xi) } and \\ gamma { ( \\ xi) } \\ frac { d } { d \\ xi } \\ gamma { ( \\ xi) } = \\ gamma { ( \\ xi) } \\ cos { ( \\ xi) }", "EE_flan-t5-large": "sin { ( \\ phi_1) } = J { ( \\ phi_1) } and \\ frac { d } { d \\ phi_1 } \\ sin { ( \\ phi_1) } = \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) } and \\ sin { ( \\ phi_1) } \\ cos { ( \\ phi_1) } = \\ sin { ( \\ phi_1) } \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) } and \\ sin { ( \\ phi_1) } \\ cos { ( \\ phi_1) } = \\ sin { ( \\ phi_1) } \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) } and J { ( \\ phi_1) } \\ cos { ( \\ phi_1) } = J { ( \\ phi_1) } \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) }", "AG_flan-t5-large": "{ ( \\ phi_1) } = \\ sin { ( \\ phi_1) } and \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) } = \\ frac { d } { d \\ phi_1 } \\ sin { ( \\ phi_1) } and \\ sin { ( \\ phi_1) } \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) } = \\ sin { ( \\ phi_1) } \\ frac { d } { d \\ phi_1 } \\ sin { ( \\ phi_1) } and \\ sin { ( \\ phi_1) } \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) } = \\ sin { ( \\ phi_1) } \\ cos { ( \\ phi_1) } and \\ sin { ( \\ phi_1) } \\ frac { d } { d \\ phi_1 } \\ sin { ( \\ phi_1) } = \\ sin { ( \\ phi_1) } \\ cos { ( \\ phi_1) } and \\ sin { ( \\ phi_1) } \\ frac { d } { d \\ phi_1 } \\ sin { ( \\ phi_1) } - \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) } = \\ sin { ( \\ phi_1) } \\ cos { ( \\ phi_1) } - \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) }", "SR_flan-t5-large": "{ ( \\ phi_1) } = \\ sin { ( \\ phi_1) } and \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) } = \\ frac { d } { d \\ phi_1 } \\ sin { ( \\ phi_1) } and J { ( \\ phi_1) } \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) } = J { ( \\ phi_1) } \\ frac { d } { d \\ phi_1 } \\ sin { ( \\ phi_1) } and J { ( \\ phi_1) } \\ frac { d } { d \\ phi_1 } J { ( \\ phi_1) } = J { ( \\ phi_1) } \\ cos { ( \\ phi_1) }", "static_rouge": 0.893854748603352, "static_bleu": 0.7897399995807042, "static_bleurt": 0.7349941730499268, "static_gleu": 0.8080279232111692, "VR_rouge": -0.006908610175273888, "EE_rouge": 0.025283320031923573, "AG_rouge": -0.10177843916957374, "SR_rouge": 0.13609077344807252, "VR_rouge_abs": -0.005301022340022693, "EE_rouge_abs": 0.06682206682206682, "AG_rouge_abs": 0.10241834473456013, "SR_rouge_abs": 0.15492957746478875, "VR_bleu": -0.005117968544785634, "EE_bleu": 0.05126454972172112, "AG_bleu": -0.20727046602734278, "SR_bleu": 0.2599569316728749, "VR_bleu_abs": 0.01038839301224731, "EE_bleu_abs": 0.06926846777736195, "AG_bleu_abs": 0.16288148907742472, "SR_bleu_abs": 0.2825711034028451, "VR_bleurt": -0.051072120666503906, "EE_bleurt": -0.030106782913208008, "AG_bleurt": 0.027234196662902832, "SR_bleurt": 0.28556376695632935, "VR_bleurt_abs": 0.044712863862514496, "EE_bleurt_abs": 0.04455530643463135, "AG_bleurt_abs": 0.023352503776550293, "SR_bleurt_abs": 0.08825647830963135, "VR_gleu": -0.004080636287786876, "EE_gleu": 0.041884816753926635, "AG_gleu": -0.18897357603920562, "SR_gleu": 0.20244328097731235, "VR_gleu_abs": 0.009815340427216102, "EE_gleu_abs": 0.0681985231757376, "AG_gleu_abs": 0.16286593545332595, "SR_gleu_abs": 0.25485961123110146, "ratio_VR_rouge": 1.0251798561151078, "ratio_VR_bleu": 0.9796046858670702, "ratio_VR_bleurt": 0.6859920511959989, "ratio_VR_gleu": 0.9815297534817904, "ratio_EE_rouge": 0.9324960753532182, "ratio_EE_bleu": 0.9303653482126579, "ratio_EE_bleurt": 0.9410804949114207, "ratio_EE_gleu": 0.9314425372286006, "ratio_AG_rouge": 0.8870230630247635, "ratio_AG_bleu": 0.8077008827340543, "ratio_AG_bleurt": 0.9732060558868372, "ratio_AG_gleu": 0.807731718677224, "ratio_SR_rouge": 0.8450704225352113, "ratio_SR_bleu": 0.7174288965971549, "ratio_SR_bleurt": 0.8995366071403128, "ratio_SR_gleu": 0.7451403887688985}, {"prompt": "Given M{(\\mathbf{A},\\varepsilon_0)} = \\mathbf{A} + \\varepsilon_0, then derive (\\int M{(\\mathbf{A},\\varepsilon_0)} d\\mathbf{A})^{\\varepsilon_0} = (\\frac{\\mathbf{A}^{2}}{2} + \\mathbf{A} \\varepsilon_0 + x)^{\\varepsilon_0}, then obtain (\\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A})^{\\varepsilon_0} = (\\frac{\\mathbf{A}^{2}}{2} + \\mathbf{A} \\varepsilon_0 + x)^{\\varepsilon_0}", "derivation": "M{(\\mathbf{A},\\varepsilon_0)} = \\mathbf{A} + \\varepsilon_0 and \\int M{(\\mathbf{A},\\varepsilon_0)} d\\mathbf{A} = \\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A} and (\\int M{(\\mathbf{A},\\varepsilon_0)} d\\mathbf{A})^{\\varepsilon_0} = (\\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A})^{\\varepsilon_0} and (\\int M{(\\mathbf{A},\\varepsilon_0)} d\\mathbf{A})^{\\varepsilon_0} = (\\frac{\\mathbf{A}^{2}}{2} + \\mathbf{A} \\varepsilon_0 + x)^{\\varepsilon_0} and (\\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A})^{\\varepsilon_0} = (\\frac{\\mathbf{A}^{2}}{2} + \\mathbf{A} \\varepsilon_0 + x)^{\\varepsilon_0}", "srepr_derivation": [["premise", "Equality(Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)))"], [["integrate", 1, "Symbol('\\\\mathbf{A}', commutative=True)"], "Equality(Integral(Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Integral(Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))))"], [["power", 2, "Symbol('\\\\varepsilon_0', commutative=True)"], "Equality(Pow(Integral(Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)), Pow(Integral(Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)))"], [["evaluate_integrals", 3], "Equality(Pow(Integral(Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)), Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{A}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Symbol('x', commutative=True)), Symbol('\\\\varepsilon_0', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Pow(Integral(Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)), Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{A}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Symbol('x', commutative=True)), Symbol('\\\\varepsilon_0', commutative=True)))"]], "EE prompt": "Given \\mathbf{A} + \\varepsilon_0 = M{(\\mathbf{A},\\varepsilon_0)}, then derive (\\frac{\\mathbf{A}^{2}}{2} + \\mathbf{A} \\varepsilon_0 + x)^{\\varepsilon_0} = (\\int M{(\\mathbf{A},\\varepsilon_0)} d\\mathbf{A})^{\\varepsilon_0}, then obtain (\\frac{\\mathbf{A}^{2}}{2} + \\mathbf{A} \\varepsilon_0 + x)^{\\varepsilon_0} = (\\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A})^{\\varepsilon_0}", "EE derivation": "\\mathbf{A} + \\varepsilon_0 = M{(\\mathbf{A},\\varepsilon_0)} and \\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A} = \\int M{(\\mathbf{A},\\varepsilon_0)} d\\mathbf{A} and (\\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A})^{\\varepsilon_0} = (\\int M{(\\mathbf{A},\\varepsilon_0)} d\\mathbf{A})^{\\varepsilon_0} and (\\frac{\\mathbf{A}^{2}}{2} + \\mathbf{A} \\varepsilon_0 + x)^{\\varepsilon_0} = (\\int M{(\\mathbf{A},\\varepsilon_0)} d\\mathbf{A})^{\\varepsilon_0} and (\\frac{\\mathbf{A}^{2}}{2} + \\mathbf{A} \\varepsilon_0 + x)^{\\varepsilon_0} = (\\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A})^{\\varepsilon_0}", "EE srepr_derivation": [["premise", "Equality(Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)))"], [["integrate", 1, "Symbol('\\\\mathbf{A}', commutative=True)"], "Equality(Integral(Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Integral(Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))))"], [["power", 2, "Symbol('\\\\varepsilon_0', commutative=True)"], "Equality(Pow(Integral(Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)), Pow(Integral(Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)))"], [["evaluate_integrals", 3], "Equality(Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{A}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Symbol('x', commutative=True)), Symbol('\\\\varepsilon_0', commutative=True)), Pow(Integral(Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{A}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Symbol('x', commutative=True)), Symbol('\\\\varepsilon_0', commutative=True)), Pow(Integral(Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)))"]], "AG prompt": "Given M{(\\mathbf{A},\\varepsilon_0)} = \\mathbf{A} + \\varepsilon_0, then derive (\\int M{(\\mathbf{A},\\varepsilon_0)} d\\mathbf{A})^{\\varepsilon_0} = (\\frac{\\mathbf{A}^{2}}{2} + \\mathbf{A} \\varepsilon_0 + x)^{\\varepsilon_0}, then obtain (\\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A})^{\\varepsilon_0} = (\\frac{\\mathbf{A}^{2}}{2} + \\mathbf{A} \\varepsilon_0 + x)^{\\varepsilon_0}", "AG derivation": "M{(\\mathbf{A},\\varepsilon_0)} = \\mathbf{A} + \\varepsilon_0 and \\int M{(\\mathbf{A},\\varepsilon_0)} d\\mathbf{A} = \\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A} and (\\int M{(\\mathbf{A},\\varepsilon_0)} d\\mathbf{A})^{\\varepsilon_0} = (\\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A})^{\\varepsilon_0} and (\\int M{(\\mathbf{A},\\varepsilon_0)} d\\mathbf{A})^{\\varepsilon_0} = (\\frac{\\mathbf{A}^{2}}{2} + \\mathbf{A} \\varepsilon_0 + x)^{\\varepsilon_0} and (\\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A})^{\\varepsilon_0} = (\\frac{\\mathbf{A}^{2}}{2} + \\mathbf{A} \\varepsilon_0 + x)^{\\varepsilon_0}", "AG srepr_derivation": [["premise", "Equality(Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)))"], [["integrate", 1, "Symbol('\\\\mathbf{A}', commutative=True)"], "Equality(Integral(Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Integral(Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))))"], [["power", 2, "Symbol('\\\\varepsilon_0', commutative=True)"], "Equality(Pow(Integral(Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)), Pow(Integral(Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)))"], [["evaluate_integrals", 3], "Equality(Pow(Integral(Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)), Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{A}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Symbol('x', commutative=True)), Symbol('\\\\varepsilon_0', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Pow(Integral(Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)), Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{A}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Symbol('x', commutative=True)), Symbol('\\\\varepsilon_0', commutative=True)))"]], "SR prompt": "Given M{(\\mathbf{A},\\varepsilon_0)} = \\mathbf{A} + \\varepsilon_0, then obtain (\\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A})^{\\varepsilon_0} = (\\frac{\\mathbf{A}^{2}}{2} + \\mathbf{A} \\varepsilon_0 + x)^{\\varepsilon_0}", "SR derivation": "M{(\\mathbf{A},\\varepsilon_0)} = \\mathbf{A} + \\varepsilon_0 and \\int M{(\\mathbf{A},\\varepsilon_0)} d\\mathbf{A} = \\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A} and (\\int M{(\\mathbf{A},\\varepsilon_0)} d\\mathbf{A})^{\\varepsilon_0} = (\\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A})^{\\varepsilon_0} and (\\int M{(\\mathbf{A},\\varepsilon_0)} d\\mathbf{A})^{\\varepsilon_0} = (\\frac{\\mathbf{A}^{2}}{2} + \\mathbf{A} \\varepsilon_0 + x)^{\\varepsilon_0} and (\\int (\\mathbf{A} + \\varepsilon_0) d\\mathbf{A})^{\\varepsilon_0} = (\\frac{\\mathbf{A}^{2}}{2} + \\mathbf{A} \\varepsilon_0 + x)^{\\varepsilon_0}", "SR srepr_derivation": [["premise", "Equality(Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)))"], [["integrate", 1, "Symbol('\\\\mathbf{A}', commutative=True)"], "Equality(Integral(Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Integral(Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))))"], [["power", 2, "Symbol('\\\\varepsilon_0', commutative=True)"], "Equality(Pow(Integral(Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)), Pow(Integral(Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)))"], [["evaluate_integrals", 3], "Equality(Pow(Integral(Function('M')(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)), Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{A}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Symbol('x', commutative=True)), Symbol('\\\\varepsilon_0', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Pow(Integral(Add(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\mathbf{A}', commutative=True))), Symbol('\\\\varepsilon_0', commutative=True)), Pow(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\mathbf{A}', commutative=True), Integer(2))), Mul(Symbol('\\\\mathbf{A}', commutative=True), Symbol('\\\\varepsilon_0', commutative=True)), Symbol('x', commutative=True)), Symbol('\\\\varepsilon_0', commutative=True)))"]], "VR prompt": "Given \\gamma{(\\beta,\\nu)} = \\beta + \\nu, then derive (\\int \\gamma{(\\beta,\\nu)} d\\nu)^{\\beta} = (\\beta \\nu + \\frac{\\nu^{2}}{2} + \\tau)^{\\beta}, then obtain (\\int (\\beta + \\nu) d\\nu)^{\\beta} = (\\beta \\nu + \\frac{\\nu^{2}}{2} + \\tau)^{\\beta}", "VR derivation": "\\gamma{(\\beta,\\nu)} = \\beta + \\nu and \\int \\gamma{(\\beta,\\nu)} d\\nu = \\int (\\beta + \\nu) d\\nu and (\\int \\gamma{(\\beta,\\nu)} d\\nu)^{\\beta} = (\\int (\\beta + \\nu) d\\nu)^{\\beta} and (\\int \\gamma{(\\beta,\\nu)} d\\nu)^{\\beta} = (\\beta \\nu + \\frac{\\nu^{2}}{2} + \\tau)^{\\beta} and (\\int (\\beta + \\nu) d\\nu)^{\\beta} = (\\beta \\nu + \\frac{\\nu^{2}}{2} + \\tau)^{\\beta}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\gamma')(Symbol('\\\\beta', commutative=True), Symbol('\\\\nu', commutative=True)), Add(Symbol('\\\\beta', commutative=True), Symbol('\\\\nu', commutative=True)))"], [["integrate", 1, "Symbol('\\\\nu', commutative=True)"], "Equality(Integral(Function('\\\\gamma')(Symbol('\\\\beta', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True))), Integral(Add(Symbol('\\\\beta', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True))))"], [["power", 2, "Symbol('\\\\beta', commutative=True)"], "Equality(Pow(Integral(Function('\\\\gamma')(Symbol('\\\\beta', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True))), Symbol('\\\\beta', commutative=True)), Pow(Integral(Add(Symbol('\\\\beta', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True))), Symbol('\\\\beta', commutative=True)))"], [["evaluate_integrals", 3], "Equality(Pow(Integral(Function('\\\\gamma')(Symbol('\\\\beta', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True))), Symbol('\\\\beta', commutative=True)), Pow(Add(Mul(Symbol('\\\\beta', commutative=True), Symbol('\\\\nu', commutative=True)), Mul(Rational(1, 2), Pow(Symbol('\\\\nu', commutative=True), Integer(2))), Symbol('\\\\tau', commutative=True)), Symbol('\\\\beta', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Pow(Integral(Add(Symbol('\\\\beta', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True))), Symbol('\\\\beta', commutative=True)), Pow(Add(Mul(Symbol('\\\\beta', commutative=True), Symbol('\\\\nu', commutative=True)), Mul(Rational(1, 2), Pow(Symbol('\\\\nu', commutative=True), Integer(2))), Symbol('\\\\tau', commutative=True)), Symbol('\\\\beta', commutative=True)))"]], "static_flan-t5-large": "{ ( \\ mathbf { A }, \\ varepsilon_0) } = \\ mathbf { A } + \\ varepsilon_0 and \\ int M { ( \\ mathbf { A }, \\ varepsilon_0) } d \\ mathbf { A } = \\ int ( \\ mathbf { A } + \\ varepsilon_0) d \\ mathbf { A } and ( \\ int M { ( \\ mathbf { A }, \\ varepsilon_0) } d \\ mathbf { A } ) ^ { \\ varepsilon_0 } = ( \\ int ( \\ mathbf { A } + \\ varepsilon_0) d \\ mathbf { A } ) ^ { \\ varepsilon_0 } and ( \\ int M { ( \\ mathbf { A }, \\ varepsilon_0) } d \\ mathbf { A } ) ^ { \\ varepsilon_0 } = ( \\ frac { \\ mathbf { A } ^ { 2 } } { 2 } + \\ mathbf { A } \\ varepsilon_0 + x) ^ { \\ varepsilon_0 } and ( \\ int ( \\ mathbf { A } + \\ varepsilon_0) d \\ mathbf { A } ) ^ { \\ varepsilon_0 } = ( \\ frac { \\ mathbf { A } ^ { 2 } } { 2 } + \\ mathbf { A } \\ varepsilon_0 + x) ^ { \\ varepsilon_0 }", "VR_flan-t5-large": "gamma { ( \\ beta, \\ nu) } = \\ beta + \\ nu and \\ int \\ gamma { ( \\ beta, \\ nu) } d \\ nu = \\ int ( \\ beta + \\ nu) d \\ nu and ( \\ int \\ gamma { ( \\ beta, \\ nu) } d \\ nu) ^ { \\ beta } = ( \\ int ( \\ beta + \\ nu) d \\ nu) ^ { \\ beta } and ( \\ int \\ gamma { ( \\ beta, \\ nu) } d \\ nu) ^ { \\ beta } = ( \\ beta \\ nu + \\ frac { \\ nu ^ { 2 } } { 2 } + \\ tau) ^ { \\ beta } and ( \\ int ( \\ beta + \\ nu) d \\ nu) ^ { \\ beta } = ( \\ beta \\ nu + \\ frac { \\ nu ^ { 2 } } { 2 } + \\ tau) ^ { \\ beta }", "EE_flan-t5-large": "mathbf { A } + \\ varepsilon_0 = M { ( \\ mathbf { A }, \\ varepsilon_0) } and \\ int M { ( \\ mathbf { A }, \\ varepsilon_0) } d \\ mathbf { A } = \\ int ( \\ mathbf { A } + \\ varepsilon_0) d \\ mathbf { A } and ( \\ int M { ( \\ mathbf { A }, \\ varepsilon_0) } d \\ mathbf { A } ) ^ { \\ varepsilon_0 } = ( \\ int ( \\ mathbf { A } + \\ varepsilon_0) d \\ mathbf { A } ) ^ { \\ varepsilon_0 } and ( \\ frac { \\ mathbf { A } ^ { 2 } } { 2 } + \\ mathbf { A } \\ varepsilon_0 + x) ^ { \\ varepsilon_0 } = ( \\ int M { ( \\ mathbf { A }, \\ varepsilon_0) } d \\ mathbf { A } ) ^ { \\ varepsilon_0 } and ( \\ frac { \\ mathbf { A } ^ { 2 } } { 2 } + \\ mathbf { A } \\ varepsilon_0 + x) ^ { \\ varepsilon_0 } = ( \\ int ( \\ mathbf { A } + \\ varepsilon_0) d \\ mathbf { A } ) ^ { \\ varepsilon_0 }", "AG_flan-t5-large": "{ ( \\ mathbf { A }, \\ varepsilon_0) } = \\ mathbf { A } + \\ varepsilon_0 and \\ int M { ( \\ mathbf { A }, \\ varepsilon_0) } d \\ mathbf { A } = \\ int ( \\ mathbf { A } + \\ varepsilon_0) d \\ mathbf { A } and ( \\ int M { ( \\ mathbf { A }, \\ varepsilon_0) } d \\ mathbf { A } ) ^ { \\ varepsilon_0 } = ( \\ int ( \\ mathbf { A } + \\ varepsilon_0) d \\ mathbf { A } ) ^ { \\ varepsilon_0 } and ( \\ int M { ( \\ mathbf { A }, \\ varepsilon_0) } d \\ mathbf { A } ) ^ { \\ varepsilon_0 } = ( \\ frac { \\ mathbf { A } ^ { 2 } } { 2 } + \\ mathbf { A } \\ varepsilon_0 + x) ^ { \\ varepsilon_0 } and ( \\ int ( \\ mathbf { A } + \\ varepsilon_0) d \\ mathbf { A } ) ^ { \\ varepsilon_0 } = ( \\ frac { \\ mathbf { A } ^ { 2 } } { 2 } + \\ mathbf { A } \\ varepsilon_0 + x) ^ { \\ varepsilon_0 }", "SR_flan-t5-large": "{ ( \\ mathbf { A }, \\ varepsilon_0) } = \\ mathbf { A } + \\ varepsilon_0 and \\ int M { ( \\ mathbf { A }, \\ varepsilon_0) } d \\ mathbf { A } = \\ int ( \\ mathbf { A } + \\ varepsilon_0) d \\ mathbf { A } and ( \\ int M { ( \\ mathbf { A }, \\ varepsilon_0) } d \\ mathbf { A } ) ^ { \\ varepsilon_0 } = ( \\ int ( \\ mathbf { A } + \\ varepsilon_0) d \\ mathbf { A } ) ^ { \\ varepsilon_0 } and ( \\ int ( \\ mathbf { A } + \\ varepsilon_0) d \\ mathbf { A } ) ^ { \\ varepsilon_0 } = ( \\ frac { \\ mathbf { A } ^ { 2 } } { 2 } + \\ mathbf { A } \\ varepsilon_0 + x) ^ { \\ varepsilon_0 }", "static_rouge": 0.9947089947089947, "static_bleu": 0.9963302793552345, "static_bleurt": 0.8627607226371765, "static_gleu": 0.996316758747698, "VR_rouge": -0.005291005291005346, "EE_rouge": -0.005291005291005346, "AG_rouge": 0.0, "SR_rouge": 0.14622414622414626, "VR_rouge_abs": -0.0004962779156327674, "EE_rouge_abs": 0.00556947925368978, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.14634146341463428, "VR_bleu": 0.0015250728373973343, "EE_bleu": 0.0018571008579619797, "AG_bleu": 0.0, "SR_bleu": 0.29740326405910456, "VR_bleu_abs": -0.0008714600118873705, "EE_bleu_abs": 0.0018616551387016234, "AG_bleu_abs": 0.0, "SR_bleu_abs": 0.2975870716362433, "VR_bleurt": 0.10792142152786255, "EE_bleurt": 0.041964709758758545, "AG_bleurt": 0.0, "SR_bleurt": 0.10862892866134644, "VR_bleurt_abs": 0.030536383390426636, "EE_bleurt_abs": -0.003995776176452637, "AG_bleurt_abs": -0.01745164394378662, "SR_bleurt_abs": 0.04706776142120361, "VR_gleu": 0.0015386908625805162, "EE_gleu": 0.0018416206261510082, "AG_gleu": 0.0, "SR_gleu": 0.26151012891344383, "VR_gleu_abs": -0.0012424982043348076, "EE_gleu_abs": 0.0019199150335474924, "AG_gleu_abs": 0.0, "SR_gleu_abs": 0.26247689463955637, "ratio_VR_rouge": 1.006451612903226, "ratio_VR_bleu": 1.0030816373272573, "ratio_VR_bleurt": 1.0821760845635782, "ratio_VR_gleu": 1.0036968576709797, "ratio_EE_rouge": 0.9941211052322163, "ratio_EE_bleu": 0.9981011836473108, "ratio_EE_bleurt": 1.0053974246173705, "ratio_EE_gleu": 0.9980422274869177, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 1.0, "ratio_AG_bleurt": 1.019857077061858, "ratio_AG_gleu": 1.0, "ratio_SR_rouge": 0.8536585365853657, "ratio_SR_bleu": 0.7024129283637567, "ratio_SR_bleurt": 0.9464446920484678, "ratio_SR_gleu": 0.7375231053604436}, {"prompt": "Given \\hat{p}{(k,\\hat{H}_{\\lambda})} = \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k}, then derive \\hat{p}{(k,\\hat{H}_{\\lambda})} = \\frac{1}{k}, then obtain - \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} + \\frac{1}{k} = 0", "derivation": "\\hat{p}{(k,\\hat{H}_{\\lambda})} = \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} and \\hat{p}{(k,\\hat{H}_{\\lambda})} - \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} = 0 and \\hat{p}{(k,\\hat{H}_{\\lambda})} = \\frac{1}{k} and - \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} + \\frac{1}{k} = 0", "srepr_derivation": [["premise", "Equality(Function('\\\\hat{p}')(Symbol('k', commutative=True), Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True)), Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1))))"], [["minus", 1, "Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1)))"], "Equality(Add(Function('\\\\hat{p}')(Symbol('k', commutative=True), Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True)), Mul(Integer(-1), Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 1], "Equality(Function('\\\\hat{p}')(Symbol('k', commutative=True), Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True)), Pow(Symbol('k', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Add(Mul(Integer(-1), Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1)))), Pow(Symbol('k', commutative=True), Integer(-1))), Integer(0))"]], "EE prompt": "Given \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} = \\hat{p}{(k,\\hat{H}_{\\lambda})}, then derive \\frac{1}{k} = \\hat{p}{(k,\\hat{H}_{\\lambda})}, then obtain 0 = - \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} + \\frac{1}{k}", "EE derivation": "\\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} = \\hat{p}{(k,\\hat{H}_{\\lambda})} and 0 = \\hat{p}{(k,\\hat{H}_{\\lambda})} - \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} and \\frac{1}{k} = \\hat{p}{(k,\\hat{H}_{\\lambda})} and 0 = - \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} + \\frac{1}{k}", "EE srepr_derivation": [["premise", "Equality(Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1))), Function('\\\\hat{p}')(Symbol('k', commutative=True), Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True)))"], [["minus", 1, "Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1)))"], "Equality(Integer(0), Add(Function('\\\\hat{p}')(Symbol('k', commutative=True), Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True)), Mul(Integer(-1), Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1))))))"], [["evaluate_derivatives", 1], "Equality(Pow(Symbol('k', commutative=True), Integer(-1)), Function('\\\\hat{p}')(Symbol('k', commutative=True), Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True)))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Integer(0), Add(Mul(Integer(-1), Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1)))), Pow(Symbol('k', commutative=True), Integer(-1))))"]], "AG prompt": "Given \\hat{p}{(k,\\hat{H}_{\\lambda})} = \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k}, then derive \\hat{p}{(k,\\hat{H}_{\\lambda})} = \\frac{1}{k}, then obtain \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} = \\frac{1}{k}", "AG derivation": "\\hat{p}{(k,\\hat{H}_{\\lambda})} = \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} and \\hat{p}{(k,\\hat{H}_{\\lambda})} - \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} = 0 and \\hat{p}{(k,\\hat{H}_{\\lambda})} = \\frac{1}{k} and \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} = \\frac{1}{k}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\hat{p}')(Symbol('k', commutative=True), Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True)), Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1))))"], [["minus", 1, "Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1)))"], "Equality(Add(Function('\\\\hat{p}')(Symbol('k', commutative=True), Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True)), Mul(Integer(-1), Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 1], "Equality(Function('\\\\hat{p}')(Symbol('k', commutative=True), Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True)), Pow(Symbol('k', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1))), Pow(Symbol('k', commutative=True), Integer(-1)))"]], "SR prompt": "Given \\hat{p}{(k,\\hat{H}_{\\lambda})} = \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k}, then obtain - \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} + \\frac{1}{k} = 0", "SR derivation": "\\hat{p}{(k,\\hat{H}_{\\lambda})} = \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} and \\hat{p}{(k,\\hat{H}_{\\lambda})} - \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} = 0 and \\hat{p}{(k,\\hat{H}_{\\lambda})} = \\frac{1}{k} and - \\frac{\\partial}{\\partial \\hat{H}_{\\lambda}} \\frac{\\hat{H}_{\\lambda}}{k} + \\frac{1}{k} = 0", "SR srepr_derivation": [["premise", "Equality(Function('\\\\hat{p}')(Symbol('k', commutative=True), Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True)), Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1))))"], [["minus", 1, "Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1)))"], "Equality(Add(Function('\\\\hat{p}')(Symbol('k', commutative=True), Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True)), Mul(Integer(-1), Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 1], "Equality(Function('\\\\hat{p}')(Symbol('k', commutative=True), Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True)), Pow(Symbol('k', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Add(Mul(Integer(-1), Derivative(Mul(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Pow(Symbol('k', commutative=True), Integer(-1))), Tuple(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), Integer(1)))), Pow(Symbol('k', commutative=True), Integer(-1))), Integer(0))"]], "VR prompt": "Given \\upsilon{(\\zeta,\\tau)} = \\frac{\\partial}{\\partial \\tau} \\frac{\\tau}{\\zeta}, then derive \\upsilon{(\\zeta,\\tau)} = \\frac{1}{\\zeta}, then obtain - \\frac{\\partial}{\\partial \\tau} \\frac{\\tau}{\\zeta} + \\frac{1}{\\zeta} = 0", "VR derivation": "\\upsilon{(\\zeta,\\tau)} = \\frac{\\partial}{\\partial \\tau} \\frac{\\tau}{\\zeta} and \\upsilon{(\\zeta,\\tau)} - \\frac{\\partial}{\\partial \\tau} \\frac{\\tau}{\\zeta} = 0 and \\upsilon{(\\zeta,\\tau)} = \\frac{1}{\\zeta} and - \\frac{\\partial}{\\partial \\tau} \\frac{\\tau}{\\zeta} + \\frac{1}{\\zeta} = 0", "VR srepr_derivation": [["premise", "Equality(Function('\\\\upsilon')(Symbol('\\\\zeta', commutative=True), Symbol('\\\\tau', commutative=True)), Derivative(Mul(Symbol('\\\\tau', commutative=True), Pow(Symbol('\\\\zeta', commutative=True), Integer(-1))), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))))"], [["minus", 1, "Derivative(Mul(Symbol('\\\\tau', commutative=True), Pow(Symbol('\\\\zeta', commutative=True), Integer(-1))), Tuple(Symbol('\\\\tau', commutative=True), Integer(1)))"], "Equality(Add(Function('\\\\upsilon')(Symbol('\\\\zeta', commutative=True), Symbol('\\\\tau', commutative=True)), Mul(Integer(-1), Derivative(Mul(Symbol('\\\\tau', commutative=True), Pow(Symbol('\\\\zeta', commutative=True), Integer(-1))), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 1], "Equality(Function('\\\\upsilon')(Symbol('\\\\zeta', commutative=True), Symbol('\\\\tau', commutative=True)), Pow(Symbol('\\\\zeta', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Add(Mul(Integer(-1), Derivative(Mul(Symbol('\\\\tau', commutative=True), Pow(Symbol('\\\\zeta', commutative=True), Integer(-1))), Tuple(Symbol('\\\\tau', commutative=True), Integer(1)))), Pow(Symbol('\\\\zeta', commutative=True), Integer(-1))), Integer(0))"]], "static_flan-t5-large": "hat { p } { (k, \\ hat { H } _ { \\ lambda } ) } = \\ frac { \\ partial } { \\ partial \\ hat { H } _ { \\ lambda } } \\ frac { \\ hat { H } _ { \\ lambda } } { k } and \\ hat { p } { (k, \\ hat { H } _ { \\ lambda } ) } = \\ frac { 1 } { k } and \\ frac { \\ partial } { \\ partial \\ hat { H } _ { \\ lambda } } \\ frac { \\ hat { H } _ { \\ lambda } } { k } = \\ frac { 1 } { k } and - \\ frac { \\ partial } { \\ partial \\ hat { H } _ { \\ lambda } } \\ frac { \\ hat { H } _ { \\ lambda } } { k } + \\ frac { 1 } { k } = 0", "VR_flan-t5-large": "- \\ frac { \\ partial } { \\ partial \\ tau } \\ frac { \\ tau } { \\ zeta } and \\ frac { \\ partial } { \\ partial \\ tau } \\ frac { \\ tau } { \\ zeta } + \\ frac { 1 } { \\ zeta } = \\ frac { d } { d \\ tau } \\ frac { \\ tau } { \\ zeta } - \\ frac { 1 } { \\ zeta } and \\ frac { \\ partial } { \\ partial \\ tau } \\ frac { \\ tau } { \\ zeta } = \\ frac { 1 } { \\ zeta } and \\ frac { \\ partial } { \\ partial \\ tau } \\ frac { \\ tau } { \\ zeta } - \\ frac { \\ partial } { \\ partial \\ tau } \\ frac { \\ tau } { \\ zeta } = 0 and \\ frac { \\ partial } { \\ partial \\ tau } \\ frac { \\ tau } { \\ zeta } - \\ frac { \\ partial } { \\ partial \\ tau } \\ frac { \\ tau } { \\ zeta } = 0 and - \\ frac { \\ partial } { \\ partial \\ tau } \\ frac { \\ tau } { \\ zeta } + \\ frac { 1 } { \\ zeta } = 0", "EE_flan-t5-large": "frac { \\ partial } { \\ partial \\ hat { H } _ { \\ lambda } } \\ frac { \\ hat { H } _ { \\ lambda } } { k } = \\ hat { p } { (k, \\ hat { H } _ { \\ lambda } ) } and \\ frac { \\ partial } { \\ partial \\ hat { H } _ { \\ lambda } } \\ frac { \\ hat { H } _ { \\ lambda } } \\ frac { \\ hat { H } _ { \\ lambda } } { k } = \\ hat { p } { (k, \\ hat { H } _ { \\ lambda } ) } and \\ frac { \\ partial } { \\ partial \\ hat { H } _ { \\ lambda } } \\ frac { \\ hat { H } _ { \\ lambda } } { k } = \\ hat { p } { (k, \\ hat { H } _ { \\ lambda } ) } and \\ frac { \\ partial } { \\ partial \\ hat { H } _ { \\ lambda } } \\ frac { \\ hat { H } _ { \\ lambda } } { k } = \\ frac { 1 } { k } and 0 = - \\ frac { \\ partial } { \\ partial \\ hat { H } _ { \\ lambda } } \\ frac { \\ hat { H } _ { \\ lambda } } { k } + \\ frac { 1 } { k }", "AG_flan-t5-large": "hat { p } { (k, \\ hat { H } _ { \\ lambda } ) } = \\ frac { \\ partial } { \\ partial \\ hat { H } _ { \\ lambda } } \\ frac { \\ hat { H } _ { \\ lambda } } { k } and \\ hat { p } { (k, \\ hat { H } _ { \\ lambda } ) } = \\ frac { 1 } { k } and \\ frac { \\ partial } { \\ partial \\ hat { H } _ { \\ lambda } } \\ frac { \\ hat { H } _ { \\ lambda } } { k } = \\ frac { 1 } { k }", "SR_flan-t5-large": "hat { p } { (k, \\ hat { H } _ { \\ lambda } ) } = \\ frac { \\ partial } { \\ partial \\ hat { H } _ { \\ lambda } } \\ frac { \\ hat { H } _ { \\ lambda } } { k } and \\ hat { p } { (k, \\ hat { H } _ { \\ lambda } ) } - \\ frac { 1 } { k } = \\ frac { \\ partial } { \\ partial \\ hat { H } _ { \\ lambda } } \\ frac { \\ hat { H } _ { \\ lambda } } { k } - \\ frac { 1 } { k } and \\ hat { p } { (k, \\ hat { H } _ { \\ lambda } ) } - \\ frac { \\ partial } { \\ partial \\ hat { H } _ { \\ lambda } } \\ frac { \\ hat { H } _ { \\ lambda } } { k } = 0 and - \\ frac { \\ partial } { \\ partial \\ hat { H } _ { \\ lambda } } \\ frac { \\ hat { H } _ { \\ lambda } } { k } + \\ frac { 1 } { k } = 0", "static_rouge": 0.8813559322033898, "static_bleu": 0.8762161714815948, "static_bleurt": 0.7235064506530762, "static_gleu": 0.8790523690773068, "VR_rouge": 0.35676576826896356, "EE_rouge": 0.08405863490609256, "AG_rouge": 0.06947474408457788, "SR_rouge": -0.015702891326021873, "VR_rouge_abs": 0.039746420685233985, "EE_rouge_abs": 0.16051912568306015, "AG_rouge_abs": 0.1550008433125316, "SR_rouge_abs": 0.16666666666666674, "VR_bleu": 0.47410699285276064, "EE_bleu": 0.19809801311896957, "AG_bleu": 0.24697161393628453, "SR_bleu": 0.07312238823317341, "VR_bleu_abs": 0.027318468462581236, "EE_bleu_abs": 0.34310756482005644, "AG_bleu_abs": 0.27758486485725997, "SR_bleu_abs": 0.26899412936648315, "VR_bleurt": 0.20839351415634155, "EE_bleurt": -0.11395514011383057, "AG_bleurt": 0.2948559522628784, "SR_bleurt": 0.0032753944396972656, "VR_bleurt_abs": -0.29584966599941254, "EE_bleurt_abs": -0.03107088804244995, "AG_bleurt_abs": 0.19645196199417114, "SR_bleurt_abs": 0.00026094913482666016, "VR_gleu": 0.4748607523108397, "EE_gleu": 0.2007914995120894, "AG_gleu": 0.1980397108494587, "SR_gleu": 0.07580693297183005, "VR_gleu_abs": 0.05644820085514757, "EE_gleu_abs": 0.34316816654017135, "AG_gleu_abs": 0.24107752299468133, "SR_gleu_abs": 0.268762677484787, "ratio_VR_rouge": 0.7992805755395684, "ratio_VR_bleu": 0.9150985338374236, "ratio_VR_bleurt": -0.5577988155819309, "ratio_VR_gleu": 0.8505892505418207, "ratio_EE_rouge": 0.8152515723270439, "ratio_EE_bleu": 0.6385268997119645, "ratio_EE_bleurt": 1.0494624753735164, "ratio_EE_gleu": 0.6388177564760926, "ratio_AG_rouge": 0.8437074829931973, "ratio_AG_bleu": 0.7138142123126044, "ratio_AG_bleurt": 0.7474397941766395, "ratio_AG_gleu": 0.7514856382496987, "ratio_SR_rouge": 0.8333333333333333, "ratio_SR_bleu": 0.7310058706335169, "ratio_SR_bleurt": 0.9996831317526302, "ratio_SR_gleu": 0.731237322515213}, {"prompt": "Given \\operatorname{F_{x}}{(\\pi)} = e^{e^{\\pi}}, then derive \\int \\operatorname{F_{x}}{(\\pi)} d\\pi = P_{g} + \\operatorname{Ei}{(e^{\\pi})}, then derive 0 = F_{g} + \\operatorname{Ei}{(e^{\\pi})} - \\int \\operatorname{F_{x}}{(\\pi)} d\\pi, then obtain 0 = F_{g} - P_{g}", "derivation": "\\operatorname{F_{x}}{(\\pi)} = e^{e^{\\pi}} and \\int \\operatorname{F_{x}}{(\\pi)} d\\pi = \\int e^{e^{\\pi}} d\\pi and \\int \\operatorname{F_{x}}{(\\pi)} d\\pi = P_{g} + \\operatorname{Ei}{(e^{\\pi})} and 0 = - \\int \\operatorname{F_{x}}{(\\pi)} d\\pi + \\int e^{e^{\\pi}} d\\pi and 0 = F_{g} + \\operatorname{Ei}{(e^{\\pi})} - \\int \\operatorname{F_{x}}{(\\pi)} d\\pi and 0 = F_{g} - P_{g}", "srepr_derivation": [["premise", "Equality(Function('F_x')(Symbol('\\\\pi', commutative=True)), exp(exp(Symbol('\\\\pi', commutative=True))))"], [["integrate", 1, "Symbol('\\\\pi', commutative=True)"], "Equality(Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True))), Integral(exp(exp(Symbol('\\\\pi', commutative=True))), Tuple(Symbol('\\\\pi', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True))), Add(Symbol('P_g', commutative=True), Ei(exp(Symbol('\\\\pi', commutative=True)))))"], [["minus", 2, "Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True)))"], "Equality(Integer(0), Add(Mul(Integer(-1), Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True)))), Integral(exp(exp(Symbol('\\\\pi', commutative=True))), Tuple(Symbol('\\\\pi', commutative=True)))))"], [["evaluate_integrals", 4], "Equality(Integer(0), Add(Symbol('F_g', commutative=True), Ei(exp(Symbol('\\\\pi', commutative=True))), Mul(Integer(-1), Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True))))))"], [["substitute_LHS_for_RHS", 5, 3], "Equality(Integer(0), Add(Symbol('F_g', commutative=True), Mul(Integer(-1), Symbol('P_g', commutative=True))))"]], "EE prompt": "Given e^{e^{\\pi}} = \\operatorname{F_{x}}{(\\pi)}, then derive P_{g} + \\operatorname{Ei}{(e^{\\pi})} = \\int \\operatorname{F_{x}}{(\\pi)} d\\pi, then derive F_{g} + \\operatorname{Ei}{(e^{\\pi})} - \\int \\operatorname{F_{x}}{(\\pi)} d\\pi = 0, then obtain F_{g} - P_{g} = 0", "EE derivation": "e^{e^{\\pi}} = \\operatorname{F_{x}}{(\\pi)} and \\int e^{e^{\\pi}} d\\pi = \\int \\operatorname{F_{x}}{(\\pi)} d\\pi and P_{g} + \\operatorname{Ei}{(e^{\\pi})} = \\int \\operatorname{F_{x}}{(\\pi)} d\\pi and - \\int \\operatorname{F_{x}}{(\\pi)} d\\pi + \\int e^{e^{\\pi}} d\\pi = 0 and F_{g} + \\operatorname{Ei}{(e^{\\pi})} - \\int \\operatorname{F_{x}}{(\\pi)} d\\pi = 0 and F_{g} - P_{g} = 0", "EE srepr_derivation": [["premise", "Equality(exp(exp(Symbol('\\\\pi', commutative=True))), Function('F_x')(Symbol('\\\\pi', commutative=True)))"], [["integrate", 1, "Symbol('\\\\pi', commutative=True)"], "Equality(Integral(exp(exp(Symbol('\\\\pi', commutative=True))), Tuple(Symbol('\\\\pi', commutative=True))), Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Add(Symbol('P_g', commutative=True), Ei(exp(Symbol('\\\\pi', commutative=True)))), Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True))))"], [["minus", 2, "Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True)))"], "Equality(Add(Mul(Integer(-1), Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True)))), Integral(exp(exp(Symbol('\\\\pi', commutative=True))), Tuple(Symbol('\\\\pi', commutative=True)))), Integer(0))"], [["evaluate_integrals", 4], "Equality(Add(Symbol('F_g', commutative=True), Ei(exp(Symbol('\\\\pi', commutative=True))), Mul(Integer(-1), Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True))))), Integer(0))"], [["substitute_RHS_for_LHS", 5, 3], "Equality(Add(Symbol('F_g', commutative=True), Mul(Integer(-1), Symbol('P_g', commutative=True))), Integer(0))"]], "AG prompt": "Given \\operatorname{F_{x}}{(\\pi)} = e^{e^{\\pi}}, then derive \\int \\operatorname{F_{x}}{(\\pi)} d\\pi = P_{g} + \\operatorname{Ei}{(e^{\\pi})}, then derive 0 = F_{g} + \\operatorname{Ei}{(e^{\\pi})} - \\int \\operatorname{F_{x}}{(\\pi)} d\\pi, then obtain \\int 0 d\\pi = \\int (F_{g} + \\operatorname{Ei}{(e^{\\pi})} - \\int \\operatorname{F_{x}}{(\\pi)} d\\pi) d\\pi", "AG derivation": "\\operatorname{F_{x}}{(\\pi)} = e^{e^{\\pi}} and \\int \\operatorname{F_{x}}{(\\pi)} d\\pi = \\int e^{e^{\\pi}} d\\pi and \\int \\operatorname{F_{x}}{(\\pi)} d\\pi = P_{g} + \\operatorname{Ei}{(e^{\\pi})} and 0 = - \\int \\operatorname{F_{x}}{(\\pi)} d\\pi + \\int e^{e^{\\pi}} d\\pi and 0 = F_{g} + \\operatorname{Ei}{(e^{\\pi})} - \\int \\operatorname{F_{x}}{(\\pi)} d\\pi and \\int 0 d\\pi = \\int (F_{g} + \\operatorname{Ei}{(e^{\\pi})} - \\int \\operatorname{F_{x}}{(\\pi)} d\\pi) d\\pi", "AG srepr_derivation": [["premise", "Equality(Function('F_x')(Symbol('\\\\pi', commutative=True)), exp(exp(Symbol('\\\\pi', commutative=True))))"], [["integrate", 1, "Symbol('\\\\pi', commutative=True)"], "Equality(Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True))), Integral(exp(exp(Symbol('\\\\pi', commutative=True))), Tuple(Symbol('\\\\pi', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True))), Add(Symbol('P_g', commutative=True), Ei(exp(Symbol('\\\\pi', commutative=True)))))"], [["minus", 2, "Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True)))"], "Equality(Integer(0), Add(Mul(Integer(-1), Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True)))), Integral(exp(exp(Symbol('\\\\pi', commutative=True))), Tuple(Symbol('\\\\pi', commutative=True)))))"], [["evaluate_integrals", 4], "Equality(Integer(0), Add(Symbol('F_g', commutative=True), Ei(exp(Symbol('\\\\pi', commutative=True))), Mul(Integer(-1), Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True))))))"], [["integrate", 5, "Symbol('\\\\pi', commutative=True)"], "Equality(Integral(Integer(0), Tuple(Symbol('\\\\pi', commutative=True))), Integral(Add(Symbol('F_g', commutative=True), Ei(exp(Symbol('\\\\pi', commutative=True))), Mul(Integer(-1), Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True))))), Tuple(Symbol('\\\\pi', commutative=True))))"]], "SR prompt": "Given \\operatorname{F_{x}}{(\\pi)} = e^{e^{\\pi}}, then obtain 0 = F_{g} - P_{g}", "SR derivation": "\\operatorname{F_{x}}{(\\pi)} = e^{e^{\\pi}} and \\int \\operatorname{F_{x}}{(\\pi)} d\\pi = \\int e^{e^{\\pi}} d\\pi and \\int \\operatorname{F_{x}}{(\\pi)} d\\pi = P_{g} + \\operatorname{Ei}{(e^{\\pi})} and 0 = - \\int \\operatorname{F_{x}}{(\\pi)} d\\pi + \\int e^{e^{\\pi}} d\\pi and 0 = F_{g} + \\operatorname{Ei}{(e^{\\pi})} - \\int \\operatorname{F_{x}}{(\\pi)} d\\pi and 0 = F_{g} - P_{g}", "SR srepr_derivation": [["premise", "Equality(Function('F_x')(Symbol('\\\\pi', commutative=True)), exp(exp(Symbol('\\\\pi', commutative=True))))"], [["integrate", 1, "Symbol('\\\\pi', commutative=True)"], "Equality(Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True))), Integral(exp(exp(Symbol('\\\\pi', commutative=True))), Tuple(Symbol('\\\\pi', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True))), Add(Symbol('P_g', commutative=True), Ei(exp(Symbol('\\\\pi', commutative=True)))))"], [["minus", 2, "Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True)))"], "Equality(Integer(0), Add(Mul(Integer(-1), Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True)))), Integral(exp(exp(Symbol('\\\\pi', commutative=True))), Tuple(Symbol('\\\\pi', commutative=True)))))"], [["evaluate_integrals", 4], "Equality(Integer(0), Add(Symbol('F_g', commutative=True), Ei(exp(Symbol('\\\\pi', commutative=True))), Mul(Integer(-1), Integral(Function('F_x')(Symbol('\\\\pi', commutative=True)), Tuple(Symbol('\\\\pi', commutative=True))))))"], [["substitute_LHS_for_RHS", 5, 3], "Equality(Integer(0), Add(Symbol('F_g', commutative=True), Mul(Integer(-1), Symbol('P_g', commutative=True))))"]], "VR prompt": "Given \\omicron{(\\xi)} = e^{e^{\\xi}}, then derive \\int \\omicron{(\\xi)} d\\xi = \\iota + \\operatorname{Ei}{(e^{\\xi})}, then derive 0 = \\zeta + \\operatorname{Ei}{(e^{\\xi})} - \\int \\omicron{(\\xi)} d\\xi, then obtain 0 = - \\iota + \\zeta", "VR derivation": "\\omicron{(\\xi)} = e^{e^{\\xi}} and \\int \\omicron{(\\xi)} d\\xi = \\int e^{e^{\\xi}} d\\xi and \\int \\omicron{(\\xi)} d\\xi = \\iota + \\operatorname{Ei}{(e^{\\xi})} and 0 = - \\int \\omicron{(\\xi)} d\\xi + \\int e^{e^{\\xi}} d\\xi and 0 = \\zeta + \\operatorname{Ei}{(e^{\\xi})} - \\int \\omicron{(\\xi)} d\\xi and 0 = - \\iota + \\zeta", "VR srepr_derivation": [["premise", "Equality(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), exp(exp(Symbol('\\\\xi', commutative=True))))"], [["integrate", 1, "Symbol('\\\\xi', commutative=True)"], "Equality(Integral(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True))), Integral(exp(exp(Symbol('\\\\xi', commutative=True))), Tuple(Symbol('\\\\xi', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True))), Add(Symbol('\\\\iota', commutative=True), Ei(exp(Symbol('\\\\xi', commutative=True)))))"], [["minus", 2, "Integral(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True)))"], "Equality(Integer(0), Add(Mul(Integer(-1), Integral(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True)))), Integral(exp(exp(Symbol('\\\\xi', commutative=True))), Tuple(Symbol('\\\\xi', commutative=True)))))"], [["evaluate_integrals", 4], "Equality(Integer(0), Add(Symbol('\\\\zeta', commutative=True), Ei(exp(Symbol('\\\\xi', commutative=True))), Mul(Integer(-1), Integral(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True))))))"], [["substitute_LHS_for_RHS", 5, 3], "Equality(Integer(0), Add(Mul(Integer(-1), Symbol('\\\\iota', commutative=True)), Symbol('\\\\zeta', commutative=True)))"]], "static_flan-t5-large": "operatorname { F_ { x } } { ( \\ pi) } = e ^ { e ^ { \\ pi } } and \\ int \\ operatorname { F_ { x } } { ( \\ pi) } d \\ pi = \\ int e ^ { e ^ { \\ pi } } d \\ pi and \\ int \\ operatorname { F_ { x } } { ( \\ pi) } d \\ pi = P_ { g } + \\ operatorname { Ei } { (e ^ { \\ pi } ) } and \\ int \\ operatorname { F_ { x } } { ( \\ pi) } d \\ pi = P_ { g } + \\ operatorname { Ei } { (e ^ { \\ pi } ) } and 0 = F_ { g } + \\ operatorname { Ei } { (e ^ { \\ pi } ) } - \\ int \\ operatorname { F_ { x } } { ( \\ pi) } d \\ pi and 0 = F_ { g } + \\ operatorname { Ei } { (e ^ { \\ pi } ) } - \\ int \\ operatorname { F_ { x } } { ( \\ pi) } d \\ pi and 0 = F_ { g } - P_ { g }", "VR_flan-t5-large": "omicron { ( \\ xi) } = e ^ { e ^ { \\ xi } } and \\ int \\ omicron { ( \\ xi) } d \\ xi = \\ int e ^ { e ^ { \\ xi } } d \\ xi and \\ int \\ omicron { ( \\ xi) } d \\ xi = \\ iota + \\ operatorname { Ei } { (e ^ { \\ xi } ) } and \\ int e ^ { e ^ { \\ xi } } d \\ xi = \\ iota + \\ operatorname { Ei } { (e ^ { \\ xi } ) } and 0 = \\ iota + \\ operatorname { Ei } { (e ^ { \\ xi } ) } - \\ int e ^ { e ^ { \\ xi } } d \\ xi and 0 = \\ zeta + \\ operatorname { Ei } { (e ^ { \\ xi } ) } - \\ int \\ omicron { ( \\ xi) } d \\ xi and 0 = - \\ iota + \\ zeta", "EE_flan-t5-large": "operatorname { F_ { x } } { ( \\ pi) } = \\ operatorname { F_ { x } } { ( \\ pi) } and \\ int e ^ { e ^ { \\ pi } } d \\ pi = \\ int \\ operatorname { F_ { x } } { ( \\ pi) } d \\ pi and \\ int e ^ { e ^ { \\ pi } } d \\ pi - \\ int \\ operatorname { F_ { x } } { ( \\ pi) } d \\ pi = 0 and P_ { g } + \\ operatorname { Ei } { (e ^ { \\ pi } ) } = \\ int \\ operatorname { F_ { x } } { ( \\ pi) } d \\ pi and \\ int e ^ { e ^ { \\ pi } } d \\ pi = P_ { g } + \\ operatorname { Ei } { (e ^ { \\ pi } ) } and F_ { g } + \\ operatorname { Ei } { (e ^ { \\ pi } ) } - \\ int e ^ { e ^ { \\ pi } } d \\ pi = 0 and F_ { g } + \\ operatorname { Ei } { (e ^ { \\ pi } ) } - \\ int \\ operatorname { F_ { x } } { ( \\ pi) } d \\ pi = 0 and F_ { g } - P_ { g } = 0", "AG_flan-t5-large": "operatorname { F_ { x } } { ( \\ pi) } = e ^ { e ^ { \\ pi } } and \\ int \\ operatorname { F_ { x } } { ( \\ pi) } d \\ pi = \\ int e ^ { e ^ { \\ pi } } d \\ pi and \\ int \\ operatorname { F_ { x } } { ( \\ pi) } d \\ pi = P_ { g } + \\ operatorname { Ei } { (e ^ { \\ pi } ) } and \\ int \\ operatorname { F_ { x } } { ( \\ pi) } d \\ pi = P_ { g } + \\ operatorname { Ei } { (e ^ { \\ pi } ) } and 0 = P_ { g } + \\ operatorname { Ei } { (e ^ { \\ pi } ) } - \\ int \\ operatorname { F_ { x } } { ( \\ pi) } d \\ pi and 0 = F_ { g } + \\ operatorname { Ei } { (e ^ { \\ pi } ) } - \\ int \\ operatorname { F_ { x } } { ( \\ pi) } d \\ pi and \\ int 0 d \\ pi = \\ int (F_ { g } + \\ operatorname { Ei } { (e ^ { \\ pi } ) } - \\ int \\ operatorname { F_ { x } } { ( \\ pi) } d \\ pi) d \\ pi", "SR_flan-t5-large": "operatorname { F_ { x } } { ( \\ pi) } = e ^ { e ^ { \\ pi } } and \\ operatorname { F_ { x } } { ( \\ pi) } - e ^ { e ^ { \\ pi } } = 0 and - \\ operatorname { F_ { x } } { ( \\ pi) } + e ^ { e ^ { \\ pi } } = - \\ operatorname { F_ { x } } { ( \\ pi) } + e ^ { e ^ { \\ pi } } and 0 = - \\ operatorname { F_ { x } } { ( \\ pi) } + e ^ { e ^ { \\ pi } } and 0 = F_ { g } - P_ { g }", "static_rouge": 0.8701298701298702, "static_bleu": 0.7819487117381042, "static_bleurt": 0.8236478567123413, "static_gleu": 0.782435129740519, "VR_rouge": 0.015291160452450936, "EE_rouge": 0.03679653679653694, "AG_rouge": -0.02117447769621672, "SR_rouge": 0.2962168266516093, "VR_rouge_abs": 0.014411027568922291, "EE_rouge_abs": 0.05494505494505486, "AG_rouge_abs": -0.011775074916270167, "SR_rouge_abs": 0.5038759689922481, "VR_bleu": 0.031036297044956473, "EE_bleu": 0.08448799765568982, "AG_bleu": -0.032021400669430045, "SR_bleu": 0.19320956768880582, "VR_bleu_abs": 0.017539018585103316, "EE_bleu_abs": 0.10056606071061036, "AG_bleu_abs": -0.030215181463107532, "SR_bleu_abs": 0.5769895122329649, "VR_bleurt": 0.03080981969833374, "EE_bleurt": 0.11421000957489014, "AG_bleurt": 0.13937169313430786, "SR_bleurt": 0.6150738596916199, "VR_bleurt_abs": -0.03897190745919943, "EE_bleurt_abs": -0.005466938018798828, "AG_bleurt_abs": -0.11472982168197632, "SR_bleurt_abs": 0.6174193546175957, "VR_gleu": 0.0305169711727441, "EE_gleu": 0.08471983975809372, "AG_gleu": -0.031874921366806364, "SR_gleu": 0.1632705105758998, "VR_gleu_abs": 0.01857219222488682, "EE_gleu_abs": 0.10116675230910732, "AG_gleu_abs": -0.03025145909858984, "SR_gleu_abs": 0.5079840319361277, "ratio_VR_rouge": 0.9394736842105263, "ratio_VR_bleu": 0.9590717844382884, "ratio_VR_bleurt": 0.1545391475243857, "ratio_VR_gleu": 0.9596859614105123, "ratio_EE_rouge": 0.935897435897436, "ratio_EE_bleu": 0.8904731412838727, "ratio_EE_bleurt": 1.0075177148245205, "ratio_EE_gleu": 0.8900537565025188, "ratio_AG_rouge": 1.0138267925153173, "ratio_AG_bleu": 1.0380101364051433, "ratio_AG_bleurt": 1.152427306786595, "ratio_AG_gleu": 1.0380458401418489, "ratio_SR_rouge": 0.49612403100775193, "ratio_SR_bleu": 0.4230104877670351, "ratio_SR_bleurt": 0.15545621042593843, "ratio_SR_gleu": 0.49201596806387227}, {"prompt": "Given \\dot{\\mathbf{r}}{(\\lambda,c)} = c \\cos{(\\lambda)}, then derive (\\frac{\\partial}{\\partial c} \\dot{\\mathbf{r}}{(\\lambda,c)})^{\\lambda} = \\cos^{\\lambda}{(\\lambda)}, then obtain \\cos^{\\lambda}{(\\lambda)} = (\\frac{\\partial}{\\partial c} c \\cos{(\\lambda)})^{\\lambda}", "derivation": "\\dot{\\mathbf{r}}{(\\lambda,c)} = c \\cos{(\\lambda)} and \\frac{\\partial}{\\partial c} \\dot{\\mathbf{r}}{(\\lambda,c)} = \\frac{\\partial}{\\partial c} c \\cos{(\\lambda)} and (\\frac{\\partial}{\\partial c} \\dot{\\mathbf{r}}{(\\lambda,c)})^{\\lambda} = (\\frac{\\partial}{\\partial c} c \\cos{(\\lambda)})^{\\lambda} and (\\frac{\\partial}{\\partial c} \\dot{\\mathbf{r}}{(\\lambda,c)})^{\\lambda} = \\cos^{\\lambda}{(\\lambda)} and \\cos^{\\lambda}{(\\lambda)} = (\\frac{\\partial}{\\partial c} c \\cos{(\\lambda)})^{\\lambda}", "srepr_derivation": [["premise", "Equality(Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)), Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))))"], [["differentiate", 1, "Symbol('c', commutative=True)"], "Equality(Derivative(Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)), Tuple(Symbol('c', commutative=True), Integer(1))), Derivative(Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))), Tuple(Symbol('c', commutative=True), Integer(1))))"], [["power", 2, "Symbol('\\\\lambda', commutative=True)"], "Equality(Pow(Derivative(Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)), Pow(Derivative(Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)))"], [["evaluate_derivatives", 3], "Equality(Pow(Derivative(Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)), Pow(cos(Symbol('\\\\lambda', commutative=True)), Symbol('\\\\lambda', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Pow(cos(Symbol('\\\\lambda', commutative=True)), Symbol('\\\\lambda', commutative=True)), Pow(Derivative(Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)))"]], "EE prompt": "Given c \\cos{(\\lambda)} = \\dot{\\mathbf{r}}{(\\lambda,c)}, then derive \\cos^{\\lambda}{(\\lambda)} = (\\frac{\\partial}{\\partial c} \\dot{\\mathbf{r}}{(\\lambda,c)})^{\\lambda}, then obtain (\\frac{\\partial}{\\partial c} c \\cos{(\\lambda)})^{\\lambda} = \\cos^{\\lambda}{(\\lambda)}", "EE derivation": "c \\cos{(\\lambda)} = \\dot{\\mathbf{r}}{(\\lambda,c)} and \\frac{\\partial}{\\partial c} c \\cos{(\\lambda)} = \\frac{\\partial}{\\partial c} \\dot{\\mathbf{r}}{(\\lambda,c)} and (\\frac{\\partial}{\\partial c} c \\cos{(\\lambda)})^{\\lambda} = (\\frac{\\partial}{\\partial c} \\dot{\\mathbf{r}}{(\\lambda,c)})^{\\lambda} and \\cos^{\\lambda}{(\\lambda)} = (\\frac{\\partial}{\\partial c} \\dot{\\mathbf{r}}{(\\lambda,c)})^{\\lambda} and (\\frac{\\partial}{\\partial c} c \\cos{(\\lambda)})^{\\lambda} = \\cos^{\\lambda}{(\\lambda)}", "EE srepr_derivation": [["premise", "Equality(Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))), Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)))"], [["differentiate", 1, "Symbol('c', commutative=True)"], "Equality(Derivative(Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))), Tuple(Symbol('c', commutative=True), Integer(1))), Derivative(Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)), Tuple(Symbol('c', commutative=True), Integer(1))))"], [["power", 2, "Symbol('\\\\lambda', commutative=True)"], "Equality(Pow(Derivative(Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)), Pow(Derivative(Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)))"], [["evaluate_derivatives", 3], "Equality(Pow(cos(Symbol('\\\\lambda', commutative=True)), Symbol('\\\\lambda', commutative=True)), Pow(Derivative(Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)))"], [["substitute_RHS_for_LHS", 3, 4], "Equality(Pow(Derivative(Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)), Pow(cos(Symbol('\\\\lambda', commutative=True)), Symbol('\\\\lambda', commutative=True)))"]], "AG prompt": "Given \\dot{\\mathbf{r}}{(\\lambda,c)} = c \\cos{(\\lambda)}, then derive (\\frac{\\partial}{\\partial c} \\dot{\\mathbf{r}}{(\\lambda,c)})^{\\lambda} = \\cos^{\\lambda}{(\\lambda)}, then obtain (\\frac{\\partial}{\\partial c} c \\cos{(\\lambda)})^{\\lambda} = \\cos^{\\lambda}{(\\lambda)}", "AG derivation": "\\dot{\\mathbf{r}}{(\\lambda,c)} = c \\cos{(\\lambda)} and \\frac{\\partial}{\\partial c} \\dot{\\mathbf{r}}{(\\lambda,c)} = \\frac{\\partial}{\\partial c} c \\cos{(\\lambda)} and (\\frac{\\partial}{\\partial c} \\dot{\\mathbf{r}}{(\\lambda,c)})^{\\lambda} = (\\frac{\\partial}{\\partial c} c \\cos{(\\lambda)})^{\\lambda} and (\\frac{\\partial}{\\partial c} \\dot{\\mathbf{r}}{(\\lambda,c)})^{\\lambda} = \\cos^{\\lambda}{(\\lambda)} and (\\frac{\\partial}{\\partial c} c \\cos{(\\lambda)})^{\\lambda} = \\cos^{\\lambda}{(\\lambda)}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)), Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))))"], [["differentiate", 1, "Symbol('c', commutative=True)"], "Equality(Derivative(Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)), Tuple(Symbol('c', commutative=True), Integer(1))), Derivative(Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))), Tuple(Symbol('c', commutative=True), Integer(1))))"], [["power", 2, "Symbol('\\\\lambda', commutative=True)"], "Equality(Pow(Derivative(Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)), Pow(Derivative(Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)))"], [["evaluate_derivatives", 3], "Equality(Pow(Derivative(Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)), Pow(cos(Symbol('\\\\lambda', commutative=True)), Symbol('\\\\lambda', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Pow(Derivative(Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)), Pow(cos(Symbol('\\\\lambda', commutative=True)), Symbol('\\\\lambda', commutative=True)))"]], "SR prompt": "Given \\dot{\\mathbf{r}}{(\\lambda,c)} = c \\cos{(\\lambda)}, then obtain \\cos^{\\lambda}{(\\lambda)} = (\\frac{\\partial}{\\partial c} c \\cos{(\\lambda)})^{\\lambda}", "SR derivation": "\\dot{\\mathbf{r}}{(\\lambda,c)} = c \\cos{(\\lambda)} and \\frac{\\partial}{\\partial c} \\dot{\\mathbf{r}}{(\\lambda,c)} = \\frac{\\partial}{\\partial c} c \\cos{(\\lambda)} and (\\frac{\\partial}{\\partial c} \\dot{\\mathbf{r}}{(\\lambda,c)})^{\\lambda} = (\\frac{\\partial}{\\partial c} c \\cos{(\\lambda)})^{\\lambda} and (\\frac{\\partial}{\\partial c} \\dot{\\mathbf{r}}{(\\lambda,c)})^{\\lambda} = \\cos^{\\lambda}{(\\lambda)} and \\cos^{\\lambda}{(\\lambda)} = (\\frac{\\partial}{\\partial c} c \\cos{(\\lambda)})^{\\lambda}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)), Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))))"], [["differentiate", 1, "Symbol('c', commutative=True)"], "Equality(Derivative(Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)), Tuple(Symbol('c', commutative=True), Integer(1))), Derivative(Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))), Tuple(Symbol('c', commutative=True), Integer(1))))"], [["power", 2, "Symbol('\\\\lambda', commutative=True)"], "Equality(Pow(Derivative(Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)), Pow(Derivative(Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)))"], [["evaluate_derivatives", 3], "Equality(Pow(Derivative(Function('\\\\dot{\\\\mathbf{r}}')(Symbol('\\\\lambda', commutative=True), Symbol('c', commutative=True)), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)), Pow(cos(Symbol('\\\\lambda', commutative=True)), Symbol('\\\\lambda', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Pow(cos(Symbol('\\\\lambda', commutative=True)), Symbol('\\\\lambda', commutative=True)), Pow(Derivative(Mul(Symbol('c', commutative=True), cos(Symbol('\\\\lambda', commutative=True))), Tuple(Symbol('c', commutative=True), Integer(1))), Symbol('\\\\lambda', commutative=True)))"]], "VR prompt": "Given \\upsilon{(\\kappa,\\nu)} = \\kappa \\cos{(\\nu)}, then derive (\\frac{\\partial}{\\partial \\kappa} \\upsilon{(\\kappa,\\nu)})^{\\nu} = \\cos^{\\nu}{(\\nu)}, then obtain \\cos^{\\nu}{(\\nu)} = (\\frac{\\partial}{\\partial \\kappa} \\kappa \\cos{(\\nu)})^{\\nu}", "VR derivation": "\\upsilon{(\\kappa,\\nu)} = \\kappa \\cos{(\\nu)} and \\frac{\\partial}{\\partial \\kappa} \\upsilon{(\\kappa,\\nu)} = \\frac{\\partial}{\\partial \\kappa} \\kappa \\cos{(\\nu)} and (\\frac{\\partial}{\\partial \\kappa} \\upsilon{(\\kappa,\\nu)})^{\\nu} = (\\frac{\\partial}{\\partial \\kappa} \\kappa \\cos{(\\nu)})^{\\nu} and (\\frac{\\partial}{\\partial \\kappa} \\upsilon{(\\kappa,\\nu)})^{\\nu} = \\cos^{\\nu}{(\\nu)} and \\cos^{\\nu}{(\\nu)} = (\\frac{\\partial}{\\partial \\kappa} \\kappa \\cos{(\\nu)})^{\\nu}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\nu', commutative=True)), Mul(Symbol('\\\\kappa', commutative=True), cos(Symbol('\\\\nu', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\kappa', commutative=True)"], "Equality(Derivative(Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Derivative(Mul(Symbol('\\\\kappa', commutative=True), cos(Symbol('\\\\nu', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))))"], [["power", 2, "Symbol('\\\\nu', commutative=True)"], "Equality(Pow(Derivative(Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Symbol('\\\\nu', commutative=True)), Pow(Derivative(Mul(Symbol('\\\\kappa', commutative=True), cos(Symbol('\\\\nu', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Symbol('\\\\nu', commutative=True)))"], [["evaluate_derivatives", 3], "Equality(Pow(Derivative(Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Symbol('\\\\nu', commutative=True)), Pow(cos(Symbol('\\\\nu', commutative=True)), Symbol('\\\\nu', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Pow(cos(Symbol('\\\\nu', commutative=True)), Symbol('\\\\nu', commutative=True)), Pow(Derivative(Mul(Symbol('\\\\kappa', commutative=True), cos(Symbol('\\\\nu', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Symbol('\\\\nu', commutative=True)))"]], "static_flan-t5-large": "dot { \\ mathbf { r } } { ( \\ lambda,c) } = c \\ cos { ( \\ lambda) } and \\ frac { \\ partial } { \\ partial c } \\ dot { \\ mathbf { r } } { ( \\ lambda,c) } = \\ frac { \\ partial } { \\ partial c } c \\ cos { ( \\ lambda) } and ( \\ frac { \\ partial } { \\ partial c } \\ dot { \\ mathbf { r } } { ( \\ lambda,c) } ) ^ { \\ lambda } = ( \\ frac { \\ partial } { \\ partial c } c \\ cos { ( \\ lambda) } ) ^ { \\ lambda } and ( \\ frac { \\ partial } { \\ partial c } \\ dot { \\ mathbf { r } } { ( \\ lambda,c) } ) ^ { \\ lambda } = \\ cos ^ { \\ lambda } { ( \\ lambda) } and \\ cos ^ { \\ lambda } { ( \\ lambda) } = ( \\ frac { \\ partial } { \\ partial c } c \\ cos { ( \\ lambda) } ) ^ { \\ lambda }", "VR_flan-t5-large": "( \\ kappa, \\ nu) } = \\ kappa \\ cos { ( \\ nu) } and \\ frac { \\ partial } { \\ partial \\ kappa } \\ upsilon { ( \\ kappa, \\ nu) } = \\ frac { \\ partial } { \\ partial \\ kappa } \\ kappa \\ cos { ( \\ nu) } and ( \\ frac { \\ partial } { \\ partial \\ kappa } \\ upsilon { ( \\ kappa, \\ nu) } ) ^ { \\ nu } = ( \\ frac { \\ partial } { \\ partial \\ kappa } \\ kappa \\ cos { ( \\ nu) } ) ^ { \\ nu } and ( \\ frac { \\ partial } { \\ partial \\ kappa } \\ upsilon { ( \\ kappa, \\ nu) } ) ^ { \\ nu } = \\ cos ^ { \\ nu } { ( \\ nu) } and \\ cos ^ { \\ nu } { ( \\ nu) } = ( \\ frac { \\ partial } { \\ partial \\ kappa } \\ kappa \\ cos { ( \\ nu) } ) ^ { \\ nu }", "EE_flan-t5-large": "cos { ( \\ lambda) } = \\ dot { \\ mathbf { r } } { ( \\ lambda,c) } and c \\ cos { ( \\ lambda) } = c \\ dot { \\ mathbf { r } } { ( \\ lambda,c) } and \\ frac { \\ partial } { \\ partial c } c \\ cos { ( \\ lambda) } = \\ frac { \\ partial } { \\ partial c } c \\ dot { \\ mathbf { r } } { ( \\ lambda,c) } and \\ cos ^ { \\ lambda } { ( \\ lambda) } = ( \\ frac { \\ partial } { \\ partial c } c \\ dot { \\ mathbf { r } } { ( \\ lambda,c) } ) ^ { \\ lambda } and \\ cos ^ { \\ lambda } { ( \\ lambda) } = ( \\ frac { \\ partial } { \\ partial c } \\ dot { \\ mathbf { r } } { ( \\ lambda,c) } ) ^ { \\ lambda } and ( \\ frac { \\ partial } { \\ partial c } c \\ cos { ( \\ lambda) } ) ^ { \\ lambda } = \\ cos ^ { \\ lambda } { ( \\ lambda) }", "AG_flan-t5-large": "dot { \\ mathbf { r } } { ( \\ lambda,c) } = c \\ cos { ( \\ lambda) } and \\ frac { \\ partial } { \\ partial c } \\ dot { \\ mathbf { r } } { ( \\ lambda,c) } = \\ frac { \\ partial } { \\ partial c } c \\ cos { ( \\ lambda) } and ( \\ frac { \\ partial } { \\ partial c } \\ dot { \\ mathbf { r } } { ( \\ lambda,c) } ) ^ { \\ lambda } = ( \\ frac { \\ partial } { \\ partial c } c \\ cos { ( \\ lambda) } ) ^ { \\ lambda } and ( \\ frac { \\ partial } { \\ partial c } \\ dot { \\ mathbf { r } } { ( \\ lambda,c) } ) ^ { \\ lambda } = \\ cos ^ { \\ lambda } { ( \\ lambda) } and ( \\ frac { \\ partial } { \\ partial c } c \\ cos { ( \\ lambda) } ) ^ { \\ lambda } = \\ cos ^ { \\ lambda } { ( \\ lambda) }", "SR_flan-t5-large": "dot { \\ mathbf { r } } { ( \\ lambda,c) } = c \\ cos { ( \\ lambda) } and \\ frac { \\ partial } { \\ partial c } \\ dot { \\ mathbf { r } } { ( \\ lambda,c) } = \\ frac { \\ partial } { \\ partial c } c \\ cos { ( \\ lambda) } and \\ cos { ( \\ lambda) } = \\ frac { \\ partial } { \\ partial c } c \\ cos { ( \\ lambda) } and \\ cos ^ { \\ lambda } { ( \\ lambda) } = ( \\ frac { \\ partial } { \\ partial c } c \\ cos { ( \\ lambda) } ) ^ { \\ lambda }", "static_rouge": 1.0, "static_bleu": 0.9956989313760156, "static_bleurt": 0.7461321353912354, "static_gleu": 0.9956803455723542, "VR_rouge": 0.008264462809917328, "EE_rouge": 0.11111111111111105, "AG_rouge": 0.0, "SR_rouge": 0.21739130434782616, "VR_rouge_abs": -0.001908169350029798, "EE_rouge_abs": 0.09480676328502402, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.21739130434782616, "VR_bleu": 0.00949181463209936, "EE_bleu": 0.12344866182079273, "AG_bleu": 0.0, "SR_bleu": 0.4492201504629012, "VR_bleu_abs": 0.001724187770503094, "EE_bleu_abs": 0.12410621467012428, "AG_bleu_abs": 6.669618212828965e-05, "SR_bleu_abs": 0.44981629234242937, "VR_bleurt": -0.07188934087753296, "EE_bleurt": -0.0162276029586792, "AG_bleurt": -0.004102230072021484, "SR_bleurt": 0.21694839000701904, "VR_bleurt_abs": 0.03403496742248535, "EE_bleurt_abs": 0.05698519945144653, "AG_bleurt_abs": -0.052829623222351074, "SR_bleurt_abs": 0.18004238605499268, "VR_gleu": 0.009473449020630076, "EE_gleu": 0.12245519344253675, "AG_gleu": 0.0, "SR_gleu": 0.3812095032397408, "VR_gleu_abs": 0.00195836827630802, "EE_gleu_abs": 0.12287795880994834, "AG_gleu_abs": 6.559128198158071e-05, "SR_gleu_abs": 0.3828633405639913, "ratio_VR_rouge": 1.0077519379844961, "ratio_VR_bleu": 0.9967459143659942, "ratio_VR_bleurt": 0.5545665910901929, "ratio_VR_gleu": 0.9964302184569661, "ratio_EE_rouge": 0.8993589743589745, "ratio_EE_bleu": 0.8741029063229118, "ratio_EE_bleurt": 0.9176972307514308, "ratio_EE_gleu": 0.8753724097940722, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9999322713155433, "ratio_AG_bleurt": 1.0701677080850318, "ratio_AG_gleu": 0.9999334018343038, "ratio_SR_rouge": 0.7826086956521738, "ratio_SR_bleu": 0.5501837076575706, "ratio_SR_bleurt": 0.7599413103508457, "ratio_SR_gleu": 0.6171366594360087}, {"prompt": "Given G{(\\nabla)} = \\cos{(\\nabla)}, then derive \\varphi + G{(\\nabla)} + \\sin{(\\nabla)} = \\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)}, then obtain - G{(\\nabla)} + \\int (\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}) d\\nabla - \\int \\cos{(\\nabla)} d\\nabla = - G{(\\nabla)} + \\int (\\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)}) d\\nabla - \\int \\cos{(\\nabla)} d\\nabla", "derivation": "G{(\\nabla)} = \\cos{(\\nabla)} and G{(\\nabla)} + \\int \\cos{(\\nabla)} d\\nabla = \\cos{(\\nabla)} + \\int \\cos{(\\nabla)} d\\nabla and \\varphi + G{(\\nabla)} + \\sin{(\\nabla)} = \\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)} and \\int (\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}) d\\nabla = \\int (\\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)}) d\\nabla and - G{(\\nabla)} + \\int (\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}) d\\nabla - \\int \\cos{(\\nabla)} d\\nabla = - G{(\\nabla)} + \\int (\\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)}) d\\nabla - \\int \\cos{(\\nabla)} d\\nabla", "srepr_derivation": [["premise", "Equality(Function('G')(Symbol('\\\\nabla', commutative=True)), cos(Symbol('\\\\nabla', commutative=True)))"], [["add", 1, "Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True)))"], "Equality(Add(Function('G')(Symbol('\\\\nabla', commutative=True)), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True)))), Add(cos(Symbol('\\\\nabla', commutative=True)), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True)))))"], [["evaluate_integrals", 2], "Equality(Add(Symbol('\\\\varphi', commutative=True), Function('G')(Symbol('\\\\nabla', commutative=True)), sin(Symbol('\\\\nabla', commutative=True))), Add(Symbol('\\\\varphi', commutative=True), sin(Symbol('\\\\nabla', commutative=True)), cos(Symbol('\\\\nabla', commutative=True))))"], [["integrate", 3, "Symbol('\\\\nabla', commutative=True)"], "Equality(Integral(Add(Symbol('\\\\varphi', commutative=True), Function('G')(Symbol('\\\\nabla', commutative=True)), sin(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True))), Integral(Add(Symbol('\\\\varphi', commutative=True), sin(Symbol('\\\\nabla', commutative=True)), cos(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True))))"], [["minus", 4, "Add(Function('G')(Symbol('\\\\nabla', commutative=True)), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True))))"], "Equality(Add(Mul(Integer(-1), Function('G')(Symbol('\\\\nabla', commutative=True))), Integral(Add(Symbol('\\\\varphi', commutative=True), Function('G')(Symbol('\\\\nabla', commutative=True)), sin(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True))), Mul(Integer(-1), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True))))), Add(Mul(Integer(-1), Function('G')(Symbol('\\\\nabla', commutative=True))), Integral(Add(Symbol('\\\\varphi', commutative=True), sin(Symbol('\\\\nabla', commutative=True)), cos(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True))), Mul(Integer(-1), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True))))))"]], "EE prompt": "Given \\cos{(\\nabla)} = G{(\\nabla)}, then derive \\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)} = \\varphi + G{(\\nabla)} + \\sin{(\\nabla)}, then obtain - G{(\\nabla)} + \\int (\\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)}) d\\nabla - \\int \\cos{(\\nabla)} d\\nabla = - G{(\\nabla)} + \\int (\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}) d\\nabla - \\int \\cos{(\\nabla)} d\\nabla", "EE derivation": "\\cos{(\\nabla)} = G{(\\nabla)} and \\cos{(\\nabla)} + \\int \\cos{(\\nabla)} d\\nabla = G{(\\nabla)} + \\int \\cos{(\\nabla)} d\\nabla and \\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)} = \\varphi + G{(\\nabla)} + \\sin{(\\nabla)} and \\int (\\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)}) d\\nabla = \\int (\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}) d\\nabla and - G{(\\nabla)} + \\int (\\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)}) d\\nabla - \\int \\cos{(\\nabla)} d\\nabla = - G{(\\nabla)} + \\int (\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}) d\\nabla - \\int \\cos{(\\nabla)} d\\nabla", "EE srepr_derivation": [["premise", "Equality(cos(Symbol('\\\\nabla', commutative=True)), Function('G')(Symbol('\\\\nabla', commutative=True)))"], [["add", 1, "Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True)))"], "Equality(Add(cos(Symbol('\\\\nabla', commutative=True)), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True)))), Add(Function('G')(Symbol('\\\\nabla', commutative=True)), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True)))))"], [["evaluate_integrals", 2], "Equality(Add(Symbol('\\\\varphi', commutative=True), sin(Symbol('\\\\nabla', commutative=True)), cos(Symbol('\\\\nabla', commutative=True))), Add(Symbol('\\\\varphi', commutative=True), Function('G')(Symbol('\\\\nabla', commutative=True)), sin(Symbol('\\\\nabla', commutative=True))))"], [["integrate", 3, "Symbol('\\\\nabla', commutative=True)"], "Equality(Integral(Add(Symbol('\\\\varphi', commutative=True), sin(Symbol('\\\\nabla', commutative=True)), cos(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True))), Integral(Add(Symbol('\\\\varphi', commutative=True), Function('G')(Symbol('\\\\nabla', commutative=True)), sin(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True))))"], [["minus", 4, "Add(Function('G')(Symbol('\\\\nabla', commutative=True)), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True))))"], "Equality(Add(Mul(Integer(-1), Function('G')(Symbol('\\\\nabla', commutative=True))), Integral(Add(Symbol('\\\\varphi', commutative=True), sin(Symbol('\\\\nabla', commutative=True)), cos(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True))), Mul(Integer(-1), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True))))), Add(Mul(Integer(-1), Function('G')(Symbol('\\\\nabla', commutative=True))), Integral(Add(Symbol('\\\\varphi', commutative=True), Function('G')(Symbol('\\\\nabla', commutative=True)), sin(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True))), Mul(Integer(-1), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True))))))"]], "AG prompt": "Given G{(\\nabla)} = \\cos{(\\nabla)}, then derive \\varphi + G{(\\nabla)} + \\sin{(\\nabla)} = \\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)}, then obtain \\frac{\\int (\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}) d\\nabla}{\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}} = \\frac{\\int (\\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)}) d\\nabla}{\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}}", "AG derivation": "G{(\\nabla)} = \\cos{(\\nabla)} and G{(\\nabla)} + \\int \\cos{(\\nabla)} d\\nabla = \\cos{(\\nabla)} + \\int \\cos{(\\nabla)} d\\nabla and \\varphi + G{(\\nabla)} + \\sin{(\\nabla)} = \\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)} and \\int (\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}) d\\nabla = \\int (\\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)}) d\\nabla and \\frac{\\int (\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}) d\\nabla}{\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}} = \\frac{\\int (\\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)}) d\\nabla}{\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}}", "AG srepr_derivation": [["premise", "Equality(Function('G')(Symbol('\\\\nabla', commutative=True)), cos(Symbol('\\\\nabla', commutative=True)))"], [["add", 1, "Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True)))"], "Equality(Add(Function('G')(Symbol('\\\\nabla', commutative=True)), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True)))), Add(cos(Symbol('\\\\nabla', commutative=True)), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True)))))"], [["evaluate_integrals", 2], "Equality(Add(Symbol('\\\\varphi', commutative=True), Function('G')(Symbol('\\\\nabla', commutative=True)), sin(Symbol('\\\\nabla', commutative=True))), Add(Symbol('\\\\varphi', commutative=True), sin(Symbol('\\\\nabla', commutative=True)), cos(Symbol('\\\\nabla', commutative=True))))"], [["integrate", 3, "Symbol('\\\\nabla', commutative=True)"], "Equality(Integral(Add(Symbol('\\\\varphi', commutative=True), Function('G')(Symbol('\\\\nabla', commutative=True)), sin(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True))), Integral(Add(Symbol('\\\\varphi', commutative=True), sin(Symbol('\\\\nabla', commutative=True)), cos(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True))))"], [["divide", 4, "Add(Symbol('\\\\varphi', commutative=True), Function('G')(Symbol('\\\\nabla', commutative=True)), sin(Symbol('\\\\nabla', commutative=True)))"], "Equality(Mul(Pow(Add(Symbol('\\\\varphi', commutative=True), Function('G')(Symbol('\\\\nabla', commutative=True)), sin(Symbol('\\\\nabla', commutative=True))), Integer(-1)), Integral(Add(Symbol('\\\\varphi', commutative=True), Function('G')(Symbol('\\\\nabla', commutative=True)), sin(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True)))), Mul(Pow(Add(Symbol('\\\\varphi', commutative=True), Function('G')(Symbol('\\\\nabla', commutative=True)), sin(Symbol('\\\\nabla', commutative=True))), Integer(-1)), Integral(Add(Symbol('\\\\varphi', commutative=True), sin(Symbol('\\\\nabla', commutative=True)), cos(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True)))))"]], "SR prompt": "Given G{(\\nabla)} = \\cos{(\\nabla)}, then obtain - G{(\\nabla)} + \\int (\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}) d\\nabla - \\int \\cos{(\\nabla)} d\\nabla = - G{(\\nabla)} + \\int (\\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)}) d\\nabla - \\int \\cos{(\\nabla)} d\\nabla", "SR derivation": "G{(\\nabla)} = \\cos{(\\nabla)} and G{(\\nabla)} + \\int \\cos{(\\nabla)} d\\nabla = \\cos{(\\nabla)} + \\int \\cos{(\\nabla)} d\\nabla and \\varphi + G{(\\nabla)} + \\sin{(\\nabla)} = \\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)} and \\int (\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}) d\\nabla = \\int (\\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)}) d\\nabla and - G{(\\nabla)} + \\int (\\varphi + G{(\\nabla)} + \\sin{(\\nabla)}) d\\nabla - \\int \\cos{(\\nabla)} d\\nabla = - G{(\\nabla)} + \\int (\\varphi + \\sin{(\\nabla)} + \\cos{(\\nabla)}) d\\nabla - \\int \\cos{(\\nabla)} d\\nabla", "SR srepr_derivation": [["premise", "Equality(Function('G')(Symbol('\\\\nabla', commutative=True)), cos(Symbol('\\\\nabla', commutative=True)))"], [["add", 1, "Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True)))"], "Equality(Add(Function('G')(Symbol('\\\\nabla', commutative=True)), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True)))), Add(cos(Symbol('\\\\nabla', commutative=True)), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True)))))"], [["evaluate_integrals", 2], "Equality(Add(Symbol('\\\\varphi', commutative=True), Function('G')(Symbol('\\\\nabla', commutative=True)), sin(Symbol('\\\\nabla', commutative=True))), Add(Symbol('\\\\varphi', commutative=True), sin(Symbol('\\\\nabla', commutative=True)), cos(Symbol('\\\\nabla', commutative=True))))"], [["integrate", 3, "Symbol('\\\\nabla', commutative=True)"], "Equality(Integral(Add(Symbol('\\\\varphi', commutative=True), Function('G')(Symbol('\\\\nabla', commutative=True)), sin(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True))), Integral(Add(Symbol('\\\\varphi', commutative=True), sin(Symbol('\\\\nabla', commutative=True)), cos(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True))))"], [["minus", 4, "Add(Function('G')(Symbol('\\\\nabla', commutative=True)), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True))))"], "Equality(Add(Mul(Integer(-1), Function('G')(Symbol('\\\\nabla', commutative=True))), Integral(Add(Symbol('\\\\varphi', commutative=True), Function('G')(Symbol('\\\\nabla', commutative=True)), sin(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True))), Mul(Integer(-1), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True))))), Add(Mul(Integer(-1), Function('G')(Symbol('\\\\nabla', commutative=True))), Integral(Add(Symbol('\\\\varphi', commutative=True), sin(Symbol('\\\\nabla', commutative=True)), cos(Symbol('\\\\nabla', commutative=True))), Tuple(Symbol('\\\\nabla', commutative=True))), Mul(Integer(-1), Integral(cos(Symbol('\\\\nabla', commutative=True)), Tuple(Symbol('\\\\nabla', commutative=True))))))"]], "VR prompt": "Given \\alpha{(\\iota)} = \\cos{(\\iota)}, then derive \\omicron + \\alpha{(\\iota)} + \\sin{(\\iota)} = \\omicron + \\sin{(\\iota)} + \\cos{(\\iota)}, then obtain - \\alpha{(\\iota)} + \\int (\\omicron + \\alpha{(\\iota)} + \\sin{(\\iota)}) d\\iota - \\int \\cos{(\\iota)} d\\iota = - \\alpha{(\\iota)} + \\int (\\omicron + \\sin{(\\iota)} + \\cos{(\\iota)}) d\\iota - \\int \\cos{(\\iota)} d\\iota", "VR derivation": "\\alpha{(\\iota)} = \\cos{(\\iota)} and \\alpha{(\\iota)} + \\int \\cos{(\\iota)} d\\iota = \\cos{(\\iota)} + \\int \\cos{(\\iota)} d\\iota and \\omicron + \\alpha{(\\iota)} + \\sin{(\\iota)} = \\omicron + \\sin{(\\iota)} + \\cos{(\\iota)} and \\int (\\omicron + \\alpha{(\\iota)} + \\sin{(\\iota)}) d\\iota = \\int (\\omicron + \\sin{(\\iota)} + \\cos{(\\iota)}) d\\iota and - \\alpha{(\\iota)} + \\int (\\omicron + \\alpha{(\\iota)} + \\sin{(\\iota)}) d\\iota - \\int \\cos{(\\iota)} d\\iota = - \\alpha{(\\iota)} + \\int (\\omicron + \\sin{(\\iota)} + \\cos{(\\iota)}) d\\iota - \\int \\cos{(\\iota)} d\\iota", "VR srepr_derivation": [["premise", "Equality(Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), cos(Symbol('\\\\iota', commutative=True)))"], [["add", 1, "Integral(cos(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True)))"], "Equality(Add(Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), Integral(cos(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True)))), Add(cos(Symbol('\\\\iota', commutative=True)), Integral(cos(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True)))))"], [["evaluate_integrals", 2], "Equality(Add(Symbol('\\\\omicron', commutative=True), Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), sin(Symbol('\\\\iota', commutative=True))), Add(Symbol('\\\\omicron', commutative=True), sin(Symbol('\\\\iota', commutative=True)), cos(Symbol('\\\\iota', commutative=True))))"], [["integrate", 3, "Symbol('\\\\iota', commutative=True)"], "Equality(Integral(Add(Symbol('\\\\omicron', commutative=True), Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), sin(Symbol('\\\\iota', commutative=True))), Tuple(Symbol('\\\\iota', commutative=True))), Integral(Add(Symbol('\\\\omicron', commutative=True), sin(Symbol('\\\\iota', commutative=True)), cos(Symbol('\\\\iota', commutative=True))), Tuple(Symbol('\\\\iota', commutative=True))))"], [["minus", 4, "Add(Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), Integral(cos(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True))))"], "Equality(Add(Mul(Integer(-1), Function('\\\\alpha')(Symbol('\\\\iota', commutative=True))), Integral(Add(Symbol('\\\\omicron', commutative=True), Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), sin(Symbol('\\\\iota', commutative=True))), Tuple(Symbol('\\\\iota', commutative=True))), Mul(Integer(-1), Integral(cos(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True))))), Add(Mul(Integer(-1), Function('\\\\alpha')(Symbol('\\\\iota', commutative=True))), Integral(Add(Symbol('\\\\omicron', commutative=True), sin(Symbol('\\\\iota', commutative=True)), cos(Symbol('\\\\iota', commutative=True))), Tuple(Symbol('\\\\iota', commutative=True))), Mul(Integer(-1), Integral(cos(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True))))))"]], "static_flan-t5-large": "( \\ nabla) } = \\ cos { ( \\ nabla) } and \\ int G { ( \\ nabla) } d \\ nabla = \\ int \\ cos { ( \\ nabla) } d \\ nabla and \\ varphi + G { ( \\ nabla) } + \\ sin { ( \\ nabla) } = \\ varphi + \\ sin { ( \\ nabla) } + \\ cos { ( \\ nabla) } and \\ varphi + G { ( \\ nabla) } + \\ sin { ( \\ nabla) } = \\ varphi + \\ sin { ( \\ nabla) } + \\ cos { ( \\ nabla) } and \\ int ( \\ varphi + G { ( \\ nabla) } + \\ sin { ( \\ nabla) } ) d \\ nabla = \\ int ( \\ varphi + \\ sin { ( \\ nabla) } + \\ cos { ( \\ nabla) } ) d \\ nabla and - G { ( \\ nabla) } + \\ int ( \\ varphi + G { ( \\ nabla) } + \\ sin { ( \\ nabla) } ) d \\ nabla - \\ int \\ cos { ( \\ nabla) } d \\ nabla = - G { ( \\ nabla) } + \\ int ( \\ varphi + \\ sin { ( \\ nabla) } + \\ cos { ( \\ nabla) } ) d \\ nabla - \\ int \\ cos { ( \\ nabla) } d \\ nabla", "VR_flan-t5-large": "alpha { ( \\ iota) } = \\ cos { ( \\ iota) } and \\ int \\ alpha { ( \\ iota) } d \\ iota = \\ int \\ cos { ( \\ iota) } d \\ iota and \\ frac { d } { d \\ iota } \\ int \\ alpha { ( \\ iota) } d \\ iota = \\ frac { d } { d \\ iota } \\ int \\ cos { ( \\ iota) } d \\ iota and \\ omicron + \\ alpha { ( \\ iota) } + \\ sin { ( \\ iota) } = \\ omicron + \\ sin { ( \\ iota) } + \\ cos { ( \\ iota) } and \\ int ( \\ omicron + \\ alpha { ( \\ iota) } + \\ sin { ( \\ iota) } ) d \\ iota = \\ int ( \\ omicron + \\ sin { ( \\ iota) } + \\ cos { ( \\ iota) } ) d \\ iota and - \\ alpha { ( \\ iota) } + \\ int ( \\ omicron + \\ alpha { ( \\ iota) } + \\ sin { ( \\ iota) } ) d \\ iota - \\ int \\ cos { ( \\ iota) } d \\ iota = - \\ alpha { ( \\ iota) } + \\ int ( \\ omicron + \\ sin { ( \\ iota) } + \\ cos { ( \\ iota) } ) d \\ iota - \\ int \\ cos { ( \\ iota) } d \\ iota", "EE_flan-t5-large": "cos { ( \\ nabla) } = G { ( \\ nabla) } and \\ int \\ cos { ( \\ nabla) } d \\ nabla = \\ int G { ( \\ nabla) } d \\ nabla and \\ varphi + \\ sin { ( \\ nabla) } + \\ cos { ( \\ nabla) } = \\ varphi + G { ( \\ nabla) } + \\ sin { ( \\ nabla) } and \\ varphi + \\ sin { ( \\ nabla) } + \\ cos { ( \\ nabla) } = \\ varphi + G { ( \\ nabla) } + \\ sin { ( \\ nabla) } and \\ int ( \\ varphi + \\ sin { ( \\ nabla) } + \\ cos { ( \\ nabla) } ) d \\ nabla = \\ int ( \\ varphi + G { ( \\ nabla) } + \\ sin { ( \\ nabla) } ) d \\ nabla and - G { ( \\ nabla) } + \\ int ( \\ varphi + \\ sin { ( \\ nabla) } + \\ cos { ( \\ nabla) } ) d \\ nabla - \\ int \\ cos { ( \\ nabla) } d \\ nabla = - G { ( \\ nabla) } + \\ int ( \\ varphi + G { ( \\ nabla) } + \\ sin { ( \\ nabla) } ) d \\ nabla - \\ int \\ cos { ( \\ nabla) } d \\ nabla", "AG_flan-t5-large": "{ ( \\ nabla) } = \\ cos { ( \\ nabla) } and G { ( \\ nabla) } + \\ sin { ( \\ nabla) } = 2 \\ cos { ( \\ nabla) } and \\ frac { d } { d \\ nabla } (G { ( \\ nabla) } + \\ sin { ( \\ nabla) } ) = \\ frac { d } { d \\ nabla } 2 \\ cos { ( \\ nabla) } and \\ int \\ frac { d } { d \\ nabla } (G { ( \\ nabla) } + \\ sin { ( \\ nabla) } ) d \\ nabla = \\ int \\ frac { d } { d \\ nabla } 2 \\ cos { ( \\ nabla) } ) d \\ nabla and \\ varphi + G { ( \\ nabla) } + \\ sin { ( \\ nabla) } = \\ varphi + \\ sin { ( \\ nabla) } + \\ cos { ( \\ nabla) } and \\ frac { \\ int ( \\ varphi + G { ( \\ nabla) } + \\ sin { ( \\ nabla) } ) d \\ nabla } { \\ varphi + G { ( \\ nabla) } + \\ sin { ( \\ nabla) } } = \\ frac { \\ int ( \\ varphi + \\ sin { ( \\ nabla) } + \\ cos { ( \\ nabla) } ) d \\ nabla } { \\ varphi + G { ( \\ nabla) } + \\ sin { ( \\ nabla) } }", "SR_flan-t5-large": "{ ( \\ nabla) } = \\ cos { ( \\ nabla) } and G { ( \\ nabla) } + \\ sin { ( \\ nabla) } = \\ sin { ( \\ nabla) } + \\ cos { ( \\ nabla) } and \\ int (G { ( \\ nabla) } + \\ sin { ( \\ nabla) } ) d \\ nabla = \\ int ( \\ sin { ( \\ nabla) } + \\ cos { ( \\ nabla) } ) d \\ nabla and \\ int ( \\ varphi + G { ( \\ nabla) } + \\ sin { ( \\ nabla) } ) d \\ nabla - \\ int \\ cos { ( \\ nabla) } d \\ nabla = \\ int ( \\ varphi + \\ sin { ( \\ nabla) } + \\ cos { ( \\ nabla) } ) d \\ nabla - \\ int \\ cos { ( \\ nabla) } d \\ nabla and - G { ( \\ nabla) } + \\ int ( \\ varphi + G { ( \\ nabla) } + \\ sin { ( \\ nabla) } ) d \\ nabla - \\ int \\ cos { ( \\ nabla) } d \\ nabla = - G { ( \\ nabla) } + \\ int ( \\ varphi + \\ sin { ( \\ nabla) } + \\ cos { ( \\ nabla) } ) d \\ nabla - \\ int \\ cos { ( \\ nabla) } d \\ nabla", "static_rouge": 0.9125, "static_bleu": 0.8997710762344316, "static_bleurt": 0.6928314566612244, "static_gleu": 0.9, "VR_rouge": 0.036760355029585856, "EE_rouge": 0.018090062111801197, "AG_rouge": 0.15176380368098163, "SR_rouge": 0.018090062111801197, "VR_rouge_abs": 0.007792207792207788, "EE_rouge_abs": -0.02099696710475152, "AG_rouge_abs": 0.1271929824561404, "SR_rouge_abs": 0.12574850299401186, "VR_bleu": 0.027300876529712248, "EE_bleu": 0.005951723714859525, "AG_bleu": 0.10063282737344514, "SR_bleu": 0.023413884475132818, "VR_bleu_abs": 0.07101744275178079, "EE_bleu_abs": -0.0032771369625903546, "AG_bleu_abs": 0.1166694205008989, "SR_bleu_abs": 0.09018033996868924, "VR_bleurt": -0.12177276611328125, "EE_bleurt": -0.04735296964645386, "AG_bleurt": 0.1477411389350891, "SR_bleurt": 0.0933040976524353, "VR_bleurt_abs": 0.00681786984205246, "EE_bleurt_abs": -0.039460182189941406, "AG_bleurt_abs": 0.24818873405456543, "SR_bleurt_abs": 0.19297778606414795, "VR_gleu": 0.027350427350427364, "EE_gleu": 0.005924596050269293, "AG_gleu": 0.09966159052453472, "SR_gleu": 0.023445825932504438, "VR_gleu_abs": 0.06686777275012568, "EE_gleu_abs": -0.003181202557560936, "AG_gleu_abs": 0.11383159419442634, "SR_gleu_abs": 0.08969804618117228, "ratio_VR_rouge": 0.88, "ratio_VR_bleu": 0.8741254645601597, "ratio_VR_bleurt": 0.9014747260345579, "ratio_VR_gleu": 0.8863247863247864, "ratio_EE_rouge": 1.02184819550089, "ratio_EE_bleu": 1.0033361510171037, "ratio_EE_bleurt": 1.052804960427307, "ratio_EE_gleu": 1.003238009746089, "ratio_AG_rouge": 0.8465608465608465, "ratio_AG_bleu": 0.8687465001028899, "ratio_AG_bleurt": 0.6884711811325244, "ratio_AG_gleu": 0.8720469027501702, "ratio_SR_rouge": 0.8742514970059881, "ratio_SR_bleu": 0.9098196600313108, "ratio_SR_bleurt": 0.780411289587457, "ratio_SR_gleu": 0.9103019538188277}, {"prompt": "Given \\nabla{(f^{*},\\pi)} = \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}), then derive f^{*} \\nabla{(f^{*},\\pi)} = f^{*}, then obtain f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}))^{f^{*}} = f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*})^{f^{*}}", "derivation": "\\nabla{(f^{*},\\pi)} = \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) and f^{*} \\nabla{(f^{*},\\pi)} = f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) and f^{*} \\nabla{(f^{*},\\pi)} = f^{*} and (f^{*} \\nabla{(f^{*},\\pi)})^{f^{*}} = (f^{*})^{f^{*}} and f^{*} \\nabla{(f^{*},\\pi)} + (f^{*} \\nabla{(f^{*},\\pi)})^{f^{*}} = f^{*} \\nabla{(f^{*},\\pi)} + (f^{*})^{f^{*}} and f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}))^{f^{*}} = f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*})^{f^{*}}", "srepr_derivation": [["premise", "Equality(Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True)), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1))))"], [["times", 1, "Symbol('f^*', commutative=True)"], "Equality(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 2], "Equality(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Symbol('f^*', commutative=True))"], [["power", 3, "Symbol('f^*', commutative=True)"], "Equality(Pow(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Symbol('f^*', commutative=True)), Pow(Symbol('f^*', commutative=True), Symbol('f^*', commutative=True)))"], [["add", 4, "Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True)))"], "Equality(Add(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Pow(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Symbol('f^*', commutative=True))), Add(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Pow(Symbol('f^*', commutative=True), Symbol('f^*', commutative=True))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Add(Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))), Pow(Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))), Symbol('f^*', commutative=True))), Add(Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))), Pow(Symbol('f^*', commutative=True), Symbol('f^*', commutative=True))))"]], "EE prompt": "Given \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) = \\nabla{(f^{*},\\pi)}, then derive f^{*} = f^{*} \\nabla{(f^{*},\\pi)}, then obtain f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*})^{f^{*}} = f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}))^{f^{*}}", "EE derivation": "\\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) = \\nabla{(f^{*},\\pi)} and f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) = f^{*} \\nabla{(f^{*},\\pi)} and f^{*} = f^{*} \\nabla{(f^{*},\\pi)} and (f^{*})^{f^{*}} = (f^{*} \\nabla{(f^{*},\\pi)})^{f^{*}} and f^{*} \\nabla{(f^{*},\\pi)} + (f^{*})^{f^{*}} = f^{*} \\nabla{(f^{*},\\pi)} + (f^{*} \\nabla{(f^{*},\\pi)})^{f^{*}} and f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*})^{f^{*}} = f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}))^{f^{*}}", "EE srepr_derivation": [["premise", "Equality(Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1))), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True)))"], [["times", 1, "Symbol('f^*', commutative=True)"], "Equality(Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))), Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))))"], [["evaluate_derivatives", 2], "Equality(Symbol('f^*', commutative=True), Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))))"], [["power", 3, "Symbol('f^*', commutative=True)"], "Equality(Pow(Symbol('f^*', commutative=True), Symbol('f^*', commutative=True)), Pow(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Symbol('f^*', commutative=True)))"], [["add", 4, "Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True)))"], "Equality(Add(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Pow(Symbol('f^*', commutative=True), Symbol('f^*', commutative=True))), Add(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Pow(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Symbol('f^*', commutative=True))))"], [["substitute_RHS_for_LHS", 5, 2], "Equality(Add(Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))), Pow(Symbol('f^*', commutative=True), Symbol('f^*', commutative=True))), Add(Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))), Pow(Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))), Symbol('f^*', commutative=True))))"]], "AG prompt": "Given \\nabla{(f^{*},\\pi)} = \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}), then derive f^{*} \\nabla{(f^{*},\\pi)} = f^{*}, then obtain f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}))^{f^{*}} = f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*})^{f^{*}}", "AG derivation": "\\nabla{(f^{*},\\pi)} = \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) and f^{*} \\nabla{(f^{*},\\pi)} = f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) and f^{*} \\nabla{(f^{*},\\pi)} = f^{*} and (f^{*} \\nabla{(f^{*},\\pi)})^{f^{*}} = (f^{*})^{f^{*}} and f^{*} \\nabla{(f^{*},\\pi)} + (f^{*} \\nabla{(f^{*},\\pi)})^{f^{*}} = f^{*} \\nabla{(f^{*},\\pi)} + (f^{*})^{f^{*}} and f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}))^{f^{*}} = f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*})^{f^{*}}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True)), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1))))"], [["times", 1, "Symbol('f^*', commutative=True)"], "Equality(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 2], "Equality(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Symbol('f^*', commutative=True))"], [["power", 3, "Symbol('f^*', commutative=True)"], "Equality(Pow(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Symbol('f^*', commutative=True)), Pow(Symbol('f^*', commutative=True), Symbol('f^*', commutative=True)))"], [["add", 4, "Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True)))"], "Equality(Add(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Pow(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Symbol('f^*', commutative=True))), Add(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Pow(Symbol('f^*', commutative=True), Symbol('f^*', commutative=True))))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Add(Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))), Pow(Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))), Symbol('f^*', commutative=True))), Add(Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))), Pow(Symbol('f^*', commutative=True), Symbol('f^*', commutative=True))))"]], "SR prompt": "Given \\nabla{(f^{*},\\pi)} = \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}), then obtain f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}))^{f^{*}} = f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*})^{f^{*}}", "SR derivation": "\\nabla{(f^{*},\\pi)} = \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) and f^{*} \\nabla{(f^{*},\\pi)} = f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) and f^{*} \\nabla{(f^{*},\\pi)} = f^{*} and (f^{*} \\nabla{(f^{*},\\pi)})^{f^{*}} = (f^{*})^{f^{*}} and f^{*} \\nabla{(f^{*},\\pi)} + (f^{*} \\nabla{(f^{*},\\pi)})^{f^{*}} = f^{*} \\nabla{(f^{*},\\pi)} + (f^{*})^{f^{*}} and f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}))^{f^{*}} = f^{*} \\frac{\\partial}{\\partial f^{*}} (\\pi + f^{*}) + (f^{*})^{f^{*}}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True)), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1))))"], [["times", 1, "Symbol('f^*', commutative=True)"], "Equality(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 2], "Equality(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Symbol('f^*', commutative=True))"], [["power", 3, "Symbol('f^*', commutative=True)"], "Equality(Pow(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Symbol('f^*', commutative=True)), Pow(Symbol('f^*', commutative=True), Symbol('f^*', commutative=True)))"], [["add", 4, "Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True)))"], "Equality(Add(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Pow(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Symbol('f^*', commutative=True))), Add(Mul(Symbol('f^*', commutative=True), Function('\\\\nabla')(Symbol('f^*', commutative=True), Symbol('\\\\pi', commutative=True))), Pow(Symbol('f^*', commutative=True), Symbol('f^*', commutative=True))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Add(Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))), Pow(Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))), Symbol('f^*', commutative=True))), Add(Mul(Symbol('f^*', commutative=True), Derivative(Add(Symbol('\\\\pi', commutative=True), Symbol('f^*', commutative=True)), Tuple(Symbol('f^*', commutative=True), Integer(1)))), Pow(Symbol('f^*', commutative=True), Symbol('f^*', commutative=True))))"]], "VR prompt": "Given \\omicron{(\\xi,\\zeta)} = \\frac{\\partial}{\\partial \\zeta} (\\xi + \\zeta), then derive \\zeta \\omicron{(\\xi,\\zeta)} = \\zeta, then obtain \\zeta \\frac{\\partial}{\\partial \\zeta} (\\xi + \\zeta) + (\\zeta \\frac{\\partial}{\\partial \\zeta} (\\xi + \\zeta))^{\\zeta} = \\zeta \\frac{\\partial}{\\partial \\zeta} (\\xi + \\zeta) + \\zeta^{\\zeta}", "VR derivation": "\\omicron{(\\xi,\\zeta)} = \\frac{\\partial}{\\partial \\zeta} (\\xi + \\zeta) and \\zeta \\omicron{(\\xi,\\zeta)} = \\zeta \\frac{\\partial}{\\partial \\zeta} (\\xi + \\zeta) and \\zeta \\omicron{(\\xi,\\zeta)} = \\zeta and (\\zeta \\omicron{(\\xi,\\zeta)})^{\\zeta} = \\zeta^{\\zeta} and \\zeta \\omicron{(\\xi,\\zeta)} + (\\zeta \\omicron{(\\xi,\\zeta)})^{\\zeta} = \\zeta \\omicron{(\\xi,\\zeta)} + \\zeta^{\\zeta} and \\zeta \\frac{\\partial}{\\partial \\zeta} (\\xi + \\zeta) + (\\zeta \\frac{\\partial}{\\partial \\zeta} (\\xi + \\zeta))^{\\zeta} = \\zeta \\frac{\\partial}{\\partial \\zeta} (\\xi + \\zeta) + \\zeta^{\\zeta}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True)), Derivative(Add(Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))))"], [["times", 1, "Symbol('\\\\zeta', commutative=True)"], "Equality(Mul(Symbol('\\\\zeta', commutative=True), Function('\\\\omicron')(Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True))), Mul(Symbol('\\\\zeta', commutative=True), Derivative(Add(Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 2], "Equality(Mul(Symbol('\\\\zeta', commutative=True), Function('\\\\omicron')(Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True))), Symbol('\\\\zeta', commutative=True))"], [["power", 3, "Symbol('\\\\zeta', commutative=True)"], "Equality(Pow(Mul(Symbol('\\\\zeta', commutative=True), Function('\\\\omicron')(Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True))), Symbol('\\\\zeta', commutative=True)), Pow(Symbol('\\\\zeta', commutative=True), Symbol('\\\\zeta', commutative=True)))"], [["add", 4, "Mul(Symbol('\\\\zeta', commutative=True), Function('\\\\omicron')(Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True)))"], "Equality(Add(Mul(Symbol('\\\\zeta', commutative=True), Function('\\\\omicron')(Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True))), Pow(Mul(Symbol('\\\\zeta', commutative=True), Function('\\\\omicron')(Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True))), Symbol('\\\\zeta', commutative=True))), Add(Mul(Symbol('\\\\zeta', commutative=True), Function('\\\\omicron')(Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True))), Pow(Symbol('\\\\zeta', commutative=True), Symbol('\\\\zeta', commutative=True))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Add(Mul(Symbol('\\\\zeta', commutative=True), Derivative(Add(Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1)))), Pow(Mul(Symbol('\\\\zeta', commutative=True), Derivative(Add(Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1)))), Symbol('\\\\zeta', commutative=True))), Add(Mul(Symbol('\\\\zeta', commutative=True), Derivative(Add(Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1)))), Pow(Symbol('\\\\zeta', commutative=True), Symbol('\\\\zeta', commutative=True))))"]], "static_flan-t5-large": "nabla { (f ^ { * }, \\ pi) } = \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) and f ^ { * } \\ nabla { (f ^ { * }, \\ pi) } = f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) and f ^ { * } \\ nabla { (f ^ { * }, \\ pi) } = f ^ { * } and f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) = f ^ { * } and f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) = f ^ { * } and f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) + (f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } )) ^ { f ^ { * } } = f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) + (f ^ { * } ) ^ { f ^ { * } }", "VR_flan-t5-large": "omicron { ( \\ xi, \\ zeta) } = \\ frac { \\ partial } { \\ partial \\ zeta } ( \\ xi + \\ zeta) and \\ zeta \\ omicron { ( \\ xi, \\ zeta) } = \\ zeta \\ frac { \\ partial } { \\ partial \\ zeta } ( \\ xi + \\ zeta) and \\ zeta \\ omicron { ( \\ xi, \\ zeta) } = \\ zeta and \\ zeta \\ frac { \\ partial } { \\ partial \\ zeta } ( \\ xi + \\ zeta) = \\ zeta \\ frac { \\ partial } { \\ partial \\ zeta } ( \\ xi + \\ zeta) and ( \\ zeta \\ frac { \\ partial } { \\ partial \\ zeta } ( \\ xi + \\ zeta)) ^ { \\ zeta } = ( \\ zeta \\ frac { \\ partial } { \\ partial \\ zeta } ( \\ xi + \\ zeta)) ^ { \\ zeta } and \\ zeta \\ frac { \\ partial } { \\ partial \\ zeta } ( \\ xi + \\ zeta) + ( \\ zeta \\ frac { \\ partial } { \\ partial \\ zeta } ( \\ xi + \\ zeta)) ^ { \\ zeta } = \\ zeta \\ frac { \\ partial } { \\ partial \\ zeta } ( \\ xi + \\ zeta) + \\ zeta ^ { \\ zeta }", "EE_flan-t5-large": "frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) = \\ nabla { (f ^ { * }, \\ pi) } and f ^ { * } = f ^ { * } \\ nabla { (f ^ { * }, \\ pi) } and \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) = f ^ { * } \\ nabla { (f ^ { * }, \\ pi) } and f ^ { * } = f ^ { * } \\ nabla { (f ^ { * }, \\ pi) } and f ^ { * } = f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) and f ^ { * } = f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) and f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) = f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) and f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) + (f ^ { * } ) ^ { f ^ { * } } = f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) + (f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } )) ^ { f ^ { * } }", "AG_flan-t5-large": "nabla { (f ^ { * }, \\ pi) } = \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) and f ^ { * } \\ nabla { (f ^ { * }, \\ pi) } = f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) and f ^ { * } \\ nabla { (f ^ { * }, \\ pi) } = f ^ { * } and f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) = f ^ { * } and f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) = f ^ { * } and f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) + (f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } )) ^ { f ^ { * } } = f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) + (f ^ { * } ) ^ { f ^ { * } }", "SR_flan-t5-large": "nabla { (f ^ { * }, \\ pi) } = \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) and \\ nabla ^ { f ^ { * } } { (f ^ { * }, \\ pi) } = ( \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } )) ^ { f ^ { * } } and f ^ { * } \\ nabla ^ { f ^ { * } } { (f ^ { * }, \\ pi) } = f ^ { * } ( \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } )) ^ { f ^ { * } } and f ^ { * } \\ nabla ^ { f ^ { * } } { (f ^ { * }, \\ pi) } = f ^ { * } (f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } )) ^ { f ^ { * } } and f ^ { * } \\ nabla { (f ^ { * }, \\ pi) } = f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) and f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) + (f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } )) ^ { f ^ { * } } = f ^ { * } \\ frac { \\ partial } { \\ partial f ^ { * } } ( \\ pi + f ^ { * } ) + (f ^ { * } ) ^ { f ^ { * } }", "static_rouge": 0.8472222222222223, "static_bleu": 0.7394119502167692, "static_bleurt": 0.6959697008132935, "static_gleu": 0.752387448840382, "VR_rouge": 0.049753867791842654, "EE_rouge": 0.005758807588076009, "AG_rouge": 0.0, "SR_rouge": -0.009920634920634885, "VR_rouge_abs": -0.05087719298245613, "EE_rouge_abs": 0.08455696202531637, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.1225806451612903, "VR_bleu": -0.029966440527128158, "EE_bleu": -0.0638235736732542, "AG_bleu": 0.0, "SR_bleu": -0.05673506709311016, "VR_bleu_abs": -0.06996958792721703, "EE_bleu_abs": 0.2047904114799204, "AG_bleu_abs": 0.0, "SR_bleu_abs": 0.27323159781284767, "VR_bleurt": 0.0644829273223877, "EE_bleurt": -0.030525684356689453, "AG_bleurt": 0.0, "SR_bleurt": -0.06553202867507935, "VR_bleurt_abs": 0.07342342287302017, "EE_bleurt_abs": 0.2341269850730896, "AG_bleurt_abs": 0.0663001537322998, "SR_bleurt_abs": 0.1260952353477478, "VR_gleu": -0.02265981013882401, "EE_gleu": -0.05363047689585354, "AG_gleu": 0.0, "SR_gleu": -0.046147349694416584, "VR_gleu_abs": -0.05377943411084862, "EE_gleu_abs": 0.20480441872367772, "AG_gleu_abs": 0.0, "SR_gleu_abs": 0.2728937728937729, "ratio_VR_rouge": 1.381578947368421, "ratio_VR_bleu": 1.3605255783292396, "ratio_VR_bleurt": 1.7762030991492246, "ratio_VR_gleu": 1.2220863391732508, "ratio_EE_rouge": 0.9080902586681344, "ratio_EE_bleu": 0.7905930619253033, "ratio_EE_bleurt": 0.7193954313021191, "ratio_EE_gleu": 0.7906253292545945, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 1.0, "ratio_AG_bleurt": 0.9257128866635527, "ratio_AG_gleu": 1.0, "ratio_SR_rouge": 0.8774193548387097, "ratio_SR_bleu": 0.7267684021871523, "ratio_SR_bleurt": 0.8587144899047098, "ratio_SR_gleu": 0.7271062271062271}, {"prompt": "Given \\eta^{\\prime}{(\\mathbf{r},F_{x})} = \\frac{F_{x}}{\\mathbf{r}}, then derive \\frac{\\partial}{\\partial \\mathbf{r}} \\eta^{\\prime}{(\\mathbf{r},F_{x})} = - \\frac{F_{x}}{\\mathbf{r}^{2}}, then obtain - F_{x} + \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}} = - F_{x} - \\frac{F_{x}}{\\mathbf{r}^{2}}", "derivation": "\\eta^{\\prime}{(\\mathbf{r},F_{x})} = \\frac{F_{x}}{\\mathbf{r}} and \\frac{\\partial}{\\partial \\mathbf{r}} \\eta^{\\prime}{(\\mathbf{r},F_{x})} = \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}} and \\frac{\\partial}{\\partial \\mathbf{r}} \\eta^{\\prime}{(\\mathbf{r},F_{x})} = - \\frac{F_{x}}{\\mathbf{r}^{2}} and \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}} = - \\frac{F_{x}}{\\mathbf{r}^{2}} and - F_{x} + \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}} = - F_{x} - \\frac{F_{x}}{\\mathbf{r}^{2}}", "srepr_derivation": [["premise", "Equality(Function('\\\\eta^{\\\\prime}')(Symbol('\\\\mathbf{r}', commutative=True), Symbol('F_x', commutative=True)), Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))))"], [["differentiate", 1, "Symbol('\\\\mathbf{r}', commutative=True)"], "Equality(Derivative(Function('\\\\eta^{\\\\prime}')(Symbol('\\\\mathbf{r}', commutative=True), Symbol('F_x', commutative=True)), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))), Derivative(Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\eta^{\\\\prime}')(Symbol('\\\\mathbf{r}', commutative=True), Symbol('F_x', commutative=True)), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))), Mul(Integer(-1), Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-2))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))), Mul(Integer(-1), Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-2))))"], [["minus", 4, "Symbol('F_x', commutative=True)"], "Equality(Add(Mul(Integer(-1), Symbol('F_x', commutative=True)), Derivative(Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1)))), Add(Mul(Integer(-1), Symbol('F_x', commutative=True)), Mul(Integer(-1), Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-2)))))"]], "EE prompt": "Given \\frac{F_{x}}{\\mathbf{r}} = \\eta^{\\prime}{(\\mathbf{r},F_{x})}, then derive - \\frac{F_{x}}{\\mathbf{r}^{2}} = \\frac{\\partial}{\\partial \\mathbf{r}} \\eta^{\\prime}{(\\mathbf{r},F_{x})}, then obtain - F_{x} - \\frac{F_{x}}{\\mathbf{r}^{2}} = - F_{x} + \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}}", "EE derivation": "\\frac{F_{x}}{\\mathbf{r}} = \\eta^{\\prime}{(\\mathbf{r},F_{x})} and \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}} = \\frac{\\partial}{\\partial \\mathbf{r}} \\eta^{\\prime}{(\\mathbf{r},F_{x})} and - \\frac{F_{x}}{\\mathbf{r}^{2}} = \\frac{\\partial}{\\partial \\mathbf{r}} \\eta^{\\prime}{(\\mathbf{r},F_{x})} and - \\frac{F_{x}}{\\mathbf{r}^{2}} = \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}} and - F_{x} - \\frac{F_{x}}{\\mathbf{r}^{2}} = - F_{x} + \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}}", "EE srepr_derivation": [["premise", "Equality(Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))), Function('\\\\eta^{\\\\prime}')(Symbol('\\\\mathbf{r}', commutative=True), Symbol('F_x', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\mathbf{r}', commutative=True)"], "Equality(Derivative(Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))), Derivative(Function('\\\\eta^{\\\\prime}')(Symbol('\\\\mathbf{r}', commutative=True), Symbol('F_x', commutative=True)), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Mul(Integer(-1), Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-2))), Derivative(Function('\\\\eta^{\\\\prime}')(Symbol('\\\\mathbf{r}', commutative=True), Symbol('F_x', commutative=True)), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 3, 2], "Equality(Mul(Integer(-1), Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-2))), Derivative(Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))))"], [["minus", 4, "Symbol('F_x', commutative=True)"], "Equality(Add(Mul(Integer(-1), Symbol('F_x', commutative=True)), Mul(Integer(-1), Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-2)))), Add(Mul(Integer(-1), Symbol('F_x', commutative=True)), Derivative(Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1)))))"]], "AG prompt": "Given \\eta^{\\prime}{(\\mathbf{r},F_{x})} = \\frac{F_{x}}{\\mathbf{r}}, then derive \\frac{\\partial}{\\partial \\mathbf{r}} \\eta^{\\prime}{(\\mathbf{r},F_{x})} = - \\frac{F_{x}}{\\mathbf{r}^{2}}, then obtain - \\frac{F_{x}}{\\mathbf{r}} + \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}} = - \\frac{F_{x}}{\\mathbf{r}} - \\frac{F_{x}}{\\mathbf{r}^{2}}", "AG derivation": "\\eta^{\\prime}{(\\mathbf{r},F_{x})} = \\frac{F_{x}}{\\mathbf{r}} and \\frac{\\partial}{\\partial \\mathbf{r}} \\eta^{\\prime}{(\\mathbf{r},F_{x})} = \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}} and \\frac{\\partial}{\\partial \\mathbf{r}} \\eta^{\\prime}{(\\mathbf{r},F_{x})} = - \\frac{F_{x}}{\\mathbf{r}^{2}} and \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}} = - \\frac{F_{x}}{\\mathbf{r}^{2}} and - \\frac{F_{x}}{\\mathbf{r}} + \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}} = - \\frac{F_{x}}{\\mathbf{r}} - \\frac{F_{x}}{\\mathbf{r}^{2}}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\eta^{\\\\prime}')(Symbol('\\\\mathbf{r}', commutative=True), Symbol('F_x', commutative=True)), Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))))"], [["differentiate", 1, "Symbol('\\\\mathbf{r}', commutative=True)"], "Equality(Derivative(Function('\\\\eta^{\\\\prime}')(Symbol('\\\\mathbf{r}', commutative=True), Symbol('F_x', commutative=True)), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))), Derivative(Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\eta^{\\\\prime}')(Symbol('\\\\mathbf{r}', commutative=True), Symbol('F_x', commutative=True)), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))), Mul(Integer(-1), Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-2))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))), Mul(Integer(-1), Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-2))))"], [["minus", 4, "Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1)))"], "Equality(Add(Mul(Integer(-1), Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))), Derivative(Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1)))), Add(Mul(Integer(-1), Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))), Mul(Integer(-1), Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-2)))))"]], "SR prompt": "Given \\eta^{\\prime}{(\\mathbf{r},F_{x})} = \\frac{F_{x}}{\\mathbf{r}}, then obtain - F_{x} + \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}} = - F_{x} - \\frac{F_{x}}{\\mathbf{r}^{2}}", "SR derivation": "\\eta^{\\prime}{(\\mathbf{r},F_{x})} = \\frac{F_{x}}{\\mathbf{r}} and \\frac{\\partial}{\\partial \\mathbf{r}} \\eta^{\\prime}{(\\mathbf{r},F_{x})} = \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}} and \\frac{\\partial}{\\partial \\mathbf{r}} \\eta^{\\prime}{(\\mathbf{r},F_{x})} = - \\frac{F_{x}}{\\mathbf{r}^{2}} and \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}} = - \\frac{F_{x}}{\\mathbf{r}^{2}} and - F_{x} + \\frac{\\partial}{\\partial \\mathbf{r}} \\frac{F_{x}}{\\mathbf{r}} = - F_{x} - \\frac{F_{x}}{\\mathbf{r}^{2}}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\eta^{\\\\prime}')(Symbol('\\\\mathbf{r}', commutative=True), Symbol('F_x', commutative=True)), Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))))"], [["differentiate", 1, "Symbol('\\\\mathbf{r}', commutative=True)"], "Equality(Derivative(Function('\\\\eta^{\\\\prime}')(Symbol('\\\\mathbf{r}', commutative=True), Symbol('F_x', commutative=True)), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))), Derivative(Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\eta^{\\\\prime}')(Symbol('\\\\mathbf{r}', commutative=True), Symbol('F_x', commutative=True)), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))), Mul(Integer(-1), Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-2))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1))), Mul(Integer(-1), Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-2))))"], [["minus", 4, "Symbol('F_x', commutative=True)"], "Equality(Add(Mul(Integer(-1), Symbol('F_x', commutative=True)), Derivative(Mul(Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-1))), Tuple(Symbol('\\\\mathbf{r}', commutative=True), Integer(1)))), Add(Mul(Integer(-1), Symbol('F_x', commutative=True)), Mul(Integer(-1), Symbol('F_x', commutative=True), Pow(Symbol('\\\\mathbf{r}', commutative=True), Integer(-2)))))"]], "VR prompt": "Given \\zeta{(\\gamma,\\omicron)} = \\frac{\\omicron}{\\gamma}, then derive \\frac{\\partial}{\\partial \\gamma} \\zeta{(\\gamma,\\omicron)} = - \\frac{\\omicron}{\\gamma^{2}}, then obtain - \\omicron + \\frac{\\partial}{\\partial \\gamma} \\frac{\\omicron}{\\gamma} = - \\omicron - \\frac{\\omicron}{\\gamma^{2}}", "VR derivation": "\\zeta{(\\gamma,\\omicron)} = \\frac{\\omicron}{\\gamma} and \\frac{\\partial}{\\partial \\gamma} \\zeta{(\\gamma,\\omicron)} = \\frac{\\partial}{\\partial \\gamma} \\frac{\\omicron}{\\gamma} and \\frac{\\partial}{\\partial \\gamma} \\zeta{(\\gamma,\\omicron)} = - \\frac{\\omicron}{\\gamma^{2}} and \\frac{\\partial}{\\partial \\gamma} \\frac{\\omicron}{\\gamma} = - \\frac{\\omicron}{\\gamma^{2}} and - \\omicron + \\frac{\\partial}{\\partial \\gamma} \\frac{\\omicron}{\\gamma} = - \\omicron - \\frac{\\omicron}{\\gamma^{2}}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\zeta')(Symbol('\\\\gamma', commutative=True), Symbol('\\\\omicron', commutative=True)), Mul(Pow(Symbol('\\\\gamma', commutative=True), Integer(-1)), Symbol('\\\\omicron', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\gamma', commutative=True)"], "Equality(Derivative(Function('\\\\zeta')(Symbol('\\\\gamma', commutative=True), Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True), Integer(1))), Derivative(Mul(Pow(Symbol('\\\\gamma', commutative=True), Integer(-1)), Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\zeta')(Symbol('\\\\gamma', commutative=True), Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True), Integer(1))), Mul(Integer(-1), Pow(Symbol('\\\\gamma', commutative=True), Integer(-2)), Symbol('\\\\omicron', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(Mul(Pow(Symbol('\\\\gamma', commutative=True), Integer(-1)), Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True), Integer(1))), Mul(Integer(-1), Pow(Symbol('\\\\gamma', commutative=True), Integer(-2)), Symbol('\\\\omicron', commutative=True)))"], [["minus", 4, "Symbol('\\\\omicron', commutative=True)"], "Equality(Add(Mul(Integer(-1), Symbol('\\\\omicron', commutative=True)), Derivative(Mul(Pow(Symbol('\\\\gamma', commutative=True), Integer(-1)), Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\gamma', commutative=True), Integer(1)))), Add(Mul(Integer(-1), Symbol('\\\\omicron', commutative=True)), Mul(Integer(-1), Pow(Symbol('\\\\gamma', commutative=True), Integer(-2)), Symbol('\\\\omicron', commutative=True))))"]], "static_flan-t5-large": "eta ^ { \\ prime } { ( \\ mathbf { r },F_ { x } ) } = \\ frac { F_ { x } } { \\ mathbf { r } } and \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ eta ^ { \\ prime } { ( \\ mathbf { r },F_ { x } ) } = \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ frac { F_ { x } } { \\ mathbf { r } } and \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ eta ^ { \\ prime } { ( \\ mathbf { r },F_ { x } ) } = - \\ frac { F_ { x } } { \\ mathbf { r } ^ { 2 } } and \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ frac { F_ { x } } { \\ mathbf { r } } = - \\ frac { F_ { x } } { \\ mathbf { r } ^ { 2 } } and - F_ { x } + \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ frac { F_ { x } } { \\ mathbf { r } } = - F_ { x } - \\ frac { F_ { x } } { \\ mathbf { r } ^ { 2 } }", "VR_flan-t5-large": "zeta { ( \\ gamma, \\ omicron) } = \\ frac { \\ omicron } { \\ gamma } and \\ frac { \\ partial } { \\ partial \\ gamma } \\ zeta { ( \\ gamma, \\ omicron) } = \\ frac { \\ partial } { \\ partial \\ gamma } \\ frac { \\ omicron } { \\ gamma } and \\ frac { \\ partial } { \\ partial \\ gamma } \\ zeta { ( \\ gamma, \\ omicron) } = - \\ frac { \\ omicron } { \\ gamma ^ { 2 } } and \\ frac { \\ partial } { \\ partial \\ gamma } \\ frac { \\ omicron } { \\ gamma } = - \\ frac { \\ omicron } { \\ gamma ^ { 2 } } and - \\ omicron + \\ frac { \\ partial } { \\ partial \\ gamma } \\ frac { \\ omicron } { \\ gamma } = - \\ omicron - \\ frac { \\ omicron } { \\ gamma ^ { 2 } }", "EE_flan-t5-large": "frac { F_ { x } } { \\ mathbf { r } } = \\ eta ^ { \\ prime } { ( \\ mathbf { r },F_ { x } ) } and - \\ frac { F_ { x } } { \\ mathbf { r } } = - \\ frac { F_ { x } } { \\ mathbf { r } } + \\ eta ^ { \\ prime } { ( \\ mathbf { r },F_ { x } ) } and \\ frac { \\ partial } { \\ partial \\ mathbf { r } } - \\ frac { F_ { x } } { \\ mathbf { r } } = \\ frac { \\ partial } { \\ partial \\ mathbf { r } } (- \\ frac { F_ { x } } { \\ mathbf { r } } + \\ eta ^ { \\ prime } { ( \\ mathbf { r },F_ { x } ) } ) and - \\ frac { F_ { x } } { \\ mathbf { r } ^ { 2 } } = \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ eta ^ { \\ prime } { ( \\ mathbf { r },F_ { x } ) } and - \\ frac { F_ { x } } { \\ mathbf { r } ^ { 2 } } = \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ frac { F_ { x } } { \\ mathbf { r } } and - F_ { x } - \\ frac { F_ { x } } { \\ mathbf { r } ^ { 2 } } = - F_ { x } + \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ frac { F_ { x } } { \\ mathbf { r } }", "AG_flan-t5-large": "eta ^ { \\ prime } { ( \\ mathbf { r },F_ { x } ) } = \\ frac { F_ { x } } { \\ mathbf { r } } and \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ eta ^ { \\ prime } { ( \\ mathbf { r },F_ { x } ) } = \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ frac { F_ { x } } { \\ mathbf { r } } and \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ eta ^ { \\ prime } { ( \\ mathbf { r },F_ { x } ) } = - \\ frac { F_ { x } } { \\ mathbf { r } ^ { 2 } } and \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ frac { F_ { x } } { \\ mathbf { r } } = - \\ frac { F_ { x } } { \\ mathbf { r } } and - \\ frac { F_ { x } } { \\ mathbf { r } } + \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ frac { F_ { x } } { \\ mathbf { r } } = - \\ frac { F_ { x } } { \\ mathbf { r } } - \\ frac { F_ { x } } { \\ mathbf { r } ^ { 2 } }", "SR_flan-t5-large": "eta ^ { \\ prime } { ( \\ mathbf { r },F_ { x } ) } = \\ frac { F_ { x } } { \\ mathbf { r } } and \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ eta ^ { \\ prime } { ( \\ mathbf { r },F_ { x } ) } = \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ frac { F_ { x } } { \\ mathbf { r } } and - F_ { x } + \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ eta ^ { \\ prime } { ( \\ mathbf { r },F_ { x } ) } = - F_ { x } + \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ frac { F_ { x } } { \\ mathbf { r } } and - F_ { x } + \\ frac { \\ partial } { \\ partial \\ mathbf { r } } \\ frac { F_ { x } } { \\ mathbf { r } } = - F_ { x } - \\ frac { F_ { x } } { \\ mathbf { r } ^ { 2 } }", "static_rouge": 1.0, "static_bleu": 0.9965457720070073, "static_bleurt": 0.7993015050888062, "static_gleu": 0.9965337954939342, "VR_rouge": 0.0, "EE_rouge": 0.11111111111111105, "AG_rouge": 0.016042780748663055, "SR_rouge": 0.10179640718562877, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.09217171717171724, "AG_rouge_abs": 0.01699957501062488, "SR_rouge_abs": 0.10179640718562877, "VR_bleu": 0.001713719131505198, "EE_bleu": 0.21972504464994191, "AG_bleu": 0.015128773455284295, "SR_bleu": 0.14062421227367883, "VR_bleu_abs": -0.0003436780118495353, "EE_bleu_abs": 0.2145027655525209, "AG_bleu_abs": 0.002314975924570306, "SR_bleu_abs": 0.1407673358396515, "VR_bleurt": -0.010772705078125, "EE_bleurt": 0.05919384956359863, "AG_bleurt": 0.02137017250061035, "SR_bleurt": 0.13937735557556152, "VR_bleurt_abs": -0.03004935383796692, "EE_bleurt_abs": 0.07436501979827881, "AG_bleurt_abs": -0.010487556457519531, "SR_bleurt_abs": 0.16079169511795044, "VR_gleu": 0.001728600688739368, "EE_gleu": 0.2196630471946145, "AG_gleu": 0.015052314012452661, "SR_gleu": 0.13518197573656854, "VR_gleu_abs": -0.0004626629492879286, "EE_gleu_abs": 0.21450382579374905, "AG_gleu_abs": 0.0022151590144189326, "SR_gleu_abs": 0.13565217391304352, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 1.0010269544561625, "ratio_VR_bleurt": 0.8435893949567539, "ratio_VR_gleu": 1.001207948062168, "ratio_EE_rouge": 0.8998628257887517, "ratio_EE_bleu": 0.7778702704705286, "ratio_EE_bleurt": 0.8879374178822578, "ratio_EE_gleu": 0.7779933498062902, "ratio_AG_rouge": 0.9815837937384897, "ratio_AG_bleu": 0.9974686448864393, "ratio_AG_bleurt": 1.0130595308924348, "ratio_AG_gleu": 0.9975781448099399, "ratio_SR_rouge": 0.8982035928143712, "ratio_SR_bleu": 0.8592326641603485, "ratio_SR_bleurt": 0.803191455988257, "ratio_SR_gleu": 0.8643478260869565}, {"prompt": "Given u{(\\lambda)} = \\sin{(\\lambda)}, then derive \\int u{(\\lambda)} d\\lambda = n - \\cos{(\\lambda)}, then obtain - \\frac{\\int \\sin{(\\lambda)} d\\lambda}{\\cos{(\\lambda)}} = - \\frac{n - \\cos{(\\lambda)}}{\\cos{(\\lambda)}}", "derivation": "u{(\\lambda)} = \\sin{(\\lambda)} and \\int u{(\\lambda)} d\\lambda = \\int \\sin{(\\lambda)} d\\lambda and \\int u{(\\lambda)} d\\lambda = n - \\cos{(\\lambda)} and \\int \\sin{(\\lambda)} d\\lambda = n - \\cos{(\\lambda)} and - \\frac{\\int \\sin{(\\lambda)} d\\lambda}{\\cos{(\\lambda)}} = - \\frac{n - \\cos{(\\lambda)}}{\\cos{(\\lambda)}}", "srepr_derivation": [["premise", "Equality(Function('u')(Symbol('\\\\lambda', commutative=True)), sin(Symbol('\\\\lambda', commutative=True)))"], [["integrate", 1, "Symbol('\\\\lambda', commutative=True)"], "Equality(Integral(Function('u')(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))), Integral(sin(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('u')(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))), Add(Symbol('n', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\lambda', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Integral(sin(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))), Add(Symbol('n', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\lambda', commutative=True)))))"], [["divide", 4, "Mul(Integer(-1), cos(Symbol('\\\\lambda', commutative=True)))"], "Equality(Mul(Integer(-1), Pow(cos(Symbol('\\\\lambda', commutative=True)), Integer(-1)), Integral(sin(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True)))), Mul(Integer(-1), Add(Symbol('n', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\lambda', commutative=True)))), Pow(cos(Symbol('\\\\lambda', commutative=True)), Integer(-1))))"]], "EE prompt": "Given \\sin{(\\lambda)} = u{(\\lambda)}, then derive n - \\cos{(\\lambda)} = \\int u{(\\lambda)} d\\lambda, then obtain - \\frac{n - \\cos{(\\lambda)}}{\\cos{(\\lambda)}} = - \\frac{\\int \\sin{(\\lambda)} d\\lambda}{\\cos{(\\lambda)}}", "EE derivation": "\\sin{(\\lambda)} = u{(\\lambda)} and \\int \\sin{(\\lambda)} d\\lambda = \\int u{(\\lambda)} d\\lambda and n - \\cos{(\\lambda)} = \\int u{(\\lambda)} d\\lambda and n - \\cos{(\\lambda)} = \\int \\sin{(\\lambda)} d\\lambda and - \\frac{n - \\cos{(\\lambda)}}{\\cos{(\\lambda)}} = - \\frac{\\int \\sin{(\\lambda)} d\\lambda}{\\cos{(\\lambda)}}", "EE srepr_derivation": [["premise", "Equality(sin(Symbol('\\\\lambda', commutative=True)), Function('u')(Symbol('\\\\lambda', commutative=True)))"], [["integrate", 1, "Symbol('\\\\lambda', commutative=True)"], "Equality(Integral(sin(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))), Integral(Function('u')(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Add(Symbol('n', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\lambda', commutative=True)))), Integral(Function('u')(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))))"], [["substitute_RHS_for_LHS", 3, 2], "Equality(Add(Symbol('n', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\lambda', commutative=True)))), Integral(sin(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))))"], [["divide", 4, "Mul(Integer(-1), cos(Symbol('\\\\lambda', commutative=True)))"], "Equality(Mul(Integer(-1), Add(Symbol('n', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\lambda', commutative=True)))), Pow(cos(Symbol('\\\\lambda', commutative=True)), Integer(-1))), Mul(Integer(-1), Pow(cos(Symbol('\\\\lambda', commutative=True)), Integer(-1)), Integral(sin(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True)))))"]], "AG prompt": "Given u{(\\lambda)} = \\sin{(\\lambda)}, then derive \\int u{(\\lambda)} d\\lambda = n - \\cos{(\\lambda)}, then obtain \\iint \\sin{(\\lambda)} d\\lambda dn = \\int (n - \\cos{(\\lambda)}) dn", "AG derivation": "u{(\\lambda)} = \\sin{(\\lambda)} and \\int u{(\\lambda)} d\\lambda = \\int \\sin{(\\lambda)} d\\lambda and \\int u{(\\lambda)} d\\lambda = n - \\cos{(\\lambda)} and \\int \\sin{(\\lambda)} d\\lambda = n - \\cos{(\\lambda)} and \\iint \\sin{(\\lambda)} d\\lambda dn = \\int (n - \\cos{(\\lambda)}) dn", "AG srepr_derivation": [["premise", "Equality(Function('u')(Symbol('\\\\lambda', commutative=True)), sin(Symbol('\\\\lambda', commutative=True)))"], [["integrate", 1, "Symbol('\\\\lambda', commutative=True)"], "Equality(Integral(Function('u')(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))), Integral(sin(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('u')(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))), Add(Symbol('n', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\lambda', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Integral(sin(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))), Add(Symbol('n', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\lambda', commutative=True)))))"], [["integrate", 4, "Symbol('n', commutative=True)"], "Equality(Integral(sin(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('n', commutative=True))), Integral(Add(Symbol('n', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\lambda', commutative=True)))), Tuple(Symbol('n', commutative=True))))"]], "SR prompt": "Given u{(\\lambda)} = \\sin{(\\lambda)}, then obtain - \\frac{\\int \\sin{(\\lambda)} d\\lambda}{\\cos{(\\lambda)}} = - \\frac{n - \\cos{(\\lambda)}}{\\cos{(\\lambda)}}", "SR derivation": "u{(\\lambda)} = \\sin{(\\lambda)} and \\int u{(\\lambda)} d\\lambda = \\int \\sin{(\\lambda)} d\\lambda and \\int u{(\\lambda)} d\\lambda = n - \\cos{(\\lambda)} and \\int \\sin{(\\lambda)} d\\lambda = n - \\cos{(\\lambda)} and - \\frac{\\int \\sin{(\\lambda)} d\\lambda}{\\cos{(\\lambda)}} = - \\frac{n - \\cos{(\\lambda)}}{\\cos{(\\lambda)}}", "SR srepr_derivation": [["premise", "Equality(Function('u')(Symbol('\\\\lambda', commutative=True)), sin(Symbol('\\\\lambda', commutative=True)))"], [["integrate", 1, "Symbol('\\\\lambda', commutative=True)"], "Equality(Integral(Function('u')(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))), Integral(sin(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('u')(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))), Add(Symbol('n', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\lambda', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Integral(sin(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True))), Add(Symbol('n', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\lambda', commutative=True)))))"], [["divide", 4, "Mul(Integer(-1), cos(Symbol('\\\\lambda', commutative=True)))"], "Equality(Mul(Integer(-1), Pow(cos(Symbol('\\\\lambda', commutative=True)), Integer(-1)), Integral(sin(Symbol('\\\\lambda', commutative=True)), Tuple(Symbol('\\\\lambda', commutative=True)))), Mul(Integer(-1), Add(Symbol('n', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\lambda', commutative=True)))), Pow(cos(Symbol('\\\\lambda', commutative=True)), Integer(-1))))"]], "VR prompt": "Given \\tau{(\\kappa)} = \\sin{(\\kappa)}, then derive \\int \\tau{(\\kappa)} d\\kappa = \\zeta - \\cos{(\\kappa)}, then obtain - \\frac{\\int \\sin{(\\kappa)} d\\kappa}{\\cos{(\\kappa)}} = - \\frac{\\zeta - \\cos{(\\kappa)}}{\\cos{(\\kappa)}}", "VR derivation": "\\tau{(\\kappa)} = \\sin{(\\kappa)} and \\int \\tau{(\\kappa)} d\\kappa = \\int \\sin{(\\kappa)} d\\kappa and \\int \\tau{(\\kappa)} d\\kappa = \\zeta - \\cos{(\\kappa)} and \\int \\sin{(\\kappa)} d\\kappa = \\zeta - \\cos{(\\kappa)} and - \\frac{\\int \\sin{(\\kappa)} d\\kappa}{\\cos{(\\kappa)}} = - \\frac{\\zeta - \\cos{(\\kappa)}}{\\cos{(\\kappa)}}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\tau')(Symbol('\\\\kappa', commutative=True)), sin(Symbol('\\\\kappa', commutative=True)))"], [["integrate", 1, "Symbol('\\\\kappa', commutative=True)"], "Equality(Integral(Function('\\\\tau')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True))), Integral(sin(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\tau')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True))), Add(Symbol('\\\\zeta', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\kappa', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Integral(sin(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True))), Add(Symbol('\\\\zeta', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\kappa', commutative=True)))))"], [["divide", 4, "Mul(Integer(-1), cos(Symbol('\\\\kappa', commutative=True)))"], "Equality(Mul(Integer(-1), Pow(cos(Symbol('\\\\kappa', commutative=True)), Integer(-1)), Integral(sin(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True)))), Mul(Integer(-1), Add(Symbol('\\\\zeta', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\kappa', commutative=True)))), Pow(cos(Symbol('\\\\kappa', commutative=True)), Integer(-1))))"]], "static_flan-t5-large": "u { ( \\ lambda) } = \\ sin { ( \\ lambda) } and \\ int u { ( \\ lambda) } d \\ lambda = \\ int \\ sin { ( \\ lambda) } d \\ lambda and \\ int u { ( \\ lambda) } d \\ lambda = n - \\ cos { ( \\ lambda) } and - \\ frac { \\ int u { ( \\ lambda) } d \\ lambda } { \\ cos { ( \\ lambda) } } = - \\ frac { n - \\ cos { ( \\ lambda) } } { \\ cos { ( \\ lambda) } } and - \\ frac { \\ int \\ sin { ( \\ lambda) } d \\ lambda } { \\ cos { ( \\ lambda) } } = - \\ frac { n - \\ cos { ( \\ lambda) } } { \\ cos { ( \\ lambda) } }", "VR_flan-t5-large": "tau { ( \\ kappa) } = \\ sin { ( \\ kappa) } and \\ int \\ tau { ( \\ kappa) } d \\ kappa = \\ int \\ sin { ( \\ kappa) } d \\ kappa and \\ int \\ tau { ( \\ kappa) } d \\ kappa = \\ zeta - \\ cos { ( \\ kappa) } and \\ frac { \\ int \\ tau { ( \\ kappa) } d \\ kappa } { \\ cos { ( \\ kappa) } } = \\ frac { \\ zeta - \\ cos { ( \\ kappa) } } { \\ cos { ( \\ kappa) } } and \\ frac { \\ int \\ sin { ( \\ kappa) } d \\ kappa } { \\ cos { ( \\ kappa) } } = \\ frac { \\ zeta - \\ cos { ( \\ kappa) } } { \\ cos { ( \\ kappa) } } and - \\ frac { \\ int \\ sin { ( \\ kappa) } d \\ kappa } { \\ cos { ( \\ kappa) } } = - \\ frac { \\ zeta - \\ cos { ( \\ kappa) } } { \\ cos { ( \\ kappa) } }", "EE_flan-t5-large": "sin { ( \\ lambda) } = u { ( \\ lambda) } and \\ int \\ sin { ( \\ lambda) } d \\ lambda = \\ int u { ( \\ lambda) } d \\ lambda and \\ frac { \\ int \\ sin { ( \\ lambda) } d \\ lambda } { \\ cos { ( \\ lambda) } } = \\ frac { \\ int u { ( \\ lambda) } d \\ lambda } { \\ cos { ( \\ lambda) } } and n - \\ cos { ( \\ lambda) } = \\ int u { ( \\ lambda) } d \\ lambda and n - \\ cos { ( \\ lambda) } = \\ int \\ sin { ( \\ lambda) } d \\ lambda and - n - \\ cos { ( \\ lambda) } = - \\ frac { \\ int \\ sin { ( \\ lambda) } d \\ lambda } { \\ cos { ( \\ lambda) } }", "AG_flan-t5-large": "u { ( \\ lambda) } = \\ sin { ( \\ lambda) } and \\ int u { ( \\ lambda) } d \\ lambda = \\ int \\ sin { ( \\ lambda) } d \\ lambda and \\ int u { ( \\ lambda) } d \\ lambda = n - \\ cos { ( \\ lambda) } and \\ int \\ sin { ( \\ lambda) } d \\ lambda = n - \\ cos { ( \\ lambda) } and \\ iint \\ sin { ( \\ lambda) } d \\ lambda dn = \\ int (n - \\ cos { ( \\ lambda) } ) dn", "SR_flan-t5-large": "u { ( \\ lambda) } = \\ sin { ( \\ lambda) } and \\ int u { ( \\ lambda) } d \\ lambda = \\ int \\ sin { ( \\ lambda) } d \\ lambda and - \\ frac { \\ int u { ( \\ lambda) } d \\ lambda } { \\ cos { ( \\ lambda) } } = - \\ frac { \\ int \\ sin { ( \\ lambda) } d \\ lambda } { \\ cos { ( \\ lambda) } } and - \\ frac { \\ int u { ( \\ lambda) } d \\ lambda } { \\ cos { ( \\ lambda) } } = - \\ frac { n - \\ cos { ( \\ lambda) } } { \\ cos { ( \\ lambda) } } and - \\ frac { \\ int \\ sin { ( \\ lambda) } d \\ lambda } { \\ cos { ( \\ lambda) } } = - \\ frac { n - \\ cos { ( \\ lambda) } } { \\ cos { ( \\ lambda) } }", "static_rouge": 0.8600000000000001, "static_bleu": 0.7916999742474765, "static_bleurt": 0.8325287103652954, "static_gleu": 0.7922636103151862, "VR_rouge": 0.07739130434782615, "EE_rouge": 0.008148148148148238, "AG_rouge": -0.1399999999999999, "SR_rouge": 0.08222222222222242, "VR_rouge_abs": 0.037981360998769115, "EE_rouge_abs": 0.10414333706606937, "AG_rouge_abs": 0.11351535062875262, "SR_rouge_abs": 0.1228070175438597, "VR_bleu": 0.155403585020365, "EE_bleu": 0.03347071132308732, "AG_bleu": -0.2083000257525235, "SR_bleu": 0.14100800846459927, "VR_bleu_abs": 0.13764391354547695, "EE_bleu_abs": 0.11695549381064352, "AG_bleu_abs": 0.19140033081899765, "SR_bleu_abs": 0.18828696781769694, "VR_bleurt": -0.04552507400512695, "EE_bleurt": -0.02226930856704712, "AG_bleurt": -0.047831058502197266, "SR_bleurt": 0.020773887634277344, "VR_bleurt_abs": -0.08078265190124512, "EE_bleurt_abs": 0.09321868419647217, "AG_bleurt_abs": 0.250929519534111, "SR_bleurt_abs": 0.08367973566055298, "VR_gleu": 0.15570447053023995, "EE_gleu": 0.03350350249847467, "AG_gleu": -0.20773638968481378, "SR_gleu": 0.14045638139952354, "VR_gleu_abs": 0.13936974342595554, "EE_gleu_abs": 0.11516658793453194, "AG_gleu_abs": 0.16145294853238013, "SR_gleu_abs": 0.1879518072289157, "ratio_VR_rouge": 0.7768595041322315, "ratio_VR_bleu": 0.7621864729572203, "ratio_VR_bleurt": 1.2514335178584366, "ratio_VR_gleu": 0.7679723502304147, "ratio_EE_rouge": 0.8834586466165414, "ratio_EE_bleu": 0.8737014258270788, "ratio_EE_bleurt": 0.8829217672311506, "ratio_EE_gleu": 0.8758760107816711, "ratio_AG_rouge": 0.8640803038524146, "ratio_AG_bleu": 0.745617120170144, "ratio_AG_bleurt": 0.4476255396277195, "ratio_AG_gleu": 0.7888413122565275, "ratio_SR_rouge": 0.8771929824561403, "ratio_SR_bleu": 0.8117130321823031, "ratio_SR_bleurt": 0.9016588325087294, "ratio_SR_gleu": 0.8120481927710843}, {"prompt": "Given \\operatorname{f^{\\prime}}{(\\phi_1)} = \\phi_1, then derive \\int \\phi_1 \\operatorname{f^{\\prime}}{(\\phi_1)} d\\phi_1 = \\hbar + \\frac{\\phi_1^{3}}{3}, then obtain \\frac{\\phi_1^{3}}{3} + n_{2} = \\hbar + \\frac{\\phi_1^{3}}{3}", "derivation": "\\operatorname{f^{\\prime}}{(\\phi_1)} = \\phi_1 and \\phi_1 \\operatorname{f^{\\prime}}{(\\phi_1)} = \\phi_1^{2} and \\int \\phi_1 \\operatorname{f^{\\prime}}{(\\phi_1)} d\\phi_1 = \\int \\phi_1^{2} d\\phi_1 and \\int \\phi_1 \\operatorname{f^{\\prime}}{(\\phi_1)} d\\phi_1 = \\hbar + \\frac{\\phi_1^{3}}{3} and \\int \\phi_1^{2} d\\phi_1 = \\hbar + \\frac{\\phi_1^{3}}{3} and \\frac{\\phi_1^{3}}{3} + n_{2} = \\hbar + \\frac{\\phi_1^{3}}{3}", "srepr_derivation": [["renaming_premise", "Equality(Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True)), Symbol('\\\\phi_1', commutative=True))"], [["times", 1, "Symbol('\\\\phi_1', commutative=True)"], "Equality(Mul(Symbol('\\\\phi_1', commutative=True), Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True))), Pow(Symbol('\\\\phi_1', commutative=True), Integer(2)))"], [["integrate", 2, "Symbol('\\\\phi_1', commutative=True)"], "Equality(Integral(Mul(Symbol('\\\\phi_1', commutative=True), Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True))), Tuple(Symbol('\\\\phi_1', commutative=True))), Integral(Pow(Symbol('\\\\phi_1', commutative=True), Integer(2)), Tuple(Symbol('\\\\phi_1', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Integral(Mul(Symbol('\\\\phi_1', commutative=True), Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True))), Tuple(Symbol('\\\\phi_1', commutative=True))), Add(Symbol('\\\\hbar', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3)))))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Integral(Pow(Symbol('\\\\phi_1', commutative=True), Integer(2)), Tuple(Symbol('\\\\phi_1', commutative=True))), Add(Symbol('\\\\hbar', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3)))))"], [["evaluate_integrals", 5], "Equality(Add(Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3))), Symbol('n_2', commutative=True)), Add(Symbol('\\\\hbar', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3)))))"]], "EE prompt": "Given \\phi_1 = \\operatorname{f^{\\prime}}{(\\phi_1)}, then derive \\hbar + \\frac{\\phi_1^{3}}{3} = \\int \\phi_1 \\operatorname{f^{\\prime}}{(\\phi_1)} d\\phi_1, then obtain \\hbar + \\frac{\\phi_1^{3}}{3} = \\frac{\\phi_1^{3}}{3} + n_{2}", "EE derivation": "\\phi_1 = \\operatorname{f^{\\prime}}{(\\phi_1)} and \\phi_1^{2} = \\phi_1 \\operatorname{f^{\\prime}}{(\\phi_1)} and \\int \\phi_1^{2} d\\phi_1 = \\int \\phi_1 \\operatorname{f^{\\prime}}{(\\phi_1)} d\\phi_1 and \\hbar + \\frac{\\phi_1^{3}}{3} = \\int \\phi_1 \\operatorname{f^{\\prime}}{(\\phi_1)} d\\phi_1 and \\hbar + \\frac{\\phi_1^{3}}{3} = \\int \\phi_1^{2} d\\phi_1 and \\hbar + \\frac{\\phi_1^{3}}{3} = \\frac{\\phi_1^{3}}{3} + n_{2}", "EE srepr_derivation": [["renaming_premise", "Equality(Symbol('\\\\phi_1', commutative=True), Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True)))"], [["times", 1, "Symbol('\\\\phi_1', commutative=True)"], "Equality(Pow(Symbol('\\\\phi_1', commutative=True), Integer(2)), Mul(Symbol('\\\\phi_1', commutative=True), Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True))))"], [["integrate", 2, "Symbol('\\\\phi_1', commutative=True)"], "Equality(Integral(Pow(Symbol('\\\\phi_1', commutative=True), Integer(2)), Tuple(Symbol('\\\\phi_1', commutative=True))), Integral(Mul(Symbol('\\\\phi_1', commutative=True), Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True))), Tuple(Symbol('\\\\phi_1', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('\\\\hbar', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3)))), Integral(Mul(Symbol('\\\\phi_1', commutative=True), Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True))), Tuple(Symbol('\\\\phi_1', commutative=True))))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Add(Symbol('\\\\hbar', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3)))), Integral(Pow(Symbol('\\\\phi_1', commutative=True), Integer(2)), Tuple(Symbol('\\\\phi_1', commutative=True))))"], [["evaluate_integrals", 5], "Equality(Add(Symbol('\\\\hbar', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3)))), Add(Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3))), Symbol('n_2', commutative=True)))"]], "AG prompt": "Given \\operatorname{f^{\\prime}}{(\\phi_1)} = \\phi_1, then derive \\int \\phi_1 \\operatorname{f^{\\prime}}{(\\phi_1)} d\\phi_1 = \\hbar + \\frac{\\phi_1^{3}}{3}, then obtain \\dot{y} + \\frac{\\phi_1^{3}}{3} = \\hbar + \\frac{\\phi_1^{3}}{3}", "AG derivation": "\\operatorname{f^{\\prime}}{(\\phi_1)} = \\phi_1 and \\phi_1 \\operatorname{f^{\\prime}}{(\\phi_1)} = \\phi_1^{2} and \\int \\phi_1 \\operatorname{f^{\\prime}}{(\\phi_1)} d\\phi_1 = \\int \\phi_1^{2} d\\phi_1 and \\int \\phi_1 \\operatorname{f^{\\prime}}{(\\phi_1)} d\\phi_1 = \\hbar + \\frac{\\phi_1^{3}}{3} and \\int \\phi_1^{2} d\\phi_1 = \\hbar + \\frac{\\phi_1^{3}}{3} and \\dot{y} + \\frac{\\phi_1^{3}}{3} = \\hbar + \\frac{\\phi_1^{3}}{3}", "AG srepr_derivation": [["renaming_premise", "Equality(Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True)), Symbol('\\\\phi_1', commutative=True))"], [["times", 1, "Symbol('\\\\phi_1', commutative=True)"], "Equality(Mul(Symbol('\\\\phi_1', commutative=True), Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True))), Pow(Symbol('\\\\phi_1', commutative=True), Integer(2)))"], [["integrate", 2, "Symbol('\\\\phi_1', commutative=True)"], "Equality(Integral(Mul(Symbol('\\\\phi_1', commutative=True), Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True))), Tuple(Symbol('\\\\phi_1', commutative=True))), Integral(Pow(Symbol('\\\\phi_1', commutative=True), Integer(2)), Tuple(Symbol('\\\\phi_1', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Integral(Mul(Symbol('\\\\phi_1', commutative=True), Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True))), Tuple(Symbol('\\\\phi_1', commutative=True))), Add(Symbol('\\\\hbar', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3)))))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Integral(Pow(Symbol('\\\\phi_1', commutative=True), Integer(2)), Tuple(Symbol('\\\\phi_1', commutative=True))), Add(Symbol('\\\\hbar', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3)))))"], [["evaluate_integrals", 5], "Equality(Add(Symbol('\\\\dot{y}', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3)))), Add(Symbol('\\\\hbar', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3)))))"]], "SR prompt": "Given \\operatorname{f^{\\prime}}{(\\phi_1)} = \\phi_1, then obtain \\frac{\\phi_1^{3}}{3} + n_{2} = \\hbar + \\frac{\\phi_1^{3}}{3}", "SR derivation": "\\operatorname{f^{\\prime}}{(\\phi_1)} = \\phi_1 and \\phi_1 \\operatorname{f^{\\prime}}{(\\phi_1)} = \\phi_1^{2} and \\int \\phi_1 \\operatorname{f^{\\prime}}{(\\phi_1)} d\\phi_1 = \\int \\phi_1^{2} d\\phi_1 and \\int \\phi_1 \\operatorname{f^{\\prime}}{(\\phi_1)} d\\phi_1 = \\hbar + \\frac{\\phi_1^{3}}{3} and \\int \\phi_1^{2} d\\phi_1 = \\hbar + \\frac{\\phi_1^{3}}{3} and \\frac{\\phi_1^{3}}{3} + n_{2} = \\hbar + \\frac{\\phi_1^{3}}{3}", "SR srepr_derivation": [["renaming_premise", "Equality(Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True)), Symbol('\\\\phi_1', commutative=True))"], [["times", 1, "Symbol('\\\\phi_1', commutative=True)"], "Equality(Mul(Symbol('\\\\phi_1', commutative=True), Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True))), Pow(Symbol('\\\\phi_1', commutative=True), Integer(2)))"], [["integrate", 2, "Symbol('\\\\phi_1', commutative=True)"], "Equality(Integral(Mul(Symbol('\\\\phi_1', commutative=True), Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True))), Tuple(Symbol('\\\\phi_1', commutative=True))), Integral(Pow(Symbol('\\\\phi_1', commutative=True), Integer(2)), Tuple(Symbol('\\\\phi_1', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Integral(Mul(Symbol('\\\\phi_1', commutative=True), Function('f^{\\\\prime}')(Symbol('\\\\phi_1', commutative=True))), Tuple(Symbol('\\\\phi_1', commutative=True))), Add(Symbol('\\\\hbar', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3)))))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Integral(Pow(Symbol('\\\\phi_1', commutative=True), Integer(2)), Tuple(Symbol('\\\\phi_1', commutative=True))), Add(Symbol('\\\\hbar', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3)))))"], [["evaluate_integrals", 5], "Equality(Add(Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3))), Symbol('n_2', commutative=True)), Add(Symbol('\\\\hbar', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\phi_1', commutative=True), Integer(3)))))"]], "VR prompt": "Given \\omicron{(\\kappa)} = \\kappa, then derive \\int \\kappa \\omicron{(\\kappa)} d\\kappa = \\iota + \\frac{\\kappa^{3}}{3}, then obtain \\frac{\\kappa^{3}}{3} + \\xi = \\iota + \\frac{\\kappa^{3}}{3}", "VR derivation": "\\omicron{(\\kappa)} = \\kappa and \\kappa \\omicron{(\\kappa)} = \\kappa^{2} and \\int \\kappa \\omicron{(\\kappa)} d\\kappa = \\int \\kappa^{2} d\\kappa and \\int \\kappa \\omicron{(\\kappa)} d\\kappa = \\iota + \\frac{\\kappa^{3}}{3} and \\int \\kappa^{2} d\\kappa = \\iota + \\frac{\\kappa^{3}}{3} and \\frac{\\kappa^{3}}{3} + \\xi = \\iota + \\frac{\\kappa^{3}}{3}", "VR srepr_derivation": [["renaming_premise", "Equality(Function('\\\\omicron')(Symbol('\\\\kappa', commutative=True)), Symbol('\\\\kappa', commutative=True))"], [["times", 1, "Symbol('\\\\kappa', commutative=True)"], "Equality(Mul(Symbol('\\\\kappa', commutative=True), Function('\\\\omicron')(Symbol('\\\\kappa', commutative=True))), Pow(Symbol('\\\\kappa', commutative=True), Integer(2)))"], [["integrate", 2, "Symbol('\\\\kappa', commutative=True)"], "Equality(Integral(Mul(Symbol('\\\\kappa', commutative=True), Function('\\\\omicron')(Symbol('\\\\kappa', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True))), Integral(Pow(Symbol('\\\\kappa', commutative=True), Integer(2)), Tuple(Symbol('\\\\kappa', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Integral(Mul(Symbol('\\\\kappa', commutative=True), Function('\\\\omicron')(Symbol('\\\\kappa', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True))), Add(Symbol('\\\\iota', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\kappa', commutative=True), Integer(3)))))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Integral(Pow(Symbol('\\\\kappa', commutative=True), Integer(2)), Tuple(Symbol('\\\\kappa', commutative=True))), Add(Symbol('\\\\iota', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\kappa', commutative=True), Integer(3)))))"], [["evaluate_integrals", 5], "Equality(Add(Mul(Rational(1, 3), Pow(Symbol('\\\\kappa', commutative=True), Integer(3))), Symbol('\\\\xi', commutative=True)), Add(Symbol('\\\\iota', commutative=True), Mul(Rational(1, 3), Pow(Symbol('\\\\kappa', commutative=True), Integer(3)))))"]], "static_flan-t5-large": "operatorname { f ^ { \\ prime } } { ( \\ phi_1) } = \\ phi_1 and \\ phi_1 \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } = \\ phi_1 ^ { 2 } and \\ int \\ phi_1 \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } d \\ phi_1 = \\ int \\ phi_1 ^ { 2 } d \\ phi_1 and \\ int \\ phi_1 \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } d \\ phi_1 = \\ hbar + \\ frac { \\ phi_1 ^ { 3 } } { 3 } and \\ int \\ phi_1 ^ { 2 } d \\ phi_1 = \\ hbar + \\ frac { \\ phi_1 ^ { 3 } } { 3 } and \\ frac { \\ phi_1 ^ { 3 } } { 3 } + n_ { 2 } = \\ hbar + \\ frac { \\ phi_1 ^ { 3 } } { 3 }", "VR_flan-t5-large": "omicron { ( \\ kappa) } = \\ kappa and \\ kappa \\ omicron { ( \\ kappa) } = \\ kappa ^ { 2 } and \\ int \\ kappa \\ omicron { ( \\ kappa) } d \\ kappa = \\ int \\ kappa ^ { 2 } d \\ kappa and \\ int \\ kappa \\ omicron { ( \\ kappa) } d \\ kappa = \\ iota + \\ frac { \\ kappa ^ { 3 } } { 3 } and \\ int \\ kappa ^ { 2 } d \\ kappa = \\ iota + \\ frac { \\ kappa ^ { 3 } } { 3 } and \\ frac { \\ kappa ^ { 3 } } { 3 } + \\ xi = \\ iota + \\ frac { \\ kappa ^ { 3 } } { 3 }", "EE_flan-t5-large": "phi_1 = \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } and \\ phi_1 \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } = \\ phi_1 \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } and \\ int \\ phi_1 \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } d \\ phi_1 = \\ int \\ phi_1 \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } d \\ phi_1 and \\ int \\ phi_1 \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } d \\ phi_1 = \\ int \\ phi_1 \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } d \\ phi_1 and \\ hbar + \\ frac { \\ phi_1 ^ { 3 } } { 3 } = \\ int \\ phi_1 \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } d \\ phi_1 and \\ hbar + \\ frac { \\ phi_1 ^ { 3 } } { 3 } = \\ frac { \\ phi_1 ^ { 3 } } { 3 } + n_ { 2 }", "AG_flan-t5-large": "operatorname { f ^ { \\ prime } } { ( \\ phi_1) } = \\ phi_1 and \\ phi_1 \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } = \\ phi_1 ^ { 2 } and \\ int \\ phi_1 \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } d \\ phi_1 = \\ int \\ phi_1 ^ { 2 } d \\ phi_1 and \\ int \\ phi_1 \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } d \\ phi_1 = \\ hbar + \\ frac { \\ phi_1 ^ { 3 } } { 3 } and \\ int \\ phi_1 ^ { 2 } d \\ phi_1 = \\ hbar + \\ frac { \\ phi_1 ^ { 3 } } { 3 } and \\ dot { y } + \\ frac { \\ phi_1 ^ { 3 } } { 3 } = \\ hbar + \\ frac { \\ phi_1 ^ { 3 } } { 3 }", "SR_flan-t5-large": "operatorname { f ^ { \\ prime } } { ( \\ phi_1) } = \\ phi_1 and \\ frac { \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } } { \\ phi_1 } = 1 and \\ frac { \\ phi_1 } { \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } } { 2 } = \\ frac { \\ phi_1 ^ { 2 } } { 2 } and \\ frac { \\ phi_1 ^ { 2 } } { \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } } + n_ { 2 } = \\ frac { \\ phi_1 ^ { 2 } } { \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } } + \\ frac { \\ phi_1 ^ { 2 } } { \\ operatorname { f ^ { \\ prime } } { ( \\ phi_1) } } and \\ frac { \\ phi_1 ^ { 3 } } { 3 } + n_ { 2 } = \\ hbar + \\ frac { \\ phi_1 ^ { 3 } } { 3 }", "static_rouge": 1.0, "static_bleu": 0.9955654174830928, "static_bleurt": 0.7845369577407837, "static_gleu": 0.9955456570155902, "VR_rouge": 0.0, "EE_rouge": 0.22651933701657467, "AG_rouge": 0.0, "SR_rouge": 0.37579617834394907, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.15867133809459621, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.37579617834394907, "VR_bleu": 0.0021227709582554155, "EE_bleu": 0.2717487712137213, "AG_bleu": 0.0, "SR_bleu": 0.3285414925401857, "VR_bleu_abs": -0.0005071446488251752, "EE_bleu_abs": 0.25285781940036733, "AG_bleu_abs": 0.00013078725289905613, "SR_bleu_abs": 0.3362427767037085, "VR_bleurt": 0.06746351718902588, "EE_bleurt": 0.07709574699401855, "AG_bleurt": 0.003378629684448242, "SR_bleurt": 0.22531944513320923, "VR_bleurt_abs": -0.0023912712931632996, "EE_bleurt_abs": 0.09378522634506226, "AG_bleurt_abs": 0.0220944881439209, "SR_bleurt_abs": 0.2164730429649353, "VR_gleu": 0.002146317081596738, "EE_gleu": 0.27041003314578904, "AG_gleu": 0.0, "SR_gleu": 0.3224295674025556, "VR_gleu_abs": -0.0006203195766879555, "EE_gleu_abs": 0.2511830589978936, "AG_gleu_abs": 0.00012954465055325937, "SR_gleu_abs": 0.329938900203666, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 1.0014929999776327, "ratio_VR_bleurt": 0.980656842056541, "ratio_VR_gleu": 1.0015961231514778, "ratio_EE_rouge": 0.8167457785386354, "ratio_EE_bleu": 0.7336924782503275, "ratio_EE_bleurt": 0.8801287196108852, "ratio_EE_gleu": 0.7358754250818402, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9998652942442331, "ratio_AG_bleurt": 0.9706937153134042, "ratio_AG_gleu": 0.9998665927795908, "ratio_SR_rouge": 0.6242038216560509, "ratio_SR_bleu": 0.6637572232962915, "ratio_SR_bleurt": 0.7288420712802397, "ratio_SR_gleu": 0.670061099796334}, {"prompt": "Given \\operatorname{a^{\\dagger}}{(\\omega)} = \\int \\log{(\\omega)} d\\omega, then derive \\operatorname{a^{\\dagger}}{(\\omega)} = \\omega \\log{(\\omega)} - \\omega + \\rho, then obtain \\frac{\\partial}{\\partial \\rho} (- \\rho + \\operatorname{a^{\\dagger}}{(\\omega)})^{\\omega} = \\frac{d}{d \\rho} (\\omega \\log{(\\omega)} - \\omega)^{\\omega}", "derivation": "\\operatorname{a^{\\dagger}}{(\\omega)} = \\int \\log{(\\omega)} d\\omega and \\operatorname{a^{\\dagger}}{(\\omega)} = \\omega \\log{(\\omega)} - \\omega + \\rho and - \\rho + \\operatorname{a^{\\dagger}}{(\\omega)} = \\omega \\log{(\\omega)} - \\omega and (- \\rho + \\operatorname{a^{\\dagger}}{(\\omega)})^{\\omega} = (\\omega \\log{(\\omega)} - \\omega)^{\\omega} and \\frac{\\partial}{\\partial \\rho} (- \\rho + \\operatorname{a^{\\dagger}}{(\\omega)})^{\\omega} = \\frac{d}{d \\rho} (\\omega \\log{(\\omega)} - \\omega)^{\\omega}", "srepr_derivation": [["get_premise", "Equality(Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True)), Integral(log(Symbol('\\\\omega', commutative=True)), Tuple(Symbol('\\\\omega', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True)), Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True)), Symbol('\\\\rho', commutative=True)))"], [["minus", 2, "Symbol('\\\\rho', commutative=True)"], "Equality(Add(Mul(Integer(-1), Symbol('\\\\rho', commutative=True)), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True))), Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True))))"], [["power", 3, "Symbol('\\\\omega', commutative=True)"], "Equality(Pow(Add(Mul(Integer(-1), Symbol('\\\\rho', commutative=True)), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)), Pow(Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)))"], [["differentiate", 4, "Symbol('\\\\rho', commutative=True)"], "Equality(Derivative(Pow(Add(Mul(Integer(-1), Symbol('\\\\rho', commutative=True)), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1))), Derivative(Pow(Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1))))"]], "EE prompt": "Given \\int \\log{(\\omega)} d\\omega = \\operatorname{a^{\\dagger}}{(\\omega)}, then derive \\omega \\log{(\\omega)} - \\omega + \\rho = \\operatorname{a^{\\dagger}}{(\\omega)}, then obtain \\frac{d}{d \\rho} (\\omega \\log{(\\omega)} - \\omega)^{\\omega} = \\frac{\\partial}{\\partial \\rho} (- \\rho + \\operatorname{a^{\\dagger}}{(\\omega)})^{\\omega}", "EE derivation": "\\int \\log{(\\omega)} d\\omega = \\operatorname{a^{\\dagger}}{(\\omega)} and \\omega \\log{(\\omega)} - \\omega + \\rho = \\operatorname{a^{\\dagger}}{(\\omega)} and \\omega \\log{(\\omega)} - \\omega = - \\rho + \\operatorname{a^{\\dagger}}{(\\omega)} and (\\omega \\log{(\\omega)} - \\omega)^{\\omega} = (- \\rho + \\operatorname{a^{\\dagger}}{(\\omega)})^{\\omega} and \\frac{d}{d \\rho} (\\omega \\log{(\\omega)} - \\omega)^{\\omega} = \\frac{\\partial}{\\partial \\rho} (- \\rho + \\operatorname{a^{\\dagger}}{(\\omega)})^{\\omega}", "EE srepr_derivation": [["get_premise", "Equality(Integral(log(Symbol('\\\\omega', commutative=True)), Tuple(Symbol('\\\\omega', commutative=True))), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True)))"], [["evaluate_integrals", 1], "Equality(Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True)), Symbol('\\\\rho', commutative=True)), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True)))"], [["minus", 2, "Symbol('\\\\rho', commutative=True)"], "Equality(Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True))), Add(Mul(Integer(-1), Symbol('\\\\rho', commutative=True)), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True))))"], [["power", 3, "Symbol('\\\\omega', commutative=True)"], "Equality(Pow(Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)), Pow(Add(Mul(Integer(-1), Symbol('\\\\rho', commutative=True)), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)))"], [["differentiate", 4, "Symbol('\\\\rho', commutative=True)"], "Equality(Derivative(Pow(Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1))), Derivative(Pow(Add(Mul(Integer(-1), Symbol('\\\\rho', commutative=True)), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1))))"]], "AG prompt": "Given \\operatorname{a^{\\dagger}}{(\\omega)} = \\int \\log{(\\omega)} d\\omega, then derive \\operatorname{a^{\\dagger}}{(\\omega)} = \\omega \\log{(\\omega)} - \\omega + \\rho, then obtain \\rho + (- \\rho + \\operatorname{a^{\\dagger}}{(\\omega)})^{\\omega} - \\operatorname{a^{\\dagger}}{(\\omega)} = \\rho + (\\omega \\log{(\\omega)} - \\omega)^{\\omega} - \\operatorname{a^{\\dagger}}{(\\omega)}", "AG derivation": "\\operatorname{a^{\\dagger}}{(\\omega)} = \\int \\log{(\\omega)} d\\omega and \\operatorname{a^{\\dagger}}{(\\omega)} = \\omega \\log{(\\omega)} - \\omega + \\rho and - \\rho + \\operatorname{a^{\\dagger}}{(\\omega)} = \\omega \\log{(\\omega)} - \\omega and (- \\rho + \\operatorname{a^{\\dagger}}{(\\omega)})^{\\omega} = (\\omega \\log{(\\omega)} - \\omega)^{\\omega} and \\rho + (- \\rho + \\operatorname{a^{\\dagger}}{(\\omega)})^{\\omega} - \\operatorname{a^{\\dagger}}{(\\omega)} = \\rho + (\\omega \\log{(\\omega)} - \\omega)^{\\omega} - \\operatorname{a^{\\dagger}}{(\\omega)}", "AG srepr_derivation": [["get_premise", "Equality(Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True)), Integral(log(Symbol('\\\\omega', commutative=True)), Tuple(Symbol('\\\\omega', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True)), Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True)), Symbol('\\\\rho', commutative=True)))"], [["minus", 2, "Symbol('\\\\rho', commutative=True)"], "Equality(Add(Mul(Integer(-1), Symbol('\\\\rho', commutative=True)), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True))), Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True))))"], [["power", 3, "Symbol('\\\\omega', commutative=True)"], "Equality(Pow(Add(Mul(Integer(-1), Symbol('\\\\rho', commutative=True)), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)), Pow(Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)))"], [["minus", 4, "Add(Mul(Integer(-1), Symbol('\\\\rho', commutative=True)), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True)))"], "Equality(Add(Symbol('\\\\rho', commutative=True), Pow(Add(Mul(Integer(-1), Symbol('\\\\rho', commutative=True)), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)), Mul(Integer(-1), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True)))), Add(Symbol('\\\\rho', commutative=True), Pow(Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)), Mul(Integer(-1), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True)))))"]], "SR prompt": "Given \\operatorname{a^{\\dagger}}{(\\omega)} = \\int \\log{(\\omega)} d\\omega, then obtain \\frac{\\partial}{\\partial \\rho} (- \\rho + \\operatorname{a^{\\dagger}}{(\\omega)})^{\\omega} = \\frac{d}{d \\rho} (\\omega \\log{(\\omega)} - \\omega)^{\\omega}", "SR derivation": "\\operatorname{a^{\\dagger}}{(\\omega)} = \\int \\log{(\\omega)} d\\omega and \\operatorname{a^{\\dagger}}{(\\omega)} = \\omega \\log{(\\omega)} - \\omega + \\rho and - \\rho + \\operatorname{a^{\\dagger}}{(\\omega)} = \\omega \\log{(\\omega)} - \\omega and (- \\rho + \\operatorname{a^{\\dagger}}{(\\omega)})^{\\omega} = (\\omega \\log{(\\omega)} - \\omega)^{\\omega} and \\frac{\\partial}{\\partial \\rho} (- \\rho + \\operatorname{a^{\\dagger}}{(\\omega)})^{\\omega} = \\frac{d}{d \\rho} (\\omega \\log{(\\omega)} - \\omega)^{\\omega}", "SR srepr_derivation": [["get_premise", "Equality(Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True)), Integral(log(Symbol('\\\\omega', commutative=True)), Tuple(Symbol('\\\\omega', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True)), Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True)), Symbol('\\\\rho', commutative=True)))"], [["minus", 2, "Symbol('\\\\rho', commutative=True)"], "Equality(Add(Mul(Integer(-1), Symbol('\\\\rho', commutative=True)), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True))), Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True))))"], [["power", 3, "Symbol('\\\\omega', commutative=True)"], "Equality(Pow(Add(Mul(Integer(-1), Symbol('\\\\rho', commutative=True)), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)), Pow(Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)))"], [["differentiate", 4, "Symbol('\\\\rho', commutative=True)"], "Equality(Derivative(Pow(Add(Mul(Integer(-1), Symbol('\\\\rho', commutative=True)), Function('a^{\\\\dagger}')(Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1))), Derivative(Pow(Add(Mul(Symbol('\\\\omega', commutative=True), log(Symbol('\\\\omega', commutative=True))), Mul(Integer(-1), Symbol('\\\\omega', commutative=True))), Symbol('\\\\omega', commutative=True)), Tuple(Symbol('\\\\rho', commutative=True), Integer(1))))"]], "VR prompt": "Given \\omicron{(\\upsilon)} = \\int \\log{(\\upsilon)} d\\upsilon, then derive \\omicron{(\\upsilon)} = \\beta + \\upsilon \\log{(\\upsilon)} - \\upsilon, then obtain \\frac{\\partial}{\\partial \\beta} (- \\beta + \\omicron{(\\upsilon)})^{\\upsilon} = \\frac{d}{d \\beta} (\\upsilon \\log{(\\upsilon)} - \\upsilon)^{\\upsilon}", "VR derivation": "\\omicron{(\\upsilon)} = \\int \\log{(\\upsilon)} d\\upsilon and \\omicron{(\\upsilon)} = \\beta + \\upsilon \\log{(\\upsilon)} - \\upsilon and - \\beta + \\omicron{(\\upsilon)} = \\upsilon \\log{(\\upsilon)} - \\upsilon and (- \\beta + \\omicron{(\\upsilon)})^{\\upsilon} = (\\upsilon \\log{(\\upsilon)} - \\upsilon)^{\\upsilon} and \\frac{\\partial}{\\partial \\beta} (- \\beta + \\omicron{(\\upsilon)})^{\\upsilon} = \\frac{d}{d \\beta} (\\upsilon \\log{(\\upsilon)} - \\upsilon)^{\\upsilon}", "VR srepr_derivation": [["get_premise", "Equality(Function('\\\\omicron')(Symbol('\\\\upsilon', commutative=True)), Integral(log(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\omicron')(Symbol('\\\\upsilon', commutative=True)), Add(Symbol('\\\\beta', commutative=True), Mul(Symbol('\\\\upsilon', commutative=True), log(Symbol('\\\\upsilon', commutative=True))), Mul(Integer(-1), Symbol('\\\\upsilon', commutative=True))))"], [["minus", 2, "Symbol('\\\\beta', commutative=True)"], "Equality(Add(Mul(Integer(-1), Symbol('\\\\beta', commutative=True)), Function('\\\\omicron')(Symbol('\\\\upsilon', commutative=True))), Add(Mul(Symbol('\\\\upsilon', commutative=True), log(Symbol('\\\\upsilon', commutative=True))), Mul(Integer(-1), Symbol('\\\\upsilon', commutative=True))))"], [["power", 3, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Pow(Add(Mul(Integer(-1), Symbol('\\\\beta', commutative=True)), Function('\\\\omicron')(Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\upsilon', commutative=True)), Pow(Add(Mul(Symbol('\\\\upsilon', commutative=True), log(Symbol('\\\\upsilon', commutative=True))), Mul(Integer(-1), Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\upsilon', commutative=True)))"], [["differentiate", 4, "Symbol('\\\\beta', commutative=True)"], "Equality(Derivative(Pow(Add(Mul(Integer(-1), Symbol('\\\\beta', commutative=True)), Function('\\\\omicron')(Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Derivative(Pow(Add(Mul(Symbol('\\\\upsilon', commutative=True), log(Symbol('\\\\upsilon', commutative=True))), Mul(Integer(-1), Symbol('\\\\upsilon', commutative=True))), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))))"]], "static_flan-t5-large": "operatorname { a ^ { \\ dagger } } { ( \\ omega) } = \\ int \\ log { ( \\ omega) } d \\ omega and \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } = \\ omega \\ log { ( \\ omega) } - \\ omega + \\ rho and - \\ rho + \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } = \\ omega \\ log { ( \\ omega) } - \\ omega and (- \\ rho + \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } ) ^ { \\ omega } = ( \\ omega \\ log { ( \\ omega) } - \\ omega) ^ { \\ omega } and \\ frac { \\ partial } { \\ partial \\ rho } (- \\ rho + \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } ) ^ { \\ omega } = \\ frac { d } { d \\ rho } ( \\ omega \\ log { ( \\ omega) } - \\ omega) ^ { \\ omega }", "VR_flan-t5-large": "omicron { ( \\ upsilon) } = \\ int \\ log { ( \\ upsilon) } d \\ upsilon and \\ omicron { ( \\ upsilon) } = \\ beta + \\ upsilon \\ log { ( \\ upsilon) } - \\ upsilon and - \\ beta + \\ omicron { ( \\ upsilon) } = \\ upsilon \\ log { ( \\ upsilon) } - \\ upsilon and (- \\ beta + \\ omicron { ( \\ upsilon) } ) ^ { \\ upsilon } = ( \\ int \\ log { ( \\ upsilon) } d \\ upsilon) ^ { \\ upsilon } and \\ frac { \\ partial } { \\ partial \\ beta } (- \\ beta + \\ omicron { ( \\ upsilon) } ) ^ { \\ upsilon } = \\ frac { d } { d \\ beta } ( \\ int \\ log { ( \\ upsilon) } d \\ upsilon) ^ { \\ upsilon } and \\ frac { \\ partial } { \\ partial \\ beta } (- \\ beta + \\ omicron { ( \\ upsilon) } ) ^ { \\ upsilon } = \\ frac { d } { d \\ beta } ( \\ upsilon \\ log { ( \\ upsilon) } - \\ upsilon) ^ { \\ upsilon }", "EE_flan-t5-large": "int \\ log { ( \\ omega) } d \\ omega = \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } and \\ int \\ log { ( \\ omega) } d \\ omega = \\ int \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } d \\ omega and \\ omega \\ log { ( \\ omega) } - \\ omega + \\ rho = \\ omega \\ log { ( \\ omega) } - \\ omega + \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } and ( \\ omega \\ log { ( \\ omega) } - \\ omega) ^ { \\ omega } = ( \\ omega \\ log { ( \\ omega) } - \\ omega) ^ { \\ omega } and \\ frac { d } { d \\ rho } ( \\ omega \\ log { ( \\ omega) } - \\ omega) ^ { \\ omega } = \\ frac { \\ partial } { \\ partial \\ rho } (- \\ rho + \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } ) ^ { \\ omega }", "AG_flan-t5-large": "operatorname { a ^ { \\ dagger } } { ( \\ omega) } = \\ int \\ log { ( \\ omega) } d \\ omega and \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } = \\ omega \\ log { ( \\ omega) } - \\ omega + \\ rho and - \\ rho + \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } = \\ omega \\ log { ( \\ omega) } - \\ omega and (- \\ rho + \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } ) ^ { \\ omega } = ( \\ omega \\ log { ( \\ omega) } - \\ omega) ^ { \\ omega } and (- \\ rho + \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } ) ^ { \\ omega } - \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } = ( \\ omega \\ log { ( \\ omega) } - \\ omega) ^ { \\ omega } - \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } and \\ rho + (- \\ rho + \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } ) ^ { \\ omega } - \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } = \\ rho + ( \\ omega \\ log { ( \\ omega) } - \\ omega) ^ { \\ omega } - \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) }", "SR_flan-t5-large": "operatorname { a ^ { \\ dagger } } { ( \\ omega) } = \\ int \\ log { ( \\ omega) } d \\ omega and - \\ rho + \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } = \\ omega \\ log { ( \\ omega) } - \\ omega and (- \\ rho + \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } ) ^ { \\ omega } = ( \\ omega \\ log { ( \\ omega) } - \\ omega) ^ { \\ omega } and \\ frac { \\ partial } { \\ partial \\ rho } (- \\ rho + \\ operatorname { a ^ { \\ dagger } } { ( \\ omega) } ) ^ { \\ omega } = \\ frac { d } { d \\ rho } ( \\ omega \\ log { ( \\ omega) } - \\ omega) ^ { \\ omega }", "static_rouge": 1.0, "static_bleu": 0.9954233489678889, "static_bleurt": 0.7579795718193054, "static_gleu": 0.9954022988505747, "VR_rouge": 0.18333333333333335, "EE_rouge": 0.19047619047619047, "AG_rouge": 0.13888888888888884, "SR_rouge": 0.09090909090909094, "VR_rouge_abs": 0.016783216783216787, "EE_rouge_abs": 0.07301587301587287, "AG_rouge_abs": 0.12006465019625945, "SR_rouge_abs": 0.09090909090909094, "VR_bleu": 0.2701527518324284, "EE_bleu": 0.12906381967065084, "AG_bleu": 0.25448854380249697, "SR_bleu": 0.17207229202888707, "VR_bleu_abs": 0.011938230994805454, "EE_bleu_abs": 0.09315239004406195, "AG_bleu_abs": 0.2217014539418859, "SR_bleu_abs": 0.17216202739439113, "VR_bleurt": -0.026961863040924072, "EE_bleurt": 0.007865428924560547, "AG_bleurt": -0.05363065004348755, "SR_bleurt": 0.11331325769424438, "VR_bleurt_abs": -0.057244352996349335, "EE_bleurt_abs": 0.13924527168273926, "AG_bleurt_abs": 0.012508749961853027, "SR_bleurt_abs": 0.1367233395576477, "VR_gleu": 0.26993257024932216, "EE_gleu": 0.12791900263676625, "AG_gleu": 0.2544574169608109, "SR_gleu": 0.1597701149425288, "VR_gleu_abs": 0.01099992801094235, "EE_gleu_abs": 0.09275529273225303, "AG_gleu_abs": 0.2219018004914991, "SR_gleu_abs": 0.1605080831408776, "ratio_VR_rouge": 0.8461538461538461, "ratio_VR_bleu": 0.9699172944512446, "ratio_VR_bleurt": 0.5903143057238316, "ratio_VR_gleu": 0.9748820541482419, "ratio_EE_rouge": 0.9157509157509159, "ratio_EE_bleu": 0.9006593550166486, "ratio_EE_bleurt": 0.8070191032375781, "ratio_EE_gleu": 0.901227534055006, "ratio_AG_rouge": 0.8591549295774649, "ratio_AG_bleu": 0.7369992144186956, "ratio_AG_bleurt": 0.9813397630778907, "ratio_AG_gleu": 0.7370673005496954, "ratio_SR_rouge": 0.9090909090909091, "ratio_SR_bleu": 0.8278379726056089, "ratio_SR_bleurt": 0.8290135055385597, "ratio_SR_gleu": 0.8394919168591224}, {"prompt": "Given \\hat{x}{(f)} = \\int \\log{(f)} df, then derive \\hat{x}{(f)} = B + f \\log{(f)} - f, then obtain B + f \\log{(f)} = f + \\int \\log{(f)} df", "derivation": "\\hat{x}{(f)} = \\int \\log{(f)} df and \\hat{x}{(f)} = B + f \\log{(f)} - f and B + f \\log{(f)} - f = \\int \\log{(f)} df and B + f \\log{(f)} = f + \\int \\log{(f)} df", "srepr_derivation": [["premise", "Equality(Function('\\\\hat{x}')(Symbol('f', commutative=True)), Integral(log(Symbol('f', commutative=True)), Tuple(Symbol('f', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\hat{x}')(Symbol('f', commutative=True)), Add(Symbol('B', commutative=True), Mul(Symbol('f', commutative=True), log(Symbol('f', commutative=True))), Mul(Integer(-1), Symbol('f', commutative=True))))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(Add(Symbol('B', commutative=True), Mul(Symbol('f', commutative=True), log(Symbol('f', commutative=True))), Mul(Integer(-1), Symbol('f', commutative=True))), Integral(log(Symbol('f', commutative=True)), Tuple(Symbol('f', commutative=True))))"], [["minus", 3, "Mul(Integer(-1), Symbol('f', commutative=True))"], "Equality(Add(Symbol('B', commutative=True), Mul(Symbol('f', commutative=True), log(Symbol('f', commutative=True)))), Add(Symbol('f', commutative=True), Integral(log(Symbol('f', commutative=True)), Tuple(Symbol('f', commutative=True)))))"]], "EE prompt": "Given \\int \\log{(f)} df = \\hat{x}{(f)}, then derive B + f \\log{(f)} - f = \\hat{x}{(f)}, then obtain f + \\int \\log{(f)} df = B + f \\log{(f)}", "EE derivation": "\\int \\log{(f)} df = \\hat{x}{(f)} and B + f \\log{(f)} - f = \\hat{x}{(f)} and \\int \\log{(f)} df = B + f \\log{(f)} - f and f + \\int \\log{(f)} df = B + f \\log{(f)}", "EE srepr_derivation": [["premise", "Equality(Integral(log(Symbol('f', commutative=True)), Tuple(Symbol('f', commutative=True))), Function('\\\\hat{x}')(Symbol('f', commutative=True)))"], [["evaluate_integrals", 1], "Equality(Add(Symbol('B', commutative=True), Mul(Symbol('f', commutative=True), log(Symbol('f', commutative=True))), Mul(Integer(-1), Symbol('f', commutative=True))), Function('\\\\hat{x}')(Symbol('f', commutative=True)))"], [["substitute_RHS_for_LHS", 1, 2], "Equality(Integral(log(Symbol('f', commutative=True)), Tuple(Symbol('f', commutative=True))), Add(Symbol('B', commutative=True), Mul(Symbol('f', commutative=True), log(Symbol('f', commutative=True))), Mul(Integer(-1), Symbol('f', commutative=True))))"], [["minus", 3, "Mul(Integer(-1), Symbol('f', commutative=True))"], "Equality(Add(Symbol('f', commutative=True), Integral(log(Symbol('f', commutative=True)), Tuple(Symbol('f', commutative=True)))), Add(Symbol('B', commutative=True), Mul(Symbol('f', commutative=True), log(Symbol('f', commutative=True)))))"]], "AG prompt": "Given \\hat{x}{(f)} = \\int \\log{(f)} df, then derive \\hat{x}{(f)} = B + f \\log{(f)} - f, then obtain (B + f \\log{(f)} - f)^{2} = (B + f \\log{(f)} - f) \\int \\log{(f)} df", "AG derivation": "\\hat{x}{(f)} = \\int \\log{(f)} df and \\hat{x}{(f)} = B + f \\log{(f)} - f and B + f \\log{(f)} - f = \\int \\log{(f)} df and (B + f \\log{(f)} - f)^{2} = (B + f \\log{(f)} - f) \\int \\log{(f)} df", "AG srepr_derivation": [["premise", "Equality(Function('\\\\hat{x}')(Symbol('f', commutative=True)), Integral(log(Symbol('f', commutative=True)), Tuple(Symbol('f', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\hat{x}')(Symbol('f', commutative=True)), Add(Symbol('B', commutative=True), Mul(Symbol('f', commutative=True), log(Symbol('f', commutative=True))), Mul(Integer(-1), Symbol('f', commutative=True))))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(Add(Symbol('B', commutative=True), Mul(Symbol('f', commutative=True), log(Symbol('f', commutative=True))), Mul(Integer(-1), Symbol('f', commutative=True))), Integral(log(Symbol('f', commutative=True)), Tuple(Symbol('f', commutative=True))))"], [["times", 3, "Add(Symbol('B', commutative=True), Mul(Symbol('f', commutative=True), log(Symbol('f', commutative=True))), Mul(Integer(-1), Symbol('f', commutative=True)))"], "Equality(Pow(Add(Symbol('B', commutative=True), Mul(Symbol('f', commutative=True), log(Symbol('f', commutative=True))), Mul(Integer(-1), Symbol('f', commutative=True))), Integer(2)), Mul(Add(Symbol('B', commutative=True), Mul(Symbol('f', commutative=True), log(Symbol('f', commutative=True))), Mul(Integer(-1), Symbol('f', commutative=True))), Integral(log(Symbol('f', commutative=True)), Tuple(Symbol('f', commutative=True)))))"]], "SR prompt": "Given \\hat{x}{(f)} = \\int \\log{(f)} df, then obtain B + f \\log{(f)} = f + \\int \\log{(f)} df", "SR derivation": "\\hat{x}{(f)} = \\int \\log{(f)} df and \\hat{x}{(f)} = B + f \\log{(f)} - f and B + f \\log{(f)} - f = \\int \\log{(f)} df and B + f \\log{(f)} = f + \\int \\log{(f)} df", "SR srepr_derivation": [["premise", "Equality(Function('\\\\hat{x}')(Symbol('f', commutative=True)), Integral(log(Symbol('f', commutative=True)), Tuple(Symbol('f', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\hat{x}')(Symbol('f', commutative=True)), Add(Symbol('B', commutative=True), Mul(Symbol('f', commutative=True), log(Symbol('f', commutative=True))), Mul(Integer(-1), Symbol('f', commutative=True))))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(Add(Symbol('B', commutative=True), Mul(Symbol('f', commutative=True), log(Symbol('f', commutative=True))), Mul(Integer(-1), Symbol('f', commutative=True))), Integral(log(Symbol('f', commutative=True)), Tuple(Symbol('f', commutative=True))))"], [["minus", 3, "Mul(Integer(-1), Symbol('f', commutative=True))"], "Equality(Add(Symbol('B', commutative=True), Mul(Symbol('f', commutative=True), log(Symbol('f', commutative=True)))), Add(Symbol('f', commutative=True), Integral(log(Symbol('f', commutative=True)), Tuple(Symbol('f', commutative=True)))))"]], "VR prompt": "Given \\upsilon{(\\iota)} = \\int \\log{(\\iota)} d\\iota, then derive \\upsilon{(\\iota)} = \\iota \\log{(\\iota)} - \\iota + \\zeta, then obtain \\iota \\log{(\\iota)} + \\zeta = \\iota + \\int \\log{(\\iota)} d\\iota", "VR derivation": "\\upsilon{(\\iota)} = \\int \\log{(\\iota)} d\\iota and \\upsilon{(\\iota)} = \\iota \\log{(\\iota)} - \\iota + \\zeta and \\iota \\log{(\\iota)} - \\iota + \\zeta = \\int \\log{(\\iota)} d\\iota and \\iota \\log{(\\iota)} + \\zeta = \\iota + \\int \\log{(\\iota)} d\\iota", "VR srepr_derivation": [["premise", "Equality(Function('\\\\upsilon')(Symbol('\\\\iota', commutative=True)), Integral(log(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\upsilon')(Symbol('\\\\iota', commutative=True)), Add(Mul(Symbol('\\\\iota', commutative=True), log(Symbol('\\\\iota', commutative=True))), Mul(Integer(-1), Symbol('\\\\iota', commutative=True)), Symbol('\\\\zeta', commutative=True)))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(Add(Mul(Symbol('\\\\iota', commutative=True), log(Symbol('\\\\iota', commutative=True))), Mul(Integer(-1), Symbol('\\\\iota', commutative=True)), Symbol('\\\\zeta', commutative=True)), Integral(log(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True))))"], [["minus", 3, "Mul(Integer(-1), Symbol('\\\\iota', commutative=True))"], "Equality(Add(Mul(Symbol('\\\\iota', commutative=True), log(Symbol('\\\\iota', commutative=True))), Symbol('\\\\zeta', commutative=True)), Add(Symbol('\\\\iota', commutative=True), Integral(log(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True)))))"]], "static_flan-t5-large": "hat { x } { (f) } = \\ int \\ log { (f) } df and \\ hat { x } { (f) } - \\ int \\ log { (f) } df = 0 and \\ hat { x } { (f) } = B + f \\ log { (f) } - f and B + f \\ log { (f) } = f + \\ int \\ log { (f) } df", "VR_flan-t5-large": "iota + \\ int \\ log { ( \\ iota) } d \\ iota and \\ iota + \\ int \\ log { ( \\ iota) } d \\ iota = \\ iota + \\ int \\ log { ( \\ iota) } d \\ iota and \\ iota \\ log { ( \\ iota) } - \\ iota + \\ zeta = \\ iota \\ log { ( \\ iota) } - \\ iota + \\ zeta and \\ iota \\ log { ( \\ iota) } + \\ zeta = \\ iota + \\ int \\ log { ( \\ iota) } d \\ iota", "EE_flan-t5-large": "int \\ log { (f) } df = \\ hat { x } { (f) } and \\ int \\ log { (f) } df = \\ hat { x } { (f) } and f + \\ int \\ log { (f) } df = f + \\ hat { x } { (f) } and B + f \\ log { (f) } - f = \\ hat { x } { (f) } and f + \\ int \\ log { (f) } df = B + f \\ log { (f) }", "AG_flan-t5-large": "hat { x } { (f) } = \\ int \\ log { (f) } df and \\ hat { x } ^ { 2 } { (f) } = \\ hat { x } { (f) } \\ int \\ log { (f) } df and \\ hat { x } ^ { 2 } { (f) } = (B + f \\ log { (f) } - f) \\ int \\ log { (f) } df and (B + f \\ log { (f) } - f) ^ { 2 } = (B + f \\ log { (f) } - f) \\ int \\ log { (f) } df", "SR_flan-t5-large": "hat { x } { (f) } = \\ int \\ log { (f) } df and f + \\ hat { x } { (f) } = f + \\ int \\ log { (f) } df and B + f \\ log { (f) } = f + \\ int \\ log { (f) } df", "static_rouge": 0.8405797101449276, "static_bleu": 0.8843158741622833, "static_bleurt": 0.4595070481300354, "static_gleu": 0.8852459016393442, "VR_rouge": -0.0015255530129671957, "EE_rouge": 0.04570791527313278, "AG_rouge": 0.0315909460999837, "SR_rouge": 0.053694464243288165, "VR_rouge_abs": 0.0034259611724400535, "EE_rouge_abs": 0.09610389610389614, "AG_rouge_abs": 0.18934531450577663, "SR_rouge_abs": 0.2333333333333334, "VR_bleu": 0.03444491390316795, "EE_bleu": 0.14947968827922276, "AG_bleu": 0.15450498762593967, "SR_bleu": 0.22924739256193183, "VR_bleu_abs": 0.06358724514222908, "EE_bleu_abs": 0.2076980420205602, "AG_bleu_abs": 0.21338160662513028, "SR_bleu_abs": 0.3548802015494126, "VR_bleurt": -0.05566900968551636, "EE_bleurt": -0.33513134717941284, "AG_bleurt": -0.2959127426147461, "SR_bleurt": -0.06680804491043091, "VR_bleurt_abs": -0.022043630480766296, "EE_bleurt_abs": 0.3241417706012726, "AG_bleurt_abs": 0.0010211467742919922, "SR_bleurt_abs": 0.34728363156318665, "VR_gleu": 0.034134790528233094, "EE_gleu": 0.14943804137733552, "AG_gleu": 0.15419897023140205, "SR_gleu": 0.20218579234972678, "VR_gleu_abs": 0.063399897593446, "EE_gleu_abs": 0.20837807526188934, "AG_gleu_abs": 0.21080280390474493, "SR_gleu_abs": 0.3287292817679558, "ratio_VR_rouge": 0.9594594594594593, "ratio_VR_bleu": 0.7918480614167073, "ratio_VR_bleurt": 0.8980233323234402, "ratio_VR_gleu": 0.8165629629629629, "ratio_EE_rouge": 0.8754208754208754, "ratio_EE_bleu": 0.7606344826376932, "ratio_EE_bleurt": 0.580561744664349, "ratio_EE_gleu": 0.761667576419214, "ratio_AG_rouge": 0.794425087108014, "ratio_AG_bleu": 0.7245913782367371, "ratio_AG_bleurt": 0.9982324962760888, "ratio_AG_gleu": 0.7282715302268317, "ratio_SR_rouge": 0.7666666666666666, "ratio_SR_bleu": 0.6451197984505874, "ratio_SR_bleurt": 0.5005008748700126, "ratio_SR_gleu": 0.6712707182320442}, {"prompt": "Given \\mathbf{v}{(C_{2})} = C_{2}, then derive \\int \\mathbf{v}{(C_{2})} dC_{2} = \\frac{C_{2}^{2}}{2} + v, then derive \\mathbf{p} + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2} = v + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2}, then obtain \\frac{C_{2}^{2}}{2} + \\mathbf{p} = \\frac{C_{2}^{2}}{2} + v", "derivation": "\\mathbf{v}{(C_{2})} = C_{2} and \\int \\mathbf{v}{(C_{2})} dC_{2} = \\int C_{2} dC_{2} and \\int \\mathbf{v}{(C_{2})} dC_{2} = \\frac{C_{2}^{2}}{2} + v and \\int \\mathbf{v}{(C_{2})} d\\mathbf{v}{(C_{2})} = v + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2} and \\mathbf{p} + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2} = v + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2} and \\frac{C_{2}^{2}}{2} + \\mathbf{p} = \\frac{C_{2}^{2}}{2} + v", "srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Symbol('C_2', commutative=True))"], [["integrate", 1, "Symbol('C_2', commutative=True)"], "Equality(Integral(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Integral(Symbol('C_2', commutative=True), Tuple(Symbol('C_2', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Symbol('v', commutative=True)))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Integral(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Tuple(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)))), Add(Symbol('v', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Integer(2)))))"], [["evaluate_integrals", 4], "Equality(Add(Symbol('\\\\mathbf{p}', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Integer(2)))), Add(Symbol('v', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Integer(2)))))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Symbol('\\\\mathbf{p}', commutative=True)), Add(Mul(Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Symbol('v', commutative=True)))"]], "EE prompt": "Given C_{2} = \\mathbf{v}{(C_{2})}, then derive \\frac{C_{2}^{2}}{2} + v = \\int \\mathbf{v}{(C_{2})} dC_{2}, then derive v + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2} = \\mathbf{p} + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2}, then obtain \\frac{C_{2}^{2}}{2} + v = \\frac{C_{2}^{2}}{2} + \\mathbf{p}", "EE derivation": "C_{2} = \\mathbf{v}{(C_{2})} and \\int C_{2} dC_{2} = \\int \\mathbf{v}{(C_{2})} dC_{2} and \\frac{C_{2}^{2}}{2} + v = \\int \\mathbf{v}{(C_{2})} dC_{2} and v + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2} = \\int \\mathbf{v}{(C_{2})} d\\mathbf{v}{(C_{2})} and v + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2} = \\mathbf{p} + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2} and \\frac{C_{2}^{2}}{2} + v = \\frac{C_{2}^{2}}{2} + \\mathbf{p}", "EE srepr_derivation": [["premise", "Equality(Symbol('C_2', commutative=True), Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)))"], [["integrate", 1, "Symbol('C_2', commutative=True)"], "Equality(Integral(Symbol('C_2', commutative=True), Tuple(Symbol('C_2', commutative=True))), Integral(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Symbol('v', commutative=True)), Integral(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Add(Symbol('v', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Integer(2)))), Integral(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Tuple(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)))))"], [["evaluate_integrals", 4], "Equality(Add(Symbol('v', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Integer(2)))), Add(Symbol('\\\\mathbf{p}', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Integer(2)))))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Symbol('v', commutative=True)), Add(Mul(Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Symbol('\\\\mathbf{p}', commutative=True)))"]], "AG prompt": "Given \\mathbf{v}{(C_{2})} = C_{2}, then derive \\int \\mathbf{v}{(C_{2})} dC_{2} = \\frac{C_{2}^{2}}{2} + v, then derive \\mathbf{p} + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2} = v + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2}, then obtain \\mathbf{p} + v + \\mathbf{v}^{2}{(C_{2})} = 2 v + \\mathbf{v}^{2}{(C_{2})}", "AG derivation": "\\mathbf{v}{(C_{2})} = C_{2} and \\int \\mathbf{v}{(C_{2})} dC_{2} = \\int C_{2} dC_{2} and \\int \\mathbf{v}{(C_{2})} dC_{2} = \\frac{C_{2}^{2}}{2} + v and \\int \\mathbf{v}{(C_{2})} d\\mathbf{v}{(C_{2})} = v + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2} and \\mathbf{p} + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2} = v + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2} and \\mathbf{p} + v + \\mathbf{v}^{2}{(C_{2})} = 2 v + \\mathbf{v}^{2}{(C_{2})}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Symbol('C_2', commutative=True))"], [["integrate", 1, "Symbol('C_2', commutative=True)"], "Equality(Integral(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Integral(Symbol('C_2', commutative=True), Tuple(Symbol('C_2', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Symbol('v', commutative=True)))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Integral(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Tuple(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)))), Add(Symbol('v', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Integer(2)))))"], [["evaluate_integrals", 4], "Equality(Add(Symbol('\\\\mathbf{p}', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Integer(2)))), Add(Symbol('v', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Integer(2)))))"], [["add", 5, "Add(Symbol('v', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Integer(2))))"], "Equality(Add(Symbol('\\\\mathbf{p}', commutative=True), Symbol('v', commutative=True), Pow(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Integer(2))), Add(Mul(Integer(2), Symbol('v', commutative=True)), Pow(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Integer(2))))"]], "SR prompt": "Given \\mathbf{v}{(C_{2})} = C_{2}, then obtain \\frac{C_{2}^{2}}{2} + \\mathbf{p} = \\frac{C_{2}^{2}}{2} + v", "SR derivation": "\\mathbf{v}{(C_{2})} = C_{2} and \\int \\mathbf{v}{(C_{2})} dC_{2} = \\int C_{2} dC_{2} and \\int \\mathbf{v}{(C_{2})} dC_{2} = \\frac{C_{2}^{2}}{2} + v and \\int \\mathbf{v}{(C_{2})} d\\mathbf{v}{(C_{2})} = v + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2} and \\mathbf{p} + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2} = v + \\frac{\\mathbf{v}^{2}{(C_{2})}}{2} and \\frac{C_{2}^{2}}{2} + \\mathbf{p} = \\frac{C_{2}^{2}}{2} + v", "SR srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Symbol('C_2', commutative=True))"], [["integrate", 1, "Symbol('C_2', commutative=True)"], "Equality(Integral(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Integral(Symbol('C_2', commutative=True), Tuple(Symbol('C_2', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Symbol('v', commutative=True)))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Integral(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Tuple(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)))), Add(Symbol('v', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Integer(2)))))"], [["evaluate_integrals", 4], "Equality(Add(Symbol('\\\\mathbf{p}', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Integer(2)))), Add(Symbol('v', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\mathbf{v}')(Symbol('C_2', commutative=True)), Integer(2)))))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Symbol('\\\\mathbf{p}', commutative=True)), Add(Mul(Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Symbol('v', commutative=True)))"]], "VR prompt": "Given \\gamma{(\\beta)} = \\beta, then derive \\int \\gamma{(\\beta)} d\\beta = \\frac{\\beta^{2}}{2} + \\omicron, then derive \\alpha + \\frac{\\gamma^{2}{(\\beta)}}{2} = \\omicron + \\frac{\\gamma^{2}{(\\beta)}}{2}, then obtain \\alpha + \\frac{\\beta^{2}}{2} = \\frac{\\beta^{2}}{2} + \\omicron", "VR derivation": "\\gamma{(\\beta)} = \\beta and \\int \\gamma{(\\beta)} d\\beta = \\int \\beta d\\beta and \\int \\gamma{(\\beta)} d\\beta = \\frac{\\beta^{2}}{2} + \\omicron and \\int \\gamma{(C_{2})} d\\gamma{(C_{2})} = \\omicron + \\frac{\\gamma^{2}{(\\beta)}}{2} and \\alpha + \\frac{\\gamma^{2}{(\\beta)}}{2} = \\omicron + \\frac{\\gamma^{2}{(\\beta)}}{2} and \\alpha + \\frac{\\beta^{2}}{2} = \\frac{\\beta^{2}}{2} + \\omicron", "VR srepr_derivation": [["premise", "Equality(Function('\\\\gamma')(Symbol('\\\\beta', commutative=True)), Symbol('\\\\beta', commutative=True))"], [["integrate", 1, "Symbol('\\\\beta', commutative=True)"], "Equality(Integral(Function('\\\\gamma')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))), Integral(Symbol('\\\\beta', commutative=True), Tuple(Symbol('\\\\beta', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\gamma')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\beta', commutative=True), Integer(2))), Symbol('\\\\omicron', commutative=True)))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Integral(Function('\\\\gamma')(Symbol('C_2', commutative=True)), Tuple(Function('\\\\gamma')(Symbol('C_2', commutative=True)))), Add(Symbol('\\\\omicron', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\gamma')(Symbol('\\\\beta', commutative=True)), Integer(2)))))"], [["evaluate_integrals", 4], "Equality(Add(Symbol('\\\\alpha', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\gamma')(Symbol('\\\\beta', commutative=True)), Integer(2)))), Add(Symbol('\\\\omicron', commutative=True), Mul(Rational(1, 2), Pow(Function('\\\\gamma')(Symbol('\\\\beta', commutative=True)), Integer(2)))))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Add(Symbol('\\\\alpha', commutative=True), Mul(Rational(1, 2), Pow(Symbol('\\\\beta', commutative=True), Integer(2)))), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\beta', commutative=True), Integer(2))), Symbol('\\\\omicron', commutative=True)))"]], "static_flan-t5-large": "mathbf { v } { (C_ { 2 } ) } = C_ { 2 } and \\ int \\ mathbf { v } { (C_ { 2 } ) } dC_ { 2 } = \\ int C_ { 2 } dC_ { 2 } and \\ int \\ mathbf { v } { (C_ { 2 } ) } dC_ { 2 } = \\ frac { C_ { 2 } ^ { 2 } } { 2 } + v and \\ int C_ { 2 } dC_ { 2 } = \\ frac { C_ { 2 } ^ { 2 } } { 2 } + v and \\ mathbf { p } + \\ frac { \\ mathbf { v } ^ { 2 } { (C_ { 2 } ) } } { 2 } = \\ int C_ { 2 } dC_ { 2 } and \\ frac { C_ { 2 } ^ { 2 } } { 2 } + \\ mathbf { p } = v + \\ frac { \\ mathbf { v } ^ { 2 } { (C_ { 2 } ) } } { 2 } and \\ frac { C_ { 2 } ^ { 2 } } { 2 } + \\ mathbf { p } = \\ frac { C_ { 2 } ^ { 2 } } { 2 } + v", "VR_flan-t5-large": "gamma { ( \\ beta) } = \\ beta and \\ int \\ gamma { ( \\ beta) } d \\ beta = \\ int \\ beta d \\ beta and \\ int \\ gamma { ( \\ beta) } d \\ beta = \\ frac { \\ beta ^ { 2 } } { 2 } + \\ omicron and \\ int \\ gamma { ( \\ beta) } d \\ beta = \\ frac { \\ beta ^ { 2 } } { 2 } + \\ omicron and \\ frac { \\ int \\ gamma { ( \\ beta) } d \\ beta } { 2 } = \\ frac { \\ gamma ^ { 2 } { ( \\ beta) } } { 2 } and \\ int \\ omega d \\ beta = \\ frac { \\ gamma ^ { 2 } { ( \\ beta) } } { 2 } and \\ int \\ omega d \\ beta = \\ omicron + \\ frac { \\ gamma ^ { 2 } { ( \\ beta) } } { 2 } and \\ alpha + \\ frac { \\ gamma ^ { 2 } { ( \\ beta) } } { 2 } = \\ frac { \\ gamma ^ { 2 } { ( \\ beta) } } { 2 } and \\ alpha + \\ frac { \\ beta ^ { 2 } } { 2 } = \\ frac { \\ beta ^ { 2 } } { 2 } + \\ omicron", "EE_flan-t5-large": "mathbf { v } { (C_ { 2 } ) } = \\ mathbf { v } { (C_ { 2 } ) } and \\ int C_ { 2 } dC_ { 2 } = \\ int \\ mathbf { v } { (C_ { 2 } ) } dC_ { 2 } and \\ int C_ { 2 } dC_ { 2 } = \\ int \\ mathbf { v } { (C_ { 2 } ) } dC_ { 2 } and \\ frac { C_ { 2 } ^ { 2 } } { 2 } + v = \\ int \\ mathbf { v } { (C_ { 2 } ) } dC_ { 2 } and \\ frac { C_ { 2 } ^ { 2 } } { 2 } + v = \\ mathbf { p } + \\ frac { \\ mathbf { v } ^ { 2 } { (C_ { 2 } ) } } { 2 } and v + \\ frac { \\ mathbf { v } ^ { 2 } { (C_ { 2 } ) } } { 2 } = \\ mathbf { p } + \\ frac { \\ mathbf { v } ^ { 2 } { (C_ { 2 } ) } } { 2 } and \\ frac { C_ { 2 } ^ { 2 } } { 2 } + v = \\ frac { C_ { 2 } ^ { 2 } } { 2 } + \\ mathbf { p }", "AG_flan-t5-large": "mathbf { v } { (C_ { 2 } ) } = C_ { 2 } and \\ int \\ mathbf { v } { (C_ { 2 } ) } dC_ { 2 } = \\ int C_ { 2 } dC_ { 2 } and \\ int \\ mathbf { v } { (C_ { 2 } ) } dC_ { 2 } = \\ frac { C_ { 2 } ^ { 2 } } { 2 } + v and \\ int C_ { 2 } dC_ { 2 } = \\ frac { C_ { 2 } ^ { 2 } } { 2 } + v and \\ mathbf { p } + \\ frac { C_ { 2 } ^ { 2 } } { 2 } + v = \\ int C_ { 2 } dC_ { 2 } and \\ mathbf { p } + v + \\ mathbf { v } ^ { 2 } { (C_ { 2 } ) } = v + \\ frac { \\ mathbf { v } ^ { 2 } { (C_ { 2 } ) } } { 2 } and \\ mathbf { p } + v + \\ mathbf { v } ^ { 2 } { (C_ { 2 } ) } = 2 v + \\ mathbf { v } ^ { 2 } { (C_ { 2 } ) }", "SR_flan-t5-large": "mathbf { v } { (C_ { 2 } ) } = C_ { 2 } and \\ frac { \\ mathbf { v } { (C_ { 2 } ) } } { C_ { 2 } } = \\ frac { C_ { 2 } } { C_ { 2 } } and \\ frac { \\ mathbf { v } { (C_ { 2 } ) } } { C_ { 2 } } + \\ mathbf { p } = \\ frac { C_ { 2 } } { C_ { 2 } } + \\ mathbf { v } { (C_ { 2 } ) } } and \\ frac { C_ { 2 } ^ { 2 } } { 2 } + \\ mathbf { p } = \\ frac { C_ { 2 } ^ { 2 } } { 2 } + v", "static_rouge": 0.813953488372093, "static_bleu": 0.8435095442556826, "static_bleurt": 0.7420330047607422, "static_gleu": 0.8453510436432637, "VR_rouge": 0.10807113543091651, "EE_rouge": -0.07368696106610917, "AG_rouge": -0.004228329809725095, "SR_rouge": 0.14231169732731708, "VR_rouge_abs": 0.009961685823754785, "EE_rouge_abs": 0.03287061288632798, "AG_rouge_abs": 0.04841269841269824, "SR_rouge_abs": 0.34285714285714275, "VR_bleu": 0.18771731694233695, "EE_bleu": -0.017751847834502676, "AG_bleu": -0.00885097578558014, "SR_bleu": 0.32717901666670324, "VR_bleu_abs": -0.014965491629309713, "EE_bleu_abs": 0.10749393620621206, "AG_bleu_abs": 0.026366526550153035, "SR_bleu_abs": 0.48439773894996896, "VR_bleurt": -0.00925743579864502, "EE_bleurt": 0.02933412790298462, "AG_bleurt": 0.023805439472198486, "SR_bleurt": 0.3197007477283478, "VR_bleurt_abs": -0.05234404560178518, "EE_bleurt_abs": 0.0475001335144043, "AG_bleurt_abs": 0.06809544563293457, "SR_bleurt_abs": 0.5104214549064636, "VR_gleu": 0.18857924401432125, "EE_gleu": -0.01609473948926643, "AG_gleu": -0.008854563833371798, "SR_gleu": 0.27030231069979394, "VR_gleu_abs": -0.004090312360989057, "EE_gleu_abs": 0.10657668267053166, "AG_gleu_abs": 0.025726648814485054, "SR_gleu_abs": 0.4193548387096774, "ratio_VR_rouge": 0.9398148148148149, "ratio_VR_bleu": 1.0389747830810931, "ratio_VR_bleurt": -0.29269122421586136, "ratio_VR_gleu": 1.0098513156863258, "ratio_EE_rouge": 0.9631316098707402, "ratio_EE_bleu": 0.8863980302700456, "ratio_EE_bleurt": 0.9391475897735696, "ratio_EE_gleu": 0.8875023905144388, "ratio_AG_rouge": 0.9457777777777779, "ratio_AG_bleu": 0.9709312118070899, "ratio_AG_bleurt": 0.9199768571052329, "ratio_AG_gleu": 0.9716657389232317, "ratio_SR_rouge": 0.6571428571428573, "ratio_SR_bleu": 0.515602261050031, "ratio_SR_bleurt": 0.4034727163222251, "ratio_SR_gleu": 0.5806451612903226}, {"prompt": "Given \\operatorname{y^{\\prime}}{(\\mathbf{s})} = \\log{(\\mathbf{s})} and a{(\\mathbf{s})} = \\operatorname{y^{\\prime}}{(\\mathbf{s})} - \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s}, then derive \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s} = \\mathbf{s} \\log{(\\mathbf{s})} - \\mathbf{s} + \\omega, then obtain a{(\\mathbf{s})} = - \\mathbf{s} \\log{(\\mathbf{s})} + \\mathbf{s} - \\omega + \\operatorname{y^{\\prime}}{(\\mathbf{s})}", "derivation": "\\operatorname{y^{\\prime}}{(\\mathbf{s})} = \\log{(\\mathbf{s})} and \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s} = \\int \\log{(\\mathbf{s})} d\\mathbf{s} and \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s} = \\mathbf{s} \\log{(\\mathbf{s})} - \\mathbf{s} + \\omega and a{(\\mathbf{s})} = \\operatorname{y^{\\prime}}{(\\mathbf{s})} - \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s} and a{(\\mathbf{s})} = - \\mathbf{s} \\log{(\\mathbf{s})} + \\mathbf{s} - \\omega + \\operatorname{y^{\\prime}}{(\\mathbf{s})}", "srepr_derivation": [["premise", "Equality(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), log(Symbol('\\\\mathbf{s}', commutative=True)))"], [["integrate", 1, "Symbol('\\\\mathbf{s}', commutative=True)"], "Equality(Integral(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))), Integral(log(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))), Add(Mul(Symbol('\\\\mathbf{s}', commutative=True), log(Symbol('\\\\mathbf{s}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{s}', commutative=True)), Symbol('\\\\omega', commutative=True)))"], ["renaming_premise", "Equality(Function('a')(Symbol('\\\\mathbf{s}', commutative=True)), Add(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Mul(Integer(-1), Integral(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))))))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Function('a')(Symbol('\\\\mathbf{s}', commutative=True)), Add(Mul(Integer(-1), Symbol('\\\\mathbf{s}', commutative=True), log(Symbol('\\\\mathbf{s}', commutative=True))), Symbol('\\\\mathbf{s}', commutative=True), Mul(Integer(-1), Symbol('\\\\omega', commutative=True)), Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True))))"]], "EE prompt": "Given \\log{(\\mathbf{s})} = \\operatorname{y^{\\prime}}{(\\mathbf{s})} and \\operatorname{y^{\\prime}}{(\\mathbf{s})} - \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s} = a{(\\mathbf{s})}, then derive \\mathbf{s} \\log{(\\mathbf{s})} - \\mathbf{s} + \\omega = \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s}, then obtain - \\mathbf{s} \\log{(\\mathbf{s})} + \\mathbf{s} - \\omega + \\operatorname{y^{\\prime}}{(\\mathbf{s})} = a{(\\mathbf{s})}", "EE derivation": "\\log{(\\mathbf{s})} = \\operatorname{y^{\\prime}}{(\\mathbf{s})} and \\int \\log{(\\mathbf{s})} d\\mathbf{s} = \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s} and \\mathbf{s} \\log{(\\mathbf{s})} - \\mathbf{s} + \\omega = \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s} and \\operatorname{y^{\\prime}}{(\\mathbf{s})} - \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s} = a{(\\mathbf{s})} and - \\mathbf{s} \\log{(\\mathbf{s})} + \\mathbf{s} - \\omega + \\operatorname{y^{\\prime}}{(\\mathbf{s})} = a{(\\mathbf{s})}", "EE srepr_derivation": [["premise", "Equality(log(Symbol('\\\\mathbf{s}', commutative=True)), Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)))"], [["integrate", 1, "Symbol('\\\\mathbf{s}', commutative=True)"], "Equality(Integral(log(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))), Integral(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Add(Mul(Symbol('\\\\mathbf{s}', commutative=True), log(Symbol('\\\\mathbf{s}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{s}', commutative=True)), Symbol('\\\\omega', commutative=True)), Integral(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))))"], ["renaming_premise", "Equality(Add(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Mul(Integer(-1), Integral(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))))), Function('a')(Symbol('\\\\mathbf{s}', commutative=True)))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Add(Mul(Integer(-1), Symbol('\\\\mathbf{s}', commutative=True), log(Symbol('\\\\mathbf{s}', commutative=True))), Symbol('\\\\mathbf{s}', commutative=True), Mul(Integer(-1), Symbol('\\\\omega', commutative=True)), Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True))), Function('a')(Symbol('\\\\mathbf{s}', commutative=True)))"]], "AG prompt": "Given \\operatorname{y^{\\prime}}{(\\mathbf{s})} = \\log{(\\mathbf{s})} and a{(\\mathbf{s})} = \\operatorname{y^{\\prime}}{(\\mathbf{s})} - \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s}, then derive \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s} = \\mathbf{s} \\log{(\\mathbf{s})} - \\mathbf{s} + \\omega, then obtain a{(\\mathbf{s})} = \\operatorname{y^{\\prime}}{(\\mathbf{s})} - \\int \\log{(\\mathbf{s})} d\\mathbf{s}", "AG derivation": "\\operatorname{y^{\\prime}}{(\\mathbf{s})} = \\log{(\\mathbf{s})} and \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s} = \\int \\log{(\\mathbf{s})} d\\mathbf{s} and \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s} = \\mathbf{s} \\log{(\\mathbf{s})} - \\mathbf{s} + \\omega and a{(\\mathbf{s})} = \\operatorname{y^{\\prime}}{(\\mathbf{s})} - \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s} and a{(\\mathbf{s})} = \\operatorname{y^{\\prime}}{(\\mathbf{s})} - \\int \\log{(\\mathbf{s})} d\\mathbf{s}", "AG srepr_derivation": [["premise", "Equality(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), log(Symbol('\\\\mathbf{s}', commutative=True)))"], [["integrate", 1, "Symbol('\\\\mathbf{s}', commutative=True)"], "Equality(Integral(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))), Integral(log(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))), Add(Mul(Symbol('\\\\mathbf{s}', commutative=True), log(Symbol('\\\\mathbf{s}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{s}', commutative=True)), Symbol('\\\\omega', commutative=True)))"], ["renaming_premise", "Equality(Function('a')(Symbol('\\\\mathbf{s}', commutative=True)), Add(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Mul(Integer(-1), Integral(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Function('a')(Symbol('\\\\mathbf{s}', commutative=True)), Add(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Mul(Integer(-1), Integral(log(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))))))"]], "SR prompt": "Given \\operatorname{y^{\\prime}}{(\\mathbf{s})} = \\log{(\\mathbf{s})} and a{(\\mathbf{s})} = \\operatorname{y^{\\prime}}{(\\mathbf{s})} - \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s}, then obtain a{(\\mathbf{s})} = - \\mathbf{s} \\log{(\\mathbf{s})} + \\mathbf{s} - \\omega + \\operatorname{y^{\\prime}}{(\\mathbf{s})}", "SR derivation": "\\operatorname{y^{\\prime}}{(\\mathbf{s})} = \\log{(\\mathbf{s})} and \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s} = \\int \\log{(\\mathbf{s})} d\\mathbf{s} and \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s} = \\mathbf{s} \\log{(\\mathbf{s})} - \\mathbf{s} + \\omega and a{(\\mathbf{s})} = \\operatorname{y^{\\prime}}{(\\mathbf{s})} - \\int \\operatorname{y^{\\prime}}{(\\mathbf{s})} d\\mathbf{s} and a{(\\mathbf{s})} = - \\mathbf{s} \\log{(\\mathbf{s})} + \\mathbf{s} - \\omega + \\operatorname{y^{\\prime}}{(\\mathbf{s})}", "SR srepr_derivation": [["premise", "Equality(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), log(Symbol('\\\\mathbf{s}', commutative=True)))"], [["integrate", 1, "Symbol('\\\\mathbf{s}', commutative=True)"], "Equality(Integral(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))), Integral(log(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))), Add(Mul(Symbol('\\\\mathbf{s}', commutative=True), log(Symbol('\\\\mathbf{s}', commutative=True))), Mul(Integer(-1), Symbol('\\\\mathbf{s}', commutative=True)), Symbol('\\\\omega', commutative=True)))"], ["renaming_premise", "Equality(Function('a')(Symbol('\\\\mathbf{s}', commutative=True)), Add(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Mul(Integer(-1), Integral(Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True)), Tuple(Symbol('\\\\mathbf{s}', commutative=True))))))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Function('a')(Symbol('\\\\mathbf{s}', commutative=True)), Add(Mul(Integer(-1), Symbol('\\\\mathbf{s}', commutative=True), log(Symbol('\\\\mathbf{s}', commutative=True))), Symbol('\\\\mathbf{s}', commutative=True), Mul(Integer(-1), Symbol('\\\\omega', commutative=True)), Function('y^{\\\\prime}')(Symbol('\\\\mathbf{s}', commutative=True))))"]], "VR prompt": "Given \\nu{(\\xi)} = \\log{(\\xi)} and \\tau{(\\xi)} = \\nu{(\\xi)} - \\int \\nu{(\\xi)} d\\xi, then derive \\int \\nu{(\\xi)} d\\xi = \\kappa + \\xi \\log{(\\xi)} - \\xi, then obtain \\tau{(\\xi)} = - \\kappa - \\xi \\log{(\\xi)} + \\xi + \\nu{(\\xi)}", "VR derivation": "\\nu{(\\xi)} = \\log{(\\xi)} and \\int \\nu{(\\xi)} d\\xi = \\int \\log{(\\xi)} d\\xi and \\int \\nu{(\\xi)} d\\xi = \\kappa + \\xi \\log{(\\xi)} - \\xi and \\tau{(\\xi)} = \\nu{(\\xi)} - \\int \\nu{(\\xi)} d\\xi and \\tau{(\\xi)} = - \\kappa - \\xi \\log{(\\xi)} + \\xi + \\nu{(\\xi)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\nu')(Symbol('\\\\xi', commutative=True)), log(Symbol('\\\\xi', commutative=True)))"], [["integrate", 1, "Symbol('\\\\xi', commutative=True)"], "Equality(Integral(Function('\\\\nu')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True))), Integral(log(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\nu')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True))), Add(Symbol('\\\\kappa', commutative=True), Mul(Symbol('\\\\xi', commutative=True), log(Symbol('\\\\xi', commutative=True))), Mul(Integer(-1), Symbol('\\\\xi', commutative=True))))"], ["renaming_premise", "Equality(Function('\\\\tau')(Symbol('\\\\xi', commutative=True)), Add(Function('\\\\nu')(Symbol('\\\\xi', commutative=True)), Mul(Integer(-1), Integral(Function('\\\\nu')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True))))))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Function('\\\\tau')(Symbol('\\\\xi', commutative=True)), Add(Mul(Integer(-1), Symbol('\\\\kappa', commutative=True)), Mul(Integer(-1), Symbol('\\\\xi', commutative=True), log(Symbol('\\\\xi', commutative=True))), Symbol('\\\\xi', commutative=True), Function('\\\\nu')(Symbol('\\\\xi', commutative=True))))"]], "static_flan-t5-large": "operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } = \\ log { ( \\ mathbf { s } ) } and \\ int \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } d \\ mathbf { s } = \\ int \\ log { ( \\ mathbf { s } ) } d \\ mathbf { s } and \\ int \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } d \\ mathbf { s } = \\ mathbf { s } \\ log { ( \\ mathbf { s } ) } - \\ mathbf { s } + \\ omega and \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } - \\ int \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } d \\ mathbf { s } = - \\ mathbf { s } \\ log { ( \\ mathbf { s } ) } + \\ mathbf { s } - \\ omega + \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } and a { ( \\ mathbf { s } ) } = \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } - \\ int \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } d \\ mathbf { s } and a { ( \\ mathbf { s } ) } = - \\ mathbf { s } \\ log { ( \\ mathbf { s } ) } + \\ mathbf { s } - \\ omega + \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) }", "VR_flan-t5-large": "nu { ( \\ xi) } = \\ log { ( \\ xi) } and \\ int \\ nu { ( \\ xi) } d \\ xi = \\ int \\ log { ( \\ xi) } d \\ xi and \\ int \\ nu { ( \\ xi) } d \\ xi = \\ kappa + \\ xi \\ log { ( \\ xi) } - \\ xi and \\ int \\ log { ( \\ xi) } d \\ xi = \\ kappa + \\ xi \\ log { ( \\ xi) } - \\ xi and \\ xi + \\ int \\ log { ( \\ xi) } d \\ xi = \\ kappa + \\ xi \\ log { ( \\ xi) } - \\ xi + \\ int \\ log { ( \\ xi) } d \\ xi and \\ mu { ( \\ xi) } = \\ nu { ( \\ xi) } - \\ int \\ nu { ( \\ xi) } d \\ xi and \\ tau { ( \\ xi) } = \\ nu { ( \\ xi) } - \\ int \\ log { ( \\ xi) } d \\ xi and \\ tau { ( \\ xi) } = - \\ kappa - \\ xi \\ log { ( \\ xi) } + \\ xi + \\ nu { ( \\ xi) }", "EE_flan-t5-large": "log { ( \\ mathbf { s } ) } = \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } and \\ mathbf { s } \\ log { ( \\ mathbf { s } ) } = \\ mathbf { s } \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } and \\ int \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } d \\ mathbf { s } = \\ int \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } d \\ mathbf { s } and \\ mathbf { s } \\ log { ( \\ mathbf { s } ) } - \\ mathbf { s } + \\ omega = \\ int \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } d \\ mathbf { s } and \\ mathbf { s } \\ log { ( \\ mathbf { s } ) } - \\ mathbf { s } + \\ omega = \\ int \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } d \\ mathbf { s } and \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } - \\ int \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } d \\ mathbf { s } = a { ( \\ mathbf { s } ) } and - \\ mathbf { s } \\ log { ( \\ mathbf { s } ) } + \\ mathbf { s } - \\ omega + \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } = a { ( \\ mathbf { s } ) }", "AG_flan-t5-large": "operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } = \\ log { ( \\ mathbf { s } ) } and \\ int \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } d \\ mathbf { s } = \\ int \\ log { ( \\ mathbf { s } ) } d \\ mathbf { s } and \\ int \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } d \\ mathbf { s } = \\ mathbf { s } \\ log { ( \\ mathbf { s } ) } - \\ mathbf { s } + \\ omega and \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } - \\ int \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } d \\ mathbf { s } = \\ mathbf { s } \\ log { ( \\ mathbf { s } ) } - \\ mathbf { s } + \\ omega and a { ( \\ mathbf { s } ) } = \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } - \\ int \\ log { ( \\ mathbf { s } ) } d \\ mathbf { s }", "SR_flan-t5-large": "operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } = \\ log { ( \\ mathbf { s } ) } and \\ int \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } d \\ mathbf { s } = \\ int \\ log { ( \\ mathbf { s } ) } d \\ mathbf { s } and \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } - \\ int \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } d \\ mathbf { s } = \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } - \\ int \\ log { ( \\ mathbf { s } ) } d \\ mathbf { s } and a { ( \\ mathbf { s } ) } = \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } - \\ int \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) } d \\ mathbf { s } and a { ( \\ mathbf { s } ) } = - \\ mathbf { s } \\ log { ( \\ mathbf { s } ) } + \\ mathbf { s } - \\ omega + \\ operatorname { y ^ { \\ prime } } { ( \\ mathbf { s } ) }", "static_rouge": 0.846153846153846, "static_bleu": 0.7233397578416509, "static_bleurt": 0.7574993371963501, "static_gleu": 0.7233576642335766, "VR_rouge": 0.14302884615384615, "EE_rouge": 0.033319621554915524, "AG_rouge": -0.07104360607545335, "SR_rouge": -0.025011798017933073, "VR_rouge_abs": 0.017265434251831184, "EE_rouge_abs": 0.016067653276955696, "AG_rouge_abs": 0.07864220957200074, "SR_rouge_abs": 0.13089005235602091, "VR_bleu": 0.15899516065605668, "EE_bleu": 0.01852098022893145, "AG_bleu": -0.20018226787953908, "SR_bleu": -0.1307463118650286, "VR_bleu_abs": -0.018969038970404778, "EE_bleu_abs": 0.0424356925399455, "AG_bleu_abs": 0.24636055376210886, "SR_bleu_abs": 0.20331801074820954, "VR_bleurt": 0.010537445545196533, "EE_bleurt": 0.013232231140136719, "AG_bleurt": -0.06752395629882812, "SR_bleurt": 0.12375044822692871, "VR_bleurt_abs": -0.3743630349636078, "EE_bleurt_abs": 0.1658381223678589, "AG_bleurt_abs": 0.0038025379180908203, "SR_bleurt_abs": 0.2581748366355896, "VR_gleu": 0.1590012285900123, "EE_gleu": 0.018521248870845497, "AG_gleu": -0.20032139643178537, "SR_gleu": -0.13099402315541098, "VR_gleu_abs": 0.0023058056367401547, "EE_gleu_abs": 0.04214046727019294, "AG_gleu_abs": 0.21418878232901062, "SR_gleu_abs": 0.1875912408759124, "ratio_VR_rouge": 0.648936170212766, "ratio_VR_bleu": 1.091167295260182, "ratio_VR_bleurt": 0.552544374786229, "ratio_VR_gleu": 0.9917555007089219, "ratio_EE_rouge": 0.9823255813953488, "ratio_EE_bleu": 0.9558514907233925, "ratio_EE_bleurt": 0.7845153189725517, "ratio_EE_gleu": 0.9561844932358036, "ratio_AG_rouge": 0.9152657882780555, "ratio_AG_bleu": 0.7385284836204362, "ratio_AG_bleurt": 0.9954937811693791, "ratio_AG_gleu": 0.7727815905709322, "ratio_SR_rouge": 0.8691099476439791, "ratio_SR_bleu": 0.7966819892517905, "ratio_SR_bleurt": 0.7091542266107946, "ratio_SR_gleu": 0.8124087591240876}, {"prompt": "Given \\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X}^{t}, then derive \\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X} + \\hat{X}^{t} \\log{(\\hat{X})}, then obtain \\hat{X} + \\frac{\\partial}{\\partial t} \\hat{X}^{t} = \\hat{X} + \\hat{X}^{t} \\log{(\\hat{X})}", "derivation": "\\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X}^{t} and \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} = \\frac{\\partial}{\\partial t} \\hat{X}^{t} and \\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X} + \\frac{\\partial}{\\partial t} \\hat{X}^{t} and \\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X} + \\hat{X}^{t} \\log{(\\hat{X})} and \\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X} + \\operatorname{v_{t}}{(t,\\hat{X})} \\log{(\\hat{X})} and \\hat{X} + \\frac{\\partial}{\\partial t} \\hat{X}^{t} = \\hat{X} + \\hat{X}^{t} \\log{(\\hat{X})}", "srepr_derivation": [["premise", "Equality(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)))"], [["differentiate", 1, "Symbol('t', commutative=True)"], "Equality(Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1))), Derivative(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1))))"], [["add", 2, "Symbol('\\\\hat{X}', commutative=True)"], "Equality(Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))), Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 3], "Equality(Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))), Add(Symbol('\\\\hat{X}', commutative=True), Mul(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), log(Symbol('\\\\hat{X}', commutative=True)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))), Add(Symbol('\\\\hat{X}', commutative=True), Mul(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), log(Symbol('\\\\hat{X}', commutative=True)))))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))), Add(Symbol('\\\\hat{X}', commutative=True), Mul(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), log(Symbol('\\\\hat{X}', commutative=True)))))"]], "EE prompt": "Given \\hat{X}^{t} = \\operatorname{v_{t}}{(t,\\hat{X})}, then derive \\hat{X} + \\hat{X}^{t} \\log{(\\hat{X})} = \\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})}, then obtain \\hat{X} + \\hat{X}^{t} \\log{(\\hat{X})} = \\hat{X} + \\frac{\\partial}{\\partial t} \\hat{X}^{t}", "EE derivation": "\\hat{X}^{t} = \\operatorname{v_{t}}{(t,\\hat{X})} and \\frac{\\partial}{\\partial t} \\hat{X}^{t} = \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} and \\hat{X} + \\frac{\\partial}{\\partial t} \\hat{X}^{t} = \\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} and \\hat{X} + \\hat{X}^{t} \\log{(\\hat{X})} = \\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} and \\hat{X} + \\operatorname{v_{t}}{(t,\\hat{X})} \\log{(\\hat{X})} = \\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} and \\hat{X} + \\hat{X}^{t} \\log{(\\hat{X})} = \\hat{X} + \\frac{\\partial}{\\partial t} \\hat{X}^{t}", "EE srepr_derivation": [["premise", "Equality(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)))"], [["differentiate", 1, "Symbol('t', commutative=True)"], "Equality(Derivative(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1))), Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1))))"], [["add", 2, "Symbol('\\\\hat{X}', commutative=True)"], "Equality(Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))), Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 3], "Equality(Add(Symbol('\\\\hat{X}', commutative=True), Mul(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), log(Symbol('\\\\hat{X}', commutative=True)))), Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Add(Symbol('\\\\hat{X}', commutative=True), Mul(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), log(Symbol('\\\\hat{X}', commutative=True)))), Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(Add(Symbol('\\\\hat{X}', commutative=True), Mul(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), log(Symbol('\\\\hat{X}', commutative=True)))), Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))))"]], "AG prompt": "Given \\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X}^{t}, then derive \\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X} + \\hat{X}^{t} \\log{(\\hat{X})}, then obtain (\\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})})^{t} = (\\hat{X} + \\operatorname{v_{t}}{(t,\\hat{X})} \\log{(\\hat{X})})^{t}", "AG derivation": "\\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X}^{t} and \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} = \\frac{\\partial}{\\partial t} \\hat{X}^{t} and \\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X} + \\frac{\\partial}{\\partial t} \\hat{X}^{t} and \\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X} + \\hat{X}^{t} \\log{(\\hat{X})} and \\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X} + \\operatorname{v_{t}}{(t,\\hat{X})} \\log{(\\hat{X})} and (\\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})})^{t} = (\\hat{X} + \\operatorname{v_{t}}{(t,\\hat{X})} \\log{(\\hat{X})})^{t}", "AG srepr_derivation": [["premise", "Equality(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)))"], [["differentiate", 1, "Symbol('t', commutative=True)"], "Equality(Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1))), Derivative(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1))))"], [["add", 2, "Symbol('\\\\hat{X}', commutative=True)"], "Equality(Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))), Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 3], "Equality(Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))), Add(Symbol('\\\\hat{X}', commutative=True), Mul(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), log(Symbol('\\\\hat{X}', commutative=True)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))), Add(Symbol('\\\\hat{X}', commutative=True), Mul(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), log(Symbol('\\\\hat{X}', commutative=True)))))"], [["power", 5, "Symbol('t', commutative=True)"], "Equality(Pow(Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))), Symbol('t', commutative=True)), Pow(Add(Symbol('\\\\hat{X}', commutative=True), Mul(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), log(Symbol('\\\\hat{X}', commutative=True)))), Symbol('t', commutative=True)))"]], "SR prompt": "Given \\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X}^{t}, then obtain \\hat{X} + \\frac{\\partial}{\\partial t} \\hat{X}^{t} = \\hat{X} + \\hat{X}^{t} \\log{(\\hat{X})}", "SR derivation": "\\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X}^{t} and \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} = \\frac{\\partial}{\\partial t} \\hat{X}^{t} and \\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X} + \\frac{\\partial}{\\partial t} \\hat{X}^{t} and \\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X} + \\hat{X}^{t} \\log{(\\hat{X})} and \\hat{X} + \\frac{\\partial}{\\partial t} \\operatorname{v_{t}}{(t,\\hat{X})} = \\hat{X} + \\operatorname{v_{t}}{(t,\\hat{X})} \\log{(\\hat{X})} and \\hat{X} + \\frac{\\partial}{\\partial t} \\hat{X}^{t} = \\hat{X} + \\hat{X}^{t} \\log{(\\hat{X})}", "SR srepr_derivation": [["premise", "Equality(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)))"], [["differentiate", 1, "Symbol('t', commutative=True)"], "Equality(Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1))), Derivative(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1))))"], [["add", 2, "Symbol('\\\\hat{X}', commutative=True)"], "Equality(Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))), Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 3], "Equality(Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))), Add(Symbol('\\\\hat{X}', commutative=True), Mul(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), log(Symbol('\\\\hat{X}', commutative=True)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))), Add(Symbol('\\\\hat{X}', commutative=True), Mul(Function('v_t')(Symbol('t', commutative=True), Symbol('\\\\hat{X}', commutative=True)), log(Symbol('\\\\hat{X}', commutative=True)))))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Add(Symbol('\\\\hat{X}', commutative=True), Derivative(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), Tuple(Symbol('t', commutative=True), Integer(1)))), Add(Symbol('\\\\hat{X}', commutative=True), Mul(Pow(Symbol('\\\\hat{X}', commutative=True), Symbol('t', commutative=True)), log(Symbol('\\\\hat{X}', commutative=True)))))"]], "VR prompt": "Given \\upsilon{(\\xi,\\kappa)} = \\xi^{\\kappa}, then derive \\xi + \\frac{\\partial}{\\partial \\kappa} \\upsilon{(\\xi,\\kappa)} = \\xi + \\xi^{\\kappa} \\log{(\\xi)}, then obtain \\xi + \\frac{\\partial}{\\partial \\kappa} \\xi^{\\kappa} = \\xi + \\xi^{\\kappa} \\log{(\\xi)}", "VR derivation": "\\upsilon{(\\xi,\\kappa)} = \\xi^{\\kappa} and \\frac{\\partial}{\\partial \\kappa} \\upsilon{(\\xi,\\kappa)} = \\frac{\\partial}{\\partial \\kappa} \\xi^{\\kappa} and \\xi + \\frac{\\partial}{\\partial \\kappa} \\upsilon{(\\xi,\\kappa)} = \\xi + \\frac{\\partial}{\\partial \\kappa} \\xi^{\\kappa} and \\xi + \\frac{\\partial}{\\partial \\kappa} \\upsilon{(\\xi,\\kappa)} = \\xi + \\xi^{\\kappa} \\log{(\\xi)} and \\xi + \\frac{\\partial}{\\partial \\kappa} \\upsilon{(\\xi,\\kappa)} = \\xi + \\upsilon{(\\xi,\\kappa)} \\log{(\\xi)} and \\xi + \\frac{\\partial}{\\partial \\kappa} \\xi^{\\kappa} = \\xi + \\xi^{\\kappa} \\log{(\\xi)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True), Symbol('\\\\kappa', commutative=True)), Pow(Symbol('\\\\xi', commutative=True), Symbol('\\\\kappa', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\kappa', commutative=True)"], "Equality(Derivative(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True), Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Derivative(Pow(Symbol('\\\\xi', commutative=True), Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))))"], [["add", 2, "Symbol('\\\\xi', commutative=True)"], "Equality(Add(Symbol('\\\\xi', commutative=True), Derivative(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True), Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1)))), Add(Symbol('\\\\xi', commutative=True), Derivative(Pow(Symbol('\\\\xi', commutative=True), Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 3], "Equality(Add(Symbol('\\\\xi', commutative=True), Derivative(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True), Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1)))), Add(Symbol('\\\\xi', commutative=True), Mul(Pow(Symbol('\\\\xi', commutative=True), Symbol('\\\\kappa', commutative=True)), log(Symbol('\\\\xi', commutative=True)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Add(Symbol('\\\\xi', commutative=True), Derivative(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True), Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1)))), Add(Symbol('\\\\xi', commutative=True), Mul(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True), Symbol('\\\\kappa', commutative=True)), log(Symbol('\\\\xi', commutative=True)))))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Add(Symbol('\\\\xi', commutative=True), Derivative(Pow(Symbol('\\\\xi', commutative=True), Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1)))), Add(Symbol('\\\\xi', commutative=True), Mul(Pow(Symbol('\\\\xi', commutative=True), Symbol('\\\\kappa', commutative=True)), log(Symbol('\\\\xi', commutative=True)))))"]], "static_flan-t5-large": "operatorname { v_ { t } } { (t, \\ hat { X } ) } = \\ hat { X } ^ { t } and \\ frac { \\ partial } { \\ partial t } \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } = \\ frac { \\ partial } { \\ partial t } \\ hat { X } ^ { t } and \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } = \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ hat { X } ^ { t } and \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } = \\ hat { X } + \\ hat { X } ^ { t } \\ log { ( \\ hat { X } ) } and \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ hat { X } ^ { t } = \\ hat { X } + \\ hat { X } ^ { t } \\ log { ( \\ hat { X } ) }", "VR_flan-t5-large": "xi + \\ frac { \\ partial } { \\ partial \\ kappa } \\ upsilon { ( \\ xi, \\ kappa) } = \\ xi + \\ frac { \\ partial } { \\ partial \\ kappa } \\ xi ^ { \\ kappa } and \\ frac { \\ partial } { \\ partial \\ kappa } (xi + \\ frac { \\ partial } { \\ partial \\ kappa } \\ xi ^ { \\ kappa } ) = \\ frac { \\ partial } { \\ partial \\ kappa } (xi + \\ frac { \\ partial } { \\ partial \\ kappa } \\ xi ^ { \\ kappa } ) and \\ xi + \\ frac { \\ partial } { \\ partial \\ kappa } \\ upsilon { ( \\ xi, \\ kappa) } = \\ xi + \\ xi ^ { \\ kappa } \\ log { ( \\ xi) } and \\ xi + \\ frac { \\ partial } { \\ partial \\ kappa } \\ xi ^ { \\ kappa } = \\ xi + \\ xi ^ { \\ kappa } \\ log { ( \\ xi) }", "EE_flan-t5-large": "hat { X } ^ { t } = \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } and \\ hat { X } ^ { t } = ( \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } ) ^ { t } and \\ frac { \\ partial } { \\ partial t } \\ hat { X } ^ { t } = \\ frac { \\ partial } { \\ partial t } ( \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } ) ^ { t } and \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ hat { X } ^ { t } = \\ hat { X } + \\ frac { \\ partial } { \\ partial t } ( \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } ) ^ { t } and \\ hat { X } + \\ hat { X } ^ { t } \\ log { ( \\ hat { X } ) } = \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } and \\ hat { X } + \\ hat { X } ^ { t } \\ log { ( \\ hat { X } ) } = \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ hat { X } ^ { t }", "AG_flan-t5-large": "operatorname { v_ { t } } { (t, \\ hat { X } ) } = \\ hat { X } ^ { t } and \\ frac { \\ partial } { \\ partial t } \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } = \\ frac { \\ partial } { \\ partial t } \\ hat { X } ^ { t } and \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } = \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ hat { X } ^ { t } and \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } = \\ hat { X } + \\ hat { X } ^ { t } \\ log { ( \\ hat { X } ) } and ( \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } ) ^ { t } = ( \\ hat { X } + \\ hat { X } ^ { t } \\ log { ( \\ hat { X } ) } ) ^ { t } and ( \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } ) ^ { t } = ( \\ hat { X } + \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } \\ log { ( \\ hat { X } ) } ) ^ { t }", "SR_flan-t5-large": "operatorname { v_ { t } } { (t, \\ hat { X } ) } = \\ hat { X } ^ { t } and \\ frac { \\ partial } { \\ partial t } \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } = \\ frac { \\ partial } { \\ partial t } \\ hat { X } ^ { t } and \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } = \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ hat { X } ^ { t } and \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ operatorname { v_ { t } } { (t, \\ hat { X } ) } = \\ hat { X } + \\ hat { X } ^ { t } \\ log { ( \\ hat { X } ) } and \\ hat { X } + \\ frac { \\ partial } { \\ partial t } \\ hat { X } ^ { t } = \\ hat { X } + \\ hat { X } ^ { t } \\ log { ( \\ hat { X } ) }", "static_rouge": 0.8787878787878788, "static_bleu": 0.7486574941646674, "static_bleurt": 0.8015269041061401, "static_gleu": 0.7745241581259151, "VR_rouge": 0.03593073593073581, "EE_rouge": -0.002728708889846332, "AG_rouge": -0.07479861910241659, "SR_rouge": 0.0, "VR_rouge_abs": -0.011757622976945131, "EE_rouge_abs": 0.0458640458640458, "AG_rouge_abs": 0.09904559915164357, "SR_rouge_abs": 0.0, "VR_bleu": 0.009470686343500567, "EE_bleu": -0.09614339754777124, "AG_bleu": -0.20307950317547363, "SR_bleu": 0.0, "VR_bleu_abs": -5.204699769223442e-05, "EE_bleu_abs": 0.15991472962153652, "AG_bleu_abs": 0.19695849648199093, "SR_bleu_abs": 0.0, "VR_bleurt": 0.171433687210083, "EE_bleurt": 0.10493719577789307, "AG_bleurt": -0.0025577545166015625, "SR_bleurt": 0.0, "VR_bleurt_abs": 0.13356153666973114, "EE_bleurt_abs": -0.01084446907043457, "AG_bleurt_abs": 0.019047856330871582, "SR_bleurt_abs": 0.01130455732345581, "VR_gleu": 0.021017144097859042, "EE_gleu": -0.0739385065885797, "AG_gleu": -0.17753975665437782, "SR_gleu": 0.0, "VR_gleu_abs": 0.004843526419360811, "EE_gleu_abs": 0.1598690924035765, "AG_gleu_abs": 0.1970705725699068, "SR_gleu_abs": 0.0, "ratio_VR_rouge": 1.073289183222958, "ratio_VR_bleu": 1.000170157292905, "ratio_VR_bleurt": 1.706487769739148, "ratio_VR_gleu": 0.9860416517112935, "ratio_EE_rouge": 0.9519725557461407, "ratio_EE_bleu": 0.8379245898013394, "ratio_EE_bleurt": 1.0150326887030428, "ratio_EE_gleu": 0.8379961571043876, "ratio_AG_rouge": 0.8955023495189082, "ratio_AG_bleu": 0.7780078698036007, "ratio_AG_bleurt": 0.9775978709530253, "ratio_AG_gleu": 0.7779444861215303, "ratio_SR_rouge": 1.0, "ratio_SR_bleu": 1.0, "ratio_SR_bleurt": 0.9867047426450537, "ratio_SR_gleu": 1.0}, {"prompt": "Given \\operatorname{A_{y}}{(A)} = e^{A}, then derive (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A} = (e^{A})^{A}, then obtain (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A} = \\operatorname{A_{y}}^{A}{(A)}", "derivation": "\\operatorname{A_{y}}{(A)} = e^{A} and \\frac{d}{d A} \\operatorname{A_{y}}{(A)} = \\frac{d}{d A} e^{A} and (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A} = (\\frac{d}{d A} e^{A})^{A} and (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A} = (e^{A})^{A} and (\\frac{d}{d A} e^{A})^{A} = (e^{A})^{A} and (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A} = \\operatorname{A_{y}}^{A}{(A)}", "srepr_derivation": [["premise", "Equality(Function('A_y')(Symbol('A', commutative=True)), exp(Symbol('A', commutative=True)))"], [["differentiate", 1, "Symbol('A', commutative=True)"], "Equality(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Derivative(exp(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))))"], [["power", 2, "Symbol('A', commutative=True)"], "Equality(Pow(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)), Pow(Derivative(exp(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)))"], [["evaluate_derivatives", 3], "Equality(Pow(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)), Pow(exp(Symbol('A', commutative=True)), Symbol('A', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Pow(Derivative(exp(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)), Pow(exp(Symbol('A', commutative=True)), Symbol('A', commutative=True)))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(Pow(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)), Pow(Function('A_y')(Symbol('A', commutative=True)), Symbol('A', commutative=True)))"]], "EE prompt": "Given e^{A} = \\operatorname{A_{y}}{(A)}, then derive (e^{A})^{A} = (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A}, then obtain \\operatorname{A_{y}}^{A}{(A)} = (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A}", "EE derivation": "e^{A} = \\operatorname{A_{y}}{(A)} and \\frac{d}{d A} e^{A} = \\frac{d}{d A} \\operatorname{A_{y}}{(A)} and (\\frac{d}{d A} e^{A})^{A} = (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A} and (e^{A})^{A} = (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A} and (e^{A})^{A} = (\\frac{d}{d A} e^{A})^{A} and \\operatorname{A_{y}}^{A}{(A)} = (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A}", "EE srepr_derivation": [["premise", "Equality(exp(Symbol('A', commutative=True)), Function('A_y')(Symbol('A', commutative=True)))"], [["differentiate", 1, "Symbol('A', commutative=True)"], "Equality(Derivative(exp(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))))"], [["power", 2, "Symbol('A', commutative=True)"], "Equality(Pow(Derivative(exp(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)), Pow(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)))"], [["evaluate_derivatives", 3], "Equality(Pow(exp(Symbol('A', commutative=True)), Symbol('A', commutative=True)), Pow(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Pow(exp(Symbol('A', commutative=True)), Symbol('A', commutative=True)), Pow(Derivative(exp(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Pow(Function('A_y')(Symbol('A', commutative=True)), Symbol('A', commutative=True)), Pow(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)))"]], "AG prompt": "Given \\operatorname{A_{y}}{(A)} = e^{A}, then derive (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A} = (e^{A})^{A}, then obtain \\frac{(\\frac{d}{d A} e^{A})^{A}}{\\frac{d}{d A} \\operatorname{A_{y}}{(A)}} = \\frac{(e^{A})^{A}}{\\frac{d}{d A} \\operatorname{A_{y}}{(A)}}", "AG derivation": "\\operatorname{A_{y}}{(A)} = e^{A} and \\frac{d}{d A} \\operatorname{A_{y}}{(A)} = \\frac{d}{d A} e^{A} and (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A} = (\\frac{d}{d A} e^{A})^{A} and (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A} = (e^{A})^{A} and (\\frac{d}{d A} e^{A})^{A} = (e^{A})^{A} and \\frac{(\\frac{d}{d A} e^{A})^{A}}{\\frac{d}{d A} \\operatorname{A_{y}}{(A)}} = \\frac{(e^{A})^{A}}{\\frac{d}{d A} \\operatorname{A_{y}}{(A)}}", "AG srepr_derivation": [["premise", "Equality(Function('A_y')(Symbol('A', commutative=True)), exp(Symbol('A', commutative=True)))"], [["differentiate", 1, "Symbol('A', commutative=True)"], "Equality(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Derivative(exp(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))))"], [["power", 2, "Symbol('A', commutative=True)"], "Equality(Pow(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)), Pow(Derivative(exp(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)))"], [["evaluate_derivatives", 3], "Equality(Pow(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)), Pow(exp(Symbol('A', commutative=True)), Symbol('A', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Pow(Derivative(exp(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)), Pow(exp(Symbol('A', commutative=True)), Symbol('A', commutative=True)))"], [["divide", 5, "Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1)))"], "Equality(Mul(Pow(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Integer(-1)), Pow(Derivative(exp(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True))), Mul(Pow(exp(Symbol('A', commutative=True)), Symbol('A', commutative=True)), Pow(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Integer(-1))))"]], "SR prompt": "Given \\operatorname{A_{y}}{(A)} = e^{A}, then obtain (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A} = \\operatorname{A_{y}}^{A}{(A)}", "SR derivation": "\\operatorname{A_{y}}{(A)} = e^{A} and \\frac{d}{d A} \\operatorname{A_{y}}{(A)} = \\frac{d}{d A} e^{A} and (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A} = (\\frac{d}{d A} e^{A})^{A} and (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A} = (e^{A})^{A} and (\\frac{d}{d A} e^{A})^{A} = (e^{A})^{A} and (\\frac{d}{d A} \\operatorname{A_{y}}{(A)})^{A} = \\operatorname{A_{y}}^{A}{(A)}", "SR srepr_derivation": [["premise", "Equality(Function('A_y')(Symbol('A', commutative=True)), exp(Symbol('A', commutative=True)))"], [["differentiate", 1, "Symbol('A', commutative=True)"], "Equality(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Derivative(exp(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))))"], [["power", 2, "Symbol('A', commutative=True)"], "Equality(Pow(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)), Pow(Derivative(exp(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)))"], [["evaluate_derivatives", 3], "Equality(Pow(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)), Pow(exp(Symbol('A', commutative=True)), Symbol('A', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Pow(Derivative(exp(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)), Pow(exp(Symbol('A', commutative=True)), Symbol('A', commutative=True)))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(Pow(Derivative(Function('A_y')(Symbol('A', commutative=True)), Tuple(Symbol('A', commutative=True), Integer(1))), Symbol('A', commutative=True)), Pow(Function('A_y')(Symbol('A', commutative=True)), Symbol('A', commutative=True)))"]], "VR prompt": "Given \\kappa{(\\nu)} = e^{\\nu}, then derive (\\frac{d}{d \\nu} \\kappa{(\\nu)})^{\\nu} = (e^{\\nu})^{\\nu}, then obtain (\\frac{d}{d \\nu} \\kappa{(\\nu)})^{\\nu} = \\kappa^{\\nu}{(\\nu)}", "VR derivation": "\\kappa{(\\nu)} = e^{\\nu} and \\frac{d}{d \\nu} \\kappa{(\\nu)} = \\frac{d}{d \\nu} e^{\\nu} and (\\frac{d}{d \\nu} \\kappa{(\\nu)})^{\\nu} = (\\frac{d}{d \\nu} e^{\\nu})^{\\nu} and (\\frac{d}{d \\nu} \\kappa{(\\nu)})^{\\nu} = (e^{\\nu})^{\\nu} and (\\frac{d}{d \\nu} e^{\\nu})^{\\nu} = (e^{\\nu})^{\\nu} and (\\frac{d}{d \\nu} \\kappa{(\\nu)})^{\\nu} = \\kappa^{\\nu}{(\\nu)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\kappa')(Symbol('\\\\nu', commutative=True)), exp(Symbol('\\\\nu', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\nu', commutative=True)"], "Equality(Derivative(Function('\\\\kappa')(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))), Derivative(exp(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))))"], [["power", 2, "Symbol('\\\\nu', commutative=True)"], "Equality(Pow(Derivative(Function('\\\\kappa')(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))), Symbol('\\\\nu', commutative=True)), Pow(Derivative(exp(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))), Symbol('\\\\nu', commutative=True)))"], [["evaluate_derivatives", 3], "Equality(Pow(Derivative(Function('\\\\kappa')(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))), Symbol('\\\\nu', commutative=True)), Pow(exp(Symbol('\\\\nu', commutative=True)), Symbol('\\\\nu', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Pow(Derivative(exp(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))), Symbol('\\\\nu', commutative=True)), Pow(exp(Symbol('\\\\nu', commutative=True)), Symbol('\\\\nu', commutative=True)))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(Pow(Derivative(Function('\\\\kappa')(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))), Symbol('\\\\nu', commutative=True)), Pow(Function('\\\\kappa')(Symbol('\\\\nu', commutative=True)), Symbol('\\\\nu', commutative=True)))"]], "static_flan-t5-large": "operatorname { A_ { y } } { (A) } = e ^ { A } and \\ operatorname { A_ { y } } ^ { A } { (A) } = (e ^ { A } ) ^ { A } and \\ frac { d } { d A } \\ operatorname { A_ { y } } { (A) } = \\ frac { d } { d A } e ^ { A } and ( \\ frac { d } { d A } \\ operatorname { A_ { y } } { (A) } ) ^ { A } = ( \\ frac { d } { d A } e ^ { A } ) ^ { A } and ( \\ frac { d } { d A } \\ operatorname { A_ { y } } { (A) } ) ^ { A } = (e ^ { A } ) ^ { A } and ( \\ frac { d } { d A } \\ operatorname { A_ { y } } { (A) } ) ^ { A } = \\ operatorname { A_ { y } } ^ { A } { (A) }", "VR_flan-t5-large": "kappa { ( \\ nu) } = e ^ { \\ nu } and \\ frac { d } { d \\ nu } \\ kappa { ( \\ nu) } = \\ frac { d } { d \\ nu } e ^ { \\ nu } and ( \\ frac { d } { d \\ nu } \\ kappa { ( \\ nu) } ) ^ { \\ nu } = ( \\ frac { d } { d \\ nu } e ^ { \\ nu } ) ^ { \\ nu } and ( \\ frac { d } { d \\ nu } \\ kappa { ( \\ nu) } ) ^ { \\ nu } = (e ^ { \\ nu } ) ^ { \\ nu } and ( \\ frac { d } { d \\ nu } \\ kappa { ( \\ nu) } ) ^ { \\ nu } = \\ kappa ^ { \\ nu } { ( \\ nu) }", "EE_flan-t5-large": "operatorname { A_ { y } } { (A) } = \\ operatorname { A_ { y } } { (A) } and e ^ { A } = \\ frac { \\ operatorname { A_ { y } } { (A) } } { A } and \\ frac { d } { d A } e ^ { A } = \\ frac { d } { d A } \\ frac { \\ operatorname { A_ { y } } { (A) } } { A } and (e ^ { A } ) ^ { A } = ( \\ frac { d } { d A } \\ operatorname { A_ { y } } { (A) } ) ^ { A } and (e ^ { A } ) ^ { A } = ( \\ frac { d } { d A } \\ operatorname { A_ { y } } { (A) } ) ^ { A } and \\ operatorname { A_ { y } } ^ { A } { (A) } = ( \\ frac { d } { d A } \\ operatorname { A_ { y } } { (A) } ) ^ { A }", "AG_flan-t5-large": "operatorname { A_ { y } } { (A) } = e ^ { A } and \\ frac { d } { d A } \\ operatorname { A_ { y } } { (A) } = \\ frac { d } { d A } e ^ { A } and ( \\ frac { d } { d A } \\ operatorname { A_ { y } } { (A) } ) ^ { A } = ( \\ frac { d } { d A } e ^ { A } ) ^ { A } and ( \\ frac { d } { d A } \\ operatorname { A_ { y } } { (A) } ) ^ { A } = (e ^ { A } ) ^ { A } and ( \\ frac { d } { d A } e ^ { A } ) ^ { A } = (e ^ { A } ) ^ { A } and \\ frac { ( \\ frac { d } { d A } e ^ { A } ) ^ { A } } { \\ frac { d } { d A } \\ operatorname { A_ { y } } { (A) } } = \\ frac { (e ^ { A } ) ^ { A } } { \\ frac { d } { d A } \\ operatorname { A_ { y } } { (A) } }", "SR_flan-t5-large": "operatorname { A_ { y } } { (A) } = e ^ { A } and \\ frac { d } { d A } \\ operatorname { A_ { y } } { (A) } = \\ frac { d } { d A } e ^ { A } and ( \\ frac { d } { d A } \\ operatorname { A_ { y } } { (A) } ) ^ { A } = ( \\ frac { d } { d A } e ^ { A } ) ^ { A } and ( \\ frac { d } { d A } \\ operatorname { A_ { y } } { (A) } ) ^ { A } = \\ operatorname { A_ { y } } ^ { A } { (A) }", "static_rouge": 0.9333333333333332, "static_bleu": 0.933963352259319, "static_bleurt": 0.7814148664474487, "static_gleu": 0.9344086021505377, "VR_rouge": 0.027350427350427253, "EE_rouge": 0.07999999999999985, "AG_rouge": -0.06666666666666676, "SR_rouge": 0.12083333333333313, "VR_rouge_abs": 0.019460067491563482, "EE_rouge_abs": 0.08321479374110952, "AG_rouge_abs": 0.062004114017043754, "SR_rouge_abs": 0.17460317460317454, "VR_bleu": 0.12876502824124858, "EE_bleu": 0.07101237132266414, "AG_bleu": -0.062406887667820876, "SR_bleu": 0.3158062593792448, "VR_bleu_abs": 0.09101657807394264, "EE_bleu_abs": 0.08588219608017789, "AG_bleu_abs": 0.04421882943826749, "SR_bleu_abs": 0.3699936097888482, "VR_bleurt": 0.021347880363464355, "EE_bleurt": 0.1449342966079712, "AG_bleurt": 0.035155415534973145, "SR_bleurt": 0.21894073486328125, "VR_bleurt_abs": 0.18719051778316498, "EE_bleurt_abs": -0.09597933292388916, "AG_bleurt_abs": -0.006933271884918213, "SR_bleurt_abs": 0.17148232460021973, "VR_gleu": 0.1137189469781239, "EE_gleu": 0.069312242407497, "AG_gleu": -0.061948410599917736, "SR_gleu": 0.2612903225806452, "VR_gleu_abs": 0.0830557312530747, "EE_gleu_abs": 0.08443508093297414, "AG_gleu_abs": 0.0436009630273424, "SR_gleu_abs": 0.318082788671024, "ratio_VR_rouge": 0.9283050145047661, "ratio_VR_bleu": 0.8006932657724234, "ratio_VR_bleurt": 2.1153313340700723, "ratio_VR_gleu": 0.8268120402121985, "ratio_EE_rouge": 0.9096525096525097, "ratio_EE_bleu": 0.9109913766651414, "ratio_EE_bleurt": 1.1317319339659184, "ratio_EE_gleu": 0.9125560965838909, "ratio_AG_rouge": 0.9322849807445444, "ratio_AG_bleu": 0.9463879898907073, "ratio_AG_bleurt": 1.0086999725959203, "ratio_AG_gleu": 0.9471590977880553, "ratio_SR_rouge": 0.8253968253968255, "ratio_SR_bleu": 0.6300063902111518, "ratio_SR_bleurt": 0.7885055977360584, "ratio_SR_gleu": 0.681917211328976}, {"prompt": "Given E{(r_{0},\\mathbf{P})} = \\frac{r_{0}}{\\mathbf{P}}, then derive \\frac{\\frac{\\partial}{\\partial \\mathbf{P}} E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} - \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}^{2}} = - \\frac{2 r_{0}}{\\mathbf{P}^{3}}, then obtain \\frac{\\frac{\\partial}{\\partial \\mathbf{P}} \\frac{r_{0}}{\\mathbf{P}}}{\\mathbf{P}} - \\frac{r_{0}}{\\mathbf{P}^{3}} = - \\frac{2 r_{0}}{\\mathbf{P}^{3}}", "derivation": "E{(r_{0},\\mathbf{P})} = \\frac{r_{0}}{\\mathbf{P}} and \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} = \\frac{r_{0}}{\\mathbf{P}^{2}} and \\frac{\\partial}{\\partial \\mathbf{P}} \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} = \\frac{\\partial}{\\partial \\mathbf{P}} \\frac{r_{0}}{\\mathbf{P}^{2}} and \\frac{\\frac{\\partial}{\\partial \\mathbf{P}} E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} - \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}^{2}} = - \\frac{2 r_{0}}{\\mathbf{P}^{3}} and \\frac{\\frac{\\partial}{\\partial \\mathbf{P}} \\frac{r_{0}}{\\mathbf{P}}}{\\mathbf{P}} - \\frac{r_{0}}{\\mathbf{P}^{3}} = - \\frac{2 r_{0}}{\\mathbf{P}^{3}}", "srepr_derivation": [["premise", "Equality(Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Symbol('r_0', commutative=True)))"], [["divide", 1, "Symbol('\\\\mathbf{P}', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-2)), Symbol('r_0', commutative=True)))"], [["differentiate", 2, "Symbol('\\\\mathbf{P}', commutative=True)"], "Equality(Derivative(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1))), Derivative(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-2)), Symbol('r_0', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Add(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Derivative(Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-2)), Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)))), Mul(Integer(-1), Integer(2), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-3)), Symbol('r_0', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Add(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Derivative(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Symbol('r_0', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-3)), Symbol('r_0', commutative=True))), Mul(Integer(-1), Integer(2), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-3)), Symbol('r_0', commutative=True)))"]], "EE prompt": "Given \\frac{r_{0}}{\\mathbf{P}} = E{(r_{0},\\mathbf{P})}, then derive - \\frac{2 r_{0}}{\\mathbf{P}^{3}} = \\frac{\\frac{\\partial}{\\partial \\mathbf{P}} E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} - \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}^{2}}, then obtain - \\frac{2 r_{0}}{\\mathbf{P}^{3}} = \\frac{\\frac{\\partial}{\\partial \\mathbf{P}} \\frac{r_{0}}{\\mathbf{P}}}{\\mathbf{P}} - \\frac{r_{0}}{\\mathbf{P}^{3}}", "EE derivation": "\\frac{r_{0}}{\\mathbf{P}} = E{(r_{0},\\mathbf{P})} and \\frac{r_{0}}{\\mathbf{P}^{2}} = \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} and \\frac{\\partial}{\\partial \\mathbf{P}} \\frac{r_{0}}{\\mathbf{P}^{2}} = \\frac{\\partial}{\\partial \\mathbf{P}} \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} and - \\frac{2 r_{0}}{\\mathbf{P}^{3}} = \\frac{\\frac{\\partial}{\\partial \\mathbf{P}} E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} - \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}^{2}} and - \\frac{2 r_{0}}{\\mathbf{P}^{3}} = \\frac{\\frac{\\partial}{\\partial \\mathbf{P}} \\frac{r_{0}}{\\mathbf{P}}}{\\mathbf{P}} - \\frac{r_{0}}{\\mathbf{P}^{3}}", "EE srepr_derivation": [["premise", "Equality(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Symbol('r_0', commutative=True)), Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)))"], [["divide", 1, "Symbol('\\\\mathbf{P}', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-2)), Symbol('r_0', commutative=True)), Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\mathbf{P}', commutative=True)"], "Equality(Derivative(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-2)), Symbol('r_0', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1))), Derivative(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Mul(Integer(-1), Integer(2), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-3)), Symbol('r_0', commutative=True)), Add(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Derivative(Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-2)), Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Mul(Integer(-1), Integer(2), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-3)), Symbol('r_0', commutative=True)), Add(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Derivative(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Symbol('r_0', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-3)), Symbol('r_0', commutative=True))))"]], "AG prompt": "Given E{(r_{0},\\mathbf{P})} = \\frac{r_{0}}{\\mathbf{P}}, then derive \\frac{\\frac{\\partial}{\\partial \\mathbf{P}} E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} - \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}^{2}} = - \\frac{2 r_{0}}{\\mathbf{P}^{3}}, then obtain \\frac{\\frac{\\partial}{\\partial \\mathbf{P}} E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} - \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}^{2}} = - \\frac{2 E{(r_{0},\\mathbf{P})}}{\\mathbf{P}^{2}}", "AG derivation": "E{(r_{0},\\mathbf{P})} = \\frac{r_{0}}{\\mathbf{P}} and \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} = \\frac{r_{0}}{\\mathbf{P}^{2}} and \\frac{\\partial}{\\partial \\mathbf{P}} \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} = \\frac{\\partial}{\\partial \\mathbf{P}} \\frac{r_{0}}{\\mathbf{P}^{2}} and \\frac{\\frac{\\partial}{\\partial \\mathbf{P}} E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} - \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}^{2}} = - \\frac{2 r_{0}}{\\mathbf{P}^{3}} and \\frac{\\frac{\\partial}{\\partial \\mathbf{P}} E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} - \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}^{2}} = - \\frac{2 E{(r_{0},\\mathbf{P})}}{\\mathbf{P}^{2}}", "AG srepr_derivation": [["premise", "Equality(Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Symbol('r_0', commutative=True)))"], [["divide", 1, "Symbol('\\\\mathbf{P}', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-2)), Symbol('r_0', commutative=True)))"], [["differentiate", 2, "Symbol('\\\\mathbf{P}', commutative=True)"], "Equality(Derivative(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1))), Derivative(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-2)), Symbol('r_0', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Add(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Derivative(Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-2)), Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)))), Mul(Integer(-1), Integer(2), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-3)), Symbol('r_0', commutative=True)))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Add(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Derivative(Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-2)), Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)))), Mul(Integer(-1), Integer(2), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-2)), Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))))"]], "SR prompt": "Given E{(r_{0},\\mathbf{P})} = \\frac{r_{0}}{\\mathbf{P}}, then obtain \\frac{\\frac{\\partial}{\\partial \\mathbf{P}} \\frac{r_{0}}{\\mathbf{P}}}{\\mathbf{P}} - \\frac{r_{0}}{\\mathbf{P}^{3}} = - \\frac{2 r_{0}}{\\mathbf{P}^{3}}", "SR derivation": "E{(r_{0},\\mathbf{P})} = \\frac{r_{0}}{\\mathbf{P}} and \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} = \\frac{r_{0}}{\\mathbf{P}^{2}} and \\frac{\\partial}{\\partial \\mathbf{P}} \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} = \\frac{\\partial}{\\partial \\mathbf{P}} \\frac{r_{0}}{\\mathbf{P}^{2}} and \\frac{\\frac{\\partial}{\\partial \\mathbf{P}} E{(r_{0},\\mathbf{P})}}{\\mathbf{P}} - \\frac{E{(r_{0},\\mathbf{P})}}{\\mathbf{P}^{2}} = - \\frac{2 r_{0}}{\\mathbf{P}^{3}} and \\frac{\\frac{\\partial}{\\partial \\mathbf{P}} \\frac{r_{0}}{\\mathbf{P}}}{\\mathbf{P}} - \\frac{r_{0}}{\\mathbf{P}^{3}} = - \\frac{2 r_{0}}{\\mathbf{P}^{3}}", "SR srepr_derivation": [["premise", "Equality(Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Symbol('r_0', commutative=True)))"], [["divide", 1, "Symbol('\\\\mathbf{P}', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-2)), Symbol('r_0', commutative=True)))"], [["differentiate", 2, "Symbol('\\\\mathbf{P}', commutative=True)"], "Equality(Derivative(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True))), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1))), Derivative(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-2)), Symbol('r_0', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Add(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Derivative(Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-2)), Function('E')(Symbol('r_0', commutative=True), Symbol('\\\\mathbf{P}', commutative=True)))), Mul(Integer(-1), Integer(2), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-3)), Symbol('r_0', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Add(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Derivative(Mul(Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-1)), Symbol('r_0', commutative=True)), Tuple(Symbol('\\\\mathbf{P}', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-3)), Symbol('r_0', commutative=True))), Mul(Integer(-1), Integer(2), Pow(Symbol('\\\\mathbf{P}', commutative=True), Integer(-3)), Symbol('r_0', commutative=True)))"]], "VR prompt": "Given \\zeta{(\\tau,\\xi)} = \\frac{\\xi}{\\tau}, then derive \\frac{\\frac{\\partial}{\\partial \\tau} \\zeta{(\\tau,\\xi)}}{\\tau} - \\frac{\\zeta{(\\tau,\\xi)}}{\\tau^{2}} = - \\frac{2 \\xi}{\\tau^{3}}, then obtain \\frac{\\frac{\\partial}{\\partial \\tau} \\frac{\\xi}{\\tau}}{\\tau} - \\frac{\\xi}{\\tau^{3}} = - \\frac{2 \\xi}{\\tau^{3}}", "VR derivation": "\\zeta{(\\tau,\\xi)} = \\frac{\\xi}{\\tau} and \\frac{\\zeta{(\\tau,\\xi)}}{\\tau} = \\frac{\\xi}{\\tau^{2}} and \\frac{\\partial}{\\partial \\tau} \\frac{\\zeta{(\\tau,\\xi)}}{\\tau} = \\frac{\\partial}{\\partial \\tau} \\frac{\\xi}{\\tau^{2}} and \\frac{\\frac{\\partial}{\\partial \\tau} \\zeta{(\\tau,\\xi)}}{\\tau} - \\frac{\\zeta{(\\tau,\\xi)}}{\\tau^{2}} = - \\frac{2 \\xi}{\\tau^{3}} and \\frac{\\frac{\\partial}{\\partial \\tau} \\frac{\\xi}{\\tau}}{\\tau} - \\frac{\\xi}{\\tau^{3}} = - \\frac{2 \\xi}{\\tau^{3}}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\zeta')(Symbol('\\\\tau', commutative=True), Symbol('\\\\xi', commutative=True)), Mul(Pow(Symbol('\\\\tau', commutative=True), Integer(-1)), Symbol('\\\\xi', commutative=True)))"], [["divide", 1, "Symbol('\\\\tau', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\tau', commutative=True), Integer(-1)), Function('\\\\zeta')(Symbol('\\\\tau', commutative=True), Symbol('\\\\xi', commutative=True))), Mul(Pow(Symbol('\\\\tau', commutative=True), Integer(-2)), Symbol('\\\\xi', commutative=True)))"], [["differentiate", 2, "Symbol('\\\\tau', commutative=True)"], "Equality(Derivative(Mul(Pow(Symbol('\\\\tau', commutative=True), Integer(-1)), Function('\\\\zeta')(Symbol('\\\\tau', commutative=True), Symbol('\\\\xi', commutative=True))), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Derivative(Mul(Pow(Symbol('\\\\tau', commutative=True), Integer(-2)), Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Add(Mul(Pow(Symbol('\\\\tau', commutative=True), Integer(-1)), Derivative(Function('\\\\zeta')(Symbol('\\\\tau', commutative=True), Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('\\\\tau', commutative=True), Integer(-2)), Function('\\\\zeta')(Symbol('\\\\tau', commutative=True), Symbol('\\\\xi', commutative=True)))), Mul(Integer(-1), Integer(2), Pow(Symbol('\\\\tau', commutative=True), Integer(-3)), Symbol('\\\\xi', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Add(Mul(Pow(Symbol('\\\\tau', commutative=True), Integer(-1)), Derivative(Mul(Pow(Symbol('\\\\tau', commutative=True), Integer(-1)), Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1)))), Mul(Integer(-1), Pow(Symbol('\\\\tau', commutative=True), Integer(-3)), Symbol('\\\\xi', commutative=True))), Mul(Integer(-1), Integer(2), Pow(Symbol('\\\\tau', commutative=True), Integer(-3)), Symbol('\\\\xi', commutative=True)))"]], "static_flan-t5-large": "{ (r_ { 0 }, \\ mathbf { P } ) } = \\ frac { r_ { 0 } } { \\ mathbf { P } } and \\ frac { E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } } = \\ frac { r_ { 0 } } { \\ mathbf { P } ^ { 2 } } and \\ frac { \\ partial } { \\ partial \\ mathbf { P } } \\ frac { E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } } = \\ frac { \\ partial } { \\ partial \\ mathbf { P } } \\ frac { r_ { 0 } } { \\ mathbf { P } ^ { 2 } } and \\ frac { \\ frac { \\ partial } { \\ partial \\ mathbf { P } } E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } } - \\ frac { E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } ^ { 2 } } = - \\ frac { 2 r_ { 0 } } { \\ mathbf { P } ^ { 3 } } and \\ frac { \\ frac { \\ partial } { \\ partial \\ mathbf { P } } \\ frac { r_ { 0 } } { \\ mathbf { P } } } { \\ mathbf { P } } - \\ frac { r_ { 0 } } { \\ mathbf { P } ^ { 3 } } = - \\ frac { 2 r_ { 0 } } { \\ mathbf { P } ^ { 3 } }", "VR_flan-t5-large": "zeta { ( \\ tau, \\ xi) } = \\ frac { \\ xi } { \\ tau } and \\ frac { \\ zeta { ( \\ tau, \\ xi) } } { \\ frac { \\ xi } { \\ tau } } = 1 and \\ frac { \\ partial } { \\ partial \\ tau } \\ frac { \\ zeta { ( \\ tau, \\ xi) } } { \\ frac { \\ xi } } = \\ frac { d } { d \\ tau } 1 and \\ frac { \\ frac { \\ partial } { \\ partial \\ tau } \\ frac { \\ zeta { ( \\ tau, \\ xi) } } { \\ frac { \\ xi } { \\ tau } } = \\ frac { \\ frac { d } { d \\ tau } 1 and \\ frac { \\ frac { \\ partial } { \\ partial \\ tau } \\ frac { \\ xi } { \\ tau } } { \\ tau } - \\ frac { \\ zeta { ( \\ tau, \\ xi) } } { \\ tau ^ { 2 } } = - \\ frac { 2 \\ xi } { \\ tau ^ { 3 } } and \\ frac { \\ frac { \\ partial } { \\ partial \\ tau } \\ frac { \\ xi } { \\ tau } } { \\ tau } - \\ frac { \\ xi } { \\ tau ^ { 2 } } = - \\ frac { 2 \\ xi } { \\ tau ^ { 3 } } and \\ frac { \\ frac { \\ partial } { \\ partial \\ tau } \\ frac { \\ xi } { \\ tau } } { \\ tau } - \\ frac { \\ xi } { \\ tau ^ { 3 } } = - \\ frac { 2 \\ xi } { \\ tau ^ { 3 } }", "EE_flan-t5-large": "frac { r_ { 0 } } { \\ mathbf { P } } = E { (r_ { 0 }, \\ mathbf { P } ) } and \\ frac { r_ { 0 } } { \\ mathbf { P } } \\ frac { r_ { 0 } } { \\ mathbf { P } } = \\ frac { r_ { 0 } } { \\ mathbf { P } } E { (r_ { 0 }, \\ mathbf { P } ) } and \\ frac { \\ partial } { \\ partial \\ mathbf { P } } \\ frac { r_ { 0 } } { \\ mathbf { P } } = \\ frac { \\ partial } { \\ partial \\ mathbf { P } } E { (r_ { 0 }, \\ mathbf { P } ) } and - \\ frac { r_ { 0 } } { \\ mathbf { P } } + \\ frac { r_ { 0 } } { \\ mathbf { P } } = - \\ frac { r_ { 0 } } { \\ mathbf { P } } + \\ frac { \\ partial } { \\ partial \\ mathbf { P } } E { (r_ { 0 }, \\ mathbf { P } ) } and - \\ frac { 2 r_ { 0 } } { \\ mathbf { P } ^ { 3 } } = \\ frac { \\ frac { \\ partial } { \\ partial \\ mathbf { P } } E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } } - \\ frac { E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } ^ { 2 } } and - \\ frac { 2 r_ { 0 } } { \\ mathbf { P } ^ { 3 } } = \\ frac { \\ frac { \\ partial } { \\ partial \\ mathbf { P } } \\ frac { r_ { 0 } } { \\ mathbf", "AG_flan-t5-large": "{ (r_ { 0 }, \\ mathbf { P } ) } = \\ frac { r_ { 0 } } { \\ mathbf { P } } and \\ frac { E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } } = \\ frac { r_ { 0 } } { \\ mathbf { P } ^ { 2 } } and \\ frac { \\ partial } { \\ partial \\ mathbf { P } } \\ frac { E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } } = \\ frac { \\ partial } { \\ partial \\ mathbf { P } } \\ frac { r_ { 0 } } { \\ mathbf { P } ^ { 2 } } and \\ frac { \\ frac { \\ partial } { \\ partial \\ mathbf { P } } E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } } - \\ frac { E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } ^ { 2 } } = - \\ frac { 2 r_ { 0 } } { \\ mathbf { P } ^ { 3 } } and \\ frac { \\ frac { \\ partial } { \\ partial \\ mathbf { P } } E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } } - \\ frac { E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } ^ { 2 } } = - \\ frac { 2 E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } ^ { 2 } }", "SR_flan-t5-large": "{ (r_ { 0 }, \\ mathbf { P } ) } = \\ frac { r_ { 0 } } { \\ mathbf { P } } and \\ frac { E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } } = \\ frac { r_ { 0 } } { \\ mathbf { P } ^ { 2 } } and \\ frac { \\ partial } { \\ partial \\ mathbf { P } } \\ frac { E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } } = \\ frac { \\ partial } { \\ partial \\ mathbf { P } } \\ frac { r_ { 0 } } { \\ mathbf { P } } and \\ frac { \\ frac { \\ partial } { \\ partial \\ mathbf { P } } E { (r_ { 0 }, \\ mathbf { P } ) } } { \\ mathbf { P } } = \\ frac { \\ frac { \\ partial } { \\ partial \\ mathbf { P } } \\ frac { r_ { 0 } } { \\ mathbf { P } } } { \\ mathbf { P } } and \\ frac { \\ frac { \\ partial } { \\ partial \\ mathbf { P } } \\ frac { r_ { 0 } } { \\ mathbf { P } } } { \\ mathbf { P } } = \\ frac { 2 r_ { 0 } } { \\ mathbf { P } ^ { 3 } } and \\ frac { \\ frac { \\ partial } { \\ partial \\ mathbf { P } } \\ frac { r_ { 0 } } { \\ mathbf { P } } } { \\ mathbf { P } } - \\ frac { r_ { 0 } } { \\ mathbf { P } ^ { 3 } } = - \\ frac { 2 r_ { 0 } } { \\ mathbf { P } ^ { 3 } }", "static_rouge": 0.9952606635071091, "static_bleu": 0.9971056460177111, "static_bleurt": 0.7299214005470276, "static_gleu": 0.9970972423802612, "VR_rouge": 0.23282972428058968, "EE_rouge": 0.16409183233827784, "AG_rouge": -0.0002550315601554942, "SR_rouge": 0.12683961087553008, "VR_rouge_abs": 0.056233115639835296, "EE_rouge_abs": 0.13543888433141926, "AG_rouge_abs": 0.0008494733265376198, "SR_rouge_abs": 0.1277533039647576, "VR_bleu": 0.3071089111358771, "EE_bleu": 0.18323727133558787, "AG_bleu": -0.00017326722818566953, "SR_bleu": 0.1802994849207592, "VR_bleu_abs": -0.02836928702803726, "EE_bleu_abs": 0.17950276047689495, "AG_bleu_abs": 0.0002999381434378723, "SR_bleu_abs": 0.18319383890304808, "VR_bleurt": 0.26818159222602844, "EE_bleurt": 0.18177545070648193, "AG_bleurt": 0.0, "SR_bleurt": 0.059552133083343506, "VR_bleurt_abs": -0.01789744198322296, "EE_bleurt_abs": -0.014524400234222412, "AG_bleurt_abs": 0.0226137638092041, "SR_bleurt_abs": 0.07637965679168701, "VR_gleu": 0.306856789763571, "EE_gleu": 0.18263183357522972, "AG_gleu": -0.0001742446593022695, "SR_gleu": 0.1798997901509618, "VR_gleu_abs": -0.017701894593357304, "EE_gleu_abs": 0.17866473149492013, "AG_gleu_abs": 0.00029673978160693615, "SR_gleu_abs": 0.1828025477707006, "ratio_VR_rouge": 0.7603398166778448, "ratio_VR_bleu": 1.0747590655925163, "ratio_VR_bleurt": 0.9167079806045365, "ratio_VR_gleu": 1.0425710484287023, "ratio_EE_rouge": 0.857856220404649, "ratio_EE_bleu": 0.8161799015043152, "ratio_EE_bleurt": 1.023490062278611, "ratio_EE_gleu": 0.8170876671619615, "ratio_AG_rouge": 0.9990647212869435, "ratio_AG_bleu": 0.9996633658104647, "ratio_AG_bleurt": 0.9737478368030977, "ratio_AG_gleu": 0.9996671610406765, "ratio_SR_rouge": 0.8722466960352424, "ratio_SR_bleu": 0.8168061610969519, "ratio_SR_bleurt": 0.9113313806610716, "ratio_SR_gleu": 0.8171974522292994}, {"prompt": "Given x{(C_{d})} = \\log{(C_{d})}, then derive (\\frac{C_{d} \\frac{d}{d C_{d}} x{(C_{d})}}{x{(C_{d})}} + \\log{(x{(C_{d})})}) x^{C_{d}}{(C_{d})} = (\\log{(\\log{(C_{d})})} + \\frac{1}{\\log{(C_{d})}}) \\log{(C_{d})}^{C_{d}}, then obtain (\\frac{C_{d} \\frac{d}{d C_{d}} x{(C_{d})}}{x{(C_{d})}} + \\log{(x{(C_{d})})}) \\log{(C_{d})}^{C_{d}} = (\\log{(\\log{(C_{d})})} + \\frac{1}{\\log{(C_{d})}}) \\log{(C_{d})}^{C_{d}}", "derivation": "x{(C_{d})} = \\log{(C_{d})} and x^{C_{d}}{(C_{d})} = \\log{(C_{d})}^{C_{d}} and \\frac{d}{d C_{d}} x^{C_{d}}{(C_{d})} = \\frac{d}{d C_{d}} \\log{(C_{d})}^{C_{d}} and (\\frac{C_{d} \\frac{d}{d C_{d}} x{(C_{d})}}{x{(C_{d})}} + \\log{(x{(C_{d})})}) x^{C_{d}}{(C_{d})} = (\\log{(\\log{(C_{d})})} + \\frac{1}{\\log{(C_{d})}}) \\log{(C_{d})}^{C_{d}} and (\\frac{C_{d} \\frac{d}{d C_{d}} x{(C_{d})}}{x{(C_{d})}} + \\log{(x{(C_{d})})}) \\log{(C_{d})}^{C_{d}} = (\\log{(\\log{(C_{d})})} + \\frac{1}{\\log{(C_{d})}}) \\log{(C_{d})}^{C_{d}}", "srepr_derivation": [["premise", "Equality(Function('x')(Symbol('C_d', commutative=True)), log(Symbol('C_d', commutative=True)))"], [["power", 1, "Symbol('C_d', commutative=True)"], "Equality(Pow(Function('x')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)), Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)))"], [["differentiate", 2, "Symbol('C_d', commutative=True)"], "Equality(Derivative(Pow(Function('x')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))), Derivative(Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Mul(Add(Mul(Symbol('C_d', commutative=True), Pow(Function('x')(Symbol('C_d', commutative=True)), Integer(-1)), Derivative(Function('x')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1)))), log(Function('x')(Symbol('C_d', commutative=True)))), Pow(Function('x')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))), Mul(Add(log(log(Symbol('C_d', commutative=True))), Pow(log(Symbol('C_d', commutative=True)), Integer(-1))), Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Mul(Add(Mul(Symbol('C_d', commutative=True), Pow(Function('x')(Symbol('C_d', commutative=True)), Integer(-1)), Derivative(Function('x')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1)))), log(Function('x')(Symbol('C_d', commutative=True)))), Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))), Mul(Add(log(log(Symbol('C_d', commutative=True))), Pow(log(Symbol('C_d', commutative=True)), Integer(-1))), Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))))"]], "EE prompt": "Given \\log{(C_{d})} = x{(C_{d})}, then derive (\\log{(\\log{(C_{d})})} + \\frac{1}{\\log{(C_{d})}}) \\log{(C_{d})}^{C_{d}} = (\\frac{C_{d} \\frac{d}{d C_{d}} x{(C_{d})}}{x{(C_{d})}} + \\log{(x{(C_{d})})}) x^{C_{d}}{(C_{d})}, then obtain (\\log{(\\log{(C_{d})})} + \\frac{1}{\\log{(C_{d})}}) \\log{(C_{d})}^{C_{d}} = (\\frac{C_{d} \\frac{d}{d C_{d}} x{(C_{d})}}{x{(C_{d})}} + \\log{(x{(C_{d})})}) \\log{(C_{d})}^{C_{d}}", "EE derivation": "\\log{(C_{d})} = x{(C_{d})} and \\log{(C_{d})}^{C_{d}} = x^{C_{d}}{(C_{d})} and \\frac{d}{d C_{d}} \\log{(C_{d})}^{C_{d}} = \\frac{d}{d C_{d}} x^{C_{d}}{(C_{d})} and (\\log{(\\log{(C_{d})})} + \\frac{1}{\\log{(C_{d})}}) \\log{(C_{d})}^{C_{d}} = (\\frac{C_{d} \\frac{d}{d C_{d}} x{(C_{d})}}{x{(C_{d})}} + \\log{(x{(C_{d})})}) x^{C_{d}}{(C_{d})} and (\\log{(\\log{(C_{d})})} + \\frac{1}{\\log{(C_{d})}}) \\log{(C_{d})}^{C_{d}} = (\\frac{C_{d} \\frac{d}{d C_{d}} x{(C_{d})}}{x{(C_{d})}} + \\log{(x{(C_{d})})}) \\log{(C_{d})}^{C_{d}}", "EE srepr_derivation": [["premise", "Equality(log(Symbol('C_d', commutative=True)), Function('x')(Symbol('C_d', commutative=True)))"], [["power", 1, "Symbol('C_d', commutative=True)"], "Equality(Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)), Pow(Function('x')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)))"], [["differentiate", 2, "Symbol('C_d', commutative=True)"], "Equality(Derivative(Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))), Derivative(Pow(Function('x')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Mul(Add(log(log(Symbol('C_d', commutative=True))), Pow(log(Symbol('C_d', commutative=True)), Integer(-1))), Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))), Mul(Add(Mul(Symbol('C_d', commutative=True), Pow(Function('x')(Symbol('C_d', commutative=True)), Integer(-1)), Derivative(Function('x')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1)))), log(Function('x')(Symbol('C_d', commutative=True)))), Pow(Function('x')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Mul(Add(log(log(Symbol('C_d', commutative=True))), Pow(log(Symbol('C_d', commutative=True)), Integer(-1))), Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))), Mul(Add(Mul(Symbol('C_d', commutative=True), Pow(Function('x')(Symbol('C_d', commutative=True)), Integer(-1)), Derivative(Function('x')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1)))), log(Function('x')(Symbol('C_d', commutative=True)))), Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))))"]], "AG prompt": "Given x{(C_{d})} = \\log{(C_{d})}, then derive (\\frac{C_{d} \\frac{d}{d C_{d}} x{(C_{d})}}{x{(C_{d})}} + \\log{(x{(C_{d})})}) x^{C_{d}}{(C_{d})} = (\\log{(\\log{(C_{d})})} + \\frac{1}{\\log{(C_{d})}}) \\log{(C_{d})}^{C_{d}}, then obtain (\\frac{C_{d} \\frac{d}{d C_{d}} x{(C_{d})}}{x{(C_{d})}} + \\log{(x{(C_{d})})}) x^{C_{d}}{(C_{d})} = (\\log{(\\log{(C_{d})})} + \\frac{1}{\\log{(C_{d})}}) x^{C_{d}}{(C_{d})}", "AG derivation": "x{(C_{d})} = \\log{(C_{d})} and x^{C_{d}}{(C_{d})} = \\log{(C_{d})}^{C_{d}} and \\frac{d}{d C_{d}} x^{C_{d}}{(C_{d})} = \\frac{d}{d C_{d}} \\log{(C_{d})}^{C_{d}} and (\\frac{C_{d} \\frac{d}{d C_{d}} x{(C_{d})}}{x{(C_{d})}} + \\log{(x{(C_{d})})}) x^{C_{d}}{(C_{d})} = (\\log{(\\log{(C_{d})})} + \\frac{1}{\\log{(C_{d})}}) \\log{(C_{d})}^{C_{d}} and (\\frac{C_{d} \\frac{d}{d C_{d}} x{(C_{d})}}{x{(C_{d})}} + \\log{(x{(C_{d})})}) x^{C_{d}}{(C_{d})} = (\\log{(\\log{(C_{d})})} + \\frac{1}{\\log{(C_{d})}}) x^{C_{d}}{(C_{d})}", "AG srepr_derivation": [["premise", "Equality(Function('x')(Symbol('C_d', commutative=True)), log(Symbol('C_d', commutative=True)))"], [["power", 1, "Symbol('C_d', commutative=True)"], "Equality(Pow(Function('x')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)), Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)))"], [["differentiate", 2, "Symbol('C_d', commutative=True)"], "Equality(Derivative(Pow(Function('x')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))), Derivative(Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Mul(Add(Mul(Symbol('C_d', commutative=True), Pow(Function('x')(Symbol('C_d', commutative=True)), Integer(-1)), Derivative(Function('x')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1)))), log(Function('x')(Symbol('C_d', commutative=True)))), Pow(Function('x')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))), Mul(Add(log(log(Symbol('C_d', commutative=True))), Pow(log(Symbol('C_d', commutative=True)), Integer(-1))), Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Mul(Add(Mul(Symbol('C_d', commutative=True), Pow(Function('x')(Symbol('C_d', commutative=True)), Integer(-1)), Derivative(Function('x')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1)))), log(Function('x')(Symbol('C_d', commutative=True)))), Pow(Function('x')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))), Mul(Add(log(log(Symbol('C_d', commutative=True))), Pow(log(Symbol('C_d', commutative=True)), Integer(-1))), Pow(Function('x')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))))"]], "SR prompt": "Given x{(C_{d})} = \\log{(C_{d})}, then obtain (\\frac{C_{d} \\frac{d}{d C_{d}} x{(C_{d})}}{x{(C_{d})}} + \\log{(x{(C_{d})})}) \\log{(C_{d})}^{C_{d}} = (\\log{(\\log{(C_{d})})} + \\frac{1}{\\log{(C_{d})}}) \\log{(C_{d})}^{C_{d}}", "SR derivation": "x{(C_{d})} = \\log{(C_{d})} and x^{C_{d}}{(C_{d})} = \\log{(C_{d})}^{C_{d}} and \\frac{d}{d C_{d}} x^{C_{d}}{(C_{d})} = \\frac{d}{d C_{d}} \\log{(C_{d})}^{C_{d}} and (\\frac{C_{d} \\frac{d}{d C_{d}} x{(C_{d})}}{x{(C_{d})}} + \\log{(x{(C_{d})})}) x^{C_{d}}{(C_{d})} = (\\log{(\\log{(C_{d})})} + \\frac{1}{\\log{(C_{d})}}) \\log{(C_{d})}^{C_{d}} and (\\frac{C_{d} \\frac{d}{d C_{d}} x{(C_{d})}}{x{(C_{d})}} + \\log{(x{(C_{d})})}) \\log{(C_{d})}^{C_{d}} = (\\log{(\\log{(C_{d})})} + \\frac{1}{\\log{(C_{d})}}) \\log{(C_{d})}^{C_{d}}", "SR srepr_derivation": [["premise", "Equality(Function('x')(Symbol('C_d', commutative=True)), log(Symbol('C_d', commutative=True)))"], [["power", 1, "Symbol('C_d', commutative=True)"], "Equality(Pow(Function('x')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)), Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)))"], [["differentiate", 2, "Symbol('C_d', commutative=True)"], "Equality(Derivative(Pow(Function('x')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))), Derivative(Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Mul(Add(Mul(Symbol('C_d', commutative=True), Pow(Function('x')(Symbol('C_d', commutative=True)), Integer(-1)), Derivative(Function('x')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1)))), log(Function('x')(Symbol('C_d', commutative=True)))), Pow(Function('x')(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))), Mul(Add(log(log(Symbol('C_d', commutative=True))), Pow(log(Symbol('C_d', commutative=True)), Integer(-1))), Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Mul(Add(Mul(Symbol('C_d', commutative=True), Pow(Function('x')(Symbol('C_d', commutative=True)), Integer(-1)), Derivative(Function('x')(Symbol('C_d', commutative=True)), Tuple(Symbol('C_d', commutative=True), Integer(1)))), log(Function('x')(Symbol('C_d', commutative=True)))), Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))), Mul(Add(log(log(Symbol('C_d', commutative=True))), Pow(log(Symbol('C_d', commutative=True)), Integer(-1))), Pow(log(Symbol('C_d', commutative=True)), Symbol('C_d', commutative=True))))"]], "VR prompt": "Given \\tau{(\\iota)} = \\log{(\\iota)}, then derive (\\frac{\\iota \\frac{d}{d \\iota} \\tau{(\\iota)}}{\\tau{(\\iota)}} + \\log{(\\tau{(\\iota)})}) \\tau^{\\iota}{(\\iota)} = (\\log{(\\log{(\\iota)})} + \\frac{1}{\\log{(\\iota)}}) \\log{(\\iota)}^{\\iota}, then obtain (\\frac{\\iota \\frac{d}{d \\iota} \\tau{(\\iota)}}{\\tau{(\\iota)}} + \\log{(\\tau{(\\iota)})}) \\log{(\\iota)}^{\\iota} = (\\log{(\\log{(\\iota)})} + \\frac{1}{\\log{(\\iota)}}) \\log{(\\iota)}^{\\iota}", "VR derivation": "\\tau{(\\iota)} = \\log{(\\iota)} and \\tau^{\\iota}{(\\iota)} = \\log{(\\iota)}^{\\iota} and \\frac{d}{d \\iota} \\tau^{\\iota}{(\\iota)} = \\frac{d}{d \\iota} \\log{(\\iota)}^{\\iota} and (\\frac{\\iota \\frac{d}{d \\iota} \\tau{(\\iota)}}{\\tau{(\\iota)}} + \\log{(\\tau{(\\iota)})}) \\tau^{\\iota}{(\\iota)} = (\\log{(\\log{(\\iota)})} + \\frac{1}{\\log{(\\iota)}}) \\log{(\\iota)}^{\\iota} and (\\frac{\\iota \\frac{d}{d \\iota} \\tau{(\\iota)}}{\\tau{(\\iota)}} + \\log{(\\tau{(\\iota)})}) \\log{(\\iota)}^{\\iota} = (\\log{(\\log{(\\iota)})} + \\frac{1}{\\log{(\\iota)}}) \\log{(\\iota)}^{\\iota}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\tau')(Symbol('\\\\iota', commutative=True)), log(Symbol('\\\\iota', commutative=True)))"], [["power", 1, "Symbol('\\\\iota', commutative=True)"], "Equality(Pow(Function('\\\\tau')(Symbol('\\\\iota', commutative=True)), Symbol('\\\\iota', commutative=True)), Pow(log(Symbol('\\\\iota', commutative=True)), Symbol('\\\\iota', commutative=True)))"], [["differentiate", 2, "Symbol('\\\\iota', commutative=True)"], "Equality(Derivative(Pow(Function('\\\\tau')(Symbol('\\\\iota', commutative=True)), Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))), Derivative(Pow(log(Symbol('\\\\iota', commutative=True)), Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Mul(Add(Mul(Symbol('\\\\iota', commutative=True), Pow(Function('\\\\tau')(Symbol('\\\\iota', commutative=True)), Integer(-1)), Derivative(Function('\\\\tau')(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1)))), log(Function('\\\\tau')(Symbol('\\\\iota', commutative=True)))), Pow(Function('\\\\tau')(Symbol('\\\\iota', commutative=True)), Symbol('\\\\iota', commutative=True))), Mul(Add(log(log(Symbol('\\\\iota', commutative=True))), Pow(log(Symbol('\\\\iota', commutative=True)), Integer(-1))), Pow(log(Symbol('\\\\iota', commutative=True)), Symbol('\\\\iota', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Mul(Add(Mul(Symbol('\\\\iota', commutative=True), Pow(Function('\\\\tau')(Symbol('\\\\iota', commutative=True)), Integer(-1)), Derivative(Function('\\\\tau')(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1)))), log(Function('\\\\tau')(Symbol('\\\\iota', commutative=True)))), Pow(log(Symbol('\\\\iota', commutative=True)), Symbol('\\\\iota', commutative=True))), Mul(Add(log(log(Symbol('\\\\iota', commutative=True))), Pow(log(Symbol('\\\\iota', commutative=True)), Integer(-1))), Pow(log(Symbol('\\\\iota', commutative=True)), Symbol('\\\\iota', commutative=True))))"]], "static_flan-t5-large": "x { (C_ { d } ) } = \\ log { (C_ { d } ) } and x ^ { C_ { d } } { (C_ { d } ) } = \\ log { (C_ { d } ) } ^ { C_ { d } } and \\ frac { d } { d C_ { d } } x ^ { C_ { d } } { (C_ { d } ) } = \\ frac { d } { d C_ { d } } \\ log { (C_ { d } ) } ^ { C_ { d } } and ( \\ frac { C_ { d } \\ frac { d } { d C_ { d } } x { (C_ { d } ) } } { x { (C_ { d } ) } } + \\ log { (x { (C_ { d } ) } ) } ) x ^ { C_ { d } } { (C_ { d } ) } = ( \\ log { ( \\ log { (C_ { d } ) } ) } + \\ frac { 1 } { \\ log { (C_ { d } ) } } ) \\ log { (C_ { d } ) } ^ { C_ { d } } and ( \\ frac { C_ { d } \\ frac { d } { d C_ { d } } x { (C_ { d } ) } } { x { (C_ { d } ) } } + \\ log { (x { (C_ { d } ) } ) } ) \\ log { (C_ { d } ) } ^ { C_ { d } } = ( \\ log { ( \\ log { (C_ { d } ) } ) } + \\ frac { 1 } { \\ log { (C_ { d } ) } } ) \\ log { (C_ { d } ) } ^ { C_ { d } }", "VR_flan-t5-large": "tau { ( \\ iota) } = \\ log { ( \\ iota) } and \\ frac { \\ iota \\ tau { ( \\ iota) } } { \\ iota } = \\ frac { \\ log { ( \\ iota) } } { \\ iota } and \\ frac { d } { d \\ iota } \\ frac { \\ iota \\ tau { ( \\ iota) } } { \\ iota \\ log { ( \\ iota) } } = \\ frac { d } { d \\ iota } \\ frac { \\ log { ( \\ iota) } } { \\ iota \\ log { ( \\ iota) } } and ( \\ frac { \\ iota \\ frac { d } { d \\ iota } \\ tau { ( \\ iota) } } { \\ tau { ( \\ iota) } } + \\ log { ( \\ tau { ( \\ iota) } ) } ) \\ tau ^ { \\ iota } { ( \\ iota) } = ( \\ log { ( \\ log { ( \\ iota) } ) } + \\ frac { 1 } { \\ log { ( \\ iota) } } ) \\ log { ( \\ iota) } ^ { \\ iota } and ( \\ frac { \\ iota \\ frac { d } { d \\ iota } \\ tau { ( \\ iota) } } { \\ tau { ( \\ iota) } } + \\ log { ( \\ tau { ( \\ iota) } ) } ) \\ log { ( \\ iota) } ^ { \\ iota } = ( \\ log { ( \\ log { ( \\ iota) } ) } + \\ frac { 1 } { \\ log { ( \\ iota) } } ) \\ log { ( \\ ", "EE_flan-t5-large": "log { (C_ { d } ) } = x { (C_ { d } ) } and \\ log { ( \\ log { (C_ { d } ) } ) } = \\ log { (x { (C_ { d } ) } ) } and \\ log { ( \\ log { (C_ { d } ) } ) } ^ { C_ { d } } = \\ log { (x { (C_ { d } ) } ) } ^ { C_ { d } } and \\ log { ( \\ log { (C_ { d } ) } ) } + \\ frac { 1 } { \\ log { (C_ { d } ) } } = \\ log { (x { (C_ { d } ) } ) } + \\ frac { 1 } { \\ log { (C_ { d } ) } } and ( \\ log { ( \\ log { (C_ { d } ) } ) } + \\ frac { 1 } { \\ log { (C_ { d } ) } } ) \\ log { (C_ { d } ) } ^ { C_ { d } } = ( \\ frac { C_ { d } \\ frac { d } { d C_ { d } } x { (C_ { d } ) } } { x { (C_ { d } ) } } + \\ log { (x { (C_ { d } ) } ) } ) \\ log { (C_ { d } ) } ^ { C_ { d } }", "AG_flan-t5-large": "x { (C_ { d } ) } = \\ log { (C_ { d } ) } and x ^ { C_ { d } } { (C_ { d } ) } = \\ log { (C_ { d } ) } ^ { C_ { d } } and \\ frac { d } { d C_ { d } } x ^ { C_ { d } } { (C_ { d } ) } = \\ frac { d } { d C_ { d } } \\ log { (C_ { d } ) } ^ { C_ { d } } and ( \\ frac { C_ { d } \\ frac { d } { d C_ { d } } x { (C_ { d } ) } } { x { (C_ { d } ) } } + \\ log { (x { (C_ { d } ) } ) } ) x ^ { C_ { d } } { (C_ { d } ) } = ( \\ log { ( \\ log { (C_ { d } ) } ) } + \\ frac { 1 } { \\ log { (C_ { d } ) } } ) \\ log { (C_ { d } ) } ^ { C_ { d } } and ( \\ frac { C_ { d } \\ frac { d } { d C_ { d } } x { (C_ { d } ) } } { x { (C_ { d } ) } } + \\ log { (x { (C_ { d } ) } ) } ) x ^ { C_ { d } } { (C_ { d } ) } = ( \\ log { ( \\ log { (C_ { d } ) } ) } + \\ frac { 1 } { \\ log { (C_ { d } ) } } ) x ^ { C_ { d } } { (C_ { d } ) }", "SR_flan-t5-large": "x { (C_ { d } ) } = \\ log { (C_ { d } ) } and \\ frac { d } { d C_ { d } } x { (C_ { d } ) } = \\ frac { d } { d C_ { d } } \\ log { (C_ { d } ) } and \\ frac { C_ { d } \\ frac { d } { d C_ { d } } x { (C_ { d } ) } } { x { (C_ { d } ) } } = \\ log { ( \\ log { (C_ { d } ) } ) } and ( \\ frac { C_ { d } \\ frac { d } { d C_ { d } } x { (C_ { d } ) } } { x { (C_ { d } ) } } + \\ log { (x { (C_ { d } ) } ) } ) \\ log { (C_ { d } ) } ^ { C_ { d } } = ( \\ log { ( \\ log { (C_ { d } ) } ) } + \\ frac { 1 } { \\ log { (C_ { d } ) } } ) \\ log { (C_ { d } ) } ^ { C_ { d } }", "static_rouge": 1.0, "static_bleu": 1.0, "static_bleurt": 0.8241841793060303, "static_gleu": 1.0, "VR_rouge": 0.07228915662650603, "EE_rouge": 0.2182741116751269, "AG_rouge": 0.0, "SR_rouge": 0.17708333333333337, "VR_rouge_abs": 0.00708333333333333, "EE_rouge_abs": 0.1867840618121379, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.17708333333333337, "VR_bleu": 0.13560952326918563, "EE_bleu": 0.3004063409951392, "AG_bleu": 0.0, "SR_bleu": 0.391519417038212, "VR_bleu_abs": 0.0005533952382915097, "EE_bleu_abs": 0.2779828412352606, "AG_bleu_abs": 0.0, "SR_bleu_abs": 0.391519417038212, "VR_bleurt": 0.10708647966384888, "EE_bleurt": 0.15889006853103638, "AG_bleurt": 0.0, "SR_bleurt": 0.10545182228088379, "VR_bleurt_abs": -0.00942973792552948, "EE_bleurt_abs": 0.039180099964141846, "AG_bleurt_abs": 0.0, "SR_bleurt_abs": 0.10545182228088379, "VR_gleu": 0.13447251114413072, "EE_gleu": 0.2780517879161529, "AG_gleu": 0.0, "SR_gleu": 0.3366214549938348, "VR_gleu_abs": 0.004932182490752168, "EE_gleu_abs": 0.25585696670776825, "AG_gleu_abs": 0.0, "SR_gleu_abs": 0.3366214549938348, "ratio_VR_rouge": 0.96, "ratio_VR_bleu": 0.9985605096838375, "ratio_VR_bleurt": 0.9018884054429835, "ratio_VR_gleu": 0.9880239520958084, "ratio_EE_rouge": 0.8008811416530983, "ratio_EE_bleu": 0.7150699221918209, "ratio_EE_bleurt": 0.9354720371759787, "ratio_EE_gleu": 0.7378395451674036, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 1.0, "ratio_AG_bleurt": 1.0, "ratio_AG_gleu": 1.0, "ratio_SR_rouge": 0.8229166666666666, "ratio_SR_bleu": 0.608480582961788, "ratio_SR_bleurt": 0.8720530860351201, "ratio_SR_gleu": 0.6633785450061652}, {"prompt": "Given C{(\\psi^*)} = \\sin{(\\psi^*)}, then derive \\frac{d}{d \\psi^*} C{(\\psi^*)} = \\cos{(\\psi^*)}, then obtain C{(\\psi^*)} + \\cos{(\\psi^*)} = \\sin{(\\psi^*)} + \\cos{(\\psi^*)}", "derivation": "C{(\\psi^*)} = \\sin{(\\psi^*)} and \\frac{d}{d \\psi^*} C{(\\psi^*)} = \\frac{d}{d \\psi^*} \\sin{(\\psi^*)} and \\frac{d}{d \\psi^*} C{(\\psi^*)} = \\cos{(\\psi^*)} and C{(\\psi^*)} + \\frac{d}{d \\psi^*} \\sin{(\\psi^*)} = \\sin{(\\psi^*)} + \\frac{d}{d \\psi^*} \\sin{(\\psi^*)} and C{(\\psi^*)} + \\frac{d}{d \\psi^*} C{(\\psi^*)} = \\sin{(\\psi^*)} + \\frac{d}{d \\psi^*} C{(\\psi^*)} and C{(\\psi^*)} + \\cos{(\\psi^*)} = \\sin{(\\psi^*)} + \\cos{(\\psi^*)}", "srepr_derivation": [["premise", "Equality(Function('C')(Symbol('\\\\psi^*', commutative=True)), sin(Symbol('\\\\psi^*', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), cos(Symbol('\\\\psi^*', commutative=True)))"], [["add", 1, "Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))"], "Equality(Add(Function('C')(Symbol('\\\\psi^*', commutative=True)), Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))), Add(sin(Symbol('\\\\psi^*', commutative=True)), Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Add(Function('C')(Symbol('\\\\psi^*', commutative=True)), Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))), Add(sin(Symbol('\\\\psi^*', commutative=True)), Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 5, 3], "Equality(Add(Function('C')(Symbol('\\\\psi^*', commutative=True)), cos(Symbol('\\\\psi^*', commutative=True))), Add(sin(Symbol('\\\\psi^*', commutative=True)), cos(Symbol('\\\\psi^*', commutative=True))))"]], "EE prompt": "Given \\sin{(\\psi^*)} = C{(\\psi^*)}, then derive \\cos{(\\psi^*)} = \\frac{d}{d \\psi^*} C{(\\psi^*)}, then obtain \\sin{(\\psi^*)} + \\cos{(\\psi^*)} = C{(\\psi^*)} + \\cos{(\\psi^*)}", "EE derivation": "\\sin{(\\psi^*)} = C{(\\psi^*)} and \\frac{d}{d \\psi^*} \\sin{(\\psi^*)} = \\frac{d}{d \\psi^*} C{(\\psi^*)} and \\cos{(\\psi^*)} = \\frac{d}{d \\psi^*} C{(\\psi^*)} and \\sin{(\\psi^*)} + \\frac{d}{d \\psi^*} \\sin{(\\psi^*)} = C{(\\psi^*)} + \\frac{d}{d \\psi^*} \\sin{(\\psi^*)} and \\sin{(\\psi^*)} + \\frac{d}{d \\psi^*} C{(\\psi^*)} = C{(\\psi^*)} + \\frac{d}{d \\psi^*} C{(\\psi^*)} and \\sin{(\\psi^*)} + \\cos{(\\psi^*)} = C{(\\psi^*)} + \\cos{(\\psi^*)}", "EE srepr_derivation": [["premise", "Equality(sin(Symbol('\\\\psi^*', commutative=True)), Function('C')(Symbol('\\\\psi^*', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(cos(Symbol('\\\\psi^*', commutative=True)), Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))))"], [["add", 1, "Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))"], "Equality(Add(sin(Symbol('\\\\psi^*', commutative=True)), Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))), Add(Function('C')(Symbol('\\\\psi^*', commutative=True)), Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Add(sin(Symbol('\\\\psi^*', commutative=True)), Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))), Add(Function('C')(Symbol('\\\\psi^*', commutative=True)), Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 5, 3], "Equality(Add(sin(Symbol('\\\\psi^*', commutative=True)), cos(Symbol('\\\\psi^*', commutative=True))), Add(Function('C')(Symbol('\\\\psi^*', commutative=True)), cos(Symbol('\\\\psi^*', commutative=True))))"]], "AG prompt": "Given C{(\\psi^*)} = \\sin{(\\psi^*)}, then derive \\frac{d}{d \\psi^*} C{(\\psi^*)} = \\cos{(\\psi^*)}, then obtain 1 = \\frac{\\sin{(\\psi^*)} + \\frac{d}{d \\psi^*} C{(\\psi^*)}}{C{(\\psi^*)} + \\frac{d}{d \\psi^*} C{(\\psi^*)}}", "AG derivation": "C{(\\psi^*)} = \\sin{(\\psi^*)} and \\frac{d}{d \\psi^*} C{(\\psi^*)} = \\frac{d}{d \\psi^*} \\sin{(\\psi^*)} and \\frac{d}{d \\psi^*} C{(\\psi^*)} = \\cos{(\\psi^*)} and C{(\\psi^*)} + \\frac{d}{d \\psi^*} \\sin{(\\psi^*)} = \\sin{(\\psi^*)} + \\frac{d}{d \\psi^*} \\sin{(\\psi^*)} and C{(\\psi^*)} + \\frac{d}{d \\psi^*} C{(\\psi^*)} = \\sin{(\\psi^*)} + \\frac{d}{d \\psi^*} C{(\\psi^*)} and 1 = \\frac{\\sin{(\\psi^*)} + \\frac{d}{d \\psi^*} C{(\\psi^*)}}{C{(\\psi^*)} + \\frac{d}{d \\psi^*} C{(\\psi^*)}}", "AG srepr_derivation": [["premise", "Equality(Function('C')(Symbol('\\\\psi^*', commutative=True)), sin(Symbol('\\\\psi^*', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), cos(Symbol('\\\\psi^*', commutative=True)))"], [["add", 1, "Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))"], "Equality(Add(Function('C')(Symbol('\\\\psi^*', commutative=True)), Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))), Add(sin(Symbol('\\\\psi^*', commutative=True)), Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Add(Function('C')(Symbol('\\\\psi^*', commutative=True)), Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))), Add(sin(Symbol('\\\\psi^*', commutative=True)), Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))))"], [["divide", 5, "Add(Function('C')(Symbol('\\\\psi^*', commutative=True)), Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))))"], "Equality(Integer(1), Mul(Pow(Add(Function('C')(Symbol('\\\\psi^*', commutative=True)), Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))), Integer(-1)), Add(sin(Symbol('\\\\psi^*', commutative=True)), Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))))))"]], "SR prompt": "Given C{(\\psi^*)} = \\sin{(\\psi^*)}, then obtain C{(\\psi^*)} + \\cos{(\\psi^*)} = \\sin{(\\psi^*)} + \\cos{(\\psi^*)}", "SR derivation": "C{(\\psi^*)} = \\sin{(\\psi^*)} and \\frac{d}{d \\psi^*} C{(\\psi^*)} = \\frac{d}{d \\psi^*} \\sin{(\\psi^*)} and \\frac{d}{d \\psi^*} C{(\\psi^*)} = \\cos{(\\psi^*)} and C{(\\psi^*)} + \\frac{d}{d \\psi^*} \\sin{(\\psi^*)} = \\sin{(\\psi^*)} + \\frac{d}{d \\psi^*} \\sin{(\\psi^*)} and C{(\\psi^*)} + \\frac{d}{d \\psi^*} C{(\\psi^*)} = \\sin{(\\psi^*)} + \\frac{d}{d \\psi^*} C{(\\psi^*)} and C{(\\psi^*)} + \\cos{(\\psi^*)} = \\sin{(\\psi^*)} + \\cos{(\\psi^*)}", "SR srepr_derivation": [["premise", "Equality(Function('C')(Symbol('\\\\psi^*', commutative=True)), sin(Symbol('\\\\psi^*', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), cos(Symbol('\\\\psi^*', commutative=True)))"], [["add", 1, "Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))"], "Equality(Add(Function('C')(Symbol('\\\\psi^*', commutative=True)), Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))), Add(sin(Symbol('\\\\psi^*', commutative=True)), Derivative(sin(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Add(Function('C')(Symbol('\\\\psi^*', commutative=True)), Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))), Add(sin(Symbol('\\\\psi^*', commutative=True)), Derivative(Function('C')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 5, 3], "Equality(Add(Function('C')(Symbol('\\\\psi^*', commutative=True)), cos(Symbol('\\\\psi^*', commutative=True))), Add(sin(Symbol('\\\\psi^*', commutative=True)), cos(Symbol('\\\\psi^*', commutative=True))))"]], "VR prompt": "Given \\kappa{(\\beta)} = \\sin{(\\beta)}, then derive \\frac{d}{d \\beta} \\kappa{(\\beta)} = \\cos{(\\beta)}, then obtain \\kappa{(\\beta)} + \\cos{(\\beta)} = \\sin{(\\beta)} + \\cos{(\\beta)}", "VR derivation": "\\kappa{(\\beta)} = \\sin{(\\beta)} and \\frac{d}{d \\beta} \\kappa{(\\beta)} = \\frac{d}{d \\beta} \\sin{(\\beta)} and \\frac{d}{d \\beta} \\kappa{(\\beta)} = \\cos{(\\beta)} and \\kappa{(\\beta)} + \\frac{d}{d \\beta} \\sin{(\\beta)} = \\sin{(\\beta)} + \\frac{d}{d \\beta} \\sin{(\\beta)} and \\kappa{(\\beta)} + \\frac{d}{d \\beta} \\kappa{(\\beta)} = \\sin{(\\beta)} + \\frac{d}{d \\beta} \\kappa{(\\beta)} and \\kappa{(\\beta)} + \\cos{(\\beta)} = \\sin{(\\beta)} + \\cos{(\\beta)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), sin(Symbol('\\\\beta', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\beta', commutative=True)"], "Equality(Derivative(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), cos(Symbol('\\\\beta', commutative=True)))"], [["add", 1, "Derivative(sin(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))"], "Equality(Add(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), Derivative(sin(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))), Add(sin(Symbol('\\\\beta', commutative=True)), Derivative(sin(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Add(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), Derivative(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))), Add(sin(Symbol('\\\\beta', commutative=True)), Derivative(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 5, 3], "Equality(Add(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), cos(Symbol('\\\\beta', commutative=True))), Add(sin(Symbol('\\\\beta', commutative=True)), cos(Symbol('\\\\beta', commutative=True))))"]], "static_flan-t5-large": "{ ( \\ psi ^ *) } = \\ sin { ( \\ psi ^ *) } and \\ frac { d } { d \\ psi ^ * } C { ( \\ psi ^ *) } = \\ frac { d } { d \\ psi ^ * } \\ sin { ( \\ psi ^ *) } and \\ frac { d } { d \\ psi ^ * } C { ( \\ psi ^ *) } = \\ cos { ( \\ psi ^ *) } and C { ( \\ psi ^ *) } + \\ frac { d } { d \\ psi ^ * } C { ( \\ psi ^ *) } = \\ sin { ( \\ psi ^ *) } + \\ frac { d } { d \\ psi ^ * } C { ( \\ psi ^ *) } and C { ( \\ psi ^ *) } + \\ cos { ( \\ psi ^ *) } = \\ sin { ( \\ psi ^ *) } + \\ cos { ( \\ psi ^ *) }", "VR_flan-t5-large": "kappa { ( \\ beta) } = \\ sin { ( \\ beta) } and \\ frac { d } { d \\ beta } \\ kappa { ( \\ beta) } = \\ frac { d } { d \\ beta } \\ sin { ( \\ beta) } and \\ frac { d } { d \\ beta } \\ kappa { ( \\ beta) } = \\ cos { ( \\ beta) } and \\ frac { d } { d \\ beta } \\ sin { ( \\ beta) } = \\ cos { ( \\ beta) } and \\ kappa { ( \\ beta) } + \\ cos { ( \\ beta) } = \\ sin { ( \\ beta) } + \\ cos { ( \\ beta) }", "EE_flan-t5-large": "sin { ( \\ psi ^ *) } = C { ( \\ psi ^ *) } and \\ frac { d } { d \\ psi ^ * } \\ sin { ( \\ psi ^ *) } = \\ frac { d } { d \\ psi ^ * } C { ( \\ psi ^ *) } and \\ cos { ( \\ psi ^ *) } = \\ frac { d } { d \\ psi ^ * } C { ( \\ psi ^ *) } and \\ sin { ( \\ psi ^ *) } + \\ frac { d } { d \\ psi ^ * } \\ sin { ( \\ psi ^ *) } = \\ sin { ( \\ psi ^ *) } + \\ frac { d } { d \\ psi ^ * } C { ( \\ psi ^ *) } and \\ cos { ( \\ psi ^ *) } = \\ frac { d } { d \\ psi ^ * } C { ( \\ psi ^ *) } and \\ sin { ( \\ psi ^ *) } + \\ cos { ( \\ psi ^ *) } = C { ( \\ psi ^ *) } + \\ cos { ( \\ psi ^ *) }", "AG_flan-t5-large": "{ ( \\ psi ^ *) } = \\ sin { ( \\ psi ^ *) } and \\ frac { d } { d \\ psi ^ * } C { ( \\ psi ^ *) } = \\ frac { d } { d \\ psi ^ * } \\ sin { ( \\ psi ^ *) } and C { ( \\ psi ^ *) } + \\ frac { d } { d \\ psi ^ * } C { ( \\ psi ^ *) } = C { ( \\ psi ^ *) } + \\ frac { d } { d \\ psi ^ * } \\ sin { ( \\ psi ^ *) } and \\ frac { d } { d \\ psi ^ * } C { ( \\ psi ^ *) } = \\ cos { ( \\ psi ^ *) } and \\ cos { ( \\ psi ^ *) } = \\ frac { \\ sin { ( \\ psi ^ *) } + \\ cos { ( \\ psi ^ *) } } { C { ( \\ psi ^ *) } + \\ frac { d } { d \\ psi ^ * } C { ( \\ psi ^ *) } } and 1 = \\ frac { \\ sin { ( \\ psi ^ *) } + \\ frac { d } { d \\ psi ^ * } C { ( \\ psi ^ *) } } { C { ( \\ psi ^ *) } + \\ frac { d } { d \\ psi ^ * } C { ( \\ psi ^ *) } }", "SR_flan-t5-large": "{ ( \\ psi ^ *) } = \\ sin { ( \\ psi ^ *) } and \\ cos { ( \\ psi ^ *) } = \\ cos { ( \\ psi ^ *) } and C { ( \\ psi ^ *) } + \\ sin { ( \\ psi ^ *) } = \\ sin { ( \\ psi ^ *) } + \\ sin { ( \\ psi ^ *) } and C { ( \\ psi ^ *) } + \\ cos { ( \\ psi ^ *) } = \\ sin { ( \\ psi ^ *) } + \\ cos { ( \\ psi ^ *) }", "static_rouge": 0.8474576271186441, "static_bleu": 0.7176973498782219, "static_bleurt": 0.6193707585334778, "static_gleu": 0.7495395948434622, "VR_rouge": 0.12673690639792345, "EE_rouge": -0.05879237288135586, "AG_rouge": -0.04864626898525193, "SR_rouge": 0.3528339712046656, "VR_rouge_abs": 0.02024035420619863, "EE_rouge_abs": 0.049465240641711206, "AG_rouge_abs": 0.1032833224614047, "SR_rouge_abs": 0.44000000000000006, "VR_bleu": 0.1716998728272341, "EE_bleu": -0.13359121050740286, "AG_bleu": -0.22308215558027733, "SR_bleu": 0.41117390114123736, "VR_bleu_abs": 0.10352014450022368, "EE_bleu_abs": 0.130569450779503, "AG_bleu_abs": 0.21651922407502355, "SR_bleu_abs": 0.48399294375562696, "VR_bleurt": -0.007609546184539795, "EE_bleurt": -0.15441256761550903, "AG_bleurt": -0.11790162324905396, "SR_bleurt": 0.6217170963063836, "VR_bleurt_abs": 0.0983995571732521, "EE_bleurt_abs": -0.07482236623764038, "AG_bleurt_abs": -0.07693010568618774, "SR_bleurt_abs": 0.6387845575809479, "VR_gleu": 0.13407118525740558, "EE_gleu": -0.10865561694290982, "AG_gleu": -0.19178271920612455, "SR_gleu": 0.30202578268876606, "VR_gleu_abs": 0.0835199840724703, "EE_gleu_abs": 0.1308535158738432, "AG_gleu_abs": 0.2165303007384387, "SR_gleu_abs": 0.4115479115479116, "ratio_VR_rouge": 0.9139784946236558, "ratio_VR_bleu": 0.7961553896602649, "ratio_VR_bleurt": 0.20604987152606072, "ratio_VR_gleu": 0.8422561692126909, "ratio_EE_rouge": 0.9429892141756548, "ratio_EE_bleu": 0.8632809498732525, "ratio_EE_bleurt": 1.0978820835718375, "ratio_EE_gleu": 0.8630954544903722, "ratio_AG_rouge": 0.8783922171018945, "ratio_AG_bleu": 0.7525446666550886, "ratio_AG_bleurt": 1.1029522311436415, "ratio_AG_gleu": 0.7525956069509474, "ratio_SR_rouge": 0.5599999999999999, "ratio_SR_bleu": 0.516007056244373, "ratio_SR_bleurt": 0.2598023966678551, "ratio_SR_gleu": 0.5884520884520884}, {"prompt": "Given \\phi{(C_{2},y,f_{\\mathbf{p}})} = \\frac{C_{2} f_{\\mathbf{p}}}{y} and \\hat{x}_0{(C_{2},y,f_{\\mathbf{p}})} = \\frac{C_{2} f_{\\mathbf{p}}}{y}, then derive \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})} = \\frac{f_{\\mathbf{p}}}{y}, then obtain \\hat{x}_0{(C_{2},y,f_{\\mathbf{p}})} = C_{2} \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})}", "derivation": "\\phi{(C_{2},y,f_{\\mathbf{p}})} = \\frac{C_{2} f_{\\mathbf{p}}}{y} and \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})} = \\frac{\\partial}{\\partial C_{2}} \\frac{C_{2} f_{\\mathbf{p}}}{y} and \\hat{x}_0{(C_{2},y,f_{\\mathbf{p}})} = \\frac{C_{2} f_{\\mathbf{p}}}{y} and \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})} = \\frac{f_{\\mathbf{p}}}{y} and \\hat{x}_0{(C_{2},y,f_{\\mathbf{p}})} = C_{2} \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})}", "srepr_derivation": [["premise", "Equality(Function('\\\\phi')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Mul(Symbol('C_2', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))))"], [["differentiate", 1, "Symbol('C_2', commutative=True)"], "Equality(Derivative(Function('\\\\phi')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Derivative(Mul(Symbol('C_2', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))), Tuple(Symbol('C_2', commutative=True), Integer(1))))"], ["renaming_premise", "Equality(Function('\\\\hat{x}_0')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Mul(Symbol('C_2', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\phi')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Mul(Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))))"], [["substitute_RHS_for_LHS", 3, 4], "Equality(Function('\\\\hat{x}_0')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Mul(Symbol('C_2', commutative=True), Derivative(Function('\\\\phi')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1)))))"]], "EE prompt": "Given \\frac{C_{2} f_{\\mathbf{p}}}{y} = \\phi{(C_{2},y,f_{\\mathbf{p}})} and \\frac{C_{2} f_{\\mathbf{p}}}{y} = \\hat{x}_0{(C_{2},y,f_{\\mathbf{p}})}, then derive \\frac{f_{\\mathbf{p}}}{y} = \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})}, then obtain C_{2} \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})} = \\hat{x}_0{(C_{2},y,f_{\\mathbf{p}})}", "EE derivation": "\\frac{C_{2} f_{\\mathbf{p}}}{y} = \\phi{(C_{2},y,f_{\\mathbf{p}})} and \\frac{\\partial}{\\partial C_{2}} \\frac{C_{2} f_{\\mathbf{p}}}{y} = \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})} and \\frac{C_{2} f_{\\mathbf{p}}}{y} = \\hat{x}_0{(C_{2},y,f_{\\mathbf{p}})} and \\frac{f_{\\mathbf{p}}}{y} = \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})} and C_{2} \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})} = \\hat{x}_0{(C_{2},y,f_{\\mathbf{p}})}", "EE srepr_derivation": [["premise", "Equality(Mul(Symbol('C_2', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))), Function('\\\\phi')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)))"], [["differentiate", 1, "Symbol('C_2', commutative=True)"], "Equality(Derivative(Mul(Symbol('C_2', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))), Tuple(Symbol('C_2', commutative=True), Integer(1))), Derivative(Function('\\\\phi')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))))"], ["renaming_premise", "Equality(Mul(Symbol('C_2', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))), Function('\\\\hat{x}_0')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)))"], [["evaluate_derivatives", 2], "Equality(Mul(Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))), Derivative(Function('\\\\phi')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Mul(Symbol('C_2', commutative=True), Derivative(Function('\\\\phi')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1)))), Function('\\\\hat{x}_0')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)))"]], "AG prompt": "Given \\phi{(C_{2},y,f_{\\mathbf{p}})} = \\frac{C_{2} f_{\\mathbf{p}}}{y} and \\hat{x}_0{(C_{2},y,f_{\\mathbf{p}})} = \\frac{C_{2} f_{\\mathbf{p}}}{y}, then derive \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})} = \\frac{f_{\\mathbf{p}}}{y}, then obtain \\frac{\\partial}{\\partial C_{2}} \\frac{C_{2} f_{\\mathbf{p}}}{y} = \\frac{f_{\\mathbf{p}}}{y}", "AG derivation": "\\phi{(C_{2},y,f_{\\mathbf{p}})} = \\frac{C_{2} f_{\\mathbf{p}}}{y} and \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})} = \\frac{\\partial}{\\partial C_{2}} \\frac{C_{2} f_{\\mathbf{p}}}{y} and \\hat{x}_0{(C_{2},y,f_{\\mathbf{p}})} = \\frac{C_{2} f_{\\mathbf{p}}}{y} and \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})} = \\frac{f_{\\mathbf{p}}}{y} and \\frac{\\partial}{\\partial C_{2}} \\frac{C_{2} f_{\\mathbf{p}}}{y} = \\frac{f_{\\mathbf{p}}}{y}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\phi')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Mul(Symbol('C_2', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))))"], [["differentiate", 1, "Symbol('C_2', commutative=True)"], "Equality(Derivative(Function('\\\\phi')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Derivative(Mul(Symbol('C_2', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))), Tuple(Symbol('C_2', commutative=True), Integer(1))))"], ["renaming_premise", "Equality(Function('\\\\hat{x}_0')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Mul(Symbol('C_2', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\phi')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Mul(Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Derivative(Mul(Symbol('C_2', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))), Tuple(Symbol('C_2', commutative=True), Integer(1))), Mul(Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))))"]], "SR prompt": "Given \\phi{(C_{2},y,f_{\\mathbf{p}})} = \\frac{C_{2} f_{\\mathbf{p}}}{y} and \\hat{x}_0{(C_{2},y,f_{\\mathbf{p}})} = \\frac{C_{2} f_{\\mathbf{p}}}{y}, then obtain \\hat{x}_0{(C_{2},y,f_{\\mathbf{p}})} = C_{2} \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})}", "SR derivation": "\\phi{(C_{2},y,f_{\\mathbf{p}})} = \\frac{C_{2} f_{\\mathbf{p}}}{y} and \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})} = \\frac{\\partial}{\\partial C_{2}} \\frac{C_{2} f_{\\mathbf{p}}}{y} and \\hat{x}_0{(C_{2},y,f_{\\mathbf{p}})} = \\frac{C_{2} f_{\\mathbf{p}}}{y} and \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})} = \\frac{f_{\\mathbf{p}}}{y} and \\hat{x}_0{(C_{2},y,f_{\\mathbf{p}})} = C_{2} \\frac{\\partial}{\\partial C_{2}} \\phi{(C_{2},y,f_{\\mathbf{p}})}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\phi')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Mul(Symbol('C_2', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))))"], [["differentiate", 1, "Symbol('C_2', commutative=True)"], "Equality(Derivative(Function('\\\\phi')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Derivative(Mul(Symbol('C_2', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))), Tuple(Symbol('C_2', commutative=True), Integer(1))))"], ["renaming_premise", "Equality(Function('\\\\hat{x}_0')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Mul(Symbol('C_2', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\phi')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Mul(Symbol('f_{\\\\mathbf{p}}', commutative=True), Pow(Symbol('y', commutative=True), Integer(-1))))"], [["substitute_RHS_for_LHS", 3, 4], "Equality(Function('\\\\hat{x}_0')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Mul(Symbol('C_2', commutative=True), Derivative(Function('\\\\phi')(Symbol('C_2', commutative=True), Symbol('y', commutative=True), Symbol('f_{\\\\mathbf{p}}', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1)))))"]], "VR prompt": "Given \\omicron{(\\alpha,\\xi,\\zeta)} = \\frac{\\alpha \\zeta}{\\xi} and \\kappa{(\\alpha,\\xi,\\zeta)} = \\frac{\\alpha \\zeta}{\\xi}, then derive \\frac{\\partial}{\\partial \\zeta} \\omicron{(\\alpha,\\xi,\\zeta)} = \\frac{\\alpha}{\\xi}, then obtain \\kappa{(\\alpha,\\xi,\\zeta)} = \\zeta \\frac{\\partial}{\\partial \\zeta} \\omicron{(\\alpha,\\xi,\\zeta)}", "VR derivation": "\\omicron{(\\alpha,\\xi,\\zeta)} = \\frac{\\alpha \\zeta}{\\xi} and \\frac{\\partial}{\\partial \\zeta} \\omicron{(\\alpha,\\xi,\\zeta)} = \\frac{\\partial}{\\partial \\zeta} \\frac{\\alpha \\zeta}{\\xi} and \\kappa{(\\alpha,\\xi,\\zeta)} = \\frac{\\alpha \\zeta}{\\xi} and \\frac{\\partial}{\\partial \\zeta} \\omicron{(\\alpha,\\xi,\\zeta)} = \\frac{\\alpha}{\\xi} and \\kappa{(\\alpha,\\xi,\\zeta)} = \\zeta \\frac{\\partial}{\\partial \\zeta} \\omicron{(\\alpha,\\xi,\\zeta)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\omicron')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True)), Mul(Symbol('\\\\alpha', commutative=True), Pow(Symbol('\\\\xi', commutative=True), Integer(-1)), Symbol('\\\\zeta', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\zeta', commutative=True)"], "Equality(Derivative(Function('\\\\omicron')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Derivative(Mul(Symbol('\\\\alpha', commutative=True), Pow(Symbol('\\\\xi', commutative=True), Integer(-1)), Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))))"], ["renaming_premise", "Equality(Function('\\\\kappa')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True)), Mul(Symbol('\\\\alpha', commutative=True), Pow(Symbol('\\\\xi', commutative=True), Integer(-1)), Symbol('\\\\zeta', commutative=True)))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\omicron')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Mul(Symbol('\\\\alpha', commutative=True), Pow(Symbol('\\\\xi', commutative=True), Integer(-1))))"], [["substitute_RHS_for_LHS", 3, 4], "Equality(Function('\\\\kappa')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True)), Mul(Symbol('\\\\zeta', commutative=True), Derivative(Function('\\\\omicron')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\xi', commutative=True), Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1)))))"]], "static_flan-t5-large": "phi { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = \\ frac { C_ { 2 } f_ { \\ mathbf { p } } } { y } and \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ phi { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ frac { C_ { 2 } f_ { \\ mathbf { p } } } { y } and \\ hat { x } _0 { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = \\ frac { C_ { 2 } f_ { \\ mathbf { p } } } { y } and \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ phi { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = \\ hat { x } _0 { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } and \\ hat { x } _0 { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = C_ { 2 } \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ phi { (C_ { 2 },y,f_ { \\ mathbf { p } } ) }", "VR_flan-t5-large": "omicron { ( \\ alpha, \\ xi, \\ zeta) } = \\ frac { \\ alpha \\ zeta } { \\ xi } and \\ frac { \\ partial } { \\ partial \\ zeta } \\ omicron { ( \\ alpha, \\ xi, \\ zeta) } = \\ frac { \\ partial } { \\ partial \\ zeta } \\ frac { \\ alpha \\ zeta } { \\ xi } and \\ frac { \\ partial } { \\ partial \\ zeta } \\ omicron { ( \\ alpha, \\ xi, \\ zeta) } = \\ frac { \\ alpha } { \\ xi } and \\ frac { \\ partial } { \\ partial \\ zeta } \\ frac { \\ alpha \\ zeta } { \\ xi } = \\ frac { \\ alpha } { \\ xi } and \\ kappa { ( \\ alpha, \\ xi, \\ zeta) } = \\ frac { \\ alpha \\ zeta } { \\ xi } and \\ frac { \\ partial } { \\ partial \\ zeta } \\ omicron { ( \\ alpha, \\ xi, \\ zeta) } = \\ kappa { ( \\ alpha, \\ xi, \\ zeta) } and \\ kappa { ( \\ alpha, \\ xi, \\ zeta) } = \\ zeta \\ frac { \\ partial } { \\ partial \\ zeta } \\ omicron { ( \\ alpha, \\ xi, \\ zeta) }", "EE_flan-t5-large": "frac { C_ { 2 } f_ { \\ mathbf { p } } } { y } = \\ phi { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } and \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ phi { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ phi { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } and \\ frac { f_ { \\ mathbf { p } } } { y } = \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ phi { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } and \\ frac { C_ { 2 } f_ { \\ mathbf { p } } } { y } = \\ hat { x } _0 { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } and C_ { 2 } \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ phi { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = \\ hat { x } _0 { (C_ { 2 },y,f_ { \\ mathbf { p } } ) }", "AG_flan-t5-large": "phi { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = \\ frac { C_ { 2 } f_ { \\ mathbf { p } } } { y } and \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ phi { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ frac { C_ { 2 } f_ { \\ mathbf { p } } } { y } and \\ hat { x } _0 { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = \\ frac { C_ { 2 } f_ { \\ mathbf { p } } } { y } and \\ hat { x } _0 { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = \\ frac { C_ { 2 } f_ { \\ mathbf { p } } } { y } and \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ hat { x } _0 { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = \\ frac { f_ { \\ mathbf { p } } } { y } and \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ frac { C_ { 2 } f_ { \\ mathbf { p } } } { y } = \\ frac { f_ { \\ mathbf { p } } } { y }", "SR_flan-t5-large": "phi { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = \\ frac { C_ { 2 } f_ { \\ mathbf { p } } } { y } and \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ phi { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ frac { C_ { 2 } f_ { \\ mathbf { p } } } { y } and \\ hat { x } _0 { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = \\ frac { C_ { 2 } f_ { \\ mathbf { p } } } { y } and \\ hat { x } _0 { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ phi { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } and \\ hat { x } _0 { (C_ { 2 },y,f_ { \\ mathbf { p } } ) } = C_ { 2 } \\ frac { \\ partial } { \\ partial C_ { 2 } } \\ phi { (C_ { 2 },y,f_ { \\ mathbf { p } } ) }", "static_rouge": 0.9393939393939394, "static_bleu": 0.9386867547506984, "static_bleurt": 0.7769973278045654, "static_gleu": 0.9388083735909822, "VR_rouge": 0.11421911421911435, "EE_rouge": -0.009059668853483194, "AG_rouge": 0.053821800090456895, "SR_rouge": 0.0, "VR_rouge_abs": 0.020097020097020107, "EE_rouge_abs": 0.017911069457461126, "AG_rouge_abs": 0.050015125541998384, "SR_rouge_abs": 0.01980198019801982, "VR_bleu": 0.22980833637758014, "EE_bleu": -0.02456092649499486, "AG_bleu": 0.11233952186302287, "SR_bleu": 0.0, "VR_bleu_abs": -0.026381120678085512, "EE_bleu_abs": 0.03931060036185696, "AG_bleu_abs": 0.03827884737622422, "SR_bleu_abs": 0.004863637722864356, "VR_bleurt": -0.08370614051818848, "EE_bleurt": -0.03035914897918701, "AG_bleurt": 0.01836031675338745, "SR_bleurt": -0.006819725036621094, "VR_bleurt_abs": -0.22401311993598938, "EE_bleurt_abs": 0.022762179374694824, "AG_bleurt_abs": -0.017979681491851807, "SR_bleurt_abs": -0.036972105503082275, "VR_gleu": 0.229923685500245, "EE_gleu": -0.024585969171081024, "AG_gleu": 0.1124298340976887, "SR_gleu": 0.0, "VR_gleu_abs": -0.010363488261434128, "EE_gleu_abs": 0.03898607179437552, "AG_gleu_abs": 0.03980056179076408, "SR_gleu_abs": 0.004830917874396157, "ratio_VR_rouge": 0.8432432432432432, "ratio_VR_bleu": 1.1296783421824697, "ratio_VR_bleurt": 0.5469685794080446, "ratio_VR_gleu": 1.040975112003954, "ratio_EE_rouge": 0.9797979797979799, "ratio_EE_bleu": 0.9591928770732076, "ratio_EE_bleurt": 0.9664298709326702, "ratio_EE_gleu": 0.9595624986929334, "ratio_AG_rouge": 0.9440306928458589, "ratio_AG_bleu": 0.9566319509792786, "ratio_AG_bleurt": 1.0220716643304697, "ratio_AG_gleu": 0.9550178556364761, "ratio_SR_rouge": 0.9801980198019802, "ratio_SR_bleu": 0.9951363622771356, "ratio_SR_bleurt": 1.0440884907168022, "ratio_SR_gleu": 0.9951690821256038}, {"prompt": "Given \\operatorname{E_{x}}{(t_{2})} = \\frac{1}{t_{2}}, then derive \\int \\operatorname{E_{x}}{(t_{2})} dt_{2} = C_{1} + \\log{(t_{2})}, then obtain (C_{1} + \\log{(t_{2})})^{t_{2}} = (\\int \\operatorname{E_{x}}{(t_{2})} dt_{2})^{t_{2}}", "derivation": "\\operatorname{E_{x}}{(t_{2})} = \\frac{1}{t_{2}} and \\int \\operatorname{E_{x}}{(t_{2})} dt_{2} = \\int \\frac{1}{t_{2}} dt_{2} and (\\int \\operatorname{E_{x}}{(t_{2})} dt_{2})^{t_{2}} = (\\int \\frac{1}{t_{2}} dt_{2})^{t_{2}} and \\int \\operatorname{E_{x}}{(t_{2})} dt_{2} = C_{1} + \\log{(t_{2})} and (C_{1} + \\log{(t_{2})})^{t_{2}} = (\\int \\frac{1}{t_{2}} dt_{2})^{t_{2}} and (C_{1} + \\log{(t_{2})})^{t_{2}} = (\\int \\operatorname{E_{x}}{(t_{2})} dt_{2})^{t_{2}}", "srepr_derivation": [["renaming_premise", "Equality(Function('E_x')(Symbol('t_2', commutative=True)), Pow(Symbol('t_2', commutative=True), Integer(-1)))"], [["integrate", 1, "Symbol('t_2', commutative=True)"], "Equality(Integral(Function('E_x')(Symbol('t_2', commutative=True)), Tuple(Symbol('t_2', commutative=True))), Integral(Pow(Symbol('t_2', commutative=True), Integer(-1)), Tuple(Symbol('t_2', commutative=True))))"], [["power", 2, "Symbol('t_2', commutative=True)"], "Equality(Pow(Integral(Function('E_x')(Symbol('t_2', commutative=True)), Tuple(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)), Pow(Integral(Pow(Symbol('t_2', commutative=True), Integer(-1)), Tuple(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)))"], [["evaluate_integrals", 2], "Equality(Integral(Function('E_x')(Symbol('t_2', commutative=True)), Tuple(Symbol('t_2', commutative=True))), Add(Symbol('C_1', commutative=True), log(Symbol('t_2', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Pow(Add(Symbol('C_1', commutative=True), log(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)), Pow(Integral(Pow(Symbol('t_2', commutative=True), Integer(-1)), Tuple(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)))"], [["substitute_RHS_for_LHS", 5, 3], "Equality(Pow(Add(Symbol('C_1', commutative=True), log(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)), Pow(Integral(Function('E_x')(Symbol('t_2', commutative=True)), Tuple(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)))"]], "EE prompt": "Given \\frac{1}{t_{2}} = \\operatorname{E_{x}}{(t_{2})}, then derive C_{1} + \\log{(t_{2})} = \\int \\operatorname{E_{x}}{(t_{2})} dt_{2}, then obtain (\\int \\operatorname{E_{x}}{(t_{2})} dt_{2})^{t_{2}} = (C_{1} + \\log{(t_{2})})^{t_{2}}", "EE derivation": "\\frac{1}{t_{2}} = \\operatorname{E_{x}}{(t_{2})} and \\int \\frac{1}{t_{2}} dt_{2} = \\int \\operatorname{E_{x}}{(t_{2})} dt_{2} and (\\int \\frac{1}{t_{2}} dt_{2})^{t_{2}} = (\\int \\operatorname{E_{x}}{(t_{2})} dt_{2})^{t_{2}} and C_{1} + \\log{(t_{2})} = \\int \\operatorname{E_{x}}{(t_{2})} dt_{2} and (\\int \\frac{1}{t_{2}} dt_{2})^{t_{2}} = (C_{1} + \\log{(t_{2})})^{t_{2}} and (\\int \\operatorname{E_{x}}{(t_{2})} dt_{2})^{t_{2}} = (C_{1} + \\log{(t_{2})})^{t_{2}}", "EE srepr_derivation": [["renaming_premise", "Equality(Pow(Symbol('t_2', commutative=True), Integer(-1)), Function('E_x')(Symbol('t_2', commutative=True)))"], [["integrate", 1, "Symbol('t_2', commutative=True)"], "Equality(Integral(Pow(Symbol('t_2', commutative=True), Integer(-1)), Tuple(Symbol('t_2', commutative=True))), Integral(Function('E_x')(Symbol('t_2', commutative=True)), Tuple(Symbol('t_2', commutative=True))))"], [["power", 2, "Symbol('t_2', commutative=True)"], "Equality(Pow(Integral(Pow(Symbol('t_2', commutative=True), Integer(-1)), Tuple(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)), Pow(Integral(Function('E_x')(Symbol('t_2', commutative=True)), Tuple(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)))"], [["evaluate_integrals", 2], "Equality(Add(Symbol('C_1', commutative=True), log(Symbol('t_2', commutative=True))), Integral(Function('E_x')(Symbol('t_2', commutative=True)), Tuple(Symbol('t_2', commutative=True))))"], [["substitute_RHS_for_LHS", 3, 4], "Equality(Pow(Integral(Pow(Symbol('t_2', commutative=True), Integer(-1)), Tuple(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)), Pow(Add(Symbol('C_1', commutative=True), log(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)))"], [["substitute_LHS_for_RHS", 5, 3], "Equality(Pow(Integral(Function('E_x')(Symbol('t_2', commutative=True)), Tuple(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)), Pow(Add(Symbol('C_1', commutative=True), log(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)))"]], "AG prompt": "Given \\operatorname{E_{x}}{(t_{2})} = \\frac{1}{t_{2}}, then derive \\int \\operatorname{E_{x}}{(t_{2})} dt_{2} = C_{1} + \\log{(t_{2})}, then obtain (C_{1} + \\log{(\\frac{1}{\\operatorname{E_{x}}{(t_{2})}})})^{\\frac{1}{\\operatorname{E_{x}}{(t_{2})}}} = (\\int \\frac{1}{t_{2}} dt_{2})^{\\frac{1}{\\operatorname{E_{x}}{(t_{2})}}}", "AG derivation": "\\operatorname{E_{x}}{(t_{2})} = \\frac{1}{t_{2}} and \\int \\operatorname{E_{x}}{(t_{2})} dt_{2} = \\int \\frac{1}{t_{2}} dt_{2} and (\\int \\operatorname{E_{x}}{(t_{2})} dt_{2})^{t_{2}} = (\\int \\frac{1}{t_{2}} dt_{2})^{t_{2}} and \\int \\operatorname{E_{x}}{(t_{2})} dt_{2} = C_{1} + \\log{(t_{2})} and (C_{1} + \\log{(t_{2})})^{t_{2}} = (\\int \\frac{1}{t_{2}} dt_{2})^{t_{2}} and (C_{1} + \\log{(\\frac{1}{\\operatorname{E_{x}}{(t_{2})}})})^{\\frac{1}{\\operatorname{E_{x}}{(t_{2})}}} = (\\int \\frac{1}{t_{2}} dt_{2})^{\\frac{1}{\\operatorname{E_{x}}{(t_{2})}}}", "AG srepr_derivation": [["renaming_premise", "Equality(Function('E_x')(Symbol('t_2', commutative=True)), Pow(Symbol('t_2', commutative=True), Integer(-1)))"], [["integrate", 1, "Symbol('t_2', commutative=True)"], "Equality(Integral(Function('E_x')(Symbol('t_2', commutative=True)), Tuple(Symbol('t_2', commutative=True))), Integral(Pow(Symbol('t_2', commutative=True), Integer(-1)), Tuple(Symbol('t_2', commutative=True))))"], [["power", 2, "Symbol('t_2', commutative=True)"], "Equality(Pow(Integral(Function('E_x')(Symbol('t_2', commutative=True)), Tuple(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)), Pow(Integral(Pow(Symbol('t_2', commutative=True), Integer(-1)), Tuple(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)))"], [["evaluate_integrals", 2], "Equality(Integral(Function('E_x')(Symbol('t_2', commutative=True)), Tuple(Symbol('t_2', commutative=True))), Add(Symbol('C_1', commutative=True), log(Symbol('t_2', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Pow(Add(Symbol('C_1', commutative=True), log(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)), Pow(Integral(Pow(Symbol('t_2', commutative=True), Integer(-1)), Tuple(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(Pow(Add(Symbol('C_1', commutative=True), log(Pow(Function('E_x')(Symbol('t_2', commutative=True)), Integer(-1)))), Pow(Function('E_x')(Symbol('t_2', commutative=True)), Integer(-1))), Pow(Integral(Pow(Symbol('t_2', commutative=True), Integer(-1)), Tuple(Symbol('t_2', commutative=True))), Pow(Function('E_x')(Symbol('t_2', commutative=True)), Integer(-1))))"]], "SR prompt": "Given \\operatorname{E_{x}}{(t_{2})} = \\frac{1}{t_{2}}, then obtain (C_{1} + \\log{(t_{2})})^{t_{2}} = (\\int \\operatorname{E_{x}}{(t_{2})} dt_{2})^{t_{2}}", "SR derivation": "\\operatorname{E_{x}}{(t_{2})} = \\frac{1}{t_{2}} and \\int \\operatorname{E_{x}}{(t_{2})} dt_{2} = \\int \\frac{1}{t_{2}} dt_{2} and (\\int \\operatorname{E_{x}}{(t_{2})} dt_{2})^{t_{2}} = (\\int \\frac{1}{t_{2}} dt_{2})^{t_{2}} and \\int \\operatorname{E_{x}}{(t_{2})} dt_{2} = C_{1} + \\log{(t_{2})} and (C_{1} + \\log{(t_{2})})^{t_{2}} = (\\int \\frac{1}{t_{2}} dt_{2})^{t_{2}} and (C_{1} + \\log{(t_{2})})^{t_{2}} = (\\int \\operatorname{E_{x}}{(t_{2})} dt_{2})^{t_{2}}", "SR srepr_derivation": [["renaming_premise", "Equality(Function('E_x')(Symbol('t_2', commutative=True)), Pow(Symbol('t_2', commutative=True), Integer(-1)))"], [["integrate", 1, "Symbol('t_2', commutative=True)"], "Equality(Integral(Function('E_x')(Symbol('t_2', commutative=True)), Tuple(Symbol('t_2', commutative=True))), Integral(Pow(Symbol('t_2', commutative=True), Integer(-1)), Tuple(Symbol('t_2', commutative=True))))"], [["power", 2, "Symbol('t_2', commutative=True)"], "Equality(Pow(Integral(Function('E_x')(Symbol('t_2', commutative=True)), Tuple(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)), Pow(Integral(Pow(Symbol('t_2', commutative=True), Integer(-1)), Tuple(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)))"], [["evaluate_integrals", 2], "Equality(Integral(Function('E_x')(Symbol('t_2', commutative=True)), Tuple(Symbol('t_2', commutative=True))), Add(Symbol('C_1', commutative=True), log(Symbol('t_2', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Pow(Add(Symbol('C_1', commutative=True), log(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)), Pow(Integral(Pow(Symbol('t_2', commutative=True), Integer(-1)), Tuple(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)))"], [["substitute_RHS_for_LHS", 5, 3], "Equality(Pow(Add(Symbol('C_1', commutative=True), log(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)), Pow(Integral(Function('E_x')(Symbol('t_2', commutative=True)), Tuple(Symbol('t_2', commutative=True))), Symbol('t_2', commutative=True)))"]], "VR prompt": "Given \\kappa{(\\beta)} = \\frac{1}{\\beta}, then derive \\int \\kappa{(\\beta)} d\\beta = \\iota + \\log{(\\beta)}, then obtain (\\iota + \\log{(\\beta)})^{\\beta} = (\\int \\kappa{(\\beta)} d\\beta)^{\\beta}", "VR derivation": "\\kappa{(\\beta)} = \\frac{1}{\\beta} and \\int \\kappa{(\\beta)} d\\beta = \\int \\frac{1}{\\beta} d\\beta and (\\int \\kappa{(\\beta)} d\\beta)^{\\beta} = (\\int \\frac{1}{\\beta} d\\beta)^{\\beta} and \\int \\kappa{(\\beta)} d\\beta = \\iota + \\log{(\\beta)} and (\\iota + \\log{(\\beta)})^{\\beta} = (\\int \\frac{1}{\\beta} d\\beta)^{\\beta} and (\\iota + \\log{(\\beta)})^{\\beta} = (\\int \\kappa{(\\beta)} d\\beta)^{\\beta}", "VR srepr_derivation": [["renaming_premise", "Equality(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), Pow(Symbol('\\\\beta', commutative=True), Integer(-1)))"], [["integrate", 1, "Symbol('\\\\beta', commutative=True)"], "Equality(Integral(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))), Integral(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Tuple(Symbol('\\\\beta', commutative=True))))"], [["power", 2, "Symbol('\\\\beta', commutative=True)"], "Equality(Pow(Integral(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))), Symbol('\\\\beta', commutative=True)), Pow(Integral(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Tuple(Symbol('\\\\beta', commutative=True))), Symbol('\\\\beta', commutative=True)))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))), Add(Symbol('\\\\iota', commutative=True), log(Symbol('\\\\beta', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Pow(Add(Symbol('\\\\iota', commutative=True), log(Symbol('\\\\beta', commutative=True))), Symbol('\\\\beta', commutative=True)), Pow(Integral(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Tuple(Symbol('\\\\beta', commutative=True))), Symbol('\\\\beta', commutative=True)))"], [["substitute_RHS_for_LHS", 5, 3], "Equality(Pow(Add(Symbol('\\\\iota', commutative=True), log(Symbol('\\\\beta', commutative=True))), Symbol('\\\\beta', commutative=True)), Pow(Integral(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))), Symbol('\\\\beta', commutative=True)))"]], "static_flan-t5-large": "operatorname { E_ { x } } { (t_ { 2 } ) } = \\ frac { 1 } { t_ { 2 } } and \\ int \\ operatorname { E_ { x } } { (t_ { 2 } ) } dt_ { 2 } = \\ int \\ frac { 1 } { t_ { 2 } } dt_ { 2 } and ( \\ int \\ operatorname { E_ { x } } { (t_ { 2 } ) } dt_ { 2 } ) ^ { t_ { 2 } } = ( \\ int \\ frac { 1 } { t_ { 2 } } dt_ { 2 } ) ^ { t_ { 2 } } and \\ int \\ operatorname { E_ { x } } { (t_ { 2 } ) } dt_ { 2 } = C_ { 1 } + \\ log { (t_ { 2 } ) } and (C_ { 1 } + \\ log { (t_ { 2 } ) } ) ^ { t_ { 2 } } = ( \\ int \\ frac { 1 } { t_ { 2 } } dt_ { 2 } ) ^ { t_ { 2 } } and (C_ { 1 } + \\ log { (t_ { 2 } ) } ) ^ { t_ { 2 } } = ( \\ int \\ operatorname { E_ { x } } { (t_ { 2 } ) } dt_ { 2 } ) ^ { t_ { 2 } }", "VR_flan-t5-large": "kappa { ( \\ beta) } = \\ frac { 1 } { \\ beta } and \\ int \\ kappa { ( \\ beta) } d \\ beta = \\ int \\ frac { 1 } { \\ beta } d \\ beta and ( \\ int \\ kappa { ( \\ beta) } d \\ beta) ^ { \\ beta } = ( \\ int \\ frac { 1 } { \\ beta } d \\ beta) ^ { \\ beta } and \\ int \\ kappa { ( \\ beta) } d \\ beta = \\ iota + \\ log { ( \\ beta) } and ( \\ iota + \\ log { ( \\ beta) } ) ^ { \\ beta } = ( \\ int \\ frac { 1 } { \\ beta } d \\ beta) ^ { \\ beta } and ( \\ iota + \\ log { ( \\ beta) } ) ^ { \\ beta } = ( \\ int \\ kappa { ( \\ beta) } d \\ beta) ^ { \\ beta }", "EE_flan-t5-large": "frac { 1 } { t_ { 2 } } = \\ operatorname { E_ { x } } { (t_ { 2 } ) } and \\ int \\ frac { 1 } { t_ { 2 } } dt_ { 2 } = \\ int \\ operatorname { E_ { x } } { (t_ { 2 } ) } dt_ { 2 } and \\ int \\ frac { 1 } { t_ { 2 } } dt_ { 2 } = \\ int \\ operatorname { E_ { x } } { (t_ { 2 } ) } dt_ { 2 } and C_ { 1 } + \\ log { (t_ { 2 } ) } = \\ int \\ operatorname { E_ { x } } { (t_ { 2 } ) } dt_ { 2 } and ( \\ int \\ frac { 1 } { t_ { 2 } } dt_ { 2 } ) ^ { t_ { 2 } } = ( \\ int \\ operatorname { E_ { x } } { (t_ { 2 } ) } dt_ { 2 } ) ^ { t_ { 2 } } and ( \\ int \\ operatorname { E_ { x } } { (t_ { 2 } ) } dt_ { 2 } ) ^ { t_ { 2 } } = (C_ { 1 } + \\ log { (t_ { 2 } ) } ) ^ { t_ { 2 } }", "AG_flan-t5-large": "operatorname { E_ { x } } { (t_ { 2 } ) } = \\ frac { 1 } { t_ { 2 } } and \\ int \\ operatorname { E_ { x } } { (t_ { 2 } ) } dt_ { 2 } = \\ int \\ frac { 1 } { t_ { 2 } } dt_ { 2 } and ( \\ int \\ operatorname { E_ { x } } { (t_ { 2 } ) } dt_ { 2 } ) ^ { \\ frac { 1 } { \\ operatorname { E_ { x } } { (t_ { 2 } ) } } } = ( \\ int \\ frac { 1 } { t_ { 2 } } dt_ { 2 } ) ^ { \\ frac { 1 } { \\ operatorname { E_ { x } } { (t_ { 2 } ) } } } and \\ int \\ operatorname { E_ { x } } { (t_ { 2 } ) } dt_ { 2 } = C_ { 1 } + \\ log { (t_ { 2 } ) } and C_ { 1 } + \\ log { ( \\ frac { 1 } { \\ operatorname { E_ { x } } { (t_ { 2 } ) } } ) } = \\ int \\ frac { 1 } { t_ { 2 } } dt_ { 2 } and (C_ { 1 } + \\ log { ( \\ frac { 1 } { \\ operatorname { E_ { x } } { (t_ { 2 } ) } } ) } ) ^ { \\ frac { 1 } { \\ operatorname { E_ { x } } { (t_ { 2 } ) } } } = ( \\ int \\ frac { 1 } { t_ { 2 } } dt_ { 2 } ) ^ { \\ frac { 1 } { \\ operatorname { E_ { x } } { (t_ { 2 } ) } } }", "SR_flan-t5-large": "operatorname { E_ { x } } { (t_ { 2 } ) } = \\ frac { 1 } { t_ { 2 } } and \\ int \\ operatorname { E_ { x } } { (t_ { 2 } ) } dt_ { 2 } = \\ int \\ frac { 1 } { t_ { 2 } } dt_ { 2 } and ( \\ int \\ operatorname { E_ { x } } { (t_ { 2 } ) } dt_ { 2 } ) ^ { t_ { 2 } } = ( \\ int \\ frac { 1 } { t_ { 2 } } dt_ { 2 } ) ^ { t_ { 2 } } and (C_ { 1 } + \\ log { (t_ { 2 } ) } ) ^ { t_ { 2 } } = ( \\ int \\ operatorname { E_ { x } } { (t_ { 2 } ) } dt_ { 2 } ) ^ { t_ { 2 } }", "static_rouge": 1.0, "static_bleu": 0.996758511756972, "static_bleurt": 0.8165555000305176, "static_gleu": 0.9967479674796748, "VR_rouge": 0.0, "EE_rouge": 0.08108108108108103, "AG_rouge": 0.11111111111111116, "SR_rouge": 0.19999999999999996, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.05963382737576284, "AG_rouge_abs": 0.11274881516587676, "SR_rouge_abs": 0.19999999999999996, "VR_bleu": 0.0018475592698995458, "EE_bleu": 0.09049327469872936, "AG_bleu": 0.1528881330235392, "SR_bleu": 0.39022785204433863, "VR_bleu_abs": -6.511961637831187e-05, "EE_bleu_abs": 0.08016656767056285, "AG_bleu_abs": 0.14346957825623197, "SR_bleu_abs": 0.390517858702218, "VR_bleurt": 0.05495870113372803, "EE_bleurt": 0.12473595142364502, "AG_bleurt": 0.02369511127471924, "SR_bleurt": 0.20373165607452393, "VR_bleurt_abs": 0.06048482656478882, "EE_bleurt_abs": 0.092471182346344, "AG_bleurt_abs": 0.05306851863861084, "SR_bleurt_abs": 0.1923123002052307, "VR_gleu": 0.00186305699374123, "EE_gleu": 0.08943089430894302, "AG_gleu": 0.1521786790901617, "SR_gleu": 0.3317073170731707, "VR_gleu_abs": -8.620803989439763e-05, "EE_gleu_abs": 0.07920662077746388, "AG_gleu_abs": 0.1421019368942349, "SR_gleu_abs": 0.33278955954323, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 1.0002822370222926, "ratio_VR_bleurt": 1.1187499349065833, "ratio_VR_gleu": 1.0003118702619709, "ratio_EE_rouge": 0.9383783783783785, "ratio_EE_bleu": 0.9175859747024961, "ratio_EE_bleurt": 0.8846366059295876, "ratio_EE_gleu": 0.9186097380482201, "ratio_AG_rouge": 0.8733159380158688, "ratio_AG_bleu": 0.828658179879805, "ratio_AG_bleurt": 0.9369230722363595, "ratio_AG_gleu": 0.8303225427340515, "ratio_SR_rouge": 0.8, "ratio_SR_bleu": 0.609482141297782, "ratio_SR_bleurt": 0.7714187360172671, "ratio_SR_gleu": 0.66721044045677}, {"prompt": "Given \\operatorname{M_{E}}{(\\psi^*)} = \\log{(\\psi^*)}, then derive \\frac{d}{d \\psi^*} \\operatorname{M_{E}}{(\\psi^*)} = \\frac{1}{\\psi^*}, then obtain (((\\frac{1}{\\psi^*})^{\\psi^*})^{\\psi^*})^{\\psi^*} = (((\\frac{d}{d \\psi^*} \\log{(\\psi^*)})^{\\psi^*})^{\\psi^*})^{\\psi^*}", "derivation": "\\operatorname{M_{E}}{(\\psi^*)} = \\log{(\\psi^*)} and \\frac{d}{d \\psi^*} \\operatorname{M_{E}}{(\\psi^*)} = \\frac{d}{d \\psi^*} \\log{(\\psi^*)} and \\frac{d}{d \\psi^*} \\operatorname{M_{E}}{(\\psi^*)} = \\frac{1}{\\psi^*} and \\frac{1}{\\psi^*} = \\frac{d}{d \\psi^*} \\log{(\\psi^*)} and (\\frac{1}{\\psi^*})^{\\psi^*} = (\\frac{d}{d \\psi^*} \\log{(\\psi^*)})^{\\psi^*} and ((\\frac{1}{\\psi^*})^{\\psi^*})^{\\psi^*} = ((\\frac{d}{d \\psi^*} \\log{(\\psi^*)})^{\\psi^*})^{\\psi^*} and (((\\frac{1}{\\psi^*})^{\\psi^*})^{\\psi^*})^{\\psi^*} = (((\\frac{d}{d \\psi^*} \\log{(\\psi^*)})^{\\psi^*})^{\\psi^*})^{\\psi^*}", "srepr_derivation": [["premise", "Equality(Function('M_E')(Symbol('\\\\psi^*', commutative=True)), log(Symbol('\\\\psi^*', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Derivative(Function('M_E')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('M_E')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))))"], [["power", 4, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Pow(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Symbol('\\\\psi^*', commutative=True)), Pow(Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Symbol('\\\\psi^*', commutative=True)))"], [["power", 5, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Pow(Pow(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)), Pow(Pow(Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)))"], [["power", 6, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Pow(Pow(Pow(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)), Pow(Pow(Pow(Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)))"]], "EE prompt": "Given \\log{(\\psi^*)} = \\operatorname{M_{E}}{(\\psi^*)}, then derive \\frac{1}{\\psi^*} = \\frac{d}{d \\psi^*} \\operatorname{M_{E}}{(\\psi^*)}, then obtain (((\\frac{d}{d \\psi^*} \\log{(\\psi^*)})^{\\psi^*})^{\\psi^*})^{\\psi^*} = (((\\frac{1}{\\psi^*})^{\\psi^*})^{\\psi^*})^{\\psi^*}", "EE derivation": "\\log{(\\psi^*)} = \\operatorname{M_{E}}{(\\psi^*)} and \\frac{d}{d \\psi^*} \\log{(\\psi^*)} = \\frac{d}{d \\psi^*} \\operatorname{M_{E}}{(\\psi^*)} and \\frac{1}{\\psi^*} = \\frac{d}{d \\psi^*} \\operatorname{M_{E}}{(\\psi^*)} and \\frac{d}{d \\psi^*} \\log{(\\psi^*)} = \\frac{1}{\\psi^*} and (\\frac{d}{d \\psi^*} \\log{(\\psi^*)})^{\\psi^*} = (\\frac{1}{\\psi^*})^{\\psi^*} and ((\\frac{d}{d \\psi^*} \\log{(\\psi^*)})^{\\psi^*})^{\\psi^*} = ((\\frac{1}{\\psi^*})^{\\psi^*})^{\\psi^*} and (((\\frac{d}{d \\psi^*} \\log{(\\psi^*)})^{\\psi^*})^{\\psi^*})^{\\psi^*} = (((\\frac{1}{\\psi^*})^{\\psi^*})^{\\psi^*})^{\\psi^*}", "EE srepr_derivation": [["premise", "Equality(log(Symbol('\\\\psi^*', commutative=True)), Function('M_E')(Symbol('\\\\psi^*', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Derivative(Function('M_E')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Derivative(Function('M_E')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)))"], [["power", 4, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Pow(Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Symbol('\\\\psi^*', commutative=True)), Pow(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Symbol('\\\\psi^*', commutative=True)))"], [["power", 5, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Pow(Pow(Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)), Pow(Pow(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)))"], [["power", 6, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Pow(Pow(Pow(Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)), Pow(Pow(Pow(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)))"]], "AG prompt": "Given \\operatorname{M_{E}}{(\\psi^*)} = \\log{(\\psi^*)}, then derive \\frac{d}{d \\psi^*} \\operatorname{M_{E}}{(\\psi^*)} = \\frac{1}{\\psi^*}, then obtain ((\\frac{1}{\\psi^*})^{\\psi^*})^{\\psi^*} = ((\\frac{d}{d \\psi^*} \\operatorname{M_{E}}{(\\psi^*)})^{\\psi^*})^{\\psi^*}", "AG derivation": "\\operatorname{M_{E}}{(\\psi^*)} = \\log{(\\psi^*)} and \\frac{d}{d \\psi^*} \\operatorname{M_{E}}{(\\psi^*)} = \\frac{d}{d \\psi^*} \\log{(\\psi^*)} and \\frac{d}{d \\psi^*} \\operatorname{M_{E}}{(\\psi^*)} = \\frac{1}{\\psi^*} and \\frac{1}{\\psi^*} = \\frac{d}{d \\psi^*} \\log{(\\psi^*)} and (\\frac{1}{\\psi^*})^{\\psi^*} = (\\frac{d}{d \\psi^*} \\log{(\\psi^*)})^{\\psi^*} and ((\\frac{1}{\\psi^*})^{\\psi^*})^{\\psi^*} = ((\\frac{d}{d \\psi^*} \\log{(\\psi^*)})^{\\psi^*})^{\\psi^*} and ((\\frac{1}{\\psi^*})^{\\psi^*})^{\\psi^*} = ((\\frac{d}{d \\psi^*} \\operatorname{M_{E}}{(\\psi^*)})^{\\psi^*})^{\\psi^*}", "AG srepr_derivation": [["premise", "Equality(Function('M_E')(Symbol('\\\\psi^*', commutative=True)), log(Symbol('\\\\psi^*', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Derivative(Function('M_E')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('M_E')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))))"], [["power", 4, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Pow(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Symbol('\\\\psi^*', commutative=True)), Pow(Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Symbol('\\\\psi^*', commutative=True)))"], [["power", 5, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Pow(Pow(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)), Pow(Pow(Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)))"], [["substitute_RHS_for_LHS", 6, 2], "Equality(Pow(Pow(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)), Pow(Pow(Derivative(Function('M_E')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)))"]], "SR prompt": "Given \\operatorname{M_{E}}{(\\psi^*)} = \\log{(\\psi^*)}, then obtain (((\\frac{1}{\\psi^*})^{\\psi^*})^{\\psi^*})^{\\psi^*} = (((\\frac{d}{d \\psi^*} \\log{(\\psi^*)})^{\\psi^*})^{\\psi^*})^{\\psi^*}", "SR derivation": "\\operatorname{M_{E}}{(\\psi^*)} = \\log{(\\psi^*)} and \\frac{d}{d \\psi^*} \\operatorname{M_{E}}{(\\psi^*)} = \\frac{d}{d \\psi^*} \\log{(\\psi^*)} and \\frac{d}{d \\psi^*} \\operatorname{M_{E}}{(\\psi^*)} = \\frac{1}{\\psi^*} and \\frac{1}{\\psi^*} = \\frac{d}{d \\psi^*} \\log{(\\psi^*)} and (\\frac{1}{\\psi^*})^{\\psi^*} = (\\frac{d}{d \\psi^*} \\log{(\\psi^*)})^{\\psi^*} and ((\\frac{1}{\\psi^*})^{\\psi^*})^{\\psi^*} = ((\\frac{d}{d \\psi^*} \\log{(\\psi^*)})^{\\psi^*})^{\\psi^*} and (((\\frac{1}{\\psi^*})^{\\psi^*})^{\\psi^*})^{\\psi^*} = (((\\frac{d}{d \\psi^*} \\log{(\\psi^*)})^{\\psi^*})^{\\psi^*})^{\\psi^*}", "SR srepr_derivation": [["premise", "Equality(Function('M_E')(Symbol('\\\\psi^*', commutative=True)), log(Symbol('\\\\psi^*', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Derivative(Function('M_E')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('M_E')(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))))"], [["power", 4, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Pow(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Symbol('\\\\psi^*', commutative=True)), Pow(Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Symbol('\\\\psi^*', commutative=True)))"], [["power", 5, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Pow(Pow(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)), Pow(Pow(Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)))"], [["power", 6, "Symbol('\\\\psi^*', commutative=True)"], "Equality(Pow(Pow(Pow(Pow(Symbol('\\\\psi^*', commutative=True), Integer(-1)), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)), Pow(Pow(Pow(Derivative(log(Symbol('\\\\psi^*', commutative=True)), Tuple(Symbol('\\\\psi^*', commutative=True), Integer(1))), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)), Symbol('\\\\psi^*', commutative=True)))"]], "VR prompt": "Given \\iota{(\\upsilon)} = \\log{(\\upsilon)}, then derive \\frac{d}{d \\upsilon} \\iota{(\\upsilon)} = \\frac{1}{\\upsilon}, then obtain (((\\frac{1}{\\upsilon})^{\\upsilon})^{\\upsilon})^{\\upsilon} = (((\\frac{d}{d \\upsilon} \\log{(\\upsilon)})^{\\upsilon})^{\\upsilon})^{\\upsilon}", "VR derivation": "\\iota{(\\upsilon)} = \\log{(\\upsilon)} and \\frac{d}{d \\upsilon} \\iota{(\\upsilon)} = \\frac{d}{d \\upsilon} \\log{(\\upsilon)} and \\frac{d}{d \\upsilon} \\iota{(\\upsilon)} = \\frac{1}{\\upsilon} and \\frac{1}{\\upsilon} = \\frac{d}{d \\upsilon} \\log{(\\upsilon)} and (\\frac{1}{\\upsilon})^{\\upsilon} = (\\frac{d}{d \\upsilon} \\log{(\\upsilon)})^{\\upsilon} and ((\\frac{1}{\\upsilon})^{\\upsilon})^{\\upsilon} = ((\\frac{d}{d \\upsilon} \\log{(\\upsilon)})^{\\upsilon})^{\\upsilon} and (((\\frac{1}{\\upsilon})^{\\upsilon})^{\\upsilon})^{\\upsilon} = (((\\frac{d}{d \\upsilon} \\log{(\\upsilon)})^{\\upsilon})^{\\upsilon})^{\\upsilon}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\iota')(Symbol('\\\\upsilon', commutative=True)), log(Symbol('\\\\upsilon', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Derivative(Function('\\\\iota')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Derivative(log(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\iota')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Pow(Symbol('\\\\upsilon', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Pow(Symbol('\\\\upsilon', commutative=True), Integer(-1)), Derivative(log(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))))"], [["power", 4, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Pow(Pow(Symbol('\\\\upsilon', commutative=True), Integer(-1)), Symbol('\\\\upsilon', commutative=True)), Pow(Derivative(log(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Symbol('\\\\upsilon', commutative=True)))"], [["power", 5, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Pow(Pow(Pow(Symbol('\\\\upsilon', commutative=True), Integer(-1)), Symbol('\\\\upsilon', commutative=True)), Symbol('\\\\upsilon', commutative=True)), Pow(Pow(Derivative(log(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Symbol('\\\\upsilon', commutative=True)), Symbol('\\\\upsilon', commutative=True)))"], [["power", 6, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Pow(Pow(Pow(Pow(Symbol('\\\\upsilon', commutative=True), Integer(-1)), Symbol('\\\\upsilon', commutative=True)), Symbol('\\\\upsilon', commutative=True)), Symbol('\\\\upsilon', commutative=True)), Pow(Pow(Pow(Derivative(log(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Symbol('\\\\upsilon', commutative=True)), Symbol('\\\\upsilon', commutative=True)), Symbol('\\\\upsilon', commutative=True)))"]], "static_flan-t5-large": "operatorname { M_ { E } } { ( \\ psi ^ *) } = \\ log { ( \\ psi ^ *) } and \\ frac { d } { d \\ psi ^ * } \\ operatorname { M_ { E } } { ( \\ psi ^ *) } = \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } and \\ frac { d } { d \\ psi ^ * } \\ operatorname { M_ { E } } { ( \\ psi ^ *) } = \\ frac { 1 } { \\ psi ^ * } and ( \\ frac { 1 } { \\ psi ^ * } ) ^ { \\ psi ^ * } = ( \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } ) ^ { \\ psi ^ * } and (( \\ frac { 1 } { \\ psi ^ * } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } = (( \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } and ((( \\ frac { 1 } { \\ psi ^ * } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } = ((( \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * }", "VR_flan-t5-large": "iota { ( \\ upsilon) } = \\ log { ( \\ upsilon) } and \\ frac { d } { d \\ upsilon } \\ iota { ( \\ upsilon) } = \\ frac { d } { d \\ upsilon } \\ log { ( \\ upsilon) } and \\ frac { d } { d \\ upsilon } \\ iota { ( \\ upsilon) } = \\ frac { 1 } { \\ upsilon } and ( \\ frac { 1 } { \\ upsilon } ) ^ { \\ upsilon } = ( \\ frac { d } { d \\ upsilon } \\ log { ( \\ upsilon) } ) ^ { \\ upsilon } and (( \\ frac { 1 } { \\ upsilon } ) ^ { \\ upsilon } ) ^ { \\ upsilon } = (( \\ frac { d } { d \\ upsilon } \\ log { ( \\ upsilon) } ) ^ { \\ upsilon } ) ^ { \\ upsilon } and ((( \\ frac { 1 } { \\ upsilon } ) ^ { \\ upsilon } ) ^ { \\ upsilon } ) ^ { \\ upsilon } = ((( \\ frac { d } { d \\ upsilon } \\ log { ( \\ upsilon) } ) ^ { \\ upsilon } ) ^ { \\ upsilon } ) ^ { \\ upsilon }", "EE_flan-t5-large": "log { ( \\ psi ^ *) } = \\ operatorname { M_ { E } } { ( \\ psi ^ *) } and \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } = \\ frac { d } { d \\ psi ^ * } \\ operatorname { M_ { E } } { ( \\ psi ^ *) } and \\ frac { 1 } { \\ psi ^ * } = \\ frac { d } { d \\ psi ^ * } \\ operatorname { M_ { E } } { ( \\ psi ^ *) } and \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } = \\ frac { 1 } { \\ psi ^ * } and ( \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } ) ^ { \\ psi ^ * } = ( \\ frac { 1 } { \\ psi ^ * } ) ^ { \\ psi ^ * } and (( \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } = (( \\ frac { 1 } { \\ psi ^ * } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } and ((( \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } = ((( \\ frac { 1 } { \\ psi ^ * } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * }", "AG_flan-t5-large": "operatorname { M_ { E } } { ( \\ psi ^ *) } = \\ log { ( \\ psi ^ *) } and \\ frac { d } { d \\ psi ^ * } \\ operatorname { M_ { E } } { ( \\ psi ^ *) } = \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } and \\ frac { d } { d \\ psi ^ * } \\ operatorname { M_ { E } } { ( \\ psi ^ *) } = \\ frac { 1 } { \\ psi ^ * } and \\ frac { 1 } { \\ psi ^ * } = \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } and ( \\ frac { 1 } { \\ psi ^ * } ) ^ { \\ psi ^ * } = ( \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } ) ^ { \\ psi ^ * } and (( \\ frac { 1 } { \\ psi ^ * } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } = (( \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } and (( \\ frac { 1 } { \\ psi ^ * } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } = (( \\ frac { d } { d \\ psi ^ * } \\ operatorname { M_ { E } } { ( \\ psi ^ *) } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * }", "SR_flan-t5-large": "operatorname { M_ { E } } { ( \\ psi ^ *) } = \\ log { ( \\ psi ^ *) } and \\ frac { d } { d \\ psi ^ * } \\ operatorname { M_ { E } } { ( \\ psi ^ *) } = \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } and \\ frac { 1 } { \\ psi ^ * } = \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } and ( \\ frac { 1 } { \\ psi ^ * } ) ^ { \\ psi ^ * } = ( \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } ) ^ { \\ psi ^ * } and (( \\ frac { 1 } { \\ psi ^ * } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } = (( \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } and ((( \\ frac { 1 } { \\ psi ^ * } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } = ((( \\ frac { d } { d \\ psi ^ * } \\ log { ( \\ psi ^ *) } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * } ) ^ { \\ psi ^ * }", "static_rouge": 0.9367088607594937, "static_bleu": 0.8974329804941618, "static_bleurt": 0.8177934885025024, "static_gleu": 0.9018944519621109, "VR_rouge": 0.005202011444425114, "EE_rouge": -0.06329113924050633, "AG_rouge": -0.06329113924050633, "SR_rouge": 0.01363193768257065, "VR_rouge_abs": 0.012867327421318075, "EE_rouge_abs": 0.05138637733574447, "AG_rouge_abs": 0.040988547317661106, "SR_rouge_abs": 0.041095890410958846, "VR_bleu": 0.009721272213194743, "EE_bleu": -0.09986796581594592, "AG_bleu": -0.09978538013363103, "SR_bleu": 0.02030078415040326, "VR_bleu_abs": 0.00971206883429726, "EE_bleu_abs": 0.09362093785818038, "AG_bleu_abs": 0.04003400281950309, "SR_bleu_abs": 0.03317085677441167, "VR_bleurt": 0.008403122425079346, "EE_bleurt": -0.008325278759002686, "AG_bleurt": -0.013278841972351074, "SR_bleurt": 0.09675145149230957, "VR_bleurt_abs": 0.03203466534614563, "EE_bleurt_abs": 0.08665978908538818, "AG_bleurt_abs": 0.00452345609664917, "SR_bleurt_abs": 0.0419732928276062, "VR_gleu": 0.00897409797981008, "EE_gleu": -0.09539918809201631, "AG_gleu": -0.09531614775894903, "SR_gleu": 0.01826792963464141, "VR_gleu_abs": 0.008396004974508653, "EE_gleu_abs": 0.09363197544079327, "AG_gleu_abs": 0.040278395488138385, "SR_gleu_abs": 0.032983508245877036, "ratio_VR_rouge": 0.9583098591549294, "ratio_VR_bleu": 0.9804353533967785, "ratio_VR_bleurt": 1.1047921748520813, "ratio_VR_gleu": 0.9840497489044682, "ratio_EE_rouge": 0.9479945096843068, "ratio_EE_bleu": 0.9060592046033025, "ratio_EE_bleurt": 0.8840449907764601, "ratio_EE_gleu": 0.9060501970797743, "ratio_AG_rouge": 0.9569620253164558, "ratio_AG_bleu": 0.9576579149257802, "ratio_AG_bleurt": 0.9947707897643331, "ratio_AG_gleu": 0.9574166891763458, "ratio_SR_rouge": 0.9589041095890412, "ratio_SR_bleu": 0.9668291432255883, "ratio_SR_bleurt": 0.9514779920951699, "ratio_SR_gleu": 0.967016491754123}, {"prompt": "Given H{(u)} = e^{u}, then derive A_{x} + u = \\int \\frac{e^{u}}{H{(u)}} du, then obtain - A_{x} - u = - \\int \\frac{e^{u}}{H{(u)}} du", "derivation": "H{(u)} = e^{u} and 1 = \\frac{e^{u}}{H{(u)}} and \\int 1 du = \\int \\frac{e^{u}}{H{(u)}} du and A_{x} + u = \\int \\frac{e^{u}}{H{(u)}} du and - A_{x} - u = - \\int \\frac{e^{u}}{H{(u)}} du", "srepr_derivation": [["premise", "Equality(Function('H')(Symbol('u', commutative=True)), exp(Symbol('u', commutative=True)))"], [["divide", 1, "Function('H')(Symbol('u', commutative=True))"], "Equality(Integer(1), Mul(Pow(Function('H')(Symbol('u', commutative=True)), Integer(-1)), exp(Symbol('u', commutative=True))))"], [["integrate", 2, "Symbol('u', commutative=True)"], "Equality(Integral(Integer(1), Tuple(Symbol('u', commutative=True))), Integral(Mul(Pow(Function('H')(Symbol('u', commutative=True)), Integer(-1)), exp(Symbol('u', commutative=True))), Tuple(Symbol('u', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('A_x', commutative=True), Symbol('u', commutative=True)), Integral(Mul(Pow(Function('H')(Symbol('u', commutative=True)), Integer(-1)), exp(Symbol('u', commutative=True))), Tuple(Symbol('u', commutative=True))))"], [["times", 4, "Integer(-1)"], "Equality(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Mul(Integer(-1), Symbol('u', commutative=True))), Mul(Integer(-1), Integral(Mul(Pow(Function('H')(Symbol('u', commutative=True)), Integer(-1)), exp(Symbol('u', commutative=True))), Tuple(Symbol('u', commutative=True)))))"]], "EE prompt": "Given e^{u} = H{(u)}, then derive \\int \\frac{e^{u}}{H{(u)}} du = A_{x} + u, then obtain - \\int \\frac{e^{u}}{H{(u)}} du = - A_{x} - u", "EE derivation": "e^{u} = H{(u)} and \\frac{e^{u}}{H{(u)}} = 1 and \\int \\frac{e^{u}}{H{(u)}} du = \\int 1 du and \\int \\frac{e^{u}}{H{(u)}} du = A_{x} + u and - \\int \\frac{e^{u}}{H{(u)}} du = - A_{x} - u", "EE srepr_derivation": [["premise", "Equality(exp(Symbol('u', commutative=True)), Function('H')(Symbol('u', commutative=True)))"], [["divide", 1, "Function('H')(Symbol('u', commutative=True))"], "Equality(Mul(Pow(Function('H')(Symbol('u', commutative=True)), Integer(-1)), exp(Symbol('u', commutative=True))), Integer(1))"], [["integrate", 2, "Symbol('u', commutative=True)"], "Equality(Integral(Mul(Pow(Function('H')(Symbol('u', commutative=True)), Integer(-1)), exp(Symbol('u', commutative=True))), Tuple(Symbol('u', commutative=True))), Integral(Integer(1), Tuple(Symbol('u', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Integral(Mul(Pow(Function('H')(Symbol('u', commutative=True)), Integer(-1)), exp(Symbol('u', commutative=True))), Tuple(Symbol('u', commutative=True))), Add(Symbol('A_x', commutative=True), Symbol('u', commutative=True)))"], [["times", 4, "Integer(-1)"], "Equality(Mul(Integer(-1), Integral(Mul(Pow(Function('H')(Symbol('u', commutative=True)), Integer(-1)), exp(Symbol('u', commutative=True))), Tuple(Symbol('u', commutative=True)))), Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Mul(Integer(-1), Symbol('u', commutative=True))))"]], "AG prompt": "Given H{(u)} = e^{u}, then derive A_{x} + u = \\int \\frac{e^{u}}{H{(u)}} du, then obtain A_{x} + u = \\int 1 du", "AG derivation": "H{(u)} = e^{u} and 1 = \\frac{e^{u}}{H{(u)}} and \\int 1 du = \\int \\frac{e^{u}}{H{(u)}} du and A_{x} + u = \\int \\frac{e^{u}}{H{(u)}} du and A_{x} + u = \\int 1 du", "AG srepr_derivation": [["premise", "Equality(Function('H')(Symbol('u', commutative=True)), exp(Symbol('u', commutative=True)))"], [["divide", 1, "Function('H')(Symbol('u', commutative=True))"], "Equality(Integer(1), Mul(Pow(Function('H')(Symbol('u', commutative=True)), Integer(-1)), exp(Symbol('u', commutative=True))))"], [["integrate", 2, "Symbol('u', commutative=True)"], "Equality(Integral(Integer(1), Tuple(Symbol('u', commutative=True))), Integral(Mul(Pow(Function('H')(Symbol('u', commutative=True)), Integer(-1)), exp(Symbol('u', commutative=True))), Tuple(Symbol('u', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('A_x', commutative=True), Symbol('u', commutative=True)), Integral(Mul(Pow(Function('H')(Symbol('u', commutative=True)), Integer(-1)), exp(Symbol('u', commutative=True))), Tuple(Symbol('u', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Add(Symbol('A_x', commutative=True), Symbol('u', commutative=True)), Integral(Integer(1), Tuple(Symbol('u', commutative=True))))"]], "SR prompt": "Given H{(u)} = e^{u}, then obtain - A_{x} - u = - \\int \\frac{e^{u}}{H{(u)}} du", "SR derivation": "H{(u)} = e^{u} and 1 = \\frac{e^{u}}{H{(u)}} and \\int 1 du = \\int \\frac{e^{u}}{H{(u)}} du and A_{x} + u = \\int \\frac{e^{u}}{H{(u)}} du and - A_{x} - u = - \\int \\frac{e^{u}}{H{(u)}} du", "SR srepr_derivation": [["premise", "Equality(Function('H')(Symbol('u', commutative=True)), exp(Symbol('u', commutative=True)))"], [["divide", 1, "Function('H')(Symbol('u', commutative=True))"], "Equality(Integer(1), Mul(Pow(Function('H')(Symbol('u', commutative=True)), Integer(-1)), exp(Symbol('u', commutative=True))))"], [["integrate", 2, "Symbol('u', commutative=True)"], "Equality(Integral(Integer(1), Tuple(Symbol('u', commutative=True))), Integral(Mul(Pow(Function('H')(Symbol('u', commutative=True)), Integer(-1)), exp(Symbol('u', commutative=True))), Tuple(Symbol('u', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('A_x', commutative=True), Symbol('u', commutative=True)), Integral(Mul(Pow(Function('H')(Symbol('u', commutative=True)), Integer(-1)), exp(Symbol('u', commutative=True))), Tuple(Symbol('u', commutative=True))))"], [["times", 4, "Integer(-1)"], "Equality(Add(Mul(Integer(-1), Symbol('A_x', commutative=True)), Mul(Integer(-1), Symbol('u', commutative=True))), Mul(Integer(-1), Integral(Mul(Pow(Function('H')(Symbol('u', commutative=True)), Integer(-1)), exp(Symbol('u', commutative=True))), Tuple(Symbol('u', commutative=True)))))"]], "VR prompt": "Given \\kappa{(\\beta)} = e^{\\beta}, then derive \\beta + \\zeta = \\int \\frac{e^{\\beta}}{\\kappa{(\\beta)}} d\\beta, then obtain - \\beta - \\zeta = - \\int \\frac{e^{\\beta}}{\\kappa{(\\beta)}} d\\beta", "VR derivation": "\\kappa{(\\beta)} = e^{\\beta} and 1 = \\frac{e^{\\beta}}{\\kappa{(\\beta)}} and \\int 1 d\\beta = \\int \\frac{e^{\\beta}}{\\kappa{(\\beta)}} d\\beta and \\beta + \\zeta = \\int \\frac{e^{\\beta}}{\\kappa{(\\beta)}} d\\beta and - \\beta - \\zeta = - \\int \\frac{e^{\\beta}}{\\kappa{(\\beta)}} d\\beta", "VR srepr_derivation": [["premise", "Equality(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), exp(Symbol('\\\\beta', commutative=True)))"], [["divide", 1, "Function('\\\\kappa')(Symbol('\\\\beta', commutative=True))"], "Equality(Integer(1), Mul(Pow(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), Integer(-1)), exp(Symbol('\\\\beta', commutative=True))))"], [["integrate", 2, "Symbol('\\\\beta', commutative=True)"], "Equality(Integral(Integer(1), Tuple(Symbol('\\\\beta', commutative=True))), Integral(Mul(Pow(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), Integer(-1)), exp(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('\\\\beta', commutative=True), Symbol('\\\\zeta', commutative=True)), Integral(Mul(Pow(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), Integer(-1)), exp(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True))))"], [["times", 4, "Integer(-1)"], "Equality(Add(Mul(Integer(-1), Symbol('\\\\beta', commutative=True)), Mul(Integer(-1), Symbol('\\\\zeta', commutative=True))), Mul(Integer(-1), Integral(Mul(Pow(Function('\\\\kappa')(Symbol('\\\\beta', commutative=True)), Integer(-1)), exp(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True)))))"]], "static_flan-t5-large": "{ (u) } = e ^ { u } and 1 = \\ frac { e ^ { u } } { H { (u) } } and \\ int 1 du = \\ int \\ frac { e ^ { u } } { H { (u) } } du and A_ { x } + u = \\ int \\ frac { e ^ { u } } { H { (u) } } du and - A_ { x } - u = - \\ int \\ frac { e ^ { u } } { H { (u) } } du", "VR_flan-t5-large": "kappa { ( \\ beta) } = e ^ { \\ beta } and 1 = \\ frac { e ^ { \\ beta } } { \\ kappa { ( \\ beta) } } and \\ int 1 d \\ beta = \\ int \\ frac { e ^ { \\ beta } } { \\ kappa { ( \\ beta) } } d \\ beta and \\ int 1 d \\ beta = \\ int \\ frac { e ^ { \\ beta } } { \\ kappa { ( \\ beta) } } d \\ beta and \\ beta + \\ zeta = \\ int \\ frac { e ^ { \\ beta } } { \\ kappa { ( \\ beta) } } d \\ beta and \\ int 1 d \\ beta = \\ beta + \\ zeta and - \\ beta - \\ zeta = - \\ int \\ frac { e ^ { \\ beta } } { \\ kappa { ( \\ beta) } } d \\ beta", "EE_flan-t5-large": "e ^ { u } = H { (u) } and \\ frac { e ^ { u } } { H { (u) } } = 1 and \\ int \\ frac { e ^ { u } } { H { (u) } } du = \\ int 1 du and \\ int \\ frac { e ^ { u } } { H { (u) } } du = A_ { x } + u and \\ int \\ frac { e ^ { u } } { H { (u) } } du = A_ { x } + u and - \\ int \\ frac { e ^ { u } } { H { (u) } } du = - A_ { x } - u", "AG_flan-t5-large": "{ (u) } = e ^ { u } and 1 = \\ frac { e ^ { u } } { H { (u) } } and \\ int 1 du = \\ int \\ frac { e ^ { u } } { H { (u) } } du and A_ { x } + u = \\ int \\ frac { e ^ { u } } { H { (u) } } du and A_ { x } + u = \\ int 1 du", "SR_flan-t5-large": "{ (u) } = e ^ { u } and 1 = \\ frac { e ^ { u } } { H { (u) } } and \\ int 1 du = \\ int \\ frac { e ^ { u } } { H { (u) } } du and - \\ int 1 du = - \\ int \\ frac { e ^ { u } } { H { (u) } } du and - A_ { x } - u = - \\ int \\ frac { e ^ { u } } { H { (u) } } du", "static_rouge": 0.988235294117647, "static_bleu": 0.991489413290758, "static_bleurt": 0.7997229695320129, "static_gleu": 0.9914163090128756, "VR_rouge": 0.17005347593582887, "EE_rouge": 0.10163735597331713, "AG_rouge": 0.001222307104660092, "SR_rouge": 0.09411764705882342, "VR_rouge_abs": 0.044392523364485986, "EE_rouge_abs": 0.10562015503875977, "AG_rouge_abs": 0.0024390243902439046, "SR_rouge_abs": 0.09523809523809523, "VR_bleu": 0.24501371015661022, "EE_bleu": 0.1908153627838639, "AG_bleu": 0.0015395795247128419, "SR_bleu": 0.07962948790887348, "VR_bleu_abs": 0.09621022003622276, "EE_bleu_abs": 0.17688436119409678, "AG_bleu_abs": 0.002014121810796854, "SR_bleu_abs": 0.08024523259381255, "VR_bleurt": -0.031022489070892334, "EE_bleurt": -0.08821779489517212, "AG_bleurt": 0.1550450325012207, "SR_bleurt": 0.061052918434143066, "VR_bleurt_abs": -0.11383425444364548, "EE_bleurt_abs": -0.10941606760025024, "AG_bleurt_abs": 0.02135920524597168, "SR_bleurt_abs": 0.10565590858459473, "VR_gleu": 0.24487891289099195, "EE_gleu": 0.19072902378950785, "AG_gleu": 0.0015685932768350064, "SR_gleu": 0.07939914163090134, "VR_gleu_abs": 0.10071449744968364, "EE_gleu_abs": 0.17838443726678754, "AG_gleu_abs": 0.0018393623543838666, "SR_gleu_abs": 0.0800865800865801, "ratio_VR_rouge": 0.822429906542056, "ratio_VR_bleu": 0.7591649883041329, "ratio_VR_bleurt": -4.340827618848867, "ratio_VR_gleu": 0.7636915254643787, "ratio_EE_rouge": 0.8702380952380951, "ratio_EE_bleu": 0.7925356453605767, "ratio_EE_bleurt": 1.1612584203571235, "ratio_EE_gleu": 0.7927003796351048, "ratio_AG_rouge": 0.9972972972972973, "ratio_AG_bleu": 0.9974087314776909, "ratio_AG_bleurt": 0.9626540405666821, "ratio_AG_gleu": 0.9976644608797197, "ratio_SR_rouge": 0.9047619047619048, "ratio_SR_bleu": 0.9197547674061874, "ratio_SR_bleurt": 0.8744559985631166, "ratio_SR_gleu": 0.9199134199134199}, {"prompt": "Given q{(\\mathbf{M},s)} = \\frac{\\partial}{\\partial s} (\\mathbf{M} + s), then derive \\frac{\\partial}{\\partial s} q{(\\mathbf{M},s)} = 0, then obtain \\frac{\\partial^{2}}{\\partial s^{2}} (\\mathbf{M} + s) = 0", "derivation": "q{(\\mathbf{M},s)} = \\frac{\\partial}{\\partial s} (\\mathbf{M} + s) and \\frac{\\partial}{\\partial s} q{(\\mathbf{M},s)} = \\frac{\\partial^{2}}{\\partial s^{2}} (\\mathbf{M} + s) and \\frac{\\partial}{\\partial s} q{(\\mathbf{M},s)} = 0 and \\frac{\\partial^{2}}{\\partial s^{2}} (\\mathbf{M} + s) = 0", "srepr_derivation": [["premise", "Equality(Function('q')(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Derivative(Add(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('s', commutative=True)"], "Equality(Derivative(Function('q')(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(2))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('q')(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))), Integer(0))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(Add(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(2))), Integer(0))"]], "EE prompt": "Given \\frac{\\partial}{\\partial s} (\\mathbf{M} + s) = q{(\\mathbf{M},s)}, then derive 0 = \\frac{\\partial}{\\partial s} q{(\\mathbf{M},s)}, then obtain 0 = \\frac{\\partial^{2}}{\\partial s^{2}} (\\mathbf{M} + s)", "EE derivation": "\\frac{\\partial}{\\partial s} (\\mathbf{M} + s) = q{(\\mathbf{M},s)} and \\frac{\\partial^{2}}{\\partial s^{2}} (\\mathbf{M} + s) = \\frac{\\partial}{\\partial s} q{(\\mathbf{M},s)} and 0 = \\frac{\\partial}{\\partial s} q{(\\mathbf{M},s)} and 0 = \\frac{\\partial^{2}}{\\partial s^{2}} (\\mathbf{M} + s)", "EE srepr_derivation": [["premise", "Equality(Derivative(Add(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))), Function('q')(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)))"], [["differentiate", 1, "Symbol('s', commutative=True)"], "Equality(Derivative(Add(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(2))), Derivative(Function('q')(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Integer(0), Derivative(Function('q')(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Integer(0), Derivative(Add(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(2))))"]], "AG prompt": "Given q{(\\mathbf{M},s)} = \\frac{\\partial}{\\partial s} (\\mathbf{M} + s), then derive \\frac{\\partial}{\\partial s} q{(\\mathbf{M},s)} = 0, then obtain (\\frac{\\partial}{\\partial s} q{(\\mathbf{M},s)})^{\\mathbf{M}} = 0^{\\mathbf{M}}", "AG derivation": "q{(\\mathbf{M},s)} = \\frac{\\partial}{\\partial s} (\\mathbf{M} + s) and \\frac{\\partial}{\\partial s} q{(\\mathbf{M},s)} = \\frac{\\partial^{2}}{\\partial s^{2}} (\\mathbf{M} + s) and \\frac{\\partial}{\\partial s} q{(\\mathbf{M},s)} = 0 and (\\frac{\\partial}{\\partial s} q{(\\mathbf{M},s)})^{\\mathbf{M}} = 0^{\\mathbf{M}}", "AG srepr_derivation": [["premise", "Equality(Function('q')(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Derivative(Add(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('s', commutative=True)"], "Equality(Derivative(Function('q')(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(2))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('q')(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))), Integer(0))"], [["power", 3, "Symbol('\\\\mathbf{M}', commutative=True)"], "Equality(Pow(Derivative(Function('q')(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))), Symbol('\\\\mathbf{M}', commutative=True)), Pow(Integer(0), Symbol('\\\\mathbf{M}', commutative=True)))"]], "SR prompt": "Given q{(\\mathbf{M},s)} = \\frac{\\partial}{\\partial s} (\\mathbf{M} + s), then obtain \\frac{\\partial^{2}}{\\partial s^{2}} (\\mathbf{M} + s) = 0", "SR derivation": "q{(\\mathbf{M},s)} = \\frac{\\partial}{\\partial s} (\\mathbf{M} + s) and \\frac{\\partial}{\\partial s} q{(\\mathbf{M},s)} = \\frac{\\partial^{2}}{\\partial s^{2}} (\\mathbf{M} + s) and \\frac{\\partial}{\\partial s} q{(\\mathbf{M},s)} = 0 and \\frac{\\partial^{2}}{\\partial s^{2}} (\\mathbf{M} + s) = 0", "SR srepr_derivation": [["premise", "Equality(Function('q')(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Derivative(Add(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('s', commutative=True)"], "Equality(Derivative(Function('q')(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(2))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('q')(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))), Integer(0))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(Add(Symbol('\\\\mathbf{M}', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(2))), Integer(0))"]], "VR prompt": "Given \\alpha{(\\nu,\\tau)} = \\frac{\\partial}{\\partial \\nu} (\\nu + \\tau), then derive \\frac{\\partial}{\\partial \\nu} \\alpha{(\\nu,\\tau)} = 0, then obtain \\frac{\\partial^{2}}{\\partial \\nu^{2}} (\\nu + \\tau) = 0", "VR derivation": "\\alpha{(\\nu,\\tau)} = \\frac{\\partial}{\\partial \\nu} (\\nu + \\tau) and \\frac{\\partial}{\\partial \\nu} \\alpha{(\\nu,\\tau)} = \\frac{\\partial^{2}}{\\partial \\nu^{2}} (\\nu + \\tau) and \\frac{\\partial}{\\partial \\nu} \\alpha{(\\nu,\\tau)} = 0 and \\frac{\\partial^{2}}{\\partial \\nu^{2}} (\\nu + \\tau) = 0", "VR srepr_derivation": [["premise", "Equality(Function('\\\\alpha')(Symbol('\\\\nu', commutative=True), Symbol('\\\\tau', commutative=True)), Derivative(Add(Symbol('\\\\nu', commutative=True), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('\\\\nu', commutative=True)"], "Equality(Derivative(Function('\\\\alpha')(Symbol('\\\\nu', commutative=True), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\nu', commutative=True), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(2))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\alpha')(Symbol('\\\\nu', commutative=True), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(1))), Integer(0))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Derivative(Add(Symbol('\\\\nu', commutative=True), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True), Integer(2))), Integer(0))"]], "static_flan-t5-large": "q { ( \\ mathbf { M },s) } = \\ frac { \\ partial } { \\ partial s } ( \\ mathbf { M } + s) and \\ frac { \\ partial } { \\ partial s } q { ( \\ mathbf { M },s) } = \\ frac { \\ partial ^ { 2 } } { \\ partial s ^ { 2 } } ( \\ mathbf { M } + s) and \\ frac { \\ partial } { \\ partial s } q { ( \\ mathbf { M },s) } = 0 and \\ frac { \\ partial ^ { 2 } } { \\ partial s ^ { 2 } } ( \\ mathbf { M } + s) = 0", "VR_flan-t5-large": "alpha { ( \\ nu, \\ tau) } = \\ frac { \\ partial } { \\ partial \\ nu } ( \\ nu + \\ tau) and \\ frac { \\ partial } { \\ partial \\ nu } \\ alpha { ( \\ nu, \\ tau) } = \\ frac { \\ partial ^ { 2 } } { \\ partial \\ nu ^ { 2 } } ( \\ nu + \\ tau) and \\ frac { \\ partial } { \\ partial \\ nu } \\ alpha { ( \\ nu, \\ tau) } = 0 and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ nu ^ { 2 } } ( \\ nu + \\ tau) = 0", "EE_flan-t5-large": "frac { \\ partial } { \\ partial s } ( \\ mathbf { M } + s) = q { ( \\ mathbf { M },s) } and 0 = - \\ frac { \\ partial } { \\ partial s } ( \\ mathbf { M } + s) + \\ frac { \\ partial } { \\ partial s } ( \\ mathbf { M } + s) and 0 = \\ frac { \\ partial } { \\ partial s } q { ( \\ mathbf { M },s) } and 0 = \\ frac { \\ partial } { \\ partial s } ( \\ mathbf { M } + s) and 0 = \\ frac { \\ partial ^ { 2 } } { \\ partial s ^ { 2 } } ( \\ mathbf { M } + s)", "AG_flan-t5-large": "q { ( \\ mathbf { M },s) } = \\ frac { \\ partial } { \\ partial s } ( \\ mathbf { M } + s) and \\ frac { \\ partial } { \\ partial s } q { ( \\ mathbf { M },s) } = \\ frac { \\ partial ^ { 2 } } { \\ partial s ^ { 2 } } ( \\ mathbf { M } + s) and \\ frac { \\ partial } { \\ partial s } q { ( \\ mathbf { M },s) } = 0 and 0 ^ { \\ mathbf { M } } = 0 ^ { \\ mathbf { M } } and ( \\ frac { \\ partial } { \\ partial s } q { ( \\ mathbf { M },s) } ) ^ { \\ mathbf { M } } = 0 ^ { \\ mathbf { M } }", "SR_flan-t5-large": "q { ( \\ mathbf { M },s) } = \\ frac { \\ partial } { \\ partial s } ( \\ mathbf { M } + s) and \\ frac { \\ partial } { \\ partial s } q { ( \\ mathbf { M },s) } = \\ frac { \\ partial ^ { 2 } } { \\ partial s ^ { 2 } } ( \\ mathbf { M } + s) and \\ frac { \\ partial ^ { 2 } } { \\ partial s ^ { 2 } } q { ( \\ mathbf { M },s) } = \\ frac { \\ partial ^ { 2 } } { \\ partial s ^ { 2 } } ( \\ mathbf { M } + s) and \\ frac { \\ partial ^ { 2 } } { \\ partial s ^ { 2 } } ( \\ mathbf { M } + s) = 0", "static_rouge": 1.0, "static_bleu": 1.0, "static_bleurt": 0.8717620968818665, "static_gleu": 1.0, "VR_rouge": 0.0, "EE_rouge": 0.20000000000000007, "AG_rouge": 0.06306306306306297, "SR_rouge": 0.16666666666666674, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.17278911564625843, "AG_rouge_abs": 0.056472313898056514, "SR_rouge_abs": 0.16666666666666674, "VR_bleu": 0.007220185126271872, "EE_bleu": 0.22124666271998017, "AG_bleu": 0.11896197700661681, "SR_bleu": 0.22986315925115663, "VR_bleu_abs": 8.702716374620056e-05, "EE_bleu_abs": 0.1863409040448678, "AG_bleu_abs": 0.09417357907036228, "SR_bleu_abs": 0.22986315925115663, "VR_bleurt": 0.06417399644851685, "EE_bleurt": 0.2001625895500183, "AG_bleurt": 0.11984938383102417, "SR_bleurt": 0.0118788480758667, "VR_bleurt_abs": -0.015415997244417667, "EE_bleurt_abs": 0.2569699287414551, "AG_bleurt_abs": -0.011590838432312012, "SR_bleurt_abs": 0.0118788480758667, "VR_gleu": 0.0072727272727273196, "EE_gleu": 0.2186495176848875, "AG_gleu": 0.11891117478510027, "SR_gleu": 0.22946175637393773, "VR_gleu_abs": 0.0, "EE_gleu_abs": 0.18255257746014797, "AG_gleu_abs": 0.0943982344377371, "SR_gleu_abs": 0.22946175637393773, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 0.9998448950623757, "ratio_VR_bleurt": 15.819205842882122, "ratio_VR_gleu": 1.0, "ratio_EE_rouge": 0.8031007751937985, "ratio_EE_bleu": 0.7971450354871289, "ratio_EE_bleurt": 0.691968961116515, "ratio_EE_gleu": 0.8016799254463651, "ratio_AG_rouge": 0.9351851851851851, "ratio_AG_bleu": 0.8853818096521084, "ratio_AG_bleurt": 1.014695590317817, "ratio_AG_gleu": 0.8853868194842406, "ratio_SR_rouge": 0.8333333333333333, "ratio_SR_bleu": 0.7701368407488434, "ratio_SR_bleurt": 0.986373750225715, "ratio_SR_gleu": 0.7705382436260623}, {"prompt": "Given \\tilde{g}{(\\dot{y},J_{\\varepsilon})} = - J_{\\varepsilon} + \\dot{y}, then derive \\frac{\\partial}{\\partial J_{\\varepsilon}} \\tilde{g}{(\\dot{y},J_{\\varepsilon})} = -1, then obtain \\int (-1) dJ_{\\varepsilon} = \\int \\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}) dJ_{\\varepsilon}", "derivation": "\\tilde{g}{(\\dot{y},J_{\\varepsilon})} = - J_{\\varepsilon} + \\dot{y} and \\frac{\\partial}{\\partial J_{\\varepsilon}} \\tilde{g}{(\\dot{y},J_{\\varepsilon})} = \\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}) and \\frac{\\partial}{\\partial J_{\\varepsilon}} \\tilde{g}{(\\dot{y},J_{\\varepsilon})} = -1 and -1 = \\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}) and \\int (-1) dJ_{\\varepsilon} = \\int \\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}) dJ_{\\varepsilon}", "srepr_derivation": [["get_premise", "Equality(Function('\\\\tilde{g}')(Symbol('\\\\dot{y}', commutative=True), Symbol('J_{\\\\varepsilon}', commutative=True)), Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)))"], [["differentiate", 1, "Symbol('J_{\\\\varepsilon}', commutative=True)"], "Equality(Derivative(Function('\\\\tilde{g}')(Symbol('\\\\dot{y}', commutative=True), Symbol('J_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\tilde{g}')(Symbol('\\\\dot{y}', commutative=True), Symbol('J_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))), Integer(-1))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Integer(-1), Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))))"], [["integrate", 4, "Symbol('J_{\\\\varepsilon}', commutative=True)"], "Equality(Integral(Integer(-1), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True))), Integral(Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True))))"]], "EE prompt": "Given - J_{\\varepsilon} + \\dot{y} = \\tilde{g}{(\\dot{y},J_{\\varepsilon})}, then derive -1 = \\frac{\\partial}{\\partial J_{\\varepsilon}} \\tilde{g}{(\\dot{y},J_{\\varepsilon})}, then obtain \\int \\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}) dJ_{\\varepsilon} = \\int (-1) dJ_{\\varepsilon}", "EE derivation": "- J_{\\varepsilon} + \\dot{y} = \\tilde{g}{(\\dot{y},J_{\\varepsilon})} and \\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}) = \\frac{\\partial}{\\partial J_{\\varepsilon}} \\tilde{g}{(\\dot{y},J_{\\varepsilon})} and -1 = \\frac{\\partial}{\\partial J_{\\varepsilon}} \\tilde{g}{(\\dot{y},J_{\\varepsilon})} and \\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}) = -1 and \\int \\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}) dJ_{\\varepsilon} = \\int (-1) dJ_{\\varepsilon}", "EE srepr_derivation": [["get_premise", "Equality(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)), Function('\\\\tilde{g}')(Symbol('\\\\dot{y}', commutative=True), Symbol('J_{\\\\varepsilon}', commutative=True)))"], [["differentiate", 1, "Symbol('J_{\\\\varepsilon}', commutative=True)"], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))), Derivative(Function('\\\\tilde{g}')(Symbol('\\\\dot{y}', commutative=True), Symbol('J_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Integer(-1), Derivative(Function('\\\\tilde{g}')(Symbol('\\\\dot{y}', commutative=True), Symbol('J_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))), Integer(-1))"], [["integrate", 4, "Symbol('J_{\\\\varepsilon}', commutative=True)"], "Equality(Integral(Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True))), Integral(Integer(-1), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True))))"]], "AG prompt": "Given \\tilde{g}{(\\dot{y},J_{\\varepsilon})} = - J_{\\varepsilon} + \\dot{y}, then derive \\frac{\\partial}{\\partial J_{\\varepsilon}} \\tilde{g}{(\\dot{y},J_{\\varepsilon})} = -1, then obtain (-1)^{J_{\\varepsilon}} = (\\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}))^{J_{\\varepsilon}}", "AG derivation": "\\tilde{g}{(\\dot{y},J_{\\varepsilon})} = - J_{\\varepsilon} + \\dot{y} and \\frac{\\partial}{\\partial J_{\\varepsilon}} \\tilde{g}{(\\dot{y},J_{\\varepsilon})} = \\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}) and \\frac{\\partial}{\\partial J_{\\varepsilon}} \\tilde{g}{(\\dot{y},J_{\\varepsilon})} = -1 and -1 = \\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}) and (-1)^{J_{\\varepsilon}} = (\\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}))^{J_{\\varepsilon}}", "AG srepr_derivation": [["get_premise", "Equality(Function('\\\\tilde{g}')(Symbol('\\\\dot{y}', commutative=True), Symbol('J_{\\\\varepsilon}', commutative=True)), Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)))"], [["differentiate", 1, "Symbol('J_{\\\\varepsilon}', commutative=True)"], "Equality(Derivative(Function('\\\\tilde{g}')(Symbol('\\\\dot{y}', commutative=True), Symbol('J_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\tilde{g}')(Symbol('\\\\dot{y}', commutative=True), Symbol('J_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))), Integer(-1))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Integer(-1), Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))))"], [["power", 4, "Symbol('J_{\\\\varepsilon}', commutative=True)"], "Equality(Pow(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Pow(Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))), Symbol('J_{\\\\varepsilon}', commutative=True)))"]], "SR prompt": "Given \\tilde{g}{(\\dot{y},J_{\\varepsilon})} = - J_{\\varepsilon} + \\dot{y}, then obtain \\int (-1) dJ_{\\varepsilon} = \\int \\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}) dJ_{\\varepsilon}", "SR derivation": "\\tilde{g}{(\\dot{y},J_{\\varepsilon})} = - J_{\\varepsilon} + \\dot{y} and \\frac{\\partial}{\\partial J_{\\varepsilon}} \\tilde{g}{(\\dot{y},J_{\\varepsilon})} = \\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}) and \\frac{\\partial}{\\partial J_{\\varepsilon}} \\tilde{g}{(\\dot{y},J_{\\varepsilon})} = -1 and -1 = \\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}) and \\int (-1) dJ_{\\varepsilon} = \\int \\frac{\\partial}{\\partial J_{\\varepsilon}} (- J_{\\varepsilon} + \\dot{y}) dJ_{\\varepsilon}", "SR srepr_derivation": [["get_premise", "Equality(Function('\\\\tilde{g}')(Symbol('\\\\dot{y}', commutative=True), Symbol('J_{\\\\varepsilon}', commutative=True)), Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)))"], [["differentiate", 1, "Symbol('J_{\\\\varepsilon}', commutative=True)"], "Equality(Derivative(Function('\\\\tilde{g}')(Symbol('\\\\dot{y}', commutative=True), Symbol('J_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\tilde{g}')(Symbol('\\\\dot{y}', commutative=True), Symbol('J_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))), Integer(-1))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Integer(-1), Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))))"], [["integrate", 4, "Symbol('J_{\\\\varepsilon}', commutative=True)"], "Equality(Integral(Integer(-1), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True))), Integral(Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Symbol('\\\\dot{y}', commutative=True)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True))))"]], "VR prompt": "Given \\xi{(\\beta,\\zeta)} = \\beta - \\zeta, then derive \\frac{\\partial}{\\partial \\zeta} \\xi{(\\beta,\\zeta)} = -1, then obtain \\int (-1) d\\zeta = \\int \\frac{\\partial}{\\partial \\zeta} (\\beta - \\zeta) d\\zeta", "VR derivation": "\\xi{(\\beta,\\zeta)} = \\beta - \\zeta and \\frac{\\partial}{\\partial \\zeta} \\xi{(\\beta,\\zeta)} = \\frac{\\partial}{\\partial \\zeta} (\\beta - \\zeta) and \\frac{\\partial}{\\partial \\zeta} \\xi{(\\beta,\\zeta)} = -1 and -1 = \\frac{\\partial}{\\partial \\zeta} (\\beta - \\zeta) and \\int (-1) d\\zeta = \\int \\frac{\\partial}{\\partial \\zeta} (\\beta - \\zeta) d\\zeta", "VR srepr_derivation": [["get_premise", "Equality(Function('\\\\xi')(Symbol('\\\\beta', commutative=True), Symbol('\\\\zeta', commutative=True)), Add(Symbol('\\\\beta', commutative=True), Mul(Integer(-1), Symbol('\\\\zeta', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\zeta', commutative=True)"], "Equality(Derivative(Function('\\\\xi')(Symbol('\\\\beta', commutative=True), Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\beta', commutative=True), Mul(Integer(-1), Symbol('\\\\zeta', commutative=True))), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\xi')(Symbol('\\\\beta', commutative=True), Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Integer(-1))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Integer(-1), Derivative(Add(Symbol('\\\\beta', commutative=True), Mul(Integer(-1), Symbol('\\\\zeta', commutative=True))), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))))"], [["integrate", 4, "Symbol('\\\\zeta', commutative=True)"], "Equality(Integral(Integer(-1), Tuple(Symbol('\\\\zeta', commutative=True))), Integral(Derivative(Add(Symbol('\\\\beta', commutative=True), Mul(Integer(-1), Symbol('\\\\zeta', commutative=True))), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Tuple(Symbol('\\\\zeta', commutative=True))))"]], "static_flan-t5-large": "tilde { g } { ( \\ dot { y },J_ { \\ varepsilon } ) } = - J_ { \\ varepsilon } + \\ dot { y } and \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } \\ tilde { g } { ( \\ dot { y },J_ { \\ varepsilon } ) } = \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } (- J_ { \\ varepsilon } + \\ dot { y } ) and \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } \\ tilde { g } { ( \\ dot { y },J_ { \\ varepsilon } ) } = -1 and -1 = \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } (- J_ { \\ varepsilon } + \\ dot { y } ) and \\ int (-1) dJ_ { \\ varepsilon } = \\ int \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } (- J_ { \\ varepsilon } + \\ dot { y } ) dJ_ { \\ varepsilon }", "VR_flan-t5-large": "xi { ( \\ beta, \\ zeta) } = \\ beta - \\ zeta and \\ frac { \\ partial } { \\ partial \\ zeta } \\ xi { ( \\ beta, \\ zeta) } = \\ frac { \\ partial } { \\ partial \\ zeta } ( \\ beta - \\ zeta) and \\ frac { \\ partial } { \\ partial \\ zeta } \\ xi { ( \\ beta, \\ zeta) } = -1 and -1 = \\ frac { \\ partial } { \\ partial \\ zeta } ( \\ beta - \\ zeta) and \\ int (-1) d \\ zeta = \\ int \\ frac { \\ partial } { \\ partial \\ zeta } ( \\ beta - \\ zeta) d \\ zeta", "EE_flan-t5-large": "- J_ { \\ varepsilon } + \\ dot { y } = \\ tilde { g } { ( \\ dot { y },J_ { \\ varepsilon } ) } and - J_ { \\ varepsilon } + \\ dot { y } = - J_ { \\ varepsilon } + \\ tilde { g } { ( \\ dot { y },J_ { \\ varepsilon } ) } and \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } - J_ { \\ varepsilon } + \\ dot { y } = \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } (- J_ { \\ varepsilon } + \\ tilde { g } { ( \\ dot { y },J_ { \\ varepsilon } ) } ) and -1 = \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } \\ tilde { g } { ( \\ dot { y },J_ { \\ varepsilon } ) } and \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } (- J_ { \\ varepsilon } + \\ dot { y } ) = -1 and \\ int \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } (- J_ { \\ varepsilon } + \\ dot { y } ) dJ_ { \\ varepsilon } = \\ int (-1) dJ_ { \\ varepsilon }", "AG_flan-t5-large": "tilde { g } { ( \\ dot { y },J_ { \\ varepsilon } ) } = - J_ { \\ varepsilon } + \\ dot { y } and \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } \\ tilde { g } { ( \\ dot { y },J_ { \\ varepsilon } ) } = \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } (- J_ { \\ varepsilon } + \\ dot { y } ) and \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } \\ tilde { g } { ( \\ dot { y },J_ { \\ varepsilon } ) } = -1 and -1 = \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } (- J_ { \\ varepsilon } + \\ dot { y } ) and (-1) ^ { J_ { \\ varepsilon } } = ( \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } (- J_ { \\ varepsilon } + \\ dot { y } )) ^ { J_ { \\ varepsilon } }", "SR_flan-t5-large": "tilde { g } { ( \\ dot { y },J_ { \\ varepsilon } ) } = - J_ { \\ varepsilon } + \\ dot { y } and - \\ tilde { g } { ( \\ dot { y },J_ { \\ varepsilon } ) } = J_ { \\ varepsilon } - \\ dot { y } and - 1 = \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } (- \\ tilde { g } { ( \\ dot { y },J_ { \\ varepsilon } ) } ) and -1 = \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } (- J_ { \\ varepsilon } + \\ dot { y } ) and \\ int (-1) dJ_ { \\ varepsilon } = \\ int \\ frac { \\ partial } { \\ partial J_ { \\ varepsilon } } (- J_ { \\ varepsilon } + \\ dot { y } ) dJ_ { \\ varepsilon }", "static_rouge": 1.0, "static_bleu": 0.9956616120255063, "static_bleurt": 0.8272925615310669, "static_gleu": 0.9956427015250545, "VR_rouge": 0.0, "EE_rouge": 0.09554140127388544, "AG_rouge": 0.0, "SR_rouge": 0.13636363636363646, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.07472862653628787, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.13636363636363646, "VR_bleu": 0.0026791269851094146, "EE_bleu": 0.1956450508690194, "AG_bleu": -7.400212654262717e-05, "SR_bleu": 0.19942641462693156, "VR_bleu_abs": -0.00016846528001968064, "EE_bleu_abs": 0.17864079481379724, "AG_bleu_abs": 0.0003070686588534377, "SR_bleu_abs": 0.19977365706547567, "VR_bleurt": 0.012135028839111328, "EE_bleurt": 0.05400514602661133, "AG_bleurt": -0.01050037145614624, "SR_bleurt": 0.22115874290466309, "VR_bleurt_abs": 0.07623547315597534, "EE_bleurt_abs": 0.09442132711410522, "AG_bleurt_abs": 0.006786763668060303, "SR_bleurt_abs": 0.22813427448272705, "VR_gleu": 0.002709839334241848, "EE_gleu": 0.19546508163162646, "AG_gleu": -7.464322869277229e-05, "SR_gleu": 0.19063180827886717, "VR_gleu_abs": -0.00035039544628939767, "EE_gleu_abs": 0.17865310718722072, "AG_gleu_abs": 0.0003039303723146869, "SR_gleu_abs": 0.19146608315098468, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 1.0006132318347243, "ratio_VR_bleurt": 1.1357458518795958, "ratio_VR_gleu": 1.0010615941244014, "ratio_EE_rouge": 0.9183733463988241, "ratio_EE_bleu": 0.813264101523646, "ratio_EE_bleurt": 0.8671052457172982, "ratio_EE_gleu": 0.8134203044392848, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9996694584312068, "ratio_AG_bleurt": 0.990767683462321, "ratio_AG_gleu": 0.999672959714583, "ratio_SR_rouge": 0.8636363636363635, "ratio_SR_bleu": 0.8002263429345243, "ratio_SR_bleurt": 0.735496387335117, "ratio_SR_gleu": 0.8085339168490153}, {"prompt": "Given \\operatorname{A_{x}}{(W,\\chi)} = \\log{(\\chi^{W})}, then derive \\int \\operatorname{A_{x}}{(W,\\chi)} dW = M + \\frac{W^{2} \\log{(\\chi)}}{2}, then obtain - (e^{\\chi})^{\\chi} + \\int \\log{(\\chi^{W})} dW = M + \\frac{W^{2} \\log{(\\chi)}}{2} - (e^{\\chi})^{\\chi}", "derivation": "\\operatorname{A_{x}}{(W,\\chi)} = \\log{(\\chi^{W})} and \\int \\operatorname{A_{x}}{(W,\\chi)} dW = \\int \\log{(\\chi^{W})} dW and \\int \\operatorname{A_{x}}{(W,\\chi)} dW = M + \\frac{W^{2} \\log{(\\chi)}}{2} and \\int \\log{(\\chi^{W})} dW = M + \\frac{W^{2} \\log{(\\chi)}}{2} and - (e^{\\chi})^{\\chi} + \\int \\log{(\\chi^{W})} dW = M + \\frac{W^{2} \\log{(\\chi)}}{2} - (e^{\\chi})^{\\chi}", "srepr_derivation": [["get_premise", "Equality(Function('A_x')(Symbol('W', commutative=True), Symbol('\\\\chi', commutative=True)), log(Pow(Symbol('\\\\chi', commutative=True), Symbol('W', commutative=True))))"], [["integrate", 1, "Symbol('W', commutative=True)"], "Equality(Integral(Function('A_x')(Symbol('W', commutative=True), Symbol('\\\\chi', commutative=True)), Tuple(Symbol('W', commutative=True))), Integral(log(Pow(Symbol('\\\\chi', commutative=True), Symbol('W', commutative=True))), Tuple(Symbol('W', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('A_x')(Symbol('W', commutative=True), Symbol('\\\\chi', commutative=True)), Tuple(Symbol('W', commutative=True))), Add(Symbol('M', commutative=True), Mul(Rational(1, 2), Pow(Symbol('W', commutative=True), Integer(2)), log(Symbol('\\\\chi', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Integral(log(Pow(Symbol('\\\\chi', commutative=True), Symbol('W', commutative=True))), Tuple(Symbol('W', commutative=True))), Add(Symbol('M', commutative=True), Mul(Rational(1, 2), Pow(Symbol('W', commutative=True), Integer(2)), log(Symbol('\\\\chi', commutative=True)))))"], [["minus", 4, "Pow(exp(Symbol('\\\\chi', commutative=True)), Symbol('\\\\chi', commutative=True))"], "Equality(Add(Mul(Integer(-1), Pow(exp(Symbol('\\\\chi', commutative=True)), Symbol('\\\\chi', commutative=True))), Integral(log(Pow(Symbol('\\\\chi', commutative=True), Symbol('W', commutative=True))), Tuple(Symbol('W', commutative=True)))), Add(Symbol('M', commutative=True), Mul(Rational(1, 2), Pow(Symbol('W', commutative=True), Integer(2)), log(Symbol('\\\\chi', commutative=True))), Mul(Integer(-1), Pow(exp(Symbol('\\\\chi', commutative=True)), Symbol('\\\\chi', commutative=True)))))"]], "EE prompt": "Given \\log{(\\chi^{W})} = \\operatorname{A_{x}}{(W,\\chi)}, then derive M + \\frac{W^{2} \\log{(\\chi)}}{2} = \\int \\operatorname{A_{x}}{(W,\\chi)} dW, then obtain M + \\frac{W^{2} \\log{(\\chi)}}{2} - (e^{\\chi})^{\\chi} = - (e^{\\chi})^{\\chi} + \\int \\log{(\\chi^{W})} dW", "EE derivation": "\\log{(\\chi^{W})} = \\operatorname{A_{x}}{(W,\\chi)} and \\int \\log{(\\chi^{W})} dW = \\int \\operatorname{A_{x}}{(W,\\chi)} dW and M + \\frac{W^{2} \\log{(\\chi)}}{2} = \\int \\operatorname{A_{x}}{(W,\\chi)} dW and M + \\frac{W^{2} \\log{(\\chi)}}{2} = \\int \\log{(\\chi^{W})} dW and M + \\frac{W^{2} \\log{(\\chi)}}{2} - (e^{\\chi})^{\\chi} = - (e^{\\chi})^{\\chi} + \\int \\log{(\\chi^{W})} dW", "EE srepr_derivation": [["get_premise", "Equality(log(Pow(Symbol('\\\\chi', commutative=True), Symbol('W', commutative=True))), Function('A_x')(Symbol('W', commutative=True), Symbol('\\\\chi', commutative=True)))"], [["integrate", 1, "Symbol('W', commutative=True)"], "Equality(Integral(log(Pow(Symbol('\\\\chi', commutative=True), Symbol('W', commutative=True))), Tuple(Symbol('W', commutative=True))), Integral(Function('A_x')(Symbol('W', commutative=True), Symbol('\\\\chi', commutative=True)), Tuple(Symbol('W', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Add(Symbol('M', commutative=True), Mul(Rational(1, 2), Pow(Symbol('W', commutative=True), Integer(2)), log(Symbol('\\\\chi', commutative=True)))), Integral(Function('A_x')(Symbol('W', commutative=True), Symbol('\\\\chi', commutative=True)), Tuple(Symbol('W', commutative=True))))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Add(Symbol('M', commutative=True), Mul(Rational(1, 2), Pow(Symbol('W', commutative=True), Integer(2)), log(Symbol('\\\\chi', commutative=True)))), Integral(log(Pow(Symbol('\\\\chi', commutative=True), Symbol('W', commutative=True))), Tuple(Symbol('W', commutative=True))))"], [["minus", 4, "Pow(exp(Symbol('\\\\chi', commutative=True)), Symbol('\\\\chi', commutative=True))"], "Equality(Add(Symbol('M', commutative=True), Mul(Rational(1, 2), Pow(Symbol('W', commutative=True), Integer(2)), log(Symbol('\\\\chi', commutative=True))), Mul(Integer(-1), Pow(exp(Symbol('\\\\chi', commutative=True)), Symbol('\\\\chi', commutative=True)))), Add(Mul(Integer(-1), Pow(exp(Symbol('\\\\chi', commutative=True)), Symbol('\\\\chi', commutative=True))), Integral(log(Pow(Symbol('\\\\chi', commutative=True), Symbol('W', commutative=True))), Tuple(Symbol('W', commutative=True)))))"]], "AG prompt": "Given \\operatorname{A_{x}}{(W,\\chi)} = \\log{(\\chi^{W})}, then derive \\int \\operatorname{A_{x}}{(W,\\chi)} dW = M + \\frac{W^{2} \\log{(\\chi)}}{2}, then obtain C_{d} + \\frac{W^{2} \\log{(\\chi)}}{2} = M + \\frac{W^{2} \\log{(\\chi)}}{2}", "AG derivation": "\\operatorname{A_{x}}{(W,\\chi)} = \\log{(\\chi^{W})} and \\int \\operatorname{A_{x}}{(W,\\chi)} dW = \\int \\log{(\\chi^{W})} dW and \\int \\operatorname{A_{x}}{(W,\\chi)} dW = M + \\frac{W^{2} \\log{(\\chi)}}{2} and \\int \\log{(\\chi^{W})} dW = M + \\frac{W^{2} \\log{(\\chi)}}{2} and C_{d} + \\frac{W^{2} \\log{(\\chi)}}{2} = M + \\frac{W^{2} \\log{(\\chi)}}{2}", "AG srepr_derivation": [["get_premise", "Equality(Function('A_x')(Symbol('W', commutative=True), Symbol('\\\\chi', commutative=True)), log(Pow(Symbol('\\\\chi', commutative=True), Symbol('W', commutative=True))))"], [["integrate", 1, "Symbol('W', commutative=True)"], "Equality(Integral(Function('A_x')(Symbol('W', commutative=True), Symbol('\\\\chi', commutative=True)), Tuple(Symbol('W', commutative=True))), Integral(log(Pow(Symbol('\\\\chi', commutative=True), Symbol('W', commutative=True))), Tuple(Symbol('W', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('A_x')(Symbol('W', commutative=True), Symbol('\\\\chi', commutative=True)), Tuple(Symbol('W', commutative=True))), Add(Symbol('M', commutative=True), Mul(Rational(1, 2), Pow(Symbol('W', commutative=True), Integer(2)), log(Symbol('\\\\chi', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Integral(log(Pow(Symbol('\\\\chi', commutative=True), Symbol('W', commutative=True))), Tuple(Symbol('W', commutative=True))), Add(Symbol('M', commutative=True), Mul(Rational(1, 2), Pow(Symbol('W', commutative=True), Integer(2)), log(Symbol('\\\\chi', commutative=True)))))"], [["evaluate_integrals", 4], "Equality(Add(Symbol('C_d', commutative=True), Mul(Rational(1, 2), Pow(Symbol('W', commutative=True), Integer(2)), log(Symbol('\\\\chi', commutative=True)))), Add(Symbol('M', commutative=True), Mul(Rational(1, 2), Pow(Symbol('W', commutative=True), Integer(2)), log(Symbol('\\\\chi', commutative=True)))))"]], "SR prompt": "Given \\operatorname{A_{x}}{(W,\\chi)} = \\log{(\\chi^{W})}, then obtain - (e^{\\chi})^{\\chi} + \\int \\log{(\\chi^{W})} dW = M + \\frac{W^{2} \\log{(\\chi)}}{2} - (e^{\\chi})^{\\chi}", "SR derivation": "\\operatorname{A_{x}}{(W,\\chi)} = \\log{(\\chi^{W})} and \\int \\operatorname{A_{x}}{(W,\\chi)} dW = \\int \\log{(\\chi^{W})} dW and \\int \\operatorname{A_{x}}{(W,\\chi)} dW = M + \\frac{W^{2} \\log{(\\chi)}}{2} and \\int \\log{(\\chi^{W})} dW = M + \\frac{W^{2} \\log{(\\chi)}}{2} and - (e^{\\chi})^{\\chi} + \\int \\log{(\\chi^{W})} dW = M + \\frac{W^{2} \\log{(\\chi)}}{2} - (e^{\\chi})^{\\chi}", "SR srepr_derivation": [["get_premise", "Equality(Function('A_x')(Symbol('W', commutative=True), Symbol('\\\\chi', commutative=True)), log(Pow(Symbol('\\\\chi', commutative=True), Symbol('W', commutative=True))))"], [["integrate", 1, "Symbol('W', commutative=True)"], "Equality(Integral(Function('A_x')(Symbol('W', commutative=True), Symbol('\\\\chi', commutative=True)), Tuple(Symbol('W', commutative=True))), Integral(log(Pow(Symbol('\\\\chi', commutative=True), Symbol('W', commutative=True))), Tuple(Symbol('W', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('A_x')(Symbol('W', commutative=True), Symbol('\\\\chi', commutative=True)), Tuple(Symbol('W', commutative=True))), Add(Symbol('M', commutative=True), Mul(Rational(1, 2), Pow(Symbol('W', commutative=True), Integer(2)), log(Symbol('\\\\chi', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Integral(log(Pow(Symbol('\\\\chi', commutative=True), Symbol('W', commutative=True))), Tuple(Symbol('W', commutative=True))), Add(Symbol('M', commutative=True), Mul(Rational(1, 2), Pow(Symbol('W', commutative=True), Integer(2)), log(Symbol('\\\\chi', commutative=True)))))"], [["minus", 4, "Pow(exp(Symbol('\\\\chi', commutative=True)), Symbol('\\\\chi', commutative=True))"], "Equality(Add(Mul(Integer(-1), Pow(exp(Symbol('\\\\chi', commutative=True)), Symbol('\\\\chi', commutative=True))), Integral(log(Pow(Symbol('\\\\chi', commutative=True), Symbol('W', commutative=True))), Tuple(Symbol('W', commutative=True)))), Add(Symbol('M', commutative=True), Mul(Rational(1, 2), Pow(Symbol('W', commutative=True), Integer(2)), log(Symbol('\\\\chi', commutative=True))), Mul(Integer(-1), Pow(exp(Symbol('\\\\chi', commutative=True)), Symbol('\\\\chi', commutative=True)))))"]], "VR prompt": "Given \\tau{(\\alpha,\\omicron)} = \\log{(\\omicron^{\\alpha})}, then derive \\int \\tau{(\\alpha,\\omicron)} d\\alpha = \\frac{\\alpha^{2} \\log{(\\omicron)}}{2} + \\kappa, then obtain - (e^{\\omicron})^{\\omicron} + \\int \\log{(\\omicron^{\\alpha})} d\\alpha = \\frac{\\alpha^{2} \\log{(\\omicron)}}{2} + \\kappa - (e^{\\omicron})^{\\omicron}", "VR derivation": "\\tau{(\\alpha,\\omicron)} = \\log{(\\omicron^{\\alpha})} and \\int \\tau{(\\alpha,\\omicron)} d\\alpha = \\int \\log{(\\omicron^{\\alpha})} d\\alpha and \\int \\tau{(\\alpha,\\omicron)} d\\alpha = \\frac{\\alpha^{2} \\log{(\\omicron)}}{2} + \\kappa and \\int \\log{(\\omicron^{\\alpha})} d\\alpha = \\frac{\\alpha^{2} \\log{(\\omicron)}}{2} + \\kappa and - (e^{\\omicron})^{\\omicron} + \\int \\log{(\\omicron^{\\alpha})} d\\alpha = \\frac{\\alpha^{2} \\log{(\\omicron)}}{2} + \\kappa - (e^{\\omicron})^{\\omicron}", "VR srepr_derivation": [["get_premise", "Equality(Function('\\\\tau')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\omicron', commutative=True)), log(Pow(Symbol('\\\\omicron', commutative=True), Symbol('\\\\alpha', commutative=True))))"], [["integrate", 1, "Symbol('\\\\alpha', commutative=True)"], "Equality(Integral(Function('\\\\tau')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Integral(log(Pow(Symbol('\\\\omicron', commutative=True), Symbol('\\\\alpha', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\tau')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\alpha', commutative=True), Integer(2)), log(Symbol('\\\\omicron', commutative=True))), Symbol('\\\\kappa', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Integral(log(Pow(Symbol('\\\\omicron', commutative=True), Symbol('\\\\alpha', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\alpha', commutative=True), Integer(2)), log(Symbol('\\\\omicron', commutative=True))), Symbol('\\\\kappa', commutative=True)))"], [["minus", 4, "Pow(exp(Symbol('\\\\omicron', commutative=True)), Symbol('\\\\omicron', commutative=True))"], "Equality(Add(Mul(Integer(-1), Pow(exp(Symbol('\\\\omicron', commutative=True)), Symbol('\\\\omicron', commutative=True))), Integral(log(Pow(Symbol('\\\\omicron', commutative=True), Symbol('\\\\alpha', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True)))), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\alpha', commutative=True), Integer(2)), log(Symbol('\\\\omicron', commutative=True))), Symbol('\\\\kappa', commutative=True), Mul(Integer(-1), Pow(exp(Symbol('\\\\omicron', commutative=True)), Symbol('\\\\omicron', commutative=True)))))"]], "static_flan-t5-large": "operatorname { A_ { x } } { (W, \\ chi) } = \\ log { ( \\ chi ^ { W } ) } and \\ int \\ operatorname { A_ { x } } { (W, \\ chi) } dW = \\ int \\ log { ( \\ chi ^ { W } ) } dW and \\ int \\ operatorname { A_ { x } } { (W, \\ chi) } dW = M + \\ frac { W ^ { 2 } \\ log { ( \\ chi) } } { 2 } and \\ int \\ log { ( \\ chi ^ { W } ) } dW = M + \\ frac { W ^ { 2 } \\ log { ( \\ chi) } } { 2 } and - (e ^ { \\ chi } ) ^ { \\ chi } + \\ int \\ log { ( \\ chi ^ { W } ) } dW = M + \\ frac { W ^ { 2 } \\ log { ( \\ chi) } } { 2 } - (e ^ { \\ chi } ) ^ { \\ chi }", "VR_flan-t5-large": "tau { ( \\ alpha, \\ omicron) } = \\ log { ( \\ omicron ^ { \\ alpha } ) } and \\ int \\ tau { ( \\ alpha, \\ omicron) } d \\ alpha = \\ int \\ log { ( \\ omicron ^ { \\ alpha } ) } d \\ alpha and \\ int \\ tau { ( \\ alpha, \\ omicron) } d \\ alpha = \\ frac { \\ alpha ^ { 2 } \\ log { ( \\ omicron) } } { 2 } + \\ kappa and \\ int \\ log { ( \\ omicron ^ { \\ alpha } ) } d \\ alpha = \\ frac { \\ alpha ^ { 2 } \\ log { ( \\ omicron) } } { 2 } + \\ kappa and - (e ^ { \\ omicron } ) ^ { \\ omicron } + \\ int \\ log { ( \\ omicron ^ { \\ alpha } ) } d \\ alpha = \\ frac { \\ alpha ^ { 2 } \\ log { ( \\ omicron) } } { 2 } + \\ kappa - (e ^ { \\ omicron } ) ^ { \\ omicron }", "EE_flan-t5-large": "log { ( \\ chi ^ { W } ) } = \\ operatorname { A_ { x } } { (W, \\ chi) } and \\ int \\ log { ( \\ chi ^ { W } ) } dW = \\ int \\ operatorname { A_ { x } } { (W, \\ chi) } dW and \\ int \\ log { ( \\ chi ^ { W } ) } dW - \\ int \\ log { ( \\ chi ^ { W } ) } dW = 0 and M + \\ frac { W ^ { 2 } \\ log { ( \\ chi) } } { 2 } = \\ int \\ operatorname { A_ { x } } { (W, \\ chi) } dW and M + \\ frac { W ^ { 2 } \\ log { ( \\ chi) } } { 2 } = \\ int \\ log { ( \\ chi ^ { W } ) } dW and M + \\ frac { W ^ { 2 } \\ log { ( \\ chi) } } { 2 } - (e ^ { \\ chi } ) ^ { \\ chi } = - (e ^ { \\ chi } ) ^ { \\ chi } + \\ int \\ log { ( \\ chi ^ { W } ) } dW", "AG_flan-t5-large": "operatorname { A_ { x } } { (W, \\ chi) } = \\ log { ( \\ chi ^ { W } ) } and \\ int \\ operatorname { A_ { x } } { (W, \\ chi) } dW = \\ int \\ log { ( \\ chi ^ { W } ) } dW and \\ int \\ operatorname { A_ { x } } { (W, \\ chi) } dW = M + \\ frac { W ^ { 2 } \\ log { ( \\ chi) } } { 2 } and \\ int \\ log { ( \\ chi ^ { W } ) } dW = M + \\ frac { W ^ { 2 } \\ log { ( \\ chi) } } { 2 } and C_ { d } + \\ frac { W ^ { 2 } \\ log { ( \\ chi) } } { 2 } = M + \\ frac { W ^ { 2 } \\ log { ( \\ chi) } } { 2 }", "SR_flan-t5-large": "operatorname { A_ { x } } { (W, \\ chi) } = \\ log { ( \\ chi ^ { W } ) } and \\ int \\ operatorname { A_ { x } } { (W, \\ chi) } dW = \\ int \\ log { ( \\ chi ^ { W } ) } dW and - (e ^ { \\ chi } ) ^ { \\ chi } + \\ int \\ operatorname { A_ { x } } { (W, \\ chi) } dW = - (e ^ { \\ chi } ) ^ { \\ chi } + \\ int \\ log { ( \\ chi ^ { W } ) } dW and - (e ^ { \\ chi } ) ^ { \\ chi } + \\ int \\ operatorname { A_ { x } } { (W, \\ chi) } dW = M + \\ frac { W ^ { 2 } \\ log { ( \\ chi) } } { 2 } - (e ^ { \\ chi } ) ^ { \\ chi } and - (e ^ { \\ chi } ) ^ { \\ chi } + \\ int \\ log { ( \\ chi ^ { W } ) } dW = M + \\ frac { W ^ { 2 } \\ log { ( \\ chi) } } { 2 } - (e ^ { \\ chi } ) ^ { \\ chi }", "static_rouge": 1.0, "static_bleu": 0.9954023069683978, "static_bleurt": 0.7887867093086243, "static_gleu": 0.9953810623556582, "VR_rouge": 0.0, "EE_rouge": 0.08219178082191791, "AG_rouge": 0.0, "SR_rouge": 0.23287671232876717, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.056225720711510996, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.23287671232876717, "VR_bleu": -4.1892273339505515e-05, "EE_bleu": 0.13069847577557436, "AG_bleu": 0.00041482777519130654, "SR_bleu": 0.27256456178431787, "VR_bleu_abs": -0.001425645228964656, "EE_bleu_abs": 0.11822338684999179, "AG_bleu_abs": 0.0008047680783533906, "SR_bleu_abs": 0.2808371594358303, "VR_bleurt": -0.06094205379486084, "EE_bleurt": -0.04795569181442261, "AG_bleurt": 0.036306798458099365, "SR_bleurt": -0.015704810619354248, "VR_bleurt_abs": 0.01800990104675293, "EE_bleurt_abs": 0.11378312110900879, "AG_bleurt_abs": -0.024548590183258057, "SR_bleurt_abs": -0.00026732683181762695, "VR_gleu": -4.2278605440260186e-05, "EE_gleu": 0.13065160343782245, "AG_gleu": 0.0004188457309730609, "SR_gleu": 0.27152785134648383, "VR_gleu_abs": -0.001138904232094451, "EE_gleu_abs": 0.11870160644614869, "AG_gleu_abs": 0.0007716090728366876, "SR_gleu_abs": 0.2798165137614679, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 1.0030439154360167, "ratio_VR_bleurt": 0.781082823348794, "ratio_VR_gleu": 1.0022882811467828, "ratio_EE_rouge": 0.9339101177601538, "ratio_EE_bleu": 0.873418913799197, "ratio_EE_bleurt": 0.8456434154961409, "ratio_EE_gleu": 0.8730918627378212, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9990305307294277, "ratio_AG_bleurt": 1.0387192089513793, "ratio_AG_gleu": 0.9990744965968469, "ratio_SR_rouge": 0.7671232876712328, "ratio_SR_bleu": 0.7191628405641697, "ratio_SR_bleurt": 1.0003254681316627, "ratio_SR_gleu": 0.7201834862385321}, {"prompt": "Given \\delta{(q)} = \\log{(q)}, then derive 0 = A_{2} + q \\log{(q)} - q - \\int \\delta{(q)} dq, then derive 0 = A_{2} - m_{s} + q \\delta{(q)} - q \\log{(q)}, then obtain \\frac{d}{d A_{2}} 0 = \\frac{\\partial}{\\partial A_{2}} (A_{2} - m_{s} + q \\delta{(q)} - q \\log{(q)})", "derivation": "\\delta{(q)} = \\log{(q)} and \\int \\delta{(q)} dq = \\int \\log{(q)} dq and 0 = - \\int \\delta{(q)} dq + \\int \\log{(q)} dq and 0 = A_{2} + q \\log{(q)} - q - \\int \\delta{(q)} dq and 0 = A_{2} + q \\delta{(q)} - q - \\int \\delta{(q)} dq and 0 = A_{2} + q \\delta{(q)} - q - \\int \\log{(q)} dq and 0 = A_{2} - m_{s} + q \\delta{(q)} - q \\log{(q)} and \\frac{d}{d A_{2}} 0 = \\frac{\\partial}{\\partial A_{2}} (A_{2} - m_{s} + q \\delta{(q)} - q \\log{(q)})", "srepr_derivation": [["get_premise", "Equality(Function('\\\\delta')(Symbol('q', commutative=True)), log(Symbol('q', commutative=True)))"], [["integrate", 1, "Symbol('q', commutative=True)"], "Equality(Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))), Integral(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))"], [["minus", 2, "Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))"], "Equality(Integer(0), Add(Mul(Integer(-1), Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))), Integral(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))))"], [["evaluate_integrals", 3], "Equality(Integer(0), Add(Symbol('A_2', commutative=True), Mul(Symbol('q', commutative=True), log(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True)), Mul(Integer(-1), Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Integer(0), Add(Symbol('A_2', commutative=True), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True)), Mul(Integer(-1), Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Integer(0), Add(Symbol('A_2', commutative=True), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True)), Mul(Integer(-1), Integral(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))))"], [["evaluate_integrals", 6], "Equality(Integer(0), Add(Symbol('A_2', commutative=True), Mul(Integer(-1), Symbol('m_s', commutative=True)), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True), log(Symbol('q', commutative=True)))))"], [["differentiate", 7, "Symbol('A_2', commutative=True)"], "Equality(Derivative(Integer(0), Tuple(Symbol('A_2', commutative=True), Integer(1))), Derivative(Add(Symbol('A_2', commutative=True), Mul(Integer(-1), Symbol('m_s', commutative=True)), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True), log(Symbol('q', commutative=True)))), Tuple(Symbol('A_2', commutative=True), Integer(1))))"]], "EE prompt": "Given \\log{(q)} = \\delta{(q)}, then derive A_{2} + q \\log{(q)} - q - \\int \\delta{(q)} dq = 0, then derive A_{2} - m_{s} + q \\delta{(q)} - q \\log{(q)} = 0, then obtain \\frac{\\partial}{\\partial A_{2}} (A_{2} - m_{s} + q \\delta{(q)} - q \\log{(q)}) = \\frac{d}{d A_{2}} 0", "EE derivation": "\\log{(q)} = \\delta{(q)} and \\int \\log{(q)} dq = \\int \\delta{(q)} dq and - \\int \\delta{(q)} dq + \\int \\log{(q)} dq = 0 and A_{2} + q \\log{(q)} - q - \\int \\delta{(q)} dq = 0 and A_{2} + q \\delta{(q)} - q - \\int \\delta{(q)} dq = 0 and A_{2} + q \\delta{(q)} - q - \\int \\log{(q)} dq = 0 and A_{2} - m_{s} + q \\delta{(q)} - q \\log{(q)} = 0 and \\frac{\\partial}{\\partial A_{2}} (A_{2} - m_{s} + q \\delta{(q)} - q \\log{(q)}) = \\frac{d}{d A_{2}} 0", "EE srepr_derivation": [["get_premise", "Equality(log(Symbol('q', commutative=True)), Function('\\\\delta')(Symbol('q', commutative=True)))"], [["integrate", 1, "Symbol('q', commutative=True)"], "Equality(Integral(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))), Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))"], [["minus", 2, "Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))"], "Equality(Add(Mul(Integer(-1), Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))), Integral(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))), Integer(0))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('A_2', commutative=True), Mul(Symbol('q', commutative=True), log(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True)), Mul(Integer(-1), Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))), Integer(0))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Add(Symbol('A_2', commutative=True), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True)), Mul(Integer(-1), Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))), Integer(0))"], [["substitute_RHS_for_LHS", 5, 2], "Equality(Add(Symbol('A_2', commutative=True), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True)), Mul(Integer(-1), Integral(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))), Integer(0))"], [["evaluate_integrals", 6], "Equality(Add(Symbol('A_2', commutative=True), Mul(Integer(-1), Symbol('m_s', commutative=True)), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True), log(Symbol('q', commutative=True)))), Integer(0))"], [["differentiate", 7, "Symbol('A_2', commutative=True)"], "Equality(Derivative(Add(Symbol('A_2', commutative=True), Mul(Integer(-1), Symbol('m_s', commutative=True)), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True), log(Symbol('q', commutative=True)))), Tuple(Symbol('A_2', commutative=True), Integer(1))), Derivative(Integer(0), Tuple(Symbol('A_2', commutative=True), Integer(1))))"]], "AG prompt": "Given \\delta{(q)} = \\log{(q)}, then derive 0 = A_{2} + q \\log{(q)} - q - \\int \\delta{(q)} dq, then derive 0 = A_{2} - m_{s} + q \\delta{(q)} - q \\log{(q)}, then obtain 0^{q} = (A_{2} - m_{s} + q \\delta{(q)} - q \\log{(q)})^{q}", "AG derivation": "\\delta{(q)} = \\log{(q)} and \\int \\delta{(q)} dq = \\int \\log{(q)} dq and 0 = - \\int \\delta{(q)} dq + \\int \\log{(q)} dq and 0 = A_{2} + q \\log{(q)} - q - \\int \\delta{(q)} dq and 0 = A_{2} + q \\delta{(q)} - q - \\int \\delta{(q)} dq and 0 = A_{2} + q \\delta{(q)} - q - \\int \\log{(q)} dq and 0 = A_{2} - m_{s} + q \\delta{(q)} - q \\log{(q)} and 0^{q} = (A_{2} - m_{s} + q \\delta{(q)} - q \\log{(q)})^{q}", "AG srepr_derivation": [["get_premise", "Equality(Function('\\\\delta')(Symbol('q', commutative=True)), log(Symbol('q', commutative=True)))"], [["integrate", 1, "Symbol('q', commutative=True)"], "Equality(Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))), Integral(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))"], [["minus", 2, "Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))"], "Equality(Integer(0), Add(Mul(Integer(-1), Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))), Integral(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))))"], [["evaluate_integrals", 3], "Equality(Integer(0), Add(Symbol('A_2', commutative=True), Mul(Symbol('q', commutative=True), log(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True)), Mul(Integer(-1), Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Integer(0), Add(Symbol('A_2', commutative=True), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True)), Mul(Integer(-1), Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Integer(0), Add(Symbol('A_2', commutative=True), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True)), Mul(Integer(-1), Integral(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))))"], [["evaluate_integrals", 6], "Equality(Integer(0), Add(Symbol('A_2', commutative=True), Mul(Integer(-1), Symbol('m_s', commutative=True)), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True), log(Symbol('q', commutative=True)))))"], [["power", 7, "Symbol('q', commutative=True)"], "Equality(Pow(Integer(0), Symbol('q', commutative=True)), Pow(Add(Symbol('A_2', commutative=True), Mul(Integer(-1), Symbol('m_s', commutative=True)), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True), log(Symbol('q', commutative=True)))), Symbol('q', commutative=True)))"]], "SR prompt": "Given \\delta{(q)} = \\log{(q)}, then obtain \\frac{d}{d A_{2}} 0 = \\frac{\\partial}{\\partial A_{2}} (A_{2} - m_{s} + q \\delta{(q)} - q \\log{(q)})", "SR derivation": "\\delta{(q)} = \\log{(q)} and \\int \\delta{(q)} dq = \\int \\log{(q)} dq and 0 = - \\int \\delta{(q)} dq + \\int \\log{(q)} dq and 0 = A_{2} + q \\log{(q)} - q - \\int \\delta{(q)} dq and 0 = A_{2} + q \\delta{(q)} - q - \\int \\delta{(q)} dq and 0 = A_{2} + q \\delta{(q)} - q - \\int \\log{(q)} dq and 0 = A_{2} - m_{s} + q \\delta{(q)} - q \\log{(q)} and \\frac{d}{d A_{2}} 0 = \\frac{\\partial}{\\partial A_{2}} (A_{2} - m_{s} + q \\delta{(q)} - q \\log{(q)})", "SR srepr_derivation": [["get_premise", "Equality(Function('\\\\delta')(Symbol('q', commutative=True)), log(Symbol('q', commutative=True)))"], [["integrate", 1, "Symbol('q', commutative=True)"], "Equality(Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))), Integral(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))"], [["minus", 2, "Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))"], "Equality(Integer(0), Add(Mul(Integer(-1), Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))), Integral(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))))"], [["evaluate_integrals", 3], "Equality(Integer(0), Add(Symbol('A_2', commutative=True), Mul(Symbol('q', commutative=True), log(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True)), Mul(Integer(-1), Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Integer(0), Add(Symbol('A_2', commutative=True), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True)), Mul(Integer(-1), Integral(Function('\\\\delta')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Integer(0), Add(Symbol('A_2', commutative=True), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True)), Mul(Integer(-1), Integral(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))))"], [["evaluate_integrals", 6], "Equality(Integer(0), Add(Symbol('A_2', commutative=True), Mul(Integer(-1), Symbol('m_s', commutative=True)), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True), log(Symbol('q', commutative=True)))))"], [["differentiate", 7, "Symbol('A_2', commutative=True)"], "Equality(Derivative(Integer(0), Tuple(Symbol('A_2', commutative=True), Integer(1))), Derivative(Add(Symbol('A_2', commutative=True), Mul(Integer(-1), Symbol('m_s', commutative=True)), Mul(Symbol('q', commutative=True), Function('\\\\delta')(Symbol('q', commutative=True))), Mul(Integer(-1), Symbol('q', commutative=True), log(Symbol('q', commutative=True)))), Tuple(Symbol('A_2', commutative=True), Integer(1))))"]], "VR prompt": "Given \\beta{(\\upsilon)} = \\log{(\\upsilon)}, then derive 0 = \\gamma + \\upsilon \\log{(\\upsilon)} - \\upsilon - \\int \\beta{(\\upsilon)} d\\upsilon, then derive 0 = - \\alpha + \\gamma + \\upsilon \\beta{(\\upsilon)} - \\upsilon \\log{(\\upsilon)}, then obtain \\frac{d}{d \\gamma} 0 = \\frac{\\partial}{\\partial \\gamma} (- \\alpha + \\gamma + \\upsilon \\beta{(\\upsilon)} - \\upsilon \\log{(\\upsilon)})", "VR derivation": "\\beta{(\\upsilon)} = \\log{(\\upsilon)} and \\int \\beta{(\\upsilon)} d\\upsilon = \\int \\log{(\\upsilon)} d\\upsilon and 0 = - \\int \\beta{(\\upsilon)} d\\upsilon + \\int \\log{(\\upsilon)} d\\upsilon and 0 = \\gamma + \\upsilon \\log{(\\upsilon)} - \\upsilon - \\int \\beta{(\\upsilon)} d\\upsilon and 0 = \\gamma + \\upsilon \\beta{(\\upsilon)} - \\upsilon - \\int \\beta{(\\upsilon)} d\\upsilon and 0 = \\gamma + \\upsilon \\beta{(\\upsilon)} - \\upsilon - \\int \\log{(\\upsilon)} d\\upsilon and 0 = - \\alpha + \\gamma + \\upsilon \\beta{(\\upsilon)} - \\upsilon \\log{(\\upsilon)} and \\frac{d}{d \\gamma} 0 = \\frac{\\partial}{\\partial \\gamma} (- \\alpha + \\gamma + \\upsilon \\beta{(\\upsilon)} - \\upsilon \\log{(\\upsilon)})", "VR srepr_derivation": [["get_premise", "Equality(Function('\\\\beta')(Symbol('\\\\upsilon', commutative=True)), log(Symbol('\\\\upsilon', commutative=True)))"], [["integrate", 1, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Integral(Function('\\\\beta')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Integral(log(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))))"], [["minus", 2, "Integral(Function('\\\\beta')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True)))"], "Equality(Integer(0), Add(Mul(Integer(-1), Integral(Function('\\\\beta')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True)))), Integral(log(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True)))))"], [["evaluate_integrals", 3], "Equality(Integer(0), Add(Symbol('\\\\gamma', commutative=True), Mul(Symbol('\\\\upsilon', commutative=True), log(Symbol('\\\\upsilon', commutative=True))), Mul(Integer(-1), Symbol('\\\\upsilon', commutative=True)), Mul(Integer(-1), Integral(Function('\\\\beta')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Integer(0), Add(Symbol('\\\\gamma', commutative=True), Mul(Symbol('\\\\upsilon', commutative=True), Function('\\\\beta')(Symbol('\\\\upsilon', commutative=True))), Mul(Integer(-1), Symbol('\\\\upsilon', commutative=True)), Mul(Integer(-1), Integral(Function('\\\\beta')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Integer(0), Add(Symbol('\\\\gamma', commutative=True), Mul(Symbol('\\\\upsilon', commutative=True), Function('\\\\beta')(Symbol('\\\\upsilon', commutative=True))), Mul(Integer(-1), Symbol('\\\\upsilon', commutative=True)), Mul(Integer(-1), Integral(log(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))))))"], [["evaluate_integrals", 6], "Equality(Integer(0), Add(Mul(Integer(-1), Symbol('\\\\alpha', commutative=True)), Symbol('\\\\gamma', commutative=True), Mul(Symbol('\\\\upsilon', commutative=True), Function('\\\\beta')(Symbol('\\\\upsilon', commutative=True))), Mul(Integer(-1), Symbol('\\\\upsilon', commutative=True), log(Symbol('\\\\upsilon', commutative=True)))))"], [["differentiate", 7, "Symbol('\\\\gamma', commutative=True)"], "Equality(Derivative(Integer(0), Tuple(Symbol('\\\\gamma', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Symbol('\\\\alpha', commutative=True)), Symbol('\\\\gamma', commutative=True), Mul(Symbol('\\\\upsilon', commutative=True), Function('\\\\beta')(Symbol('\\\\upsilon', commutative=True))), Mul(Integer(-1), Symbol('\\\\upsilon', commutative=True), log(Symbol('\\\\upsilon', commutative=True)))), Tuple(Symbol('\\\\gamma', commutative=True), Integer(1))))"]], "static_flan-t5-large": "delta { (q) } = \\ log { (q) } and \\ int \\ delta { (q) } dq = \\ int \\ log { (q) } dq and 0 = - \\ int \\ delta { (q) } dq + \\ int \\ log { (q) } dq and 0 = A_ { 2 } + q \\ log { (q) } - q - \\ int \\ delta { (q) } dq and 0 = A_ { 2 } + q \\ delta { (q) } - q \\ log { (q) } and 0 = A_ { 2 } - m_ { s } + q \\ delta { (q) } - q \\ log { (q) } and \\ frac { d } { d A_ { 2 } } 0 = \\ frac { \\ partial } { \\ partial A_ { 2 } } (A_ { 2 } - m_ { s } + q \\ delta { (q) } - q \\ log { (q) } )", "VR_flan-t5-large": "beta { ( \\ upsilon) } = \\ log { ( \\ upsilon) } and \\ int \\ beta { ( \\ upsilon) } d \\ upsilon = \\ int \\ log { ( \\ upsilon) } d \\ upsilon and 0 = - \\ int \\ beta { ( \\ upsilon) } d \\ upsilon + \\ int \\ log { ( \\ upsilon) } d \\ upsilon and 0 = \\ gamma + \\ upsilon \\ log { ( \\ upsilon) } - \\ int \\ beta { ( \\ upsilon) } d \\ upsilon and 0 = \\ gamma + \\ esilon \\ beta { ( \\ upsilon) } - \\ int \\ log { ( \\ upsilon) } d \\ upsilon and 0 = - \\ int \\ log { ( \\ esilon) } d \\ int \\ log { ( \\ esilon) } d \\ gamma and 0 = - \\ int \\ log { ( \\ esilon) } d \\ gamma + \\ esilon \\ beta { ( \\ esilon) } - \\ int \\ log { ( \\ esilon) } d \\ gamma and 0 = - \\ int \\ log { ( \\ esilon) } d \\ gamma - \\ int \\ log { ( \\ esilon) } d \\ gamma and 0 = - \\ alpha + \\ gamma + \\ esilon \\ beta { ( \\ esilon) } - \\ int \\ log { ( \\ esilon) } d \\ gamma and \\ frac { d } { d \\ gamma } 0 = \\ frac { \\ partial } { \\ partial \\ gamma } (- \\ alpha + \\ gamma + \\ esilon \\ beta { ( \\ esilon) } - \\ int", "EE_flan-t5-large": "log { (q) } = \\ delta { (q) } and \\ int \\ log { (q) } dq = \\ int \\ delta { (q) } dq and \\ int \\ log { (q) } dq - \\ int \\ delta { (q) } dq = 0 and A_ { 2 } + q \\ log { (q) } - q - \\ int \\ delta { (q) } dq = 0 and A_ { 2 } + q \\ log { (q) } - q \\ log { (q) } = 0 and A_ { 2 } - m_ { s } + q \\ delta { (q) } - q \\ log { (q) } = 0 and \\ frac { \\ partial } { \\ partial A_ { 2 } } (A_ { 2 } - m_ { s } + q \\ delta { (q) } - q \\ log { (q) } ) = \\ frac { d } { d A_ { 2 } } 0", "AG_flan-t5-large": "delta { (q) } = \\ log { (q) } and \\ int \\ delta { (q) } dq = \\ int \\ log { (q) } dq and 0 = - \\ int \\ delta { (q) } dq + \\ int \\ log { (q) } dq and 0 = A_ { 2 } + q \\ log { (q) } - q - \\ int \\ delta { (q) } dq and 0 = A_ { 2 } + q \\ delta { (q) } - q \\ log { (q) } and 0 = A_ { 2 } - m_ { s } + q \\ delta { (q) } - q \\ log { (q) } and 0 ^ { q } = (A_ { 2 } - m_ { s } + q \\ delta { (q) } - q \\ log { (q) } ) ^ { q }", "SR_flan-t5-large": "delta { (q) } = \\ log { (q) } and q \\ delta { (q) } = q \\ log { (q) } and 0 = q \\ delta { (q) } - q \\ log { (q) } and \\ frac { d } { d A_ { 2 } } 0 = \\ frac { \\ partial } { \\ partial A_ { 2 } } (q \\ delta { (q) } - q \\ log { (q) } ) and \\ frac { d } { d A_ { 2 } } 0 = \\ frac { \\ partial } { \\ partial A_ { 2 } } (A_ { 2 } - m_ { s } + q \\ delta { (q) } - q \\ log { (q) } )", "static_rouge": 0.8941176470588235, "static_bleu": 0.8359230122726581, "static_bleurt": 0.6017263531684875, "static_gleu": 0.84560327198364, "VR_rouge": 0.28627450980392155, "EE_rouge": 0.0235294117647058, "AG_rouge": 0.011000763941940273, "SR_rouge": 0.3074509803921568, "VR_rouge_abs": 0.029990842490842468, "EE_rouge_abs": -0.005295429208472591, "AG_rouge_abs": 0.017199017199017064, "SR_rouge_abs": 0.3382352941176471, "VR_bleu": 0.162388129820781, "EE_bleu": 0.024184140383980535, "AG_bleu": 0.01557116934283842, "SR_bleu": 0.3471390409151483, "VR_bleu_abs": 0.08894772530947806, "EE_bleu_abs": 0.01784598521935432, "AG_bleu_abs": 0.021548644297758934, "SR_bleu_abs": 0.3834880838985759, "VR_bleurt": -0.10507506132125854, "EE_bleurt": 0.04524219036102295, "AG_bleurt": -0.047444283962249756, "SR_bleurt": 0.4489036351442337, "VR_bleurt_abs": -0.2924925237894058, "EE_bleurt_abs": 0.07982957363128662, "AG_bleurt_abs": -0.042925477027893066, "SR_bleurt_abs": 0.4557810127735138, "VR_gleu": 0.1683377711887275, "EE_gleu": 0.023517382413087873, "AG_gleu": 0.013754719645109992, "SR_gleu": 0.3057259713701431, "VR_gleu_abs": 0.09531292598276614, "EE_gleu_abs": 0.017248195381934783, "AG_gleu_abs": 0.020498704189056638, "SR_gleu_abs": 0.3591885441527446, "ratio_VR_rouge": 0.8294270833333335, "ratio_VR_bleu": 0.7257219316310676, "ratio_VR_bleurt": 0.4267899169342389, "ratio_VR_gleu": 0.7375734292569993, "ratio_EE_rouge": 1.0064957264957264, "ratio_EE_bleu": 0.9803689897247335, "ratio_EE_bleurt": 0.8874579338401369, "ratio_EE_gleu": 0.9810676373922197, "ratio_AG_rouge": 0.9810810810810813, "ratio_AG_bleu": 0.9753547302431009, "ratio_AG_bleurt": 1.0778954586851321, "ratio_AG_gleu": 0.9766343441761103, "ratio_SR_rouge": 0.6617647058823529, "ratio_SR_bleu": 0.6165119161014241, "ratio_SR_bleurt": 0.4297618705827301, "ratio_SR_gleu": 0.6408114558472554}, {"prompt": "Given \\operatorname{A_{y}}{(\\phi_2)} = \\cos{(\\phi_2)}, then derive \\frac{d}{d \\phi_2} \\operatorname{A_{y}}{(\\phi_2)} = - \\sin{(\\phi_2)}, then obtain \\frac{d^{3}}{d \\phi_2^{3}} \\cos{(\\phi_2)} = \\frac{d^{2}}{d \\phi_2^{2}} - \\sin{(\\phi_2)}", "derivation": "\\operatorname{A_{y}}{(\\phi_2)} = \\cos{(\\phi_2)} and \\frac{d}{d \\phi_2} \\operatorname{A_{y}}{(\\phi_2)} = \\frac{d}{d \\phi_2} \\cos{(\\phi_2)} and \\frac{d}{d \\phi_2} \\operatorname{A_{y}}{(\\phi_2)} = - \\sin{(\\phi_2)} and \\frac{d}{d \\phi_2} \\cos{(\\phi_2)} = - \\sin{(\\phi_2)} and \\frac{d^{2}}{d \\phi_2^{2}} \\cos{(\\phi_2)} = \\frac{d}{d \\phi_2} - \\sin{(\\phi_2)} and \\frac{d^{3}}{d \\phi_2^{3}} \\cos{(\\phi_2)} = \\frac{d^{2}}{d \\phi_2^{2}} - \\sin{(\\phi_2)}", "srepr_derivation": [["premise", "Equality(Function('A_y')(Symbol('\\\\phi_2', commutative=True)), cos(Symbol('\\\\phi_2', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Derivative(Function('A_y')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('A_y')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))))"], [["differentiate", 4, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(2))), Derivative(Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))))"], [["differentiate", 5, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(3))), Derivative(Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(2))))"]], "EE prompt": "Given \\cos{(\\phi_2)} = \\operatorname{A_{y}}{(\\phi_2)}, then derive - \\sin{(\\phi_2)} = \\frac{d}{d \\phi_2} \\operatorname{A_{y}}{(\\phi_2)}, then obtain \\frac{d^{2}}{d \\phi_2^{2}} - \\sin{(\\phi_2)} = \\frac{d^{3}}{d \\phi_2^{3}} \\cos{(\\phi_2)}", "EE derivation": "\\cos{(\\phi_2)} = \\operatorname{A_{y}}{(\\phi_2)} and \\frac{d}{d \\phi_2} \\cos{(\\phi_2)} = \\frac{d}{d \\phi_2} \\operatorname{A_{y}}{(\\phi_2)} and - \\sin{(\\phi_2)} = \\frac{d}{d \\phi_2} \\operatorname{A_{y}}{(\\phi_2)} and - \\sin{(\\phi_2)} = \\frac{d}{d \\phi_2} \\cos{(\\phi_2)} and \\frac{d}{d \\phi_2} - \\sin{(\\phi_2)} = \\frac{d^{2}}{d \\phi_2^{2}} \\cos{(\\phi_2)} and \\frac{d^{2}}{d \\phi_2^{2}} - \\sin{(\\phi_2)} = \\frac{d^{3}}{d \\phi_2^{3}} \\cos{(\\phi_2)}", "EE srepr_derivation": [["premise", "Equality(cos(Symbol('\\\\phi_2', commutative=True)), Function('A_y')(Symbol('\\\\phi_2', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Derivative(Function('A_y')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))), Derivative(Function('A_y')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 3, 2], "Equality(Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))), Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))))"], [["differentiate", 4, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Derivative(Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(2))))"], [["differentiate", 5, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Derivative(Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(2))), Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(3))))"]], "AG prompt": "Given \\operatorname{A_{y}}{(\\phi_2)} = \\cos{(\\phi_2)}, then derive \\frac{d}{d \\phi_2} \\operatorname{A_{y}}{(\\phi_2)} = - \\sin{(\\phi_2)}, then obtain \\sin{(\\phi_2)} + \\frac{d^{2}}{d \\phi_2^{2}} \\cos{(\\phi_2)} = \\sin{(\\phi_2)} + \\frac{d}{d \\phi_2} - \\sin{(\\phi_2)}", "AG derivation": "\\operatorname{A_{y}}{(\\phi_2)} = \\cos{(\\phi_2)} and \\frac{d}{d \\phi_2} \\operatorname{A_{y}}{(\\phi_2)} = \\frac{d}{d \\phi_2} \\cos{(\\phi_2)} and \\frac{d}{d \\phi_2} \\operatorname{A_{y}}{(\\phi_2)} = - \\sin{(\\phi_2)} and \\frac{d}{d \\phi_2} \\cos{(\\phi_2)} = - \\sin{(\\phi_2)} and \\frac{d^{2}}{d \\phi_2^{2}} \\cos{(\\phi_2)} = \\frac{d}{d \\phi_2} - \\sin{(\\phi_2)} and \\sin{(\\phi_2)} + \\frac{d^{2}}{d \\phi_2^{2}} \\cos{(\\phi_2)} = \\sin{(\\phi_2)} + \\frac{d}{d \\phi_2} - \\sin{(\\phi_2)}", "AG srepr_derivation": [["premise", "Equality(Function('A_y')(Symbol('\\\\phi_2', commutative=True)), cos(Symbol('\\\\phi_2', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Derivative(Function('A_y')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('A_y')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))))"], [["differentiate", 4, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(2))), Derivative(Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))))"], [["add", 5, "sin(Symbol('\\\\phi_2', commutative=True))"], "Equality(Add(sin(Symbol('\\\\phi_2', commutative=True)), Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(2)))), Add(sin(Symbol('\\\\phi_2', commutative=True)), Derivative(Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1)))))"]], "SR prompt": "Given \\operatorname{A_{y}}{(\\phi_2)} = \\cos{(\\phi_2)}, then obtain \\frac{d^{3}}{d \\phi_2^{3}} \\cos{(\\phi_2)} = \\frac{d^{2}}{d \\phi_2^{2}} - \\sin{(\\phi_2)}", "SR derivation": "\\operatorname{A_{y}}{(\\phi_2)} = \\cos{(\\phi_2)} and \\frac{d}{d \\phi_2} \\operatorname{A_{y}}{(\\phi_2)} = \\frac{d}{d \\phi_2} \\cos{(\\phi_2)} and \\frac{d}{d \\phi_2} \\operatorname{A_{y}}{(\\phi_2)} = - \\sin{(\\phi_2)} and \\frac{d}{d \\phi_2} \\cos{(\\phi_2)} = - \\sin{(\\phi_2)} and \\frac{d^{2}}{d \\phi_2^{2}} \\cos{(\\phi_2)} = \\frac{d}{d \\phi_2} - \\sin{(\\phi_2)} and \\frac{d^{3}}{d \\phi_2^{3}} \\cos{(\\phi_2)} = \\frac{d^{2}}{d \\phi_2^{2}} - \\sin{(\\phi_2)}", "SR srepr_derivation": [["premise", "Equality(Function('A_y')(Symbol('\\\\phi_2', commutative=True)), cos(Symbol('\\\\phi_2', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Derivative(Function('A_y')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('A_y')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))))"], [["differentiate", 4, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(2))), Derivative(Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))))"], [["differentiate", 5, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Derivative(cos(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(3))), Derivative(Mul(Integer(-1), sin(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(2))))"]], "VR prompt": "Given \\tau{(\\alpha)} = \\cos{(\\alpha)}, then derive \\frac{d}{d \\alpha} \\tau{(\\alpha)} = - \\sin{(\\alpha)}, then obtain \\frac{d^{3}}{d \\alpha^{3}} \\cos{(\\alpha)} = \\frac{d^{2}}{d \\alpha^{2}} - \\sin{(\\alpha)}", "VR derivation": "\\tau{(\\alpha)} = \\cos{(\\alpha)} and \\frac{d}{d \\alpha} \\tau{(\\alpha)} = \\frac{d}{d \\alpha} \\cos{(\\alpha)} and \\frac{d}{d \\alpha} \\tau{(\\alpha)} = - \\sin{(\\alpha)} and \\frac{d}{d \\alpha} \\cos{(\\alpha)} = - \\sin{(\\alpha)} and \\frac{d^{2}}{d \\alpha^{2}} \\cos{(\\alpha)} = \\frac{d}{d \\alpha} - \\sin{(\\alpha)} and \\frac{d^{3}}{d \\alpha^{3}} \\cos{(\\alpha)} = \\frac{d^{2}}{d \\alpha^{2}} - \\sin{(\\alpha)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\tau')(Symbol('\\\\alpha', commutative=True)), cos(Symbol('\\\\alpha', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\alpha', commutative=True)"], "Equality(Derivative(Function('\\\\tau')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))), Derivative(cos(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\tau')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('\\\\alpha', commutative=True))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(cos(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))), Mul(Integer(-1), sin(Symbol('\\\\alpha', commutative=True))))"], [["differentiate", 4, "Symbol('\\\\alpha', commutative=True)"], "Equality(Derivative(cos(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(2))), Derivative(Mul(Integer(-1), sin(Symbol('\\\\alpha', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))))"], [["differentiate", 5, "Symbol('\\\\alpha', commutative=True)"], "Equality(Derivative(cos(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(3))), Derivative(Mul(Integer(-1), sin(Symbol('\\\\alpha', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True), Integer(2))))"]], "static_flan-t5-large": "operatorname { A_ { y } } { ( \\ phi_2) } = \\ cos { ( \\ phi_2) } and \\ frac { d } { d \\ phi_2 } \\ operatorname { A_ { y } } { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } \\ cos { ( \\ phi_2) } and \\ frac { d } { d \\ phi_2 } \\ operatorname { A_ { y } } { ( \\ phi_2) } = - \\ sin { ( \\ phi_2) } and \\ frac { d ^ { 2 } } { d \\ phi_2 ^ { 2 } } \\ operatorname { A_ { y } } { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } - \\ sin { ( \\ phi_2) } and \\ frac { d ^ { 2 } } { d \\ phi_2 ^ { 2 } } \\ cos { ( \\ phi_2) } = \\ frac { d ^ { 2 } } { d \\ phi_2 ^ { 2 } } - \\ sin { ( \\ phi_2) } and \\ frac { d ^ { 3 } } { d \\ phi_2 ^ { 3 } } \\ cos { ( \\ phi_2) } = \\ frac { d ^ { 2 } } { d \\ phi_2 ^ { 2 } } - \\ sin { ( \\ phi_2) }", "VR_flan-t5-large": "tau { ( \\ alpha) } = \\ cos { ( \\ alpha) } and \\ frac { d } { d \\ alpha } \\ tau { ( \\ alpha) } = \\ frac { d } { d \\ alpha } \\ cos { ( \\ alpha) } and \\ frac { d } { d \\ alpha } \\ tau { ( \\ alpha) } = - \\ sin { ( \\ alpha) } and \\ frac { d } { d \\ alpha } \\ cos { ( \\ alpha) } = - \\ sin { ( \\ alpha) } and \\ frac { d ^ { 2 } } { d \\ alpha ^ { 2 } } \\ cos { ( \\ alpha) } = \\ frac { d } { d \\ alpha } - \\ sin { ( \\ alpha) } and \\ frac { d ^ { 3 } } { d \\ alpha ^ { 3 } } \\ cos { ( \\ alpha) } = \\ frac { d ^ { 2 } } { d \\ alpha ^ { 2 } } - \\ sin { ( \\ alpha) }", "EE_flan-t5-large": "cos { ( \\ phi_2) } = \\ operatorname { A_ { y } } { ( \\ phi_2) } and \\ frac { d } { d \\ phi_2 } \\ cos { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } \\ operatorname { A_ { y } } { ( \\ phi_2) } and - \\ sin { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } \\ operatorname { A_ { y } } { ( \\ phi_2) } and - \\ sin { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } \\ cos { ( \\ phi_2) } and \\ frac { d } { d \\ phi_2 } - \\ sin { ( \\ phi_2) } = \\ frac { d ^ { 2 } } { d \\ phi_2 ^ { 2 } } \\ cos { ( \\ phi_2) } and \\ frac { d ^ { 2 } } { d \\ phi_2 ^ { 2 } } - \\ sin { ( \\ phi_2) } = \\ frac { d ^ { 3 } } { d \\ phi_2 ^ { 3 } } \\ cos { ( \\ phi_2) }", "AG_flan-t5-large": "operatorname { A_ { y } } { ( \\ phi_2) } = \\ cos { ( \\ phi_2) } and \\ frac { d } { d \\ phi_2 } \\ operatorname { A_ { y } } { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } \\ cos { ( \\ phi_2) } and \\ frac { d } { d \\ phi_2 } \\ operatorname { A_ { y } } { ( \\ phi_2) } = - \\ sin { ( \\ phi_2) } and \\ frac { d ^ { 2 } } { d \\ phi_2 ^ { 2 } } \\ operatorname { A_ { y } } { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } - \\ sin { ( \\ phi_2) } and \\ frac { d ^ { 2 } } { d \\ phi_2 ^ { 2 } } \\ cos { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } - \\ sin { ( \\ phi_2) } and \\ sin { ( \\ phi_2) } + \\ frac { d ^ { 2 } } { d \\ phi_2 ^ { 2 } } \\ cos { ( \\ phi_2) } = \\ sin { ( \\ phi_2) } + \\ frac { d } { d \\ phi_2 } - \\ sin { ( \\ phi_2) }", "SR_flan-t5-large": "operatorname { A_ { y } } { ( \\ phi_2) } = \\ cos { ( \\ phi_2) } and \\ operatorname { A_ { y } } { ( \\ phi_2) } - \\ cos { ( \\ phi_2) } = 0 and \\ frac { d } { d \\ phi_2 } ( \\ operatorname { A_ { y } } { ( \\ phi_2) } - \\ cos { ( \\ phi_2) } ) = \\ frac { d } { d \\ phi_2 } 0 and \\ frac { d ^ { 2 } } { d \\ phi_2 ^ { 2 } } ( \\ operatorname { A_ { y } } { ( \\ phi_2) } - \\ cos { ( \\ phi_2) } ) = \\ frac { d ^ { 2 } } { d \\ phi_2 ^ { 2 } } 0 and \\ frac { d ^ { 3 } } { d \\ phi_2 ^ { 3 } } \\ cos { ( \\ phi_2) } = \\ frac { d ^ { 2 } } { d \\ phi_2 ^ { 2 } } - \\ sin { ( \\ phi_2) }", "static_rouge": 0.9128205128205128, "static_bleu": 0.8685499011273782, "static_bleurt": 0.8017944097518921, "static_gleu": 0.8687196110210696, "VR_rouge": -0.0871794871794872, "EE_rouge": -0.0871794871794872, "AG_rouge": -0.02250287026406428, "SR_rouge": 0.1197170645446507, "VR_rouge_abs": 0.03407984420642646, "EE_rouge_abs": 0.05334448160535121, "AG_rouge_abs": 0.012070376432078533, "SR_rouge_abs": 0.21081081081081077, "VR_bleu": -0.12678810267410623, "EE_bleu": -0.12782033879976173, "AG_bleu": -0.034395294100179385, "SR_bleu": 0.10151917804839017, "VR_bleu_abs": 0.09935535796635725, "EE_bleu_abs": 0.12562450262002345, "AG_bleu_abs": -0.0007816062713530414, "SR_bleu_abs": 0.2858136876467887, "VR_bleurt": -0.006055057048797607, "EE_bleurt": -0.035402774810791016, "AG_bleurt": -0.009233355522155762, "SR_bleurt": 0.37117713689804077, "VR_bleurt_abs": 0.1268588164821267, "EE_bleurt_abs": 0.04967331886291504, "AG_bleurt_abs": -0.050772666931152344, "SR_bleurt_abs": 0.3971065580844879, "VR_gleu": -0.12659654822951583, "EE_gleu": -0.12763740172938576, "AG_gleu": -0.03430105670548045, "SR_gleu": 0.09458482049283645, "VR_gleu_abs": 0.08106384674655259, "EE_gleu_abs": 0.11965618938810207, "AG_gleu_abs": -0.0010194719135487862, "SR_gleu_abs": 0.2674230145867099, "ratio_VR_rouge": 0.9002849002849004, "ratio_VR_bleu": 0.818832821865189, "ratio_VR_bleurt": 0.05281202843516158, "ratio_VR_gleu": 0.8587172956702941, "ratio_EE_rouge": 0.9435897435897436, "ratio_EE_bleu": 0.8711729390390832, "ratio_EE_bleurt": 0.9297786821028073, "ratio_EE_gleu": 0.8773272680222819, "ratio_AG_rouge": 0.9869584438549956, "ratio_AG_bleu": 1.0008584700159209, "ratio_AG_bleurt": 1.0632534291815832, "ratio_AG_gleu": 1.0011193821010802, "ratio_SR_rouge": 0.7891891891891892, "ratio_SR_bleu": 0.7141863123532113, "ratio_SR_bleurt": 0.5385711359016142, "ratio_SR_gleu": 0.7325769854132901}, {"prompt": "Given \\mathbf{g}{(Q)} = \\sin{(e^{Q})}, then derive 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} = e^{Q} \\cos{(e^{Q})} + \\frac{d}{d Q} \\mathbf{g}{(Q)}, then obtain \\int 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} dQ = \\int (e^{Q} \\cos{(e^{Q})} + \\frac{d}{d Q} \\mathbf{g}{(Q)}) dQ", "derivation": "\\mathbf{g}{(Q)} = \\sin{(e^{Q})} and \\frac{d}{d Q} \\mathbf{g}{(Q)} = \\frac{d}{d Q} \\sin{(e^{Q})} and 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} = \\frac{d}{d Q} \\mathbf{g}{(Q)} + \\frac{d}{d Q} \\sin{(e^{Q})} and 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} = e^{Q} \\cos{(e^{Q})} + \\frac{d}{d Q} \\mathbf{g}{(Q)} and \\int 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} dQ = \\int (e^{Q} \\cos{(e^{Q})} + \\frac{d}{d Q} \\mathbf{g}{(Q)}) dQ", "srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), sin(exp(Symbol('Q', commutative=True))))"], [["differentiate", 1, "Symbol('Q', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('Q', commutative=True))), Tuple(Symbol('Q', commutative=True), Integer(1))))"], [["add", 2, "Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))"], "Equality(Mul(Integer(2), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))), Add(Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('Q', commutative=True))), Tuple(Symbol('Q', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 3], "Equality(Mul(Integer(2), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))), Add(Mul(exp(Symbol('Q', commutative=True)), cos(exp(Symbol('Q', commutative=True)))), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))))"], [["integrate", 4, "Symbol('Q', commutative=True)"], "Equality(Integral(Mul(Integer(2), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))), Tuple(Symbol('Q', commutative=True))), Integral(Add(Mul(exp(Symbol('Q', commutative=True)), cos(exp(Symbol('Q', commutative=True)))), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))), Tuple(Symbol('Q', commutative=True))))"]], "EE prompt": "Given \\sin{(e^{Q})} = \\mathbf{g}{(Q)}, then derive e^{Q} \\cos{(e^{Q})} + \\frac{d}{d Q} \\mathbf{g}{(Q)} = 2 \\frac{d}{d Q} \\mathbf{g}{(Q)}, then obtain \\int (e^{Q} \\cos{(e^{Q})} + \\frac{d}{d Q} \\mathbf{g}{(Q)}) dQ = \\int 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} dQ", "EE derivation": "\\sin{(e^{Q})} = \\mathbf{g}{(Q)} and \\frac{d}{d Q} \\sin{(e^{Q})} = \\frac{d}{d Q} \\mathbf{g}{(Q)} and \\frac{d}{d Q} \\mathbf{g}{(Q)} + \\frac{d}{d Q} \\sin{(e^{Q})} = 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} and e^{Q} \\cos{(e^{Q})} + \\frac{d}{d Q} \\mathbf{g}{(Q)} = 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} and \\int (e^{Q} \\cos{(e^{Q})} + \\frac{d}{d Q} \\mathbf{g}{(Q)}) dQ = \\int 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} dQ", "EE srepr_derivation": [["premise", "Equality(sin(exp(Symbol('Q', commutative=True))), Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)))"], [["differentiate", 1, "Symbol('Q', commutative=True)"], "Equality(Derivative(sin(exp(Symbol('Q', commutative=True))), Tuple(Symbol('Q', commutative=True), Integer(1))), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))))"], [["add", 2, "Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('Q', commutative=True))), Tuple(Symbol('Q', commutative=True), Integer(1)))), Mul(Integer(2), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 3], "Equality(Add(Mul(exp(Symbol('Q', commutative=True)), cos(exp(Symbol('Q', commutative=True)))), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))), Mul(Integer(2), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))))"], [["integrate", 4, "Symbol('Q', commutative=True)"], "Equality(Integral(Add(Mul(exp(Symbol('Q', commutative=True)), cos(exp(Symbol('Q', commutative=True)))), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))), Tuple(Symbol('Q', commutative=True))), Integral(Mul(Integer(2), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))), Tuple(Symbol('Q', commutative=True))))"]], "AG prompt": "Given \\mathbf{g}{(Q)} = \\sin{(e^{Q})}, then derive 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} = e^{Q} \\cos{(e^{Q})} + \\frac{d}{d Q} \\mathbf{g}{(Q)}, then obtain 2 \\frac{d}{d Q} \\sin{(e^{Q})} = e^{Q} \\cos{(e^{Q})} + \\frac{d}{d Q} \\sin{(e^{Q})}", "AG derivation": "\\mathbf{g}{(Q)} = \\sin{(e^{Q})} and \\frac{d}{d Q} \\mathbf{g}{(Q)} = \\frac{d}{d Q} \\sin{(e^{Q})} and 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} = \\frac{d}{d Q} \\mathbf{g}{(Q)} + \\frac{d}{d Q} \\sin{(e^{Q})} and 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} = e^{Q} \\cos{(e^{Q})} + \\frac{d}{d Q} \\mathbf{g}{(Q)} and 2 \\frac{d}{d Q} \\sin{(e^{Q})} = e^{Q} \\cos{(e^{Q})} + \\frac{d}{d Q} \\sin{(e^{Q})}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), sin(exp(Symbol('Q', commutative=True))))"], [["differentiate", 1, "Symbol('Q', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('Q', commutative=True))), Tuple(Symbol('Q', commutative=True), Integer(1))))"], [["add", 2, "Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))"], "Equality(Mul(Integer(2), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))), Add(Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('Q', commutative=True))), Tuple(Symbol('Q', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 3], "Equality(Mul(Integer(2), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))), Add(Mul(exp(Symbol('Q', commutative=True)), cos(exp(Symbol('Q', commutative=True)))), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Mul(Integer(2), Derivative(sin(exp(Symbol('Q', commutative=True))), Tuple(Symbol('Q', commutative=True), Integer(1)))), Add(Mul(exp(Symbol('Q', commutative=True)), cos(exp(Symbol('Q', commutative=True)))), Derivative(sin(exp(Symbol('Q', commutative=True))), Tuple(Symbol('Q', commutative=True), Integer(1)))))"]], "SR prompt": "Given \\mathbf{g}{(Q)} = \\sin{(e^{Q})}, then obtain \\int 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} dQ = \\int (e^{Q} \\cos{(e^{Q})} + \\frac{d}{d Q} \\mathbf{g}{(Q)}) dQ", "SR derivation": "\\mathbf{g}{(Q)} = \\sin{(e^{Q})} and \\frac{d}{d Q} \\mathbf{g}{(Q)} = \\frac{d}{d Q} \\sin{(e^{Q})} and 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} = \\frac{d}{d Q} \\mathbf{g}{(Q)} + \\frac{d}{d Q} \\sin{(e^{Q})} and 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} = e^{Q} \\cos{(e^{Q})} + \\frac{d}{d Q} \\mathbf{g}{(Q)} and \\int 2 \\frac{d}{d Q} \\mathbf{g}{(Q)} dQ = \\int (e^{Q} \\cos{(e^{Q})} + \\frac{d}{d Q} \\mathbf{g}{(Q)}) dQ", "SR srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), sin(exp(Symbol('Q', commutative=True))))"], [["differentiate", 1, "Symbol('Q', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('Q', commutative=True))), Tuple(Symbol('Q', commutative=True), Integer(1))))"], [["add", 2, "Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))"], "Equality(Mul(Integer(2), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))), Add(Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('Q', commutative=True))), Tuple(Symbol('Q', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 3], "Equality(Mul(Integer(2), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))), Add(Mul(exp(Symbol('Q', commutative=True)), cos(exp(Symbol('Q', commutative=True)))), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))))"], [["integrate", 4, "Symbol('Q', commutative=True)"], "Equality(Integral(Mul(Integer(2), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))), Tuple(Symbol('Q', commutative=True))), Integral(Add(Mul(exp(Symbol('Q', commutative=True)), cos(exp(Symbol('Q', commutative=True)))), Derivative(Function('\\\\mathbf{g}')(Symbol('Q', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1)))), Tuple(Symbol('Q', commutative=True))))"]], "VR prompt": "Given \\nu{(\\omicron)} = \\sin{(e^{\\omicron})}, then derive 2 \\frac{d}{d \\omicron} \\nu{(\\omicron)} = e^{\\omicron} \\cos{(e^{\\omicron})} + \\frac{d}{d \\omicron} \\nu{(\\omicron)}, then obtain \\int 2 \\frac{d}{d \\omicron} \\nu{(\\omicron)} d\\omicron = \\int (e^{\\omicron} \\cos{(e^{\\omicron})} + \\frac{d}{d \\omicron} \\nu{(\\omicron)}) d\\omicron", "VR derivation": "\\nu{(\\omicron)} = \\sin{(e^{\\omicron})} and \\frac{d}{d \\omicron} \\nu{(\\omicron)} = \\frac{d}{d \\omicron} \\sin{(e^{\\omicron})} and 2 \\frac{d}{d \\omicron} \\nu{(\\omicron)} = \\frac{d}{d \\omicron} \\nu{(\\omicron)} + \\frac{d}{d \\omicron} \\sin{(e^{\\omicron})} and 2 \\frac{d}{d \\omicron} \\nu{(\\omicron)} = e^{\\omicron} \\cos{(e^{\\omicron})} + \\frac{d}{d \\omicron} \\nu{(\\omicron)} and \\int 2 \\frac{d}{d \\omicron} \\nu{(\\omicron)} d\\omicron = \\int (e^{\\omicron} \\cos{(e^{\\omicron})} + \\frac{d}{d \\omicron} \\nu{(\\omicron)}) d\\omicron", "VR srepr_derivation": [["premise", "Equality(Function('\\\\nu')(Symbol('\\\\omicron', commutative=True)), sin(exp(Symbol('\\\\omicron', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\omicron', commutative=True)"], "Equality(Derivative(Function('\\\\nu')(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('\\\\omicron', commutative=True))), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1))))"], [["add", 2, "Derivative(Function('\\\\nu')(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1)))"], "Equality(Mul(Integer(2), Derivative(Function('\\\\nu')(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1)))), Add(Derivative(Function('\\\\nu')(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('\\\\omicron', commutative=True))), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 3], "Equality(Mul(Integer(2), Derivative(Function('\\\\nu')(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1)))), Add(Mul(exp(Symbol('\\\\omicron', commutative=True)), cos(exp(Symbol('\\\\omicron', commutative=True)))), Derivative(Function('\\\\nu')(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1)))))"], [["integrate", 4, "Symbol('\\\\omicron', commutative=True)"], "Equality(Integral(Mul(Integer(2), Derivative(Function('\\\\nu')(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1)))), Tuple(Symbol('\\\\omicron', commutative=True))), Integral(Add(Mul(exp(Symbol('\\\\omicron', commutative=True)), cos(exp(Symbol('\\\\omicron', commutative=True)))), Derivative(Function('\\\\nu')(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1)))), Tuple(Symbol('\\\\omicron', commutative=True))))"]], "static_flan-t5-large": "mathbf { g } { (Q) } = \\ sin { (e ^ { Q } ) } and 2 \\ mathbf { g } { (Q) } = \\ mathbf { g } { (Q) } + \\ sin { (e ^ { Q } ) } and \\ frac { d } { d Q } 2 \\ mathbf { g } { (Q) } = \\ frac { d } { d Q } ( \\ mathbf { g } { (Q) } + \\ sin { (e ^ { Q } ) } ) and 2 \\ frac { d } { d Q } \\ mathbf { g } { (Q) } = e ^ { Q } \\ cos { (e ^ { Q } ) } + \\ frac { d } { d Q } \\ mathbf { g } { (Q) } and \\ int 2 \\ frac { d } { d Q } \\ mathbf { g } { (Q) } dQ = \\ int (e ^ { Q } \\ cos { (e ^ { Q } ) } + \\ frac { d } { d Q } \\ mathbf { g } { (Q) } ) dQ", "VR_flan-t5-large": "n { ( \\ omicron) } = \\ sin { (e ^ { \\ omicron } ) } and 2 \\ nu { ( \\ omicron) } = \\ nu { ( \\ omicron) } + \\ sin { (e ^ { \\ omicron } ) } and \\ frac { d } { d \\ omicron } 2 \\ nu { ( \\ omicron) } = \\ frac { d } { d \\ omicron } ( \\ nu { ( \\ omicron) } + \\ sin { (e ^ { \\ omicron } ) } ) and 2 \\ frac { d } { d \\ omicron } \\ nu { ( \\ omicron) } = e ^ { \\ omicron } \\ cos { (e ^ { \\ omicron } ) } + \\ frac { d } { d \\ omicron } \\ nu { ( \\ omicron) } and \\ int 2 \\ frac { d } { d \\ omicron } \\ nu { ( \\ omicron) } d \\ omicron = \\ int (e ^ { \\ omicron } \\ cos { (e ^ { \\ omicron } ) } + \\ frac { d } { d \\ omicron } \\ nu { ( \\ omicron) } ) d \\ omicron", "EE_flan-t5-large": "sin { (e ^ { Q } ) } = \\ mathbf { g } { (Q) } and \\ frac { d } { d Q } \\ sin { (e ^ { Q } ) } = \\ frac { d } { d Q } \\ mathbf { g } { (Q) } and \\ frac { d } { d Q } \\ sin { (e ^ { Q } ) } + \\ frac { d } { d Q } \\ mathbf { g } { (Q) } = 2 \\ frac { d } { d Q } \\ mathbf { g } { (Q) } and e ^ { Q } \\ cos { (e ^ { Q } ) } + \\ frac { d } { d Q } \\ mathbf { g } { (Q) } = 2 \\ frac { d } { d Q } \\ mathbf { g } { (Q) } and \\ int (e ^ { Q } \\ cos { (e ^ { Q } ) } + \\ frac { d } { d Q } \\ mathbf { g } { (Q) } ) dQ = \\ int 2 \\ frac { d } { d Q } \\ mathbf { g } { (Q) } dQ", "AG_flan-t5-large": "mathbf { g } { (Q) } = \\ sin { (e ^ { Q } ) } and 2 \\ mathbf { g } { (Q) } = \\ mathbf { g } { (Q) } + \\ sin { (e ^ { Q } ) } and \\ frac { d } { d Q } 2 \\ mathbf { g } { (Q) } = \\ frac { d } { d Q } ( \\ mathbf { g } { (Q) } + \\ sin { (e ^ { Q } ) } ) and 2 \\ frac { d } { d Q } \\ mathbf { g } { (Q) } = e ^ { Q } \\ cos { (e ^ { Q } ) } + \\ frac { d } { d Q } \\ mathbf { g } { (Q) } and 2 \\ frac { d } { d Q } \\ sin { (e ^ { Q } ) } = e ^ { Q } \\ cos { (e ^ { Q } ) } + \\ frac { d } { d Q } \\ sin { (e ^ { Q } ) }", "SR_flan-t5-large": "mathbf { g } { (Q) } = \\ sin { (e ^ { Q } ) } and 2 \\ mathbf { g } { (Q) } = \\ mathbf { g } { (Q) } + \\ sin { (e ^ { Q } ) } and \\ frac { d } { d Q } 2 \\ mathbf { g } { (Q) } = \\ frac { d } { d Q } ( \\ mathbf { g } { (Q) } + \\ sin { (e ^ { Q } ) } ) and \\ int 2 \\ frac { d } { d Q } \\ mathbf { g } { (Q) } dQ = \\ int ( \\ frac { d } { d Q } ( \\ mathbf { g } { (Q) } + \\ sin { (e ^ { Q } ) } )) dQ and \\ int 2 \\ frac { d } { d Q } \\ mathbf { g } { (Q) } dQ = \\ int (e ^ { Q } \\ cos { (e ^ { Q } ) } + \\ frac { d } { d Q } \\ mathbf { g } { (Q) } ) dQ", "static_rouge": 0.8941176470588234, "static_bleu": 0.8678424299520937, "static_bleurt": 0.6906061172485352, "static_gleu": 0.8696969696969697, "VR_rouge": 0.002397901835893279, "EE_rouge": -0.10588235294117665, "AG_rouge": 0.0052287581699344, "SR_rouge": 0.09179206566347442, "VR_rouge_abs": 0.049512378094523635, "EE_rouge_abs": 0.08499669530733645, "AG_rouge_abs": 0.011639749745380512, "SR_rouge_abs": 0.09756097560975618, "VR_bleu": 0.011882564046110211, "EE_bleu": -0.12609457476941233, "AG_bleu": 0.003330837249931551, "SR_bleu": 0.05422438348527148, "VR_bleu_abs": 0.018602060542485144, "EE_bleu_abs": 0.12004888418152637, "AG_bleu_abs": 0.005981150662897061, "SR_bleu_abs": 0.08227299361328, "VR_bleurt": 0.04599475860595703, "EE_bleurt": -0.07862210273742676, "AG_bleurt": -0.09161645174026489, "SR_bleurt": 0.058948636054992676, "VR_bleurt_abs": -0.003902941942214966, "EE_bleurt_abs": 0.0704416036605835, "AG_bleurt_abs": -0.03669494390487671, "SR_bleurt_abs": 0.03359133005142212, "VR_gleu": 0.010850051207904166, "EE_gleu": -0.12424242424242415, "AG_gleu": 0.003237342367777174, "SR_gleu": 0.05353535353535355, "VR_gleu_abs": 0.01666021004593421, "EE_gleu_abs": 0.118816972975188, "AG_gleu_abs": 0.005874591741829471, "SR_gleu_abs": 0.08176100628930816, "ratio_VR_rouge": 0.8669354838709677, "ratio_VR_bleu": 0.9668746762984762, "ratio_VR_bleurt": 0.9768442668603605, "ratio_VR_gleu": 0.971053244721572, "ratio_EE_rouge": 0.9099439775910364, "ratio_EE_bleu": 0.8750442411298646, "ratio_EE_bleurt": 0.9034812333740267, "ratio_EE_gleu": 0.8764403327253822, "ratio_AG_rouge": 0.9868485944435311, "ratio_AG_bleu": 0.993363036168465, "ratio_AG_bleurt": 1.052832495384315, "ratio_AG_gleu": 0.9934872947095059, "ratio_SR_rouge": 0.9024390243902438, "ratio_SR_bleu": 0.91772700638672, "ratio_SR_bleurt": 0.9581058988890168, "ratio_SR_gleu": 0.9182389937106918}, {"prompt": "Given l{(\\varphi^*)} = \\frac{d}{d \\varphi^*} e^{\\varphi^*}, then derive l{(\\varphi^*)} = e^{\\varphi^*}, then obtain l{(\\varphi^*)} - 1 = \\frac{d^{2}}{d (\\varphi^*)^{2}} e^{\\varphi^*} - 1", "derivation": "l{(\\varphi^*)} = \\frac{d}{d \\varphi^*} e^{\\varphi^*} and l{(\\varphi^*)} - 1 = \\frac{d}{d \\varphi^*} e^{\\varphi^*} - 1 and l{(\\varphi^*)} = e^{\\varphi^*} and e^{\\varphi^*} = \\frac{d}{d \\varphi^*} e^{\\varphi^*} and l{(\\varphi^*)} - 1 = \\frac{d^{2}}{d (\\varphi^*)^{2}} e^{\\varphi^*} - 1", "srepr_derivation": [["premise", "Equality(Function('l')(Symbol('\\\\varphi^*', commutative=True)), Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(1))))"], [["minus", 1, 1], "Equality(Add(Function('l')(Symbol('\\\\varphi^*', commutative=True)), Integer(-1)), Add(Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(1))), Integer(-1)))"], [["evaluate_derivatives", 1], "Equality(Function('l')(Symbol('\\\\varphi^*', commutative=True)), exp(Symbol('\\\\varphi^*', commutative=True)))"], [["substitute_LHS_for_RHS", 1, 3], "Equality(exp(Symbol('\\\\varphi^*', commutative=True)), Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 2, 4], "Equality(Add(Function('l')(Symbol('\\\\varphi^*', commutative=True)), Integer(-1)), Add(Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(2))), Integer(-1)))"]], "EE prompt": "Given \\frac{d}{d \\varphi^*} e^{\\varphi^*} = l{(\\varphi^*)}, then derive e^{\\varphi^*} = l{(\\varphi^*)}, then obtain \\frac{d^{2}}{d (\\varphi^*)^{2}} e^{\\varphi^*} - 1 = l{(\\varphi^*)} - 1", "EE derivation": "\\frac{d}{d \\varphi^*} e^{\\varphi^*} = l{(\\varphi^*)} and \\frac{d}{d \\varphi^*} e^{\\varphi^*} - 1 = l{(\\varphi^*)} - 1 and e^{\\varphi^*} = l{(\\varphi^*)} and \\frac{d}{d \\varphi^*} e^{\\varphi^*} = e^{\\varphi^*} and \\frac{d^{2}}{d (\\varphi^*)^{2}} e^{\\varphi^*} - 1 = l{(\\varphi^*)} - 1", "EE srepr_derivation": [["premise", "Equality(Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(1))), Function('l')(Symbol('\\\\varphi^*', commutative=True)))"], [["minus", 1, 1], "Equality(Add(Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(1))), Integer(-1)), Add(Function('l')(Symbol('\\\\varphi^*', commutative=True)), Integer(-1)))"], [["evaluate_derivatives", 1], "Equality(exp(Symbol('\\\\varphi^*', commutative=True)), Function('l')(Symbol('\\\\varphi^*', commutative=True)))"], [["substitute_RHS_for_LHS", 1, 3], "Equality(Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(1))), exp(Symbol('\\\\varphi^*', commutative=True)))"], [["substitute_RHS_for_LHS", 2, 4], "Equality(Add(Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(2))), Integer(-1)), Add(Function('l')(Symbol('\\\\varphi^*', commutative=True)), Integer(-1)))"]], "AG prompt": "Given l{(\\varphi^*)} = \\frac{d}{d \\varphi^*} e^{\\varphi^*}, then derive l{(\\varphi^*)} = e^{\\varphi^*}, then obtain e^{\\varphi^*} + 1 = \\frac{d}{d \\varphi^*} e^{\\varphi^*} + 1", "AG derivation": "l{(\\varphi^*)} = \\frac{d}{d \\varphi^*} e^{\\varphi^*} and l{(\\varphi^*)} - 1 = \\frac{d}{d \\varphi^*} e^{\\varphi^*} - 1 and l{(\\varphi^*)} = e^{\\varphi^*} and e^{\\varphi^*} = \\frac{d}{d \\varphi^*} e^{\\varphi^*} and e^{\\varphi^*} + 1 = \\frac{d}{d \\varphi^*} e^{\\varphi^*} + 1", "AG srepr_derivation": [["premise", "Equality(Function('l')(Symbol('\\\\varphi^*', commutative=True)), Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(1))))"], [["minus", 1, 1], "Equality(Add(Function('l')(Symbol('\\\\varphi^*', commutative=True)), Integer(-1)), Add(Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(1))), Integer(-1)))"], [["evaluate_derivatives", 1], "Equality(Function('l')(Symbol('\\\\varphi^*', commutative=True)), exp(Symbol('\\\\varphi^*', commutative=True)))"], [["substitute_LHS_for_RHS", 1, 3], "Equality(exp(Symbol('\\\\varphi^*', commutative=True)), Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(1))))"], [["minus", 4, "Integer(-1)"], "Equality(Add(exp(Symbol('\\\\varphi^*', commutative=True)), Integer(1)), Add(Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(1))), Integer(1)))"]], "SR prompt": "Given l{(\\varphi^*)} = \\frac{d}{d \\varphi^*} e^{\\varphi^*}, then obtain l{(\\varphi^*)} - 1 = \\frac{d^{2}}{d (\\varphi^*)^{2}} e^{\\varphi^*} - 1", "SR derivation": "l{(\\varphi^*)} = \\frac{d}{d \\varphi^*} e^{\\varphi^*} and l{(\\varphi^*)} - 1 = \\frac{d}{d \\varphi^*} e^{\\varphi^*} - 1 and l{(\\varphi^*)} = e^{\\varphi^*} and e^{\\varphi^*} = \\frac{d}{d \\varphi^*} e^{\\varphi^*} and l{(\\varphi^*)} - 1 = \\frac{d^{2}}{d (\\varphi^*)^{2}} e^{\\varphi^*} - 1", "SR srepr_derivation": [["premise", "Equality(Function('l')(Symbol('\\\\varphi^*', commutative=True)), Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(1))))"], [["minus", 1, 1], "Equality(Add(Function('l')(Symbol('\\\\varphi^*', commutative=True)), Integer(-1)), Add(Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(1))), Integer(-1)))"], [["evaluate_derivatives", 1], "Equality(Function('l')(Symbol('\\\\varphi^*', commutative=True)), exp(Symbol('\\\\varphi^*', commutative=True)))"], [["substitute_LHS_for_RHS", 1, 3], "Equality(exp(Symbol('\\\\varphi^*', commutative=True)), Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 2, 4], "Equality(Add(Function('l')(Symbol('\\\\varphi^*', commutative=True)), Integer(-1)), Add(Derivative(exp(Symbol('\\\\varphi^*', commutative=True)), Tuple(Symbol('\\\\varphi^*', commutative=True), Integer(2))), Integer(-1)))"]], "VR prompt": "Given \\nu{(\\iota)} = \\frac{d}{d \\iota} e^{\\iota}, then derive \\nu{(\\iota)} = e^{\\iota}, then obtain \\nu{(\\iota)} - 1 = \\frac{d^{2}}{d \\iota^{2}} e^{\\iota} - 1", "VR derivation": "\\nu{(\\iota)} = \\frac{d}{d \\iota} e^{\\iota} and \\nu{(\\iota)} - 1 = \\frac{d}{d \\iota} e^{\\iota} - 1 and \\nu{(\\iota)} = e^{\\iota} and e^{\\iota} = \\frac{d}{d \\iota} e^{\\iota} and \\nu{(\\iota)} - 1 = \\frac{d^{2}}{d \\iota^{2}} e^{\\iota} - 1", "VR srepr_derivation": [["premise", "Equality(Function('\\\\nu')(Symbol('\\\\iota', commutative=True)), Derivative(exp(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))))"], [["minus", 1, 1], "Equality(Add(Function('\\\\nu')(Symbol('\\\\iota', commutative=True)), Integer(-1)), Add(Derivative(exp(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))), Integer(-1)))"], [["evaluate_derivatives", 1], "Equality(Function('\\\\nu')(Symbol('\\\\iota', commutative=True)), exp(Symbol('\\\\iota', commutative=True)))"], [["substitute_LHS_for_RHS", 1, 3], "Equality(exp(Symbol('\\\\iota', commutative=True)), Derivative(exp(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 2, 4], "Equality(Add(Function('\\\\nu')(Symbol('\\\\iota', commutative=True)), Integer(-1)), Add(Derivative(exp(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(2))), Integer(-1)))"]], "static_flan-t5-large": "l { ( \\ varphi ^ *) } = \\ frac { d } { d \\ varphi ^ * } e ^ { \\ varphi ^ * } and l { ( \\ varphi ^ *) } = e ^ { \\ varphi ^ * } and l { ( \\ varphi ^ *) } = \\ frac { d } { d \\ varphi ^ * } e ^ { \\ varphi ^ * } and l { ( \\ varphi ^ *) } = \\ frac { d ^ { 2 } } { d ( \\ varphi ^ *) ^ { 2 } } e ^ { \\ varphi ^ * } and l { ( \\ varphi ^ *) } - 1 = \\ frac { d ^ { 2 } } { d ( \\ varphi ^ *) ^ { 2 } } e ^ { \\ varphi ^ * } - 1", "VR_flan-t5-large": "nu { ( \\ iota) } = \\ frac { d } { d \\ iota } e ^ { \\ iota } and \\ frac { d } { d \\ iota } \\ operator { ( \\ iota) } = \\ frac { d ^ { 2 } } { d \\ iota ^ { 2 } } e ^ { \\ iota } and \\ frac { d } { d \\ iota } \\ operator { ( \\ iota) } = e ^ { \\ iota } and \\ frac { d } { d \\ iota } e ^ { \\ iota } = e ^ { \\ iota } and \\ frac { d } { d \\ iota } \\ operator { ( \\ iota) } - 1 = \\ frac { d ^ { 2 } } { d \\ iota ^ { 2 } } e ^ { \\ iota } - 1 and \\ frac { d } { d \\ iota } \\ operator { ( \\ iota) } - 1 = \\ frac { d ^ { 2 } } { d \\ iota ^ { 2 } } e ^ { \\ iota } - 1 and \\ nu { ( \\ iota) } - 1 = \\ frac { d ^ { 2 } } { d \\ iota ^ { 2 } } e ^ { \\ iota } - 1", "EE_flan-t5-large": "frac { d } { d \\ varphi ^ * } e ^ { \\ varphi ^ * } = l { ( \\ varphi ^ *) } and e ^ { \\ varphi ^ * } = l { ( \\ varphi ^ *) } and \\ frac { d } { d \\ varphi ^ * } e ^ { \\ varphi ^ * } = e ^ { \\ varphi ^ * } and \\ frac { d ^ { 2 } } { d ( \\ varphi ^ *) ^ { 2 } } e ^ { \\ varphi ^ * } = \\ frac { d } { d \\ varphi ^ * } l { ( \\ varphi ^ *) } and \\ frac { d ^ { 2 } } { d ( \\ varphi ^ *) ^ { 2 } } e ^ { \\ varphi ^ * } = \\ frac { d } { d \\ varphi ^ * } l { ( \\ varphi ^ *) } and \\ frac { d ^ { 2 } } { d ( \\ varphi ^ *) ^ { 2 } } e ^ { \\ varphi ^ * } - 1 = l { ( \\ varphi ^ *) } - 1", "AG_flan-t5-large": "l { ( \\ varphi ^ *) } = \\ frac { d } { d \\ varphi ^ * } e ^ { \\ varphi ^ * } and l { ( \\ varphi ^ *) } = e ^ { \\ varphi ^ * } and l { ( \\ varphi ^ *) } + 1 = \\ frac { d } { d \\ varphi ^ * } e ^ { \\ varphi ^ * } + 1 and e ^ { \\ varphi ^ * } + 1 = \\ frac { d } { d \\ varphi ^ * } e ^ { \\ varphi ^ * } + 1", "SR_flan-t5-large": "l { ( \\ varphi ^ *) } = \\ frac { d } { d \\ varphi ^ * } e ^ { \\ varphi ^ * } and l { ( \\ varphi ^ *) } - 1 = \\ frac { d } { d \\ varphi ^ * } e ^ { \\ varphi ^ * } - 1 and l { ( \\ varphi ^ *) } - 1 = \\ frac { d } { d \\ varphi ^ * } e ^ { \\ varphi ^ * } - 1 and \\ frac { d } { d \\ varphi ^ * } e ^ { \\ varphi ^ * } = \\ frac { d ^ { 2 } } { d ( \\ varphi ^ *) ^ { 2 } } e ^ { \\ varphi ^ * } and l { ( \\ varphi ^ *) } - 1 = \\ frac { d ^ { 2 } } { d ( \\ varphi ^ *) ^ { 2 } } e ^ { \\ varphi ^ * } - 1", "static_rouge": 0.8222222222222222, "static_bleu": 0.8535982756401482, "static_bleurt": 0.698853075504303, "static_gleu": 0.8556231003039514, "VR_rouge": 0.2161616161616161, "EE_rouge": 0.08827726809378178, "AG_rouge": -0.06089466089466089, "SR_rouge": -0.02091503267973871, "VR_rouge_abs": 0.11414141414141413, "EE_rouge_abs": 0.12884811416921504, "AG_rouge_abs": 0.20281933256616802, "SR_rouge_abs": 0.21568627450980393, "VR_bleu": 0.3621499516021399, "EE_bleu": 0.1989404736805268, "AG_bleu": 0.12030347465667668, "SR_bleu": 0.07125119330075502, "VR_bleu_abs": 0.17341744051443525, "EE_bleu_abs": 0.24845003831146995, "AG_bleu_abs": 0.27338611817321123, "SR_bleu_abs": 0.2247800572171763, "VR_bleurt": 0.013686716556549072, "EE_bleurt": -0.10214740037918091, "AG_bleurt": -0.05321413278579712, "SR_bleurt": -0.09737282991409302, "VR_bleurt_abs": -0.20095934718847275, "EE_bleurt_abs": -0.06939578056335449, "AG_bleurt_abs": 0.2612830102443695, "SR_bleurt_abs": -0.05328989028930664, "VR_gleu": 0.3636071322400791, "EE_gleu": 0.20067804535889644, "AG_gleu": 0.10306337334149407, "SR_gleu": 0.07301440465177744, "VR_gleu_abs": 0.1824446345404429, "EE_gleu_abs": 0.24945054945054945, "AG_gleu_abs": 0.23812901046943602, "SR_gleu_abs": 0.22378516624040923, "ratio_VR_rouge": 0.6331168831168832, "ratio_VR_bleu": 0.6592311642598561, "ratio_VR_bleurt": -8.962391035279804, "ratio_VR_gleu": 0.6568951648940924, "ratio_EE_rouge": 0.8474167069048769, "ratio_EE_bleu": 0.7273265195130033, "ratio_EE_bleurt": 1.1013145495538181, "ratio_EE_gleu": 0.7271634615384616, "ratio_AG_rouge": 0.7711781888997079, "ratio_AG_bleu": 0.675638241426597, "ratio_AG_bleurt": 0.6269248330732605, "ratio_AG_gleu": 0.7185341902518861, "ratio_SR_rouge": 0.7843137254901961, "ratio_SR_bleu": 0.7752199427828237, "ratio_SR_bleurt": 1.0705063458045516, "ratio_SR_gleu": 0.7762148337595908}, {"prompt": "Given l{(M_{E})} = \\cos{(M_{E})}, then derive \\sin{(M_{E})} + \\frac{d}{d M_{E}} l{(M_{E})} = 0, then derive y^{\\prime} - 1 = \\int 0 dM_{E} - 1, then obtain y^{\\prime} - 1 = \\int (\\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})}) dM_{E} - 1", "derivation": "l{(M_{E})} = \\cos{(M_{E})} and \\frac{d}{d M_{E}} l{(M_{E})} = \\frac{d}{d M_{E}} \\cos{(M_{E})} and \\frac{d}{d M_{E}} l{(M_{E})} - \\frac{d}{d M_{E}} \\cos{(M_{E})} = 0 and \\sin{(M_{E})} + \\frac{d}{d M_{E}} l{(M_{E})} = 0 and \\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})} = 0 and \\int (\\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})}) dM_{E} = \\int 0 dM_{E} and \\int (\\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})}) dM_{E} - 1 = \\int 0 dM_{E} - 1 and y^{\\prime} - 1 = \\int 0 dM_{E} - 1 and y^{\\prime} - 1 = \\int (\\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})}) dM_{E} - 1", "srepr_derivation": [["premise", "Equality(Function('l')(Symbol('M_E', commutative=True)), cos(Symbol('M_E', commutative=True)))"], [["differentiate", 1, "Symbol('M_E', commutative=True)"], "Equality(Derivative(Function('l')(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))))"], [["minus", 2, "Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Function('l')(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))), Mul(Integer(-1), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 3], "Equality(Add(sin(Symbol('M_E', commutative=True)), Derivative(Function('l')(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Integer(0))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Add(sin(Symbol('M_E', commutative=True)), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Integer(0))"], [["integrate", 5, "Symbol('M_E', commutative=True)"], "Equality(Integral(Add(sin(Symbol('M_E', commutative=True)), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Tuple(Symbol('M_E', commutative=True))), Integral(Integer(0), Tuple(Symbol('M_E', commutative=True))))"], [["add", 6, "Integer(-1)"], "Equality(Add(Integral(Add(sin(Symbol('M_E', commutative=True)), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Tuple(Symbol('M_E', commutative=True))), Integer(-1)), Add(Integral(Integer(0), Tuple(Symbol('M_E', commutative=True))), Integer(-1)))"], [["evaluate_integrals", 7], "Equality(Add(Symbol('y^{\\\\prime}', commutative=True), Integer(-1)), Add(Integral(Integer(0), Tuple(Symbol('M_E', commutative=True))), Integer(-1)))"], [["substitute_RHS_for_LHS", 8, 7], "Equality(Add(Symbol('y^{\\\\prime}', commutative=True), Integer(-1)), Add(Integral(Add(sin(Symbol('M_E', commutative=True)), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Tuple(Symbol('M_E', commutative=True))), Integer(-1)))"]], "EE prompt": "Given \\cos{(M_{E})} = l{(M_{E})}, then derive 0 = \\sin{(M_{E})} + \\frac{d}{d M_{E}} l{(M_{E})}, then derive \\int 0 dM_{E} - 1 = y^{\\prime} - 1, then obtain \\int (\\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})}) dM_{E} - 1 = y^{\\prime} - 1", "EE derivation": "\\cos{(M_{E})} = l{(M_{E})} and \\frac{d}{d M_{E}} \\cos{(M_{E})} = \\frac{d}{d M_{E}} l{(M_{E})} and 0 = \\frac{d}{d M_{E}} l{(M_{E})} - \\frac{d}{d M_{E}} \\cos{(M_{E})} and 0 = \\sin{(M_{E})} + \\frac{d}{d M_{E}} l{(M_{E})} and 0 = \\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})} and \\int 0 dM_{E} = \\int (\\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})}) dM_{E} and \\int 0 dM_{E} - 1 = \\int (\\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})}) dM_{E} - 1 and \\int 0 dM_{E} - 1 = y^{\\prime} - 1 and \\int (\\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})}) dM_{E} - 1 = y^{\\prime} - 1", "EE srepr_derivation": [["premise", "Equality(cos(Symbol('M_E', commutative=True)), Function('l')(Symbol('M_E', commutative=True)))"], [["differentiate", 1, "Symbol('M_E', commutative=True)"], "Equality(Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))), Derivative(Function('l')(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))))"], [["minus", 2, "Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))"], "Equality(Integer(0), Add(Derivative(Function('l')(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))), Mul(Integer(-1), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))))))"], [["evaluate_derivatives", 3], "Equality(Integer(0), Add(sin(Symbol('M_E', commutative=True)), Derivative(Function('l')(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Integer(0), Add(sin(Symbol('M_E', commutative=True)), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))))"], [["integrate", 5, "Symbol('M_E', commutative=True)"], "Equality(Integral(Integer(0), Tuple(Symbol('M_E', commutative=True))), Integral(Add(sin(Symbol('M_E', commutative=True)), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Tuple(Symbol('M_E', commutative=True))))"], [["add", 6, "Integer(-1)"], "Equality(Add(Integral(Integer(0), Tuple(Symbol('M_E', commutative=True))), Integer(-1)), Add(Integral(Add(sin(Symbol('M_E', commutative=True)), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Tuple(Symbol('M_E', commutative=True))), Integer(-1)))"], [["evaluate_integrals", 7], "Equality(Add(Integral(Integer(0), Tuple(Symbol('M_E', commutative=True))), Integer(-1)), Add(Symbol('y^{\\\\prime}', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 8, 7], "Equality(Add(Integral(Add(sin(Symbol('M_E', commutative=True)), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Tuple(Symbol('M_E', commutative=True))), Integer(-1)), Add(Symbol('y^{\\\\prime}', commutative=True), Integer(-1)))"]], "AG prompt": "Given l{(M_{E})} = \\cos{(M_{E})}, then derive \\sin{(M_{E})} + \\frac{d}{d M_{E}} l{(M_{E})} = 0, then derive y^{\\prime} - 1 = \\int 0 dM_{E} - 1, then obtain \\frac{d}{d M_{E}} (y^{\\prime} - 1) = \\frac{d}{d M_{E}} (\\int 0 dM_{E} - 1)", "AG derivation": "l{(M_{E})} = \\cos{(M_{E})} and \\frac{d}{d M_{E}} l{(M_{E})} = \\frac{d}{d M_{E}} \\cos{(M_{E})} and \\frac{d}{d M_{E}} l{(M_{E})} - \\frac{d}{d M_{E}} \\cos{(M_{E})} = 0 and \\sin{(M_{E})} + \\frac{d}{d M_{E}} l{(M_{E})} = 0 and \\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})} = 0 and \\int (\\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})}) dM_{E} = \\int 0 dM_{E} and \\int (\\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})}) dM_{E} - 1 = \\int 0 dM_{E} - 1 and y^{\\prime} - 1 = \\int 0 dM_{E} - 1 and \\frac{d}{d M_{E}} (y^{\\prime} - 1) = \\frac{d}{d M_{E}} (\\int 0 dM_{E} - 1)", "AG srepr_derivation": [["premise", "Equality(Function('l')(Symbol('M_E', commutative=True)), cos(Symbol('M_E', commutative=True)))"], [["differentiate", 1, "Symbol('M_E', commutative=True)"], "Equality(Derivative(Function('l')(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))))"], [["minus", 2, "Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Function('l')(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))), Mul(Integer(-1), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 3], "Equality(Add(sin(Symbol('M_E', commutative=True)), Derivative(Function('l')(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Integer(0))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Add(sin(Symbol('M_E', commutative=True)), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Integer(0))"], [["integrate", 5, "Symbol('M_E', commutative=True)"], "Equality(Integral(Add(sin(Symbol('M_E', commutative=True)), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Tuple(Symbol('M_E', commutative=True))), Integral(Integer(0), Tuple(Symbol('M_E', commutative=True))))"], [["add", 6, "Integer(-1)"], "Equality(Add(Integral(Add(sin(Symbol('M_E', commutative=True)), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Tuple(Symbol('M_E', commutative=True))), Integer(-1)), Add(Integral(Integer(0), Tuple(Symbol('M_E', commutative=True))), Integer(-1)))"], [["evaluate_integrals", 7], "Equality(Add(Symbol('y^{\\\\prime}', commutative=True), Integer(-1)), Add(Integral(Integer(0), Tuple(Symbol('M_E', commutative=True))), Integer(-1)))"], [["differentiate", 8, "Symbol('M_E', commutative=True)"], "Equality(Derivative(Add(Symbol('y^{\\\\prime}', commutative=True), Integer(-1)), Tuple(Symbol('M_E', commutative=True), Integer(1))), Derivative(Add(Integral(Integer(0), Tuple(Symbol('M_E', commutative=True))), Integer(-1)), Tuple(Symbol('M_E', commutative=True), Integer(1))))"]], "SR prompt": "Given l{(M_{E})} = \\cos{(M_{E})}, then obtain y^{\\prime} - 1 = \\int (\\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})}) dM_{E} - 1", "SR derivation": "l{(M_{E})} = \\cos{(M_{E})} and \\frac{d}{d M_{E}} l{(M_{E})} = \\frac{d}{d M_{E}} \\cos{(M_{E})} and \\frac{d}{d M_{E}} l{(M_{E})} - \\frac{d}{d M_{E}} \\cos{(M_{E})} = 0 and \\sin{(M_{E})} + \\frac{d}{d M_{E}} l{(M_{E})} = 0 and \\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})} = 0 and \\int (\\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})}) dM_{E} = \\int 0 dM_{E} and \\int (\\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})}) dM_{E} - 1 = \\int 0 dM_{E} - 1 and y^{\\prime} - 1 = \\int 0 dM_{E} - 1 and y^{\\prime} - 1 = \\int (\\sin{(M_{E})} + \\frac{d}{d M_{E}} \\cos{(M_{E})}) dM_{E} - 1", "SR srepr_derivation": [["premise", "Equality(Function('l')(Symbol('M_E', commutative=True)), cos(Symbol('M_E', commutative=True)))"], [["differentiate", 1, "Symbol('M_E', commutative=True)"], "Equality(Derivative(Function('l')(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))))"], [["minus", 2, "Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Function('l')(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))), Mul(Integer(-1), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 3], "Equality(Add(sin(Symbol('M_E', commutative=True)), Derivative(Function('l')(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Integer(0))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Add(sin(Symbol('M_E', commutative=True)), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Integer(0))"], [["integrate", 5, "Symbol('M_E', commutative=True)"], "Equality(Integral(Add(sin(Symbol('M_E', commutative=True)), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Tuple(Symbol('M_E', commutative=True))), Integral(Integer(0), Tuple(Symbol('M_E', commutative=True))))"], [["add", 6, "Integer(-1)"], "Equality(Add(Integral(Add(sin(Symbol('M_E', commutative=True)), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Tuple(Symbol('M_E', commutative=True))), Integer(-1)), Add(Integral(Integer(0), Tuple(Symbol('M_E', commutative=True))), Integer(-1)))"], [["evaluate_integrals", 7], "Equality(Add(Symbol('y^{\\\\prime}', commutative=True), Integer(-1)), Add(Integral(Integer(0), Tuple(Symbol('M_E', commutative=True))), Integer(-1)))"], [["substitute_RHS_for_LHS", 8, 7], "Equality(Add(Symbol('y^{\\\\prime}', commutative=True), Integer(-1)), Add(Integral(Add(sin(Symbol('M_E', commutative=True)), Derivative(cos(Symbol('M_E', commutative=True)), Tuple(Symbol('M_E', commutative=True), Integer(1)))), Tuple(Symbol('M_E', commutative=True))), Integer(-1)))"]], "VR prompt": "Given \\alpha{(\\upsilon)} = \\cos{(\\upsilon)}, then derive \\sin{(\\upsilon)} + \\frac{d}{d \\upsilon} \\alpha{(\\upsilon)} = 0, then derive \\iota - 1 = \\int 0 d\\upsilon - 1, then obtain \\iota - 1 = \\int (\\sin{(\\upsilon)} + \\frac{d}{d \\upsilon} \\cos{(\\upsilon)}) d\\upsilon - 1", "VR derivation": "\\alpha{(\\upsilon)} = \\cos{(\\upsilon)} and \\frac{d}{d \\upsilon} \\alpha{(\\upsilon)} = \\frac{d}{d \\upsilon} \\cos{(\\upsilon)} and \\frac{d}{d \\upsilon} \\alpha{(\\upsilon)} - \\frac{d}{d \\upsilon} \\cos{(\\upsilon)} = 0 and \\sin{(\\upsilon)} + \\frac{d}{d \\upsilon} \\alpha{(\\upsilon)} = 0 and \\sin{(\\upsilon)} + \\frac{d}{d \\upsilon} \\cos{(\\upsilon)} = 0 and \\int (\\sin{(\\upsilon)} + \\frac{d}{d \\upsilon} \\cos{(\\upsilon)}) d\\upsilon = \\int 0 d\\upsilon and \\int (\\sin{(\\upsilon)} + \\frac{d}{d \\upsilon} \\cos{(\\upsilon)}) d\\upsilon - 1 = \\int 0 d\\upsilon - 1 and \\iota - 1 = \\int 0 d\\upsilon - 1 and \\iota - 1 = \\int (\\sin{(\\upsilon)} + \\frac{d}{d \\upsilon} \\cos{(\\upsilon)}) d\\upsilon - 1", "VR srepr_derivation": [["premise", "Equality(Function('\\\\alpha')(Symbol('\\\\upsilon', commutative=True)), cos(Symbol('\\\\upsilon', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Derivative(Function('\\\\alpha')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Derivative(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))))"], [["minus", 2, "Derivative(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Function('\\\\alpha')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Mul(Integer(-1), Derivative(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 3], "Equality(Add(sin(Symbol('\\\\upsilon', commutative=True)), Derivative(Function('\\\\alpha')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1)))), Integer(0))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Add(sin(Symbol('\\\\upsilon', commutative=True)), Derivative(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1)))), Integer(0))"], [["integrate", 5, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Integral(Add(sin(Symbol('\\\\upsilon', commutative=True)), Derivative(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1)))), Tuple(Symbol('\\\\upsilon', commutative=True))), Integral(Integer(0), Tuple(Symbol('\\\\upsilon', commutative=True))))"], [["add", 6, "Integer(-1)"], "Equality(Add(Integral(Add(sin(Symbol('\\\\upsilon', commutative=True)), Derivative(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1)))), Tuple(Symbol('\\\\upsilon', commutative=True))), Integer(-1)), Add(Integral(Integer(0), Tuple(Symbol('\\\\upsilon', commutative=True))), Integer(-1)))"], [["evaluate_integrals", 7], "Equality(Add(Symbol('\\\\iota', commutative=True), Integer(-1)), Add(Integral(Integer(0), Tuple(Symbol('\\\\upsilon', commutative=True))), Integer(-1)))"], [["substitute_RHS_for_LHS", 8, 7], "Equality(Add(Symbol('\\\\iota', commutative=True), Integer(-1)), Add(Integral(Add(sin(Symbol('\\\\upsilon', commutative=True)), Derivative(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1)))), Tuple(Symbol('\\\\upsilon', commutative=True))), Integer(-1)))"]], "static_flan-t5-large": "l { (M_ { E } ) } = \\ cos { (M_ { E } ) } and \\ frac { d } { d M_ { E } } l { (M_ { E } ) } = \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } and \\ frac { d } { d M_ { E } } l { (M_ { E } ) } - \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } = 0 and \\ sin { (M_ { E } ) } + \\ frac { d } { d M_ { E } } l { (M_ { E } ) } = 0 and \\ int ( \\ sin { (M_ { E } ) } + \\ frac { d } { d M_ { E } } l { (M_ { E } ) } ) dM_ { E } = \\ int 0 dM_ { E } and \\ int ( \\ sin { (M_ { E } ) } + \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } ) dM_ { E } = \\ int 0 dM_ { E } and y ^ { \\ prime } - 1 = \\ int 0 dM_ { E } - 1 and y ^ { \\ prime } - 1 = \\ int ( \\ sin { (M_ { E } ) } + \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } ) dM_ { E } - 1", "VR_flan-t5-large": "alpha { ( \\ upsilon) } = \\ cos { ( \\ upsilon) } and \\ frac { d } { d \\ upsilon } \\ alpha { ( \\ upsilon) } = \\ frac { d } { d \\ upsilon } \\ cos { ( \\ upsilon) } and \\ frac { d } { d \\ upsilon } \\ alpha { ( \\ upsilon) } - \\ frac { d } { d \\ upsilon } \\ cos { ( \\ upsilon) } = 0 and \\ sin { ( \\ upsilon) } + \\ frac { d } { d \\ upsilon } \\ alpha { ( \\ upsilon) } = 0 and \\ int ( \\ sin { ( \\ upsilon) } + \\ frac { d } { d \\ upsilon } \\ alpha { ( \\ upsilon) } ) d \\ upsilon = \\ int 0 d \\ upsilon and \\ iota - 1 = \\ int 0 d \\ upsilon - 1 and \\ iota - 1 = \\ int ( \\ sin { ( \\ upsilon) } + \\ frac { d } { d \\ upsilon } \\ cos { ( \\ upsilon) } ) d \\ upsilon - 1", "EE_flan-t5-large": "cos { (M_ { E } ) } = l { (M_ { E } ) } and 0 = - \\ cos { (M_ { E } ) } + l { (M_ { E } ) } and \\ frac { d } { d M_ { E } } 0 = \\ frac { d } { d M_ { E } } (- \\ cos { (M_ { E } ) } + l { (M_ { E } ) } ) and 0 = \\ sin { (M_ { E } ) } + \\ frac { d } { d M_ { E } } l { (M_ { E } ) } and 0 = \\ sin { (M_ { E } ) } + \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } and \\ int 0 dM_ { E } = \\ int ( \\ sin { (M_ { E } ) } + \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } ) dM_ { E } and \\ int 0 dM_ { E } - 1 = \\ int ( \\ sin { (M_ { E } ) } + \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } ) dM_ { E } - 1 and \\ int 0 dM_ { E } - 1 = y ^ { \\ prime } - 1 and \\ int ( \\ sin { (M_ { E } ) } + \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } ) dM_ { E } - 1 = y ^ { \\ prime } - 1", "AG_flan-t5-large": "l { (M_ { E } ) } = \\ cos { (M_ { E } ) } and \\ frac { d } { d M_ { E } } l { (M_ { E } ) } = \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } and \\ frac { d } { d M_ { E } } l { (M_ { E } ) } - \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } = 0 and \\ int ( \\ frac { d } { d M_ { E } } l { (M_ { E } ) } - \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } ) dM_ { E } = \\ int 0 dM_ { E } and \\ sin { (M_ { E } ) } + \\ frac { d } { d M_ { E } } l { (M_ { E } ) } = 0 and \\ sin { (M_ { E } ) } + \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } = 0 and \\ int ( \\ sin { (M_ { E } ) } + \\ frac { d } { d M_ { E } } l { (M_ { E } ) } ) dM_ { E } = \\ int 0 dM_ { E } and y ^ { \\ prime } - 1 = \\ int 0 dM_ { E } - 1 and \\ frac { d } { d M_ { E } } (y ^ { \\ prime } - 1) = \\ frac { d } { d M_ { E } } ( \\ int 0 dM_ { E } - 1)", "SR_flan-t5-large": "l { (M_ { E } ) } = \\ cos { (M_ { E } ) } and \\ frac { d } { d M_ { E } } l { (M_ { E } ) } = \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } and \\ int \\ frac { d } { d M_ { E } } l { (M_ { E } ) } dM_ { E } = \\ int \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } dM_ { E } and y ^ { \\ prime } = \\ int ( \\ sin { (M_ { E } ) } + \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } ) dM_ { E } and y ^ { \\ prime } - 1 = \\ int ( \\ sin { (M_ { E } ) } + \\ frac { d } { d M_ { E } } \\ cos { (M_ { E } ) } ) dM_ { E } - 1", "static_rouge": 0.9090909090909091, "static_bleu": 0.8670910324901988, "static_bleurt": 0.7412747144699097, "static_gleu": 0.8732303732303732, "VR_rouge": 0.0811339198435973, "EE_rouge": -0.040716040716040736, "AG_rouge": -0.02079838980207993, "SR_rouge": 0.20211416490486267, "VR_rouge_abs": 0.04262542436816297, "EE_rouge_abs": 0.034866650354783535, "AG_rouge_abs": 0.050023320895522416, "SR_rouge_abs": 0.22999999999999998, "VR_bleu": 0.16661900908528127, "EE_bleu": -0.038810009639944965, "AG_bleu": -0.07478102316105495, "SR_bleu": 0.3398801350461923, "VR_bleu_abs": 0.09751556540410455, "EE_bleu_abs": 0.10249855674792929, "AG_bleu_abs": 0.08094622105701488, "SR_bleu_abs": 0.36302194131581145, "VR_bleurt": 0.09430158138275146, "EE_bleurt": 0.13488292694091797, "AG_bleurt": 0.10470372438430786, "SR_bleurt": 0.35652169585227966, "VR_bleurt_abs": -0.03463870286941528, "EE_bleurt_abs": 0.12651163339614868, "AG_bleurt_abs": 0.15342634916305542, "SR_bleurt_abs": 0.47933003306388855, "VR_gleu": 0.13877659171776813, "EE_gleu": -0.034105534105534074, "AG_gleu": -0.06885456885456886, "SR_gleu": 0.27413127413127414, "VR_gleu_abs": 0.07628331213236872, "EE_gleu_abs": 0.10132377275234417, "AG_gleu_abs": 0.08108108108108103, "SR_gleu_abs": 0.318577648766328, "ratio_VR_rouge": 0.8648325358851674, "ratio_VR_bleu": 0.7589171353999177, "ratio_VR_bleurt": 0.7901032975764799, "ratio_VR_gleu": 0.8230682581288045, "ratio_EE_rouge": 0.9610655737704917, "ratio_EE_bleu": 0.8923653630416829, "ratio_EE_bleurt": 0.8092844179539852, "ratio_EE_gleu": 0.8936818751808624, "ratio_AG_rouge": 0.946375, "ratio_AG_bleu": 0.9133854178583629, "ratio_AG_bleurt": 0.8174024680386379, "ratio_AG_gleu": 0.9132828630419821, "ratio_SR_rouge": 0.77, "ratio_SR_bleu": 0.6369780586841886, "ratio_SR_bleurt": 0.42953422596658014, "ratio_SR_gleu": 0.681422351233672}, {"prompt": "Given \\hat{\\mathbf{x}}{(C_{2})} = \\sin{(C_{2})}, then derive c + \\hat{\\mathbf{x}}{(C_{2})} = \\varepsilon + \\sin{(C_{2})}, then obtain \\frac{\\partial}{\\partial C_{2}} (\\varepsilon + c + 2 \\sin{(C_{2})}) = \\frac{\\partial}{\\partial C_{2}} (2 \\varepsilon + 2 \\sin{(C_{2})})", "derivation": "\\hat{\\mathbf{x}}{(C_{2})} = \\sin{(C_{2})} and \\frac{d}{d C_{2}} \\hat{\\mathbf{x}}{(C_{2})} = \\frac{d}{d C_{2}} \\sin{(C_{2})} and \\int \\frac{d}{d C_{2}} \\hat{\\mathbf{x}}{(C_{2})} dC_{2} = \\int \\frac{d}{d C_{2}} \\sin{(C_{2})} dC_{2} and c + \\hat{\\mathbf{x}}{(C_{2})} = \\varepsilon + \\sin{(C_{2})} and c + \\hat{\\mathbf{x}}{(C_{2})} = \\varepsilon + \\hat{\\mathbf{x}}{(C_{2})} and c + \\sin{(C_{2})} = \\varepsilon + \\sin{(C_{2})} and \\varepsilon + c + 2 \\sin{(C_{2})} = 2 \\varepsilon + 2 \\sin{(C_{2})} and \\frac{\\partial}{\\partial C_{2}} (\\varepsilon + c + 2 \\sin{(C_{2})}) = \\frac{\\partial}{\\partial C_{2}} (2 \\varepsilon + 2 \\sin{(C_{2})})", "srepr_derivation": [["premise", "Equality(Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True)), sin(Symbol('C_2', commutative=True)))"], [["differentiate", 1, "Symbol('C_2', commutative=True)"], "Equality(Derivative(Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Derivative(sin(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))))"], [["integrate", 2, "Symbol('C_2', commutative=True)"], "Equality(Integral(Derivative(Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Tuple(Symbol('C_2', commutative=True))), Integral(Derivative(sin(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Tuple(Symbol('C_2', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('c', commutative=True), Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), sin(Symbol('C_2', commutative=True))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Add(Symbol('c', commutative=True), Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True))))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Add(Symbol('c', commutative=True), sin(Symbol('C_2', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), sin(Symbol('C_2', commutative=True))))"], [["add", 6, "Add(Symbol('\\\\varepsilon', commutative=True), sin(Symbol('C_2', commutative=True)))"], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), Symbol('c', commutative=True), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))), Add(Mul(Integer(2), Symbol('\\\\varepsilon', commutative=True)), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))))"], [["differentiate", 7, "Symbol('C_2', commutative=True)"], "Equality(Derivative(Add(Symbol('\\\\varepsilon', commutative=True), Symbol('c', commutative=True), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))), Tuple(Symbol('C_2', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(2), Symbol('\\\\varepsilon', commutative=True)), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))), Tuple(Symbol('C_2', commutative=True), Integer(1))))"]], "EE prompt": "Given \\sin{(C_{2})} = \\hat{\\mathbf{x}}{(C_{2})}, then derive \\varepsilon + \\sin{(C_{2})} = c + \\hat{\\mathbf{x}}{(C_{2})}, then obtain \\frac{\\partial}{\\partial C_{2}} (2 \\varepsilon + 2 \\sin{(C_{2})}) = \\frac{\\partial}{\\partial C_{2}} (\\varepsilon + c + 2 \\sin{(C_{2})})", "EE derivation": "\\sin{(C_{2})} = \\hat{\\mathbf{x}}{(C_{2})} and \\frac{d}{d C_{2}} \\sin{(C_{2})} = \\frac{d}{d C_{2}} \\hat{\\mathbf{x}}{(C_{2})} and \\int \\frac{d}{d C_{2}} \\sin{(C_{2})} dC_{2} = \\int \\frac{d}{d C_{2}} \\hat{\\mathbf{x}}{(C_{2})} dC_{2} and \\varepsilon + \\sin{(C_{2})} = c + \\hat{\\mathbf{x}}{(C_{2})} and \\varepsilon + \\hat{\\mathbf{x}}{(C_{2})} = c + \\hat{\\mathbf{x}}{(C_{2})} and \\varepsilon + \\sin{(C_{2})} = c + \\sin{(C_{2})} and 2 \\varepsilon + 2 \\sin{(C_{2})} = \\varepsilon + c + 2 \\sin{(C_{2})} and \\frac{\\partial}{\\partial C_{2}} (2 \\varepsilon + 2 \\sin{(C_{2})}) = \\frac{\\partial}{\\partial C_{2}} (\\varepsilon + c + 2 \\sin{(C_{2})})", "EE srepr_derivation": [["premise", "Equality(sin(Symbol('C_2', commutative=True)), Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True)))"], [["differentiate", 1, "Symbol('C_2', commutative=True)"], "Equality(Derivative(sin(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Derivative(Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))))"], [["integrate", 2, "Symbol('C_2', commutative=True)"], "Equality(Integral(Derivative(sin(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Tuple(Symbol('C_2', commutative=True))), Integral(Derivative(Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Tuple(Symbol('C_2', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), sin(Symbol('C_2', commutative=True))), Add(Symbol('c', commutative=True), Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True))), Add(Symbol('c', commutative=True), Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True))))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), sin(Symbol('C_2', commutative=True))), Add(Symbol('c', commutative=True), sin(Symbol('C_2', commutative=True))))"], [["add", 6, "Add(Symbol('\\\\varepsilon', commutative=True), sin(Symbol('C_2', commutative=True)))"], "Equality(Add(Mul(Integer(2), Symbol('\\\\varepsilon', commutative=True)), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))), Add(Symbol('\\\\varepsilon', commutative=True), Symbol('c', commutative=True), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))))"], [["differentiate", 7, "Symbol('C_2', commutative=True)"], "Equality(Derivative(Add(Mul(Integer(2), Symbol('\\\\varepsilon', commutative=True)), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))), Tuple(Symbol('C_2', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\varepsilon', commutative=True), Symbol('c', commutative=True), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))), Tuple(Symbol('C_2', commutative=True), Integer(1))))"]], "AG prompt": "Given \\hat{\\mathbf{x}}{(C_{2})} = \\sin{(C_{2})}, then derive c + \\hat{\\mathbf{x}}{(C_{2})} = \\varepsilon + \\sin{(C_{2})}, then obtain (2 \\varepsilon + 2 \\sin{(C_{2})}) (\\varepsilon + c + 2 \\sin{(C_{2})}) = (2 \\varepsilon + 2 \\sin{(C_{2})})^{2}", "AG derivation": "\\hat{\\mathbf{x}}{(C_{2})} = \\sin{(C_{2})} and \\frac{d}{d C_{2}} \\hat{\\mathbf{x}}{(C_{2})} = \\frac{d}{d C_{2}} \\sin{(C_{2})} and \\int \\frac{d}{d C_{2}} \\hat{\\mathbf{x}}{(C_{2})} dC_{2} = \\int \\frac{d}{d C_{2}} \\sin{(C_{2})} dC_{2} and c + \\hat{\\mathbf{x}}{(C_{2})} = \\varepsilon + \\sin{(C_{2})} and c + \\hat{\\mathbf{x}}{(C_{2})} = \\varepsilon + \\hat{\\mathbf{x}}{(C_{2})} and c + \\sin{(C_{2})} = \\varepsilon + \\sin{(C_{2})} and \\varepsilon + c + 2 \\sin{(C_{2})} = 2 \\varepsilon + 2 \\sin{(C_{2})} and (2 \\varepsilon + 2 \\sin{(C_{2})}) (\\varepsilon + c + 2 \\sin{(C_{2})}) = (2 \\varepsilon + 2 \\sin{(C_{2})})^{2}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True)), sin(Symbol('C_2', commutative=True)))"], [["differentiate", 1, "Symbol('C_2', commutative=True)"], "Equality(Derivative(Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Derivative(sin(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))))"], [["integrate", 2, "Symbol('C_2', commutative=True)"], "Equality(Integral(Derivative(Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Tuple(Symbol('C_2', commutative=True))), Integral(Derivative(sin(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Tuple(Symbol('C_2', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('c', commutative=True), Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), sin(Symbol('C_2', commutative=True))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Add(Symbol('c', commutative=True), Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True))))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Add(Symbol('c', commutative=True), sin(Symbol('C_2', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), sin(Symbol('C_2', commutative=True))))"], [["add", 6, "Add(Symbol('\\\\varepsilon', commutative=True), sin(Symbol('C_2', commutative=True)))"], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), Symbol('c', commutative=True), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))), Add(Mul(Integer(2), Symbol('\\\\varepsilon', commutative=True)), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))))"], [["times", 7, "Add(Mul(Integer(2), Symbol('\\\\varepsilon', commutative=True)), Mul(Integer(2), sin(Symbol('C_2', commutative=True))))"], "Equality(Mul(Add(Mul(Integer(2), Symbol('\\\\varepsilon', commutative=True)), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))), Add(Symbol('\\\\varepsilon', commutative=True), Symbol('c', commutative=True), Mul(Integer(2), sin(Symbol('C_2', commutative=True))))), Pow(Add(Mul(Integer(2), Symbol('\\\\varepsilon', commutative=True)), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))), Integer(2)))"]], "SR prompt": "Given \\hat{\\mathbf{x}}{(C_{2})} = \\sin{(C_{2})}, then obtain \\frac{\\partial}{\\partial C_{2}} (\\varepsilon + c + 2 \\sin{(C_{2})}) = \\frac{\\partial}{\\partial C_{2}} (2 \\varepsilon + 2 \\sin{(C_{2})})", "SR derivation": "\\hat{\\mathbf{x}}{(C_{2})} = \\sin{(C_{2})} and \\frac{d}{d C_{2}} \\hat{\\mathbf{x}}{(C_{2})} = \\frac{d}{d C_{2}} \\sin{(C_{2})} and \\int \\frac{d}{d C_{2}} \\hat{\\mathbf{x}}{(C_{2})} dC_{2} = \\int \\frac{d}{d C_{2}} \\sin{(C_{2})} dC_{2} and c + \\hat{\\mathbf{x}}{(C_{2})} = \\varepsilon + \\sin{(C_{2})} and c + \\hat{\\mathbf{x}}{(C_{2})} = \\varepsilon + \\hat{\\mathbf{x}}{(C_{2})} and c + \\sin{(C_{2})} = \\varepsilon + \\sin{(C_{2})} and \\varepsilon + c + 2 \\sin{(C_{2})} = 2 \\varepsilon + 2 \\sin{(C_{2})} and \\frac{\\partial}{\\partial C_{2}} (\\varepsilon + c + 2 \\sin{(C_{2})}) = \\frac{\\partial}{\\partial C_{2}} (2 \\varepsilon + 2 \\sin{(C_{2})})", "SR srepr_derivation": [["premise", "Equality(Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True)), sin(Symbol('C_2', commutative=True)))"], [["differentiate", 1, "Symbol('C_2', commutative=True)"], "Equality(Derivative(Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Derivative(sin(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))))"], [["integrate", 2, "Symbol('C_2', commutative=True)"], "Equality(Integral(Derivative(Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Tuple(Symbol('C_2', commutative=True))), Integral(Derivative(sin(Symbol('C_2', commutative=True)), Tuple(Symbol('C_2', commutative=True), Integer(1))), Tuple(Symbol('C_2', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('c', commutative=True), Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), sin(Symbol('C_2', commutative=True))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Add(Symbol('c', commutative=True), Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), Function('\\\\hat{\\\\mathbf{x}}')(Symbol('C_2', commutative=True))))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Add(Symbol('c', commutative=True), sin(Symbol('C_2', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), sin(Symbol('C_2', commutative=True))))"], [["add", 6, "Add(Symbol('\\\\varepsilon', commutative=True), sin(Symbol('C_2', commutative=True)))"], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), Symbol('c', commutative=True), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))), Add(Mul(Integer(2), Symbol('\\\\varepsilon', commutative=True)), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))))"], [["differentiate", 7, "Symbol('C_2', commutative=True)"], "Equality(Derivative(Add(Symbol('\\\\varepsilon', commutative=True), Symbol('c', commutative=True), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))), Tuple(Symbol('C_2', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(2), Symbol('\\\\varepsilon', commutative=True)), Mul(Integer(2), sin(Symbol('C_2', commutative=True)))), Tuple(Symbol('C_2', commutative=True), Integer(1))))"]], "VR prompt": "Given \\tau{(\\upsilon)} = \\sin{(\\upsilon)}, then derive \\iota + \\tau{(\\upsilon)} = \\alpha + \\sin{(\\upsilon)}, then obtain \\frac{\\partial}{\\partial \\upsilon} (\\alpha + \\iota + 2 \\sin{(\\upsilon)}) = \\frac{\\partial}{\\partial \\upsilon} (2 \\alpha + 2 \\sin{(\\upsilon)})", "VR derivation": "\\tau{(\\upsilon)} = \\sin{(\\upsilon)} and \\frac{d}{d \\upsilon} \\tau{(\\upsilon)} = \\frac{d}{d \\upsilon} \\sin{(\\upsilon)} and \\int \\frac{d}{d \\upsilon} \\tau{(\\upsilon)} d\\upsilon = \\int \\frac{d}{d \\upsilon} \\sin{(\\upsilon)} d\\upsilon and \\iota + \\tau{(\\upsilon)} = \\alpha + \\sin{(\\upsilon)} and \\iota + \\tau{(\\upsilon)} = \\alpha + \\tau{(\\upsilon)} and \\iota + \\sin{(\\upsilon)} = \\alpha + \\sin{(\\upsilon)} and \\alpha + \\iota + 2 \\sin{(\\upsilon)} = 2 \\alpha + 2 \\sin{(\\upsilon)} and \\frac{\\partial}{\\partial \\upsilon} (\\alpha + \\iota + 2 \\sin{(\\upsilon)}) = \\frac{\\partial}{\\partial \\upsilon} (2 \\alpha + 2 \\sin{(\\upsilon)})", "VR srepr_derivation": [["premise", "Equality(Function('\\\\tau')(Symbol('\\\\upsilon', commutative=True)), sin(Symbol('\\\\upsilon', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Derivative(Function('\\\\tau')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))))"], [["integrate", 2, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Integral(Derivative(Function('\\\\tau')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Tuple(Symbol('\\\\upsilon', commutative=True))), Integral(Derivative(sin(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Tuple(Symbol('\\\\upsilon', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('\\\\iota', commutative=True), Function('\\\\tau')(Symbol('\\\\upsilon', commutative=True))), Add(Symbol('\\\\alpha', commutative=True), sin(Symbol('\\\\upsilon', commutative=True))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Add(Symbol('\\\\iota', commutative=True), Function('\\\\tau')(Symbol('\\\\upsilon', commutative=True))), Add(Symbol('\\\\alpha', commutative=True), Function('\\\\tau')(Symbol('\\\\upsilon', commutative=True))))"], [["substitute_LHS_for_RHS", 5, 1], "Equality(Add(Symbol('\\\\iota', commutative=True), sin(Symbol('\\\\upsilon', commutative=True))), Add(Symbol('\\\\alpha', commutative=True), sin(Symbol('\\\\upsilon', commutative=True))))"], [["add", 6, "Add(Symbol('\\\\alpha', commutative=True), sin(Symbol('\\\\upsilon', commutative=True)))"], "Equality(Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\iota', commutative=True), Mul(Integer(2), sin(Symbol('\\\\upsilon', commutative=True)))), Add(Mul(Integer(2), Symbol('\\\\alpha', commutative=True)), Mul(Integer(2), sin(Symbol('\\\\upsilon', commutative=True)))))"], [["differentiate", 7, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Derivative(Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\iota', commutative=True), Mul(Integer(2), sin(Symbol('\\\\upsilon', commutative=True)))), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(2), Symbol('\\\\alpha', commutative=True)), Mul(Integer(2), sin(Symbol('\\\\upsilon', commutative=True)))), Tuple(Symbol('\\\\upsilon', commutative=True), Integer(1))))"]], "static_flan-t5-large": "hat { \\ mathbf { x } } { (C_ { 2 } ) } = \\ sin { (C_ { 2 } ) } and \\ frac { d } { d C_ { 2 } } \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } = \\ frac { d } { d C_ { 2 } } \\ sin { (C_ { 2 } ) } and \\ int \\ frac { d } { d C_ { 2 } } \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } dC_ { 2 } = \\ int \\ frac { d } { d C_ { 2 } } \\ sin { (C_ { 2 } ) } dC_ { 2 } and c + \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } = \\ varepsilon + \\ sin { (C_ { 2 } ) } and c + \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } = \\ varepsilon + c and \\ varepsilon + c + \\ sin { (C_ { 2 } ) } = 2 \\ varepsilon + 2 \\ sin { (C_ { 2 } ) } and \\ varepsilon + c + 2 \\ sin { (C_ { 2 } ) } = 2 \\ varepsilon + 2 \\ sin { (C_ { 2 } ) } and \\ frac { \\ partial } { \\ partial C_ { 2 } } ( \\ varepsilon + c + 2 \\ sin { (C_ { 2 } ) } ) = \\ frac { \\ partial } { \\ partial C_ { 2 } } (2 \\ varepsilon + 2 \\ sin { (C_ { 2 } ) } )", "VR_flan-t5-large": "tau { ( \\ upsilon) } = \\ sin { ( \\ upsilon) } and \\ frac { d } { d \\ upsilon } \\ tau { ( \\ upsilon) } = \\ frac { d } { d \\ upsilon } \\ sin { ( \\ upsilon) } and \\ int \\ frac { d } { d \\ upsilon } \\ tau { ( \\ upsilon) } d \\ upsilon = \\ int \\ frac { d } { d \\ upsilon } \\ sin { ( \\ upsilon) } d \\ upsilon and \\ iota + \\ tau { ( \\ upsilon) } = \\ alpha + \\ sin { ( \\ upsilon) } and \\ iota + \\ sin { ( \\ upsilon) } = \\ alpha + \\ sin { ( \\ upsilon) } and \\ iota + \\ sin { ( \\ upsilon) } = \\ alpha + \\ sin { ( \\ upsilon) } and \\ iota + \\ iota + 2 \\ sin { ( \\ upsilon) } = 2 \\ alpha + 2 \\ sin { ( \\ upsilon) } and \\ frac { \\ partial } { \\ partial \\ upsilon } ( \\ iota + \\ iota + 2 \\ sin { ( \\ upsilon) } ) = \\ frac { \\ partial } { \\ partial \\ upsilon } (2 \\ alpha + 2 \\ sin { ( \\ upsilon) } ) and \\ frac { \\ partial } { \\ partial \\ upsilon } ( \\ alpha + \\ iota + 2 \\ sin { ( \\ upsilon) } ) = \\ frac { \\ partial } { \\ partial \\ upsilon } (2 \\ alpha + 2 \\ sin { ( \\ upsilon) } )", "EE_flan-t5-large": "sin { (C_ { 2 } ) } = \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } and \\ frac { d } { d C_ { 2 } } \\ sin { (C_ { 2 } ) } = \\ frac { d } { d C_ { 2 } } \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } and \\ int \\ frac { d } { d C_ { 2 } } \\ sin { (C_ { 2 } ) } dC_ { 2 } = \\ int \\ frac { d } { d C_ { 2 } } \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } dC_ { 2 } and \\ varepsilon + \\ sin { (C_ { 2 } ) } = c + \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } and \\ varepsilon + c + \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } = \\ varepsilon + c + c + \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } and 2 \\ varepsilon + 2 \\ sin { (C_ { 2 } ) } = \\ varepsilon + c + 2 \\ sin { (C_ { 2 } ) } and \\ frac { \\ partial } { \\ partial C_ { 2 } } (2 \\ varepsilon + 2 \\ sin { (C_ { 2 } ) } ) = \\ frac { \\ partial } { \\ partial C_ { 2 } } ( \\ varepsilon + c + 2 \\ sin { (C_ { 2 } ) } )", "AG_flan-t5-large": "hat { \\ mathbf { x } } { (C_ { 2 } ) } = \\ sin { (C_ { 2 } ) } and c + \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } = c + \\ sin { (C_ { 2 } ) } and c + \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } = \\ varepsilon + \\ sin { (C_ { 2 } ) } and \\ varepsilon + c + 2 \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } = 2 \\ varepsilon + 2 \\ sin { (C_ { 2 } ) } and (2 \\ varepsilon + 2 \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } ) ( \\ varepsilon + c + 2 \\ sin { (C_ { 2 } ) } ) = (2 \\ varepsilon + 2 \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } ) ^ { 2 } and (2 \\ varepsilon + 2 \\ sin { (C_ { 2 } ) } ) ( \\ varepsilon + c + 2 \\ sin { (C_ { 2 } ) } ) = (2 \\ varepsilon + 2 \\ sin { (C_ { 2 } ) } ) ^ { 2 }", "SR_flan-t5-large": "hat { \\ mathbf { x } } { (C_ { 2 } ) } = \\ sin { (C_ { 2 } ) } and 2 \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } = \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } + \\ sin { (C_ { 2 } ) } and \\ varepsilon + c + 2 \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } = 2 \\ varepsilon + 2 \\ hat { \\ mathbf { x } } { (C_ { 2 } ) } and \\ varepsilon + c + 2 \\ sin { (C_ { 2 } ) } = 2 \\ varepsilon + 2 \\ sin { (C_ { 2 } ) } and \\ frac { \\ partial } { \\ partial C_ { 2 } } ( \\ varepsilon + c + 2 \\ sin { (C_ { 2 } ) } ) = \\ frac { \\ partial } { \\ partial C_ { 2 } } (2 \\ varepsilon + 2 \\ sin { (C_ { 2 } ) } )", "static_rouge": 0.9372384937238494, "static_bleu": 0.9349670382696633, "static_bleurt": 0.7179477214813232, "static_gleu": 0.9355495251017639, "VR_rouge": 0.09954215864531535, "EE_rouge": 0.00561456209991773, "AG_rouge": 0.16650678640677619, "SR_rouge": 0.23980259628795186, "VR_rouge_abs": -0.0014736477115118163, "EE_rouge_abs": 0.031795422031473564, "AG_rouge_abs": 0.21207117960007338, "SR_rouge_abs": 0.2577319587628867, "VR_bleu": 0.13686022136478637, "EE_bleu": 0.01747247962698706, "AG_bleu": 0.2622477063298543, "SR_bleu": 0.41190047381072226, "VR_bleu_abs": -0.04121104830728173, "EE_bleu_abs": 0.04634908181815822, "AG_bleu_abs": 0.2860447137120894, "SR_bleu_abs": 0.4326195743194332, "VR_bleurt": -0.12661683559417725, "EE_bleurt": -0.08997189998626709, "AG_bleurt": 0.3994257152080536, "SR_bleurt": 0.34788140654563904, "VR_bleurt_abs": -0.049967631697654724, "EE_bleurt_abs": 0.010107874870300293, "AG_bleurt_abs": 0.426281601190567, "SR_bleurt_abs": 0.3734988868236542, "VR_gleu": 0.1372763696857514, "EE_gleu": 0.016282225237449155, "AG_gleu": 0.23652039888817167, "SR_gleu": 0.34328358208955223, "VR_gleu_abs": -0.02658456852675628, "EE_gleu_abs": 0.04597457667550242, "AG_gleu_abs": 0.2628762592866126, "SR_gleu_abs": 0.37060478199718705, "ratio_VR_rouge": 1.0072278911564627, "ratio_VR_bleu": 1.1280763029536667, "ratio_VR_bleurt": 0.7899828473757149, "ratio_VR_gleu": 1.073519050672493, "ratio_EE_rouge": 0.9662349500550723, "ratio_EE_bleu": 0.9523777309647226, "ratio_EE_bleurt": 0.9847126493356779, "ratio_EE_gleu": 0.9527759400559648, "ratio_AG_rouge": 0.7735996866431649, "ratio_AG_bleu": 0.6912298239826842, "ratio_AG_bleurt": 0.46527236436213043, "ratio_AG_gleu": 0.7163399661870666, "ratio_SR_rouge": 0.7422680412371133, "ratio_SR_bleu": 0.5673804256805668, "ratio_SR_bleurt": 0.5314830006578094, "ratio_SR_gleu": 0.629395218002813}, {"prompt": "Given \\hat{\\mathbf{r}}{(U)} = \\cos{(U)}, then derive \\int \\hat{\\mathbf{r}}^{2}{(U)} dU = \\frac{U}{2} + y + \\frac{\\sin{(U)} \\cos{(U)}}{2}, then obtain \\frac{U}{2} + y + \\frac{\\sin{(U)} \\cos{(U)}}{2} = \\int \\cos^{2}{(U)} dU", "derivation": "\\hat{\\mathbf{r}}{(U)} = \\cos{(U)} and \\hat{\\mathbf{r}}^{2}{(U)} = \\hat{\\mathbf{r}}{(U)} \\cos{(U)} and 1 = \\frac{\\cos{(U)}}{\\hat{\\mathbf{r}}{(U)}} and \\hat{\\mathbf{r}}{(U)} \\cos{(U)} = \\cos^{2}{(U)} and \\hat{\\mathbf{r}}^{2}{(U)} = \\cos^{2}{(U)} and \\int \\hat{\\mathbf{r}}^{2}{(U)} dU = \\int \\cos^{2}{(U)} dU and \\int \\hat{\\mathbf{r}}^{2}{(U)} dU = \\frac{U}{2} + y + \\frac{\\sin{(U)} \\cos{(U)}}{2} and \\frac{U}{2} + y + \\frac{\\sin{(U)} \\cos{(U)}}{2} = \\int \\cos^{2}{(U)} dU", "srepr_derivation": [["premise", "Equality(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True)))"], [["times", 1, "Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True))"], "Equality(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)), Mul(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True))))"], [["divide", 2, "Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2))"], "Equality(Integer(1), Mul(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(-1)), cos(Symbol('U', commutative=True))))"], [["times", 3, "Mul(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True)))"], "Equality(Mul(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True))), Pow(cos(Symbol('U', commutative=True)), Integer(2)))"], [["substitute_LHS_for_RHS", 2, 4], "Equality(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)), Pow(cos(Symbol('U', commutative=True)), Integer(2)))"], [["integrate", 5, "Symbol('U', commutative=True)"], "Equality(Integral(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True))), Integral(Pow(cos(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True))))"], [["evaluate_integrals", 6], "Equality(Integral(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True))), Add(Mul(Rational(1, 2), Symbol('U', commutative=True)), Symbol('y', commutative=True), Mul(Rational(1, 2), sin(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True)))))"], [["substitute_LHS_for_RHS", 6, 7], "Equality(Add(Mul(Rational(1, 2), Symbol('U', commutative=True)), Symbol('y', commutative=True), Mul(Rational(1, 2), sin(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True)))), Integral(Pow(cos(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True))))"]], "EE prompt": "Given \\cos{(U)} = \\hat{\\mathbf{r}}{(U)}, then derive \\frac{U}{2} + y + \\frac{\\sin{(U)} \\cos{(U)}}{2} = \\int \\hat{\\mathbf{r}}^{2}{(U)} dU, then obtain \\int \\cos^{2}{(U)} dU = \\frac{U}{2} + y + \\frac{\\sin{(U)} \\cos{(U)}}{2}", "EE derivation": "\\cos{(U)} = \\hat{\\mathbf{r}}{(U)} and \\hat{\\mathbf{r}}{(U)} \\cos{(U)} = \\hat{\\mathbf{r}}^{2}{(U)} and \\frac{\\cos{(U)}}{\\hat{\\mathbf{r}}{(U)}} = 1 and \\cos^{2}{(U)} = \\hat{\\mathbf{r}}{(U)} \\cos{(U)} and \\cos^{2}{(U)} = \\hat{\\mathbf{r}}^{2}{(U)} and \\int \\cos^{2}{(U)} dU = \\int \\hat{\\mathbf{r}}^{2}{(U)} dU and \\frac{U}{2} + y + \\frac{\\sin{(U)} \\cos{(U)}}{2} = \\int \\hat{\\mathbf{r}}^{2}{(U)} dU and \\int \\cos^{2}{(U)} dU = \\frac{U}{2} + y + \\frac{\\sin{(U)} \\cos{(U)}}{2}", "EE srepr_derivation": [["premise", "Equality(cos(Symbol('U', commutative=True)), Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)))"], [["times", 1, "Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True))"], "Equality(Mul(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True))), Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)))"], [["divide", 2, "Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2))"], "Equality(Mul(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(-1)), cos(Symbol('U', commutative=True))), Integer(1))"], [["times", 3, "Mul(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True)))"], "Equality(Pow(cos(Symbol('U', commutative=True)), Integer(2)), Mul(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True))))"], [["substitute_RHS_for_LHS", 2, 4], "Equality(Pow(cos(Symbol('U', commutative=True)), Integer(2)), Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)))"], [["integrate", 5, "Symbol('U', commutative=True)"], "Equality(Integral(Pow(cos(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True))), Integral(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True))))"], [["evaluate_integrals", 6], "Equality(Add(Mul(Rational(1, 2), Symbol('U', commutative=True)), Symbol('y', commutative=True), Mul(Rational(1, 2), sin(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True)))), Integral(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True))))"], [["substitute_RHS_for_LHS", 6, 7], "Equality(Integral(Pow(cos(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True))), Add(Mul(Rational(1, 2), Symbol('U', commutative=True)), Symbol('y', commutative=True), Mul(Rational(1, 2), sin(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True)))))"]], "AG prompt": "Given \\hat{\\mathbf{r}}{(U)} = \\cos{(U)}, then derive \\int \\hat{\\mathbf{r}}^{2}{(U)} dU = \\frac{U}{2} + y + \\frac{\\sin{(U)} \\cos{(U)}}{2}, then obtain - \\frac{U}{2} + \\int \\hat{\\mathbf{r}}^{2}{(U)} dU = y + \\frac{\\sin{(U)} \\cos{(U)}}{2}", "AG derivation": "\\hat{\\mathbf{r}}{(U)} = \\cos{(U)} and \\hat{\\mathbf{r}}^{2}{(U)} = \\hat{\\mathbf{r}}{(U)} \\cos{(U)} and 1 = \\frac{\\cos{(U)}}{\\hat{\\mathbf{r}}{(U)}} and \\hat{\\mathbf{r}}{(U)} \\cos{(U)} = \\cos^{2}{(U)} and \\hat{\\mathbf{r}}^{2}{(U)} = \\cos^{2}{(U)} and \\int \\hat{\\mathbf{r}}^{2}{(U)} dU = \\int \\cos^{2}{(U)} dU and \\int \\hat{\\mathbf{r}}^{2}{(U)} dU = \\frac{U}{2} + y + \\frac{\\sin{(U)} \\cos{(U)}}{2} and - \\frac{U}{2} + \\int \\hat{\\mathbf{r}}^{2}{(U)} dU = y + \\frac{\\sin{(U)} \\cos{(U)}}{2}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True)))"], [["times", 1, "Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True))"], "Equality(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)), Mul(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True))))"], [["divide", 2, "Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2))"], "Equality(Integer(1), Mul(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(-1)), cos(Symbol('U', commutative=True))))"], [["times", 3, "Mul(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True)))"], "Equality(Mul(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True))), Pow(cos(Symbol('U', commutative=True)), Integer(2)))"], [["substitute_LHS_for_RHS", 2, 4], "Equality(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)), Pow(cos(Symbol('U', commutative=True)), Integer(2)))"], [["integrate", 5, "Symbol('U', commutative=True)"], "Equality(Integral(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True))), Integral(Pow(cos(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True))))"], [["evaluate_integrals", 6], "Equality(Integral(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True))), Add(Mul(Rational(1, 2), Symbol('U', commutative=True)), Symbol('y', commutative=True), Mul(Rational(1, 2), sin(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True)))))"], [["minus", 7, "Mul(Rational(1, 2), Symbol('U', commutative=True))"], "Equality(Add(Mul(Integer(-1), Rational(1, 2), Symbol('U', commutative=True)), Integral(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True)))), Add(Symbol('y', commutative=True), Mul(Rational(1, 2), sin(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True)))))"]], "SR prompt": "Given \\hat{\\mathbf{r}}{(U)} = \\cos{(U)}, then obtain \\frac{U}{2} + y + \\frac{\\sin{(U)} \\cos{(U)}}{2} = \\int \\cos^{2}{(U)} dU", "SR derivation": "\\hat{\\mathbf{r}}{(U)} = \\cos{(U)} and \\hat{\\mathbf{r}}^{2}{(U)} = \\hat{\\mathbf{r}}{(U)} \\cos{(U)} and 1 = \\frac{\\cos{(U)}}{\\hat{\\mathbf{r}}{(U)}} and \\hat{\\mathbf{r}}{(U)} \\cos{(U)} = \\cos^{2}{(U)} and \\hat{\\mathbf{r}}^{2}{(U)} = \\cos^{2}{(U)} and \\int \\hat{\\mathbf{r}}^{2}{(U)} dU = \\int \\cos^{2}{(U)} dU and \\int \\hat{\\mathbf{r}}^{2}{(U)} dU = \\frac{U}{2} + y + \\frac{\\sin{(U)} \\cos{(U)}}{2} and \\frac{U}{2} + y + \\frac{\\sin{(U)} \\cos{(U)}}{2} = \\int \\cos^{2}{(U)} dU", "SR srepr_derivation": [["premise", "Equality(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True)))"], [["times", 1, "Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True))"], "Equality(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)), Mul(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True))))"], [["divide", 2, "Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2))"], "Equality(Integer(1), Mul(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(-1)), cos(Symbol('U', commutative=True))))"], [["times", 3, "Mul(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True)))"], "Equality(Mul(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True))), Pow(cos(Symbol('U', commutative=True)), Integer(2)))"], [["substitute_LHS_for_RHS", 2, 4], "Equality(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)), Pow(cos(Symbol('U', commutative=True)), Integer(2)))"], [["integrate", 5, "Symbol('U', commutative=True)"], "Equality(Integral(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True))), Integral(Pow(cos(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True))))"], [["evaluate_integrals", 6], "Equality(Integral(Pow(Function('\\\\hat{\\\\mathbf{r}}')(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True))), Add(Mul(Rational(1, 2), Symbol('U', commutative=True)), Symbol('y', commutative=True), Mul(Rational(1, 2), sin(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True)))))"], [["substitute_LHS_for_RHS", 6, 7], "Equality(Add(Mul(Rational(1, 2), Symbol('U', commutative=True)), Symbol('y', commutative=True), Mul(Rational(1, 2), sin(Symbol('U', commutative=True)), cos(Symbol('U', commutative=True)))), Integral(Pow(cos(Symbol('U', commutative=True)), Integer(2)), Tuple(Symbol('U', commutative=True))))"]], "VR prompt": "Given \\gamma{(\\zeta)} = \\cos{(\\zeta)}, then derive \\int \\gamma^{2}{(\\zeta)} d\\zeta = \\tau + \\frac{\\zeta}{2} + \\frac{\\sin{(\\zeta)} \\cos{(\\zeta)}}{2}, then obtain \\tau + \\frac{\\zeta}{2} + \\frac{\\sin{(\\zeta)} \\cos{(\\zeta)}}{2} = \\int \\cos^{2}{(\\zeta)} d\\zeta", "VR derivation": "\\gamma{(\\zeta)} = \\cos{(\\zeta)} and \\gamma^{2}{(\\zeta)} = \\gamma{(\\zeta)} \\cos{(\\zeta)} and 1 = \\frac{\\cos{(\\zeta)}}{\\gamma{(\\zeta)}} and \\gamma{(\\zeta)} \\cos{(\\zeta)} = \\cos^{2}{(\\zeta)} and \\gamma^{2}{(\\zeta)} = \\cos^{2}{(\\zeta)} and \\int \\gamma^{2}{(\\zeta)} d\\zeta = \\int \\cos^{2}{(\\zeta)} d\\zeta and \\int \\gamma^{2}{(\\zeta)} d\\zeta = \\tau + \\frac{\\zeta}{2} + \\frac{\\sin{(\\zeta)} \\cos{(\\zeta)}}{2} and \\tau + \\frac{\\zeta}{2} + \\frac{\\sin{(\\zeta)} \\cos{(\\zeta)}}{2} = \\int \\cos^{2}{(\\zeta)} d\\zeta", "VR srepr_derivation": [["premise", "Equality(Function('\\\\gamma')(Symbol('\\\\zeta', commutative=True)), cos(Symbol('\\\\zeta', commutative=True)))"], [["times", 1, "Function('\\\\gamma')(Symbol('\\\\zeta', commutative=True))"], "Equality(Pow(Function('\\\\gamma')(Symbol('\\\\zeta', commutative=True)), Integer(2)), Mul(Function('\\\\gamma')(Symbol('\\\\zeta', commutative=True)), cos(Symbol('\\\\zeta', commutative=True))))"], [["divide", 2, "Pow(Function('\\\\gamma')(Symbol('\\\\zeta', commutative=True)), Integer(2))"], "Equality(Integer(1), Mul(Pow(Function('\\\\gamma')(Symbol('\\\\zeta', commutative=True)), Integer(-1)), cos(Symbol('\\\\zeta', commutative=True))))"], [["times", 3, "Mul(Function('\\\\gamma')(Symbol('\\\\zeta', commutative=True)), cos(Symbol('\\\\zeta', commutative=True)))"], "Equality(Mul(Function('\\\\gamma')(Symbol('\\\\zeta', commutative=True)), cos(Symbol('\\\\zeta', commutative=True))), Pow(cos(Symbol('\\\\zeta', commutative=True)), Integer(2)))"], [["substitute_LHS_for_RHS", 2, 4], "Equality(Pow(Function('\\\\gamma')(Symbol('\\\\zeta', commutative=True)), Integer(2)), Pow(cos(Symbol('\\\\zeta', commutative=True)), Integer(2)))"], [["integrate", 5, "Symbol('\\\\zeta', commutative=True)"], "Equality(Integral(Pow(Function('\\\\gamma')(Symbol('\\\\zeta', commutative=True)), Integer(2)), Tuple(Symbol('\\\\zeta', commutative=True))), Integral(Pow(cos(Symbol('\\\\zeta', commutative=True)), Integer(2)), Tuple(Symbol('\\\\zeta', commutative=True))))"], [["evaluate_integrals", 6], "Equality(Integral(Pow(Function('\\\\gamma')(Symbol('\\\\zeta', commutative=True)), Integer(2)), Tuple(Symbol('\\\\zeta', commutative=True))), Add(Symbol('\\\\tau', commutative=True), Mul(Rational(1, 2), Symbol('\\\\zeta', commutative=True)), Mul(Rational(1, 2), sin(Symbol('\\\\zeta', commutative=True)), cos(Symbol('\\\\zeta', commutative=True)))))"], [["substitute_LHS_for_RHS", 6, 7], "Equality(Add(Symbol('\\\\tau', commutative=True), Mul(Rational(1, 2), Symbol('\\\\zeta', commutative=True)), Mul(Rational(1, 2), sin(Symbol('\\\\zeta', commutative=True)), cos(Symbol('\\\\zeta', commutative=True)))), Integral(Pow(cos(Symbol('\\\\zeta', commutative=True)), Integer(2)), Tuple(Symbol('\\\\zeta', commutative=True))))"]], "static_flan-t5-large": "hat { \\ mathbf { r } } { (U) } = \\ cos { (U) } and \\ hat { \\ mathbf { r } } ^ { 2 } { (U) } = \\ hat { \\ mathbf { r } } { (U) } \\ cos { (U) } and \\ int \\ hat { \\ mathbf { r } } ^ { 2 } { (U) } dU = \\ int \\ hat { \\ mathbf { r } } { (U) } \\ cos { (U) } dU and \\ int \\ hat { \\ mathbf { r } } ^ { 2 } { (U) } dU = \\ frac { U } { 2 } + y + \\ frac { \\ sin { (U) } \\ cos { (U) } } { 2 } and \\ frac { U } { 2 } + y + \\ frac { \\ sin { (U) } \\ cos { (U) } } { 2 } = \\ int \\ cos ^ { 2 } { (U) } dU", "VR_flan-t5-large": "gamma { ( \\ zeta) } = \\ cos { ( \\ zeta) } and \\ gamma ^ { 2 } { ( \\ zeta) } = \\ gamma { ( \\ zeta) } \\ cos { ( \\ zeta) } and \\ int \\ gamma ^ { 2 } { ( \\ zeta) } d \\ zeta = \\ int \\ cos ^ { 2 } { ( \\ zeta) } d \\ zeta and \\ int \\ gamma ^ { 2 } { ( \\ zeta) } d \\ zeta = \\ tau + \\ frac { \\ zeta } { 2 } + \\ frac { \\ sin { ( \\ zeta) } \\ cos { ( \\ zeta) } } { 2 } and \\ tau + \\ frac { \\ zeta } { 2 } + \\ frac { \\ sin { ( \\ zeta) } \\ cos { ( \\ zeta) } } { 2 } = \\ int \\ cos ^ { 2 } { ( \\ zeta) } d \\ zeta", "EE_flan-t5-large": "cos { (U) } = \\ hat { \\ mathbf { r } } { (U) } and \\ hat { \\ mathbf { r } } ^ { 2 } { (U) } = \\ hat { \\ mathbf { r } } { (U) } \\ cos { (U) } and \\ int \\ hat { \\ mathbf { r } } ^ { 2 } { (U) } dU = \\ int \\ hat { \\ mathbf { r } } ^ { 2 } { (U) } dU and \\ frac { U } { 2 } + y + \\ frac { \\ sin { (U) } \\ cos { (U) } } { 2 } = \\ frac { U } { 2 } + y + \\ frac { \\ sin { (U) } \\ cos { (U) } } { 2 }", "AG_flan-t5-large": "hat { \\ mathbf { r } } { (U) } = \\ cos { (U) } and \\ hat { \\ mathbf { r } } ^ { 2 } { (U) } = \\ hat { \\ mathbf { r } } { (U) } \\ cos { (U) } and \\ int \\ hat { \\ mathbf { r } } ^ { 2 } { (U) } dU = \\ int \\ hat { \\ mathbf { r } } { (U) } \\ cos { (U) } dU and \\ int \\ hat { \\ mathbf { r } } ^ { 2 } { (U) } dU = \\ frac { U } { 2 } + y + \\ frac { \\ sin { (U) } \\ cos { (U) } } { 2 } and - \\ frac { U } { 2 } + \\ int \\ hat { \\ mathbf { r } } ^ { 2 } { (U) } dU = y + \\ frac { \\ sin { (U) } \\ cos { (U) } } { 2 }", "SR_flan-t5-large": "hat { \\ mathbf { r } } { (U) } = \\ cos { (U) } and \\ hat { \\ mathbf { r } } ^ { 2 } { (U) } = \\ hat { \\ mathbf { r } } { (U) } \\ cos { (U) } and \\ hat { \\ mathbf { r } } ^ { 2 } { (U) } \\ cos { (U) } = \\ hat { \\ mathbf { r } } { (U) } \\ cos { (U) } and \\ int \\ hat { \\ mathbf { r } } ^ { 2 } { (U) } dU = \\ int \\ cos ^ { 2 } { (U) } dU and \\ frac { U } { 2 } + y + \\ frac { \\ sin { (U) } \\ cos { (U) } } { 2 } = \\ int \\ cos ^ { 2 } { (U) } dU", "static_rouge": 0.830188679245283, "static_bleu": 0.6641431524376732, "static_bleurt": 0.4887191951274872, "static_gleu": 0.7074198988195616, "VR_rouge": -0.010391030899644549, "EE_rouge": 0.11294729993493824, "AG_rouge": -0.004167148975576018, "SR_rouge": 0.04071499503475662, "VR_rouge_abs": 0.04641860465116282, "EE_rouge_abs": 0.052173913043478404, "AG_rouge_abs": 0.015812776723592714, "SR_rouge_abs": 0.14960629921259838, "VR_bleu": 0.011733969907022801, "EE_bleu": 0.18417802237166214, "AG_bleu": -0.009959180996072181, "SR_bleu": 0.07756004582135478, "VR_bleu_abs": 0.051177719256068066, "EE_bleu_abs": 0.1826372043218235, "AG_bleu_abs": 0.020549162177625258, "SR_bleu_abs": 0.12437168523835318, "VR_bleurt": 0.05768275260925293, "EE_bleurt": 0.07063400745391846, "AG_bleurt": -0.07519236207008362, "SR_bleurt": -0.10642698407173157, "VR_bleurt_abs": 0.13690289109945297, "EE_bleurt_abs": 0.20417165756225586, "AG_bleurt_abs": 0.06670469045639038, "SR_bleurt_abs": 0.10724073648452759, "VR_gleu": 0.008337330012222144, "EE_gleu": 0.13322091062394603, "AG_gleu": -0.007686833528550041, "SR_gleu": 0.05817875210792578, "VR_gleu_abs": 0.04514065522945848, "EE_gleu_abs": 0.16560786371483616, "AG_gleu_abs": 0.0203582419316658, "SR_gleu_abs": 0.12114014251781469, "ratio_VR_rouge": 0.7338666666666666, "ratio_VR_bleu": 0.8989029737081996, "ratio_VR_bleurt": -0.20602655073280304, "ratio_VR_gleu": 0.9142038187465741, "ratio_EE_rouge": 0.9421686746987951, "ratio_EE_bleu": 0.8115681871518812, "ratio_EE_bleurt": 0.7158218250847989, "ratio_EE_gleu": 0.8292078901166994, "ratio_AG_rouge": 0.9834765366820886, "ratio_AG_bleu": 0.9783255522213287, "ratio_AG_bleurt": 0.9203317917026731, "ratio_AG_gleu": 0.9785313085084252, "ratio_SR_rouge": 0.8503937007874016, "ratio_SR_bleu": 0.8756283147616468, "ratio_SR_bleurt": 0.8719178925237094, "ratio_SR_gleu": 0.8788598574821853}, {"prompt": "Given \\operatorname{v_{x}}{(G,L)} = G - L, then derive \\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)} = 1, then obtain (((\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G})^{G})^{G} = 1", "derivation": "\\operatorname{v_{x}}{(G,L)} = G - L and L + \\operatorname{v_{x}}{(G,L)} = G and \\frac{\\partial}{\\partial G} (L + \\operatorname{v_{x}}{(G,L)}) = \\frac{d}{d G} G and \\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)} = 1 and (\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G} = 1 and ((\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G})^{G} = 1 and (((\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G})^{G})^{G} = 1", "srepr_derivation": [["premise", "Equality(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Add(Symbol('G', commutative=True), Mul(Integer(-1), Symbol('L', commutative=True))))"], [["add", 1, "Symbol('L', commutative=True)"], "Equality(Add(Symbol('L', commutative=True), Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True))), Symbol('G', commutative=True))"], [["differentiate", 2, "Symbol('G', commutative=True)"], "Equality(Derivative(Add(Symbol('L', commutative=True), Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True))), Tuple(Symbol('G', commutative=True), Integer(1))), Derivative(Symbol('G', commutative=True), Tuple(Symbol('G', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Integer(1))"], [["power", 4, "Symbol('G', commutative=True)"], "Equality(Pow(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Symbol('G', commutative=True)), Integer(1))"], [["power", 5, "Symbol('G', commutative=True)"], "Equality(Pow(Pow(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Symbol('G', commutative=True)), Symbol('G', commutative=True)), Integer(1))"], [["power", 6, "Symbol('G', commutative=True)"], "Equality(Pow(Pow(Pow(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Symbol('G', commutative=True)), Symbol('G', commutative=True)), Symbol('G', commutative=True)), Integer(1))"]], "EE prompt": "Given G - L = \\operatorname{v_{x}}{(G,L)}, then derive 1 = \\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)}, then obtain 1 = (((\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G})^{G})^{G}", "EE derivation": "G - L = \\operatorname{v_{x}}{(G,L)} and G = L + \\operatorname{v_{x}}{(G,L)} and \\frac{d}{d G} G = \\frac{\\partial}{\\partial G} (L + \\operatorname{v_{x}}{(G,L)}) and 1 = \\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)} and 1 = (\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G} and 1 = ((\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G})^{G} and 1 = (((\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G})^{G})^{G}", "EE srepr_derivation": [["premise", "Equality(Add(Symbol('G', commutative=True), Mul(Integer(-1), Symbol('L', commutative=True))), Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)))"], [["add", 1, "Symbol('L', commutative=True)"], "Equality(Symbol('G', commutative=True), Add(Symbol('L', commutative=True), Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True))))"], [["differentiate", 2, "Symbol('G', commutative=True)"], "Equality(Derivative(Symbol('G', commutative=True), Tuple(Symbol('G', commutative=True), Integer(1))), Derivative(Add(Symbol('L', commutative=True), Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True))), Tuple(Symbol('G', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Integer(1), Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))))"], [["power", 4, "Symbol('G', commutative=True)"], "Equality(Integer(1), Pow(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Symbol('G', commutative=True)))"], [["power", 5, "Symbol('G', commutative=True)"], "Equality(Integer(1), Pow(Pow(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Symbol('G', commutative=True)), Symbol('G', commutative=True)))"], [["power", 6, "Symbol('G', commutative=True)"], "Equality(Integer(1), Pow(Pow(Pow(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Symbol('G', commutative=True)), Symbol('G', commutative=True)), Symbol('G', commutative=True)))"]], "AG prompt": "Given \\operatorname{v_{x}}{(G,L)} = G - L, then derive \\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)} = 1, then obtain ((\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G})^{G} + \\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)} = \\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)} + 1", "AG derivation": "\\operatorname{v_{x}}{(G,L)} = G - L and L + \\operatorname{v_{x}}{(G,L)} = G and \\frac{\\partial}{\\partial G} (L + \\operatorname{v_{x}}{(G,L)}) = \\frac{d}{d G} G and \\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)} = 1 and (\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G} = 1 and ((\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G})^{G} = 1 and ((\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G})^{G} + \\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)} = \\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)} + 1", "AG srepr_derivation": [["premise", "Equality(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Add(Symbol('G', commutative=True), Mul(Integer(-1), Symbol('L', commutative=True))))"], [["add", 1, "Symbol('L', commutative=True)"], "Equality(Add(Symbol('L', commutative=True), Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True))), Symbol('G', commutative=True))"], [["differentiate", 2, "Symbol('G', commutative=True)"], "Equality(Derivative(Add(Symbol('L', commutative=True), Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True))), Tuple(Symbol('G', commutative=True), Integer(1))), Derivative(Symbol('G', commutative=True), Tuple(Symbol('G', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Integer(1))"], [["power", 4, "Symbol('G', commutative=True)"], "Equality(Pow(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Symbol('G', commutative=True)), Integer(1))"], [["power", 5, "Symbol('G', commutative=True)"], "Equality(Pow(Pow(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Symbol('G', commutative=True)), Symbol('G', commutative=True)), Integer(1))"], [["add", 6, "Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1)))"], "Equality(Add(Pow(Pow(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Symbol('G', commutative=True)), Symbol('G', commutative=True)), Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1)))), Add(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Integer(1)))"]], "SR prompt": "Given \\operatorname{v_{x}}{(G,L)} = G - L, then obtain (((\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G})^{G})^{G} = 1", "SR derivation": "\\operatorname{v_{x}}{(G,L)} = G - L and L + \\operatorname{v_{x}}{(G,L)} = G and \\frac{\\partial}{\\partial G} (L + \\operatorname{v_{x}}{(G,L)}) = \\frac{d}{d G} G and \\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)} = 1 and (\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G} = 1 and ((\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G})^{G} = 1 and (((\\frac{\\partial}{\\partial G} \\operatorname{v_{x}}{(G,L)})^{G})^{G})^{G} = 1", "SR srepr_derivation": [["premise", "Equality(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Add(Symbol('G', commutative=True), Mul(Integer(-1), Symbol('L', commutative=True))))"], [["add", 1, "Symbol('L', commutative=True)"], "Equality(Add(Symbol('L', commutative=True), Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True))), Symbol('G', commutative=True))"], [["differentiate", 2, "Symbol('G', commutative=True)"], "Equality(Derivative(Add(Symbol('L', commutative=True), Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True))), Tuple(Symbol('G', commutative=True), Integer(1))), Derivative(Symbol('G', commutative=True), Tuple(Symbol('G', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Integer(1))"], [["power", 4, "Symbol('G', commutative=True)"], "Equality(Pow(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Symbol('G', commutative=True)), Integer(1))"], [["power", 5, "Symbol('G', commutative=True)"], "Equality(Pow(Pow(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Symbol('G', commutative=True)), Symbol('G', commutative=True)), Integer(1))"], [["power", 6, "Symbol('G', commutative=True)"], "Equality(Pow(Pow(Pow(Derivative(Function('v_x')(Symbol('G', commutative=True), Symbol('L', commutative=True)), Tuple(Symbol('G', commutative=True), Integer(1))), Symbol('G', commutative=True)), Symbol('G', commutative=True)), Symbol('G', commutative=True)), Integer(1))"]], "VR prompt": "Given \\gamma{(\\beta,\\kappa)} = \\beta - \\kappa, then derive \\frac{\\partial}{\\partial \\beta} \\gamma{(\\beta,\\kappa)} = 1, then obtain (((\\frac{\\partial}{\\partial \\beta} \\gamma{(\\beta,\\kappa)})^{\\beta})^{\\beta})^{\\beta} = 1", "VR derivation": "\\gamma{(\\beta,\\kappa)} = \\beta - \\kappa and \\kappa + \\gamma{(\\beta,\\kappa)} = \\beta and \\frac{\\partial}{\\partial \\beta} (\\kappa + \\gamma{(\\beta,\\kappa)}) = \\frac{d}{d \\beta} \\beta and \\frac{\\partial}{\\partial \\beta} \\gamma{(\\beta,\\kappa)} = 1 and (\\frac{\\partial}{\\partial \\beta} \\gamma{(\\beta,\\kappa)})^{\\beta} = 1 and ((\\frac{\\partial}{\\partial \\beta} \\gamma{(\\beta,\\kappa)})^{\\beta})^{\\beta} = 1 and (((\\frac{\\partial}{\\partial \\beta} \\gamma{(\\beta,\\kappa)})^{\\beta})^{\\beta})^{\\beta} = 1", "VR srepr_derivation": [["premise", "Equality(Function('\\\\gamma')(Symbol('\\\\beta', commutative=True), Symbol('\\\\kappa', commutative=True)), Add(Symbol('\\\\beta', commutative=True), Mul(Integer(-1), Symbol('\\\\kappa', commutative=True))))"], [["add", 1, "Symbol('\\\\kappa', commutative=True)"], "Equality(Add(Symbol('\\\\kappa', commutative=True), Function('\\\\gamma')(Symbol('\\\\beta', commutative=True), Symbol('\\\\kappa', commutative=True))), Symbol('\\\\beta', commutative=True))"], [["differentiate", 2, "Symbol('\\\\beta', commutative=True)"], "Equality(Derivative(Add(Symbol('\\\\kappa', commutative=True), Function('\\\\gamma')(Symbol('\\\\beta', commutative=True), Symbol('\\\\kappa', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Derivative(Symbol('\\\\beta', commutative=True), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('\\\\gamma')(Symbol('\\\\beta', commutative=True), Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Integer(1))"], [["power", 4, "Symbol('\\\\beta', commutative=True)"], "Equality(Pow(Derivative(Function('\\\\gamma')(Symbol('\\\\beta', commutative=True), Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Symbol('\\\\beta', commutative=True)), Integer(1))"], [["power", 5, "Symbol('\\\\beta', commutative=True)"], "Equality(Pow(Pow(Derivative(Function('\\\\gamma')(Symbol('\\\\beta', commutative=True), Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Symbol('\\\\beta', commutative=True)), Symbol('\\\\beta', commutative=True)), Integer(1))"], [["power", 6, "Symbol('\\\\beta', commutative=True)"], "Equality(Pow(Pow(Pow(Derivative(Function('\\\\gamma')(Symbol('\\\\beta', commutative=True), Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Symbol('\\\\beta', commutative=True)), Symbol('\\\\beta', commutative=True)), Symbol('\\\\beta', commutative=True)), Integer(1))"]], "static_flan-t5-large": "operatorname { v_ { x } } { (G,L) } = G - L and \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } = \\ frac { \\ partial } { \\ partial G } (G - L) and \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } = 1 and ( \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } ) ^ { G } = 1 and (( \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } ) ^ { G } ) ^ { G } = 1", "VR_flan-t5-large": "gamma { ( \\ beta, \\ kappa) } = \\ beta - \\ kappa and \\ frac { \\ partial } { \\ partial \\ beta } \\ gamma { ( \\ beta, \\ kappa) } = \\ frac { \\ partial } { \\ partial \\ beta } ( \\ beta - \\ kappa) and \\ frac { \\ partial } { \\ partial \\ beta } \\ gamma { ( \\ beta, \\ kappa) } = 1 and ( \\ frac { \\ partial } { \\ partial \\ beta } \\ gamma { ( \\ beta, \\ kappa) } ) ^ { \\ beta } = 1 and (( \\ frac { \\ partial } { \\ partial \\ beta } \\ gamma { ( \\ beta, \\ kappa) } ) ^ { \\ beta } ) ^ { \\ beta } = 1", "EE_flan-t5-large": "operatorname { v_ { x } } { (G,L) } = \\ operatorname { v_ { x } } { (G,L) } and \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } = \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } and 1 = \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } and 1 = \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } and 1 = ( \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } ) ^ { G } and 1 = (( \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } ) ^ { G } ) ^ { G } and 1 = ((( \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } ) ^ { G } ) ^ { G } ) ^ { G }", "AG_flan-t5-large": "operatorname { v_ { x } } { (G,L) } = G - L and \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } = \\ frac { \\ partial } { \\ partial G } (G - L) and \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } = 1 and ( \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } ) ^ { G } = 1 and (( \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } ) ^ { G } ) ^ { G } = 1 and (( \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } ) ^ { G } ) ^ { G } + \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } = \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } + 1", "SR_flan-t5-large": "operatorname { v_ { x } } { (G,L) } = G - L and \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } = \\ frac { \\ partial } { \\ partial G } (G - L) and ( \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } ) ^ { G } = ( \\ frac { \\ partial } { \\ partial G } (G - L)) ^ { G } and (( \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } ) ^ { G } ) ^ { G } = (( \\ frac { \\ partial } { \\ partial G } (G - L)) ^ { G } ) ^ { G } and ((( \\ frac { \\ partial } { \\ partial G } \\ operatorname { v_ { x } } { (G,L) } ) ^ { G } ) ^ { G } ) ^ { G } = 1", "static_rouge": 0.8260869565217391, "static_bleu": 0.6504389037065934, "static_bleurt": 0.5282822847366333, "static_gleu": 0.6907756813417191, "VR_rouge": 0.0015255530129671957, "EE_rouge": -0.01414972986879337, "AG_rouge": -0.07713884992987374, "SR_rouge": 0.033879164313946886, "VR_rouge_abs": -0.02791418971310411, "EE_rouge_abs": 0.1322278911564626, "AG_rouge_abs": 0.09224028594488654, "SR_rouge_abs": 0.18181818181818188, "VR_bleu": 0.0022279968926094407, "EE_bleu": -0.14871181333760963, "AG_bleu": -0.23186620343897446, "SR_bleu": -0.13103205830512832, "VR_bleu_abs": -0.020576931930790077, "EE_bleu_abs": 0.34156509679655955, "AG_bleu_abs": 0.17076971985946732, "SR_bleu_abs": 0.30897407274080935, "VR_bleurt": -0.0576249361038208, "EE_bleurt": 0.019116520881652832, "AG_bleurt": -0.1783459186553955, "SR_bleurt": -0.030663132667541504, "VR_bleurt_abs": 0.021571815013885498, "EE_bleurt_abs": -0.16422772407531738, "AG_bleurt_abs": 0.011327207088470459, "SR_bleurt_abs": 0.07102072238922119, "VR_gleu": 0.0011594285200486887, "EE_gleu": -0.10922431865828097, "AG_gleu": -0.19397301883159113, "SR_gleu": -0.09433962264150941, "VR_gleu_abs": -0.018068696705337006, "EE_gleu_abs": 0.3424903352374359, "AG_gleu_abs": 0.17088323667334726, "SR_gleu_abs": 0.30866807610993663, "ratio_VR_rouge": 1.10188679245283, "ratio_VR_bleu": 1.0496814561127883, "ratio_VR_bleurt": 1.1191127079912049, "ratio_VR_gleu": 1.0415362329081723, "ratio_EE_rouge": 0.837257980115123, "ratio_EE_bleu": 0.6191873997312805, "ratio_EE_bleurt": 1.2767917884391518, "ratio_EE_gleu": 0.6191890678129209, "ratio_AG_rouge": 0.8953427524856096, "ratio_AG_bleu": 0.7880666534128986, "ratio_AG_bleurt": 0.9866372202065363, "ratio_AG_gleu": 0.7879577901924272, "ratio_SR_rouge": 0.8181818181818181, "ratio_SR_bleu": 0.6910259272591907, "ratio_SR_bleurt": 0.9170126995580158, "ratio_SR_gleu": 0.6913319238900634}, {"prompt": "Given \\operatorname{A_{1}}{(\\theta_1)} = \\cos{(\\theta_1)}, then derive \\int \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} d\\theta_1 = \\frac{\\theta_1}{2} + t_{2} + \\frac{\\sin{(\\theta_1)} \\cos{(\\theta_1)}}{2}, then obtain \\frac{\\theta_1}{2} + t_{2} + \\frac{\\sin{(\\theta_1)} \\cos{(\\theta_1)}}{2} = \\int \\cos^{2}{(\\theta_1)} d\\theta_1", "derivation": "\\operatorname{A_{1}}{(\\theta_1)} = \\cos{(\\theta_1)} and \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} = \\cos^{2}{(\\theta_1)} and \\int \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} d\\theta_1 = \\int \\cos^{2}{(\\theta_1)} d\\theta_1 and \\int \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} d\\theta_1 = \\frac{\\theta_1}{2} + t_{2} + \\frac{\\sin{(\\theta_1)} \\cos{(\\theta_1)}}{2} and \\frac{\\theta_1}{2} + t_{2} + \\frac{\\sin{(\\theta_1)} \\cos{(\\theta_1)}}{2} = \\int \\cos^{2}{(\\theta_1)} d\\theta_1", "srepr_derivation": [["premise", "Equality(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True)))"], [["times", 1, "cos(Symbol('\\\\theta_1', commutative=True))"], "Equality(Mul(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True))), Pow(cos(Symbol('\\\\theta_1', commutative=True)), Integer(2)))"], [["integrate", 2, "Symbol('\\\\theta_1', commutative=True)"], "Equality(Integral(Mul(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True))), Tuple(Symbol('\\\\theta_1', commutative=True))), Integral(Pow(cos(Symbol('\\\\theta_1', commutative=True)), Integer(2)), Tuple(Symbol('\\\\theta_1', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Integral(Mul(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True))), Tuple(Symbol('\\\\theta_1', commutative=True))), Add(Mul(Rational(1, 2), Symbol('\\\\theta_1', commutative=True)), Symbol('t_2', commutative=True), Mul(Rational(1, 2), sin(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Add(Mul(Rational(1, 2), Symbol('\\\\theta_1', commutative=True)), Symbol('t_2', commutative=True), Mul(Rational(1, 2), sin(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True)))), Integral(Pow(cos(Symbol('\\\\theta_1', commutative=True)), Integer(2)), Tuple(Symbol('\\\\theta_1', commutative=True))))"]], "EE prompt": "Given \\cos{(\\theta_1)} = \\operatorname{A_{1}}{(\\theta_1)}, then derive \\frac{\\theta_1}{2} + t_{2} + \\frac{\\sin{(\\theta_1)} \\cos{(\\theta_1)}}{2} = \\int \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} d\\theta_1, then obtain \\int \\cos^{2}{(\\theta_1)} d\\theta_1 = \\frac{\\theta_1}{2} + t_{2} + \\frac{\\sin{(\\theta_1)} \\cos{(\\theta_1)}}{2}", "EE derivation": "\\cos{(\\theta_1)} = \\operatorname{A_{1}}{(\\theta_1)} and \\cos^{2}{(\\theta_1)} = \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} and \\int \\cos^{2}{(\\theta_1)} d\\theta_1 = \\int \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} d\\theta_1 and \\frac{\\theta_1}{2} + t_{2} + \\frac{\\sin{(\\theta_1)} \\cos{(\\theta_1)}}{2} = \\int \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} d\\theta_1 and \\int \\cos^{2}{(\\theta_1)} d\\theta_1 = \\frac{\\theta_1}{2} + t_{2} + \\frac{\\sin{(\\theta_1)} \\cos{(\\theta_1)}}{2}", "EE srepr_derivation": [["premise", "Equality(cos(Symbol('\\\\theta_1', commutative=True)), Function('A_1')(Symbol('\\\\theta_1', commutative=True)))"], [["times", 1, "cos(Symbol('\\\\theta_1', commutative=True))"], "Equality(Pow(cos(Symbol('\\\\theta_1', commutative=True)), Integer(2)), Mul(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True))))"], [["integrate", 2, "Symbol('\\\\theta_1', commutative=True)"], "Equality(Integral(Pow(cos(Symbol('\\\\theta_1', commutative=True)), Integer(2)), Tuple(Symbol('\\\\theta_1', commutative=True))), Integral(Mul(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True))), Tuple(Symbol('\\\\theta_1', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Mul(Rational(1, 2), Symbol('\\\\theta_1', commutative=True)), Symbol('t_2', commutative=True), Mul(Rational(1, 2), sin(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True)))), Integral(Mul(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True))), Tuple(Symbol('\\\\theta_1', commutative=True))))"], [["substitute_RHS_for_LHS", 3, 4], "Equality(Integral(Pow(cos(Symbol('\\\\theta_1', commutative=True)), Integer(2)), Tuple(Symbol('\\\\theta_1', commutative=True))), Add(Mul(Rational(1, 2), Symbol('\\\\theta_1', commutative=True)), Symbol('t_2', commutative=True), Mul(Rational(1, 2), sin(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True)))))"]], "AG prompt": "Given \\operatorname{A_{1}}{(\\theta_1)} = \\cos{(\\theta_1)}, then derive \\int \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} d\\theta_1 = \\frac{\\theta_1}{2} + t_{2} + \\frac{\\sin{(\\theta_1)} \\cos{(\\theta_1)}}{2}, then obtain \\int \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} d\\theta_1 = \\frac{\\theta_1}{2} + t_{2} + \\frac{\\operatorname{A_{1}}{(\\theta_1)} \\sin{(\\theta_1)}}{2}", "AG derivation": "\\operatorname{A_{1}}{(\\theta_1)} = \\cos{(\\theta_1)} and \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} = \\cos^{2}{(\\theta_1)} and \\int \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} d\\theta_1 = \\int \\cos^{2}{(\\theta_1)} d\\theta_1 and \\int \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} d\\theta_1 = \\frac{\\theta_1}{2} + t_{2} + \\frac{\\sin{(\\theta_1)} \\cos{(\\theta_1)}}{2} and \\int \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} d\\theta_1 = \\frac{\\theta_1}{2} + t_{2} + \\frac{\\operatorname{A_{1}}{(\\theta_1)} \\sin{(\\theta_1)}}{2}", "AG srepr_derivation": [["premise", "Equality(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True)))"], [["times", 1, "cos(Symbol('\\\\theta_1', commutative=True))"], "Equality(Mul(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True))), Pow(cos(Symbol('\\\\theta_1', commutative=True)), Integer(2)))"], [["integrate", 2, "Symbol('\\\\theta_1', commutative=True)"], "Equality(Integral(Mul(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True))), Tuple(Symbol('\\\\theta_1', commutative=True))), Integral(Pow(cos(Symbol('\\\\theta_1', commutative=True)), Integer(2)), Tuple(Symbol('\\\\theta_1', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Integral(Mul(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True))), Tuple(Symbol('\\\\theta_1', commutative=True))), Add(Mul(Rational(1, 2), Symbol('\\\\theta_1', commutative=True)), Symbol('t_2', commutative=True), Mul(Rational(1, 2), sin(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Integral(Mul(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True))), Tuple(Symbol('\\\\theta_1', commutative=True))), Add(Mul(Rational(1, 2), Symbol('\\\\theta_1', commutative=True)), Symbol('t_2', commutative=True), Mul(Rational(1, 2), Function('A_1')(Symbol('\\\\theta_1', commutative=True)), sin(Symbol('\\\\theta_1', commutative=True)))))"]], "SR prompt": "Given \\operatorname{A_{1}}{(\\theta_1)} = \\cos{(\\theta_1)}, then obtain \\frac{\\theta_1}{2} + t_{2} + \\frac{\\sin{(\\theta_1)} \\cos{(\\theta_1)}}{2} = \\int \\cos^{2}{(\\theta_1)} d\\theta_1", "SR derivation": "\\operatorname{A_{1}}{(\\theta_1)} = \\cos{(\\theta_1)} and \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} = \\cos^{2}{(\\theta_1)} and \\int \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} d\\theta_1 = \\int \\cos^{2}{(\\theta_1)} d\\theta_1 and \\int \\operatorname{A_{1}}{(\\theta_1)} \\cos{(\\theta_1)} d\\theta_1 = \\frac{\\theta_1}{2} + t_{2} + \\frac{\\sin{(\\theta_1)} \\cos{(\\theta_1)}}{2} and \\frac{\\theta_1}{2} + t_{2} + \\frac{\\sin{(\\theta_1)} \\cos{(\\theta_1)}}{2} = \\int \\cos^{2}{(\\theta_1)} d\\theta_1", "SR srepr_derivation": [["premise", "Equality(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True)))"], [["times", 1, "cos(Symbol('\\\\theta_1', commutative=True))"], "Equality(Mul(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True))), Pow(cos(Symbol('\\\\theta_1', commutative=True)), Integer(2)))"], [["integrate", 2, "Symbol('\\\\theta_1', commutative=True)"], "Equality(Integral(Mul(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True))), Tuple(Symbol('\\\\theta_1', commutative=True))), Integral(Pow(cos(Symbol('\\\\theta_1', commutative=True)), Integer(2)), Tuple(Symbol('\\\\theta_1', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Integral(Mul(Function('A_1')(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True))), Tuple(Symbol('\\\\theta_1', commutative=True))), Add(Mul(Rational(1, 2), Symbol('\\\\theta_1', commutative=True)), Symbol('t_2', commutative=True), Mul(Rational(1, 2), sin(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Add(Mul(Rational(1, 2), Symbol('\\\\theta_1', commutative=True)), Symbol('t_2', commutative=True), Mul(Rational(1, 2), sin(Symbol('\\\\theta_1', commutative=True)), cos(Symbol('\\\\theta_1', commutative=True)))), Integral(Pow(cos(Symbol('\\\\theta_1', commutative=True)), Integer(2)), Tuple(Symbol('\\\\theta_1', commutative=True))))"]], "VR prompt": "Given \\kappa{(\\iota)} = \\cos{(\\iota)}, then derive \\int \\kappa{(\\iota)} \\cos{(\\iota)} d\\iota = \\frac{\\iota}{2} + \\omicron + \\frac{\\sin{(\\iota)} \\cos{(\\iota)}}{2}, then obtain \\frac{\\iota}{2} + \\omicron + \\frac{\\sin{(\\iota)} \\cos{(\\iota)}}{2} = \\int \\cos^{2}{(\\iota)} d\\iota", "VR derivation": "\\kappa{(\\iota)} = \\cos{(\\iota)} and \\kappa{(\\iota)} \\cos{(\\iota)} = \\cos^{2}{(\\iota)} and \\int \\kappa{(\\iota)} \\cos{(\\iota)} d\\iota = \\int \\cos^{2}{(\\iota)} d\\iota and \\int \\kappa{(\\iota)} \\cos{(\\iota)} d\\iota = \\frac{\\iota}{2} + \\omicron + \\frac{\\sin{(\\iota)} \\cos{(\\iota)}}{2} and \\frac{\\iota}{2} + \\omicron + \\frac{\\sin{(\\iota)} \\cos{(\\iota)}}{2} = \\int \\cos^{2}{(\\iota)} d\\iota", "VR srepr_derivation": [["premise", "Equality(Function('\\\\kappa')(Symbol('\\\\iota', commutative=True)), cos(Symbol('\\\\iota', commutative=True)))"], [["times", 1, "cos(Symbol('\\\\iota', commutative=True))"], "Equality(Mul(Function('\\\\kappa')(Symbol('\\\\iota', commutative=True)), cos(Symbol('\\\\iota', commutative=True))), Pow(cos(Symbol('\\\\iota', commutative=True)), Integer(2)))"], [["integrate", 2, "Symbol('\\\\iota', commutative=True)"], "Equality(Integral(Mul(Function('\\\\kappa')(Symbol('\\\\iota', commutative=True)), cos(Symbol('\\\\iota', commutative=True))), Tuple(Symbol('\\\\iota', commutative=True))), Integral(Pow(cos(Symbol('\\\\iota', commutative=True)), Integer(2)), Tuple(Symbol('\\\\iota', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Integral(Mul(Function('\\\\kappa')(Symbol('\\\\iota', commutative=True)), cos(Symbol('\\\\iota', commutative=True))), Tuple(Symbol('\\\\iota', commutative=True))), Add(Mul(Rational(1, 2), Symbol('\\\\iota', commutative=True)), Symbol('\\\\omicron', commutative=True), Mul(Rational(1, 2), sin(Symbol('\\\\iota', commutative=True)), cos(Symbol('\\\\iota', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Add(Mul(Rational(1, 2), Symbol('\\\\iota', commutative=True)), Symbol('\\\\omicron', commutative=True), Mul(Rational(1, 2), sin(Symbol('\\\\iota', commutative=True)), cos(Symbol('\\\\iota', commutative=True)))), Integral(Pow(cos(Symbol('\\\\iota', commutative=True)), Integer(2)), Tuple(Symbol('\\\\iota', commutative=True))))"]], "static_flan-t5-large": "operatorname { A_ { 1 } } { ( \\ theta_1) } = \\ cos { ( \\ theta_1) } and \\ operatorname { A_ { 1 } } { ( \\ theta_1) } \\ cos { ( \\ theta_1) } = \\ cos ^ { 2 } { ( \\ theta_1) } and \\ int \\ operatorname { A_ { 1 } } { ( \\ theta_1) } \\ cos { ( \\ theta_1) } d \\ theta_1 = \\ int \\ cos ^ { 2 } { ( \\ theta_1) } d \\ theta_1 and \\ int \\ operatorname { A_ { 1 } } { ( \\ theta_1) } \\ cos { ( \\ theta_1) } d \\ theta_1 = \\ frac { \\ theta_1 } { 2 } + t_ { 2 } + \\ frac { \\ sin { ( \\ theta_1) } \\ cos { ( \\ theta_1) } } { 2 } and \\ frac { \\ theta_1 } { 2 } + t_ { 2 } + \\ frac { \\ sin { ( \\ theta_1) } \\ cos { ( \\ theta_1) } } { 2 } = \\ int \\ cos ^ { 2 } { ( \\ theta_1) } d \\ theta_1", "VR_flan-t5-large": "kappa { ( \\ iota) } = \\ cos { ( \\ iota) } and \\ kappa { ( \\ iota) } \\ cos { ( \\ iota) } = \\ cos ^ { 2 } { ( \\ iota) } and \\ int \\ kappa { ( \\ iota) } \\ cos { ( \\ iota) } d \\ iota = \\ int \\ cos ^ { 2 } { ( \\ iota) } d \\ iota and \\ int \\ kappa { ( \\ iota) } \\ cos { ( \\ iota) } d \\ iota = \\ frac { \\ iota } { 2 } + \\ omicron + \\ frac { \\ sin { ( \\ iota) } \\ cos { ( \\ iota) } } { 2 } and \\ frac { \\ iota } { 2 } + \\ omicron + \\ frac { \\ sin { ( \\ iota) } \\ cos { ( \\ iota) } } { 2 } = \\ int \\ cos ^ { 2 } { ( \\ iota) } d \\ iota", "EE_flan-t5-large": "cos { ( \\ theta_1) } = \\ operatorname { A_ { 1 } } { ( \\ theta_1) } and \\ cos { ( \\ theta_1) } \\ operatorname { A_ { 1 } } { ( \\ theta_1) } = \\ cos ^ { 2 } { ( \\ theta_1) } and \\ int \\ cos { ( \\ theta_1) } \\ operatorname { A_ { 1 } } { ( \\ theta_1) } d \\ theta_1 = \\ int \\ operatorname { A_ { 1 } } { ( \\ theta_1) } \\ cos { ( \\ theta_1) } d \\ theta_1 and \\ frac { \\ theta_1 } { 2 } + t_ { 2 } + \\ frac { \\ sin { ( \\ theta_1) } \\ cos { ( \\ theta_1) } } { 2 } = \\ int \\ operatorname { A_ { 1 } } { ( \\ theta_1) } \\ cos { ( \\ theta_1) } d \\ theta_1 and \\ int \\ cos ^ { 2 } { ( \\ theta_1) } d \\ theta_1 = \\ frac { \\ theta_1 } { 2 } + t_ { 2 } + \\ frac { \\ sin { ( \\ theta_1) } \\ cos { ( \\ theta_1) } } { 2 }", "AG_flan-t5-large": "operatorname { A_ { 1 } } { ( \\ theta_1) } = \\ cos { ( \\ theta_1) } and \\ operatorname { A_ { 1 } } { ( \\ theta_1) } \\ cos { ( \\ theta_1) } = \\ cos ^ { 2 } { ( \\ theta_1) } and \\ int \\ operatorname { A_ { 1 } } { ( \\ theta_1) } \\ cos { ( \\ theta_1) } d \\ theta_1 = \\ int \\ cos ^ { 2 } { ( \\ theta_1) } d \\ theta_1 and \\ int \\ operatorname { A_ { 1 } } { ( \\ theta_1) } \\ cos { ( \\ theta_1) } d \\ theta_1 = \\ frac { \\ theta_1 } { 2 } + t_ { 2 } + \\ frac { \\ sin { ( \\ theta_1) } \\ cos { ( \\ theta_1) } } { 2 } and \\ int \\ operatorname { A_ { 1 } } { ( \\ theta_1) } \\ cos { ( \\ theta_1) } d \\ theta_1 = \\ frac { \\ theta_1 } { 2 } + t_ { 2 } + \\ frac { \\ operatorname { A_ { 1 } } { ( \\ theta_1) } \\ sin { ( \\ theta_1) } } { 2 }", "SR_flan-t5-large": "operatorname { A_ { 1 } } { ( \\ theta_1) } = \\ cos { ( \\ theta_1) } and \\ operatorname { A_ { 1 } } ^ { 2 } { ( \\ theta_1) } = \\ operatorname { A_ { 1 } } { ( \\ theta_1) } \\ cos { ( \\ theta_1) } and \\ frac { \\ operatorname { A_ { 1 } } ^ { 2 } { ( \\ theta_1) } \\ cos { ( \\ theta_1) } } { 2 } = \\ frac { \\ cos ^ { 2 } { ( \\ theta_1) } } { 2 } and \\ int \\ frac { \\ operatorname { A_ { 1 } } ^ { 2 } { ( \\ theta_1) } } { 2 } d \\ theta_1 = \\ int \\ cos ^ { 2 } { ( \\ theta_1) } d \\ theta_1 and \\ frac { \\ theta_1 } { 2 } + t_ { 2 } + \\ frac { \\ sin { ( \\ theta_1) } \\ cos { ( \\ theta_1) } } { 2 } = \\ int \\ cos ^ { 2 } { ( \\ theta_1) } d \\ theta_1", "static_rouge": 1.0, "static_bleu": 0.9963833674212593, "static_bleurt": 0.8505879640579224, "static_gleu": 0.9963702359346642, "VR_rouge": 0.0, "EE_rouge": 0.043010752688172005, "AG_rouge": 0.0, "SR_rouge": 0.22285714285714286, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.0420654614203001, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.22285714285714286, "VR_bleu": 0.0013708882285768942, "EE_bleu": 0.05997870650942805, "AG_bleu": -0.00024395449953351633, "SR_bleu": 0.16093720015753366, "VR_bleu_abs": -0.0007500776580513513, "EE_bleu_abs": 0.06038740199939152, "AG_bleu_abs": 0.00033181496078438233, "SR_bleu_abs": 0.16418234331057047, "VR_bleurt": 0.008936047554016113, "EE_bleurt": 0.07121586799621582, "AG_bleurt": -0.008538246154785156, "SR_bleurt": 0.11383897066116333, "VR_bleurt_abs": -0.09069608151912689, "EE_bleurt_abs": 0.11537981033325195, "AG_bleurt_abs": 0.013748466968536377, "SR_bleurt_abs": 0.14733171463012695, "VR_gleu": 0.0013827672629850296, "EE_gleu": 0.059848496804229434, "AG_gleu": -0.0002456693106825947, "SR_gleu": 0.1588021778584392, "VR_gleu_abs": -0.0008512424834462018, "EE_gleu_abs": 0.0603014282332518, "AG_gleu_abs": 0.000330365786744502, "SR_gleu_abs": 0.16211293260473592, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 1.0016784244691213, "ratio_VR_bleurt": 0.5079399264979267, "ratio_VR_gleu": 1.0017599797687762, "ratio_EE_rouge": 0.9560004943764677, "ratio_EE_bleu": 0.9387707630247073, "ratio_EE_bleurt": 0.83433563416074, "ratio_EE_gleu": 0.9388664453421863, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9996323404632166, "ratio_AG_bleurt": 0.9832126299048679, "ratio_AG_gleu": 0.9996340277788829, "ratio_SR_rouge": 0.7771428571428571, "ratio_SR_bleu": 0.8358176566894295, "ratio_SR_bleurt": 0.8329588368312095, "ratio_SR_gleu": 0.8378870673952641}, {"prompt": "Given \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = J_{\\varepsilon} \\mathbf{J}_M, then derive \\frac{\\partial}{\\partial \\mathbf{J}_M} \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = J_{\\varepsilon}, then obtain \\frac{\\partial^{2}}{\\partial \\mathbf{J}_M^{2}} \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = \\frac{d}{d \\mathbf{J}_M} J_{\\varepsilon}", "derivation": "\\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = J_{\\varepsilon} \\mathbf{J}_M and - J_{\\varepsilon} + \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = J_{\\varepsilon} \\mathbf{J}_M - J_{\\varepsilon} and \\frac{\\partial}{\\partial \\mathbf{J}_M} (- J_{\\varepsilon} + \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)}) = \\frac{\\partial}{\\partial \\mathbf{J}_M} (J_{\\varepsilon} \\mathbf{J}_M - J_{\\varepsilon}) and \\frac{\\partial}{\\partial \\mathbf{J}_M} \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = J_{\\varepsilon} and \\frac{\\partial^{2}}{\\partial \\mathbf{J}_M^{2}} \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = \\frac{d}{d \\mathbf{J}_M} J_{\\varepsilon}", "srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Mul(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)))"], [["minus", 1, "Symbol('J_{\\\\varepsilon}', commutative=True)"], "Equality(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True))), Add(Mul(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\mathbf{J}_M', commutative=True)"], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True))), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1))), Derivative(Add(Mul(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True))), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1))), Symbol('J_{\\\\varepsilon}', commutative=True))"], [["differentiate", 4, "Symbol('\\\\mathbf{J}_M', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(2))), Derivative(Symbol('J_{\\\\varepsilon}', commutative=True), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1))))"]], "EE prompt": "Given J_{\\varepsilon} \\mathbf{J}_M = \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)}, then derive J_{\\varepsilon} = \\frac{\\partial}{\\partial \\mathbf{J}_M} \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)}, then obtain \\frac{d}{d \\mathbf{J}_M} J_{\\varepsilon} = \\frac{\\partial^{2}}{\\partial \\mathbf{J}_M^{2}} \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)}", "EE derivation": "J_{\\varepsilon} \\mathbf{J}_M = \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} and J_{\\varepsilon} \\mathbf{J}_M - J_{\\varepsilon} = - J_{\\varepsilon} + \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} and \\frac{\\partial}{\\partial \\mathbf{J}_M} (J_{\\varepsilon} \\mathbf{J}_M - J_{\\varepsilon}) = \\frac{\\partial}{\\partial \\mathbf{J}_M} (- J_{\\varepsilon} + \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)}) and J_{\\varepsilon} = \\frac{\\partial}{\\partial \\mathbf{J}_M} \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} and \\frac{d}{d \\mathbf{J}_M} J_{\\varepsilon} = \\frac{\\partial^{2}}{\\partial \\mathbf{J}_M^{2}} \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)}", "EE srepr_derivation": [["premise", "Equality(Mul(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)))"], [["minus", 1, "Symbol('J_{\\\\varepsilon}', commutative=True)"], "Equality(Add(Mul(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True))), Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\mathbf{J}_M', commutative=True)"], "Equality(Derivative(Add(Mul(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True))), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True))), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Symbol('J_{\\\\varepsilon}', commutative=True), Derivative(Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1))))"], [["differentiate", 4, "Symbol('\\\\mathbf{J}_M', commutative=True)"], "Equality(Derivative(Symbol('J_{\\\\varepsilon}', commutative=True), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1))), Derivative(Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(2))))"]], "AG prompt": "Given \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = J_{\\varepsilon} \\mathbf{J}_M, then derive \\frac{\\partial}{\\partial \\mathbf{J}_M} \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = J_{\\varepsilon}, then obtain \\frac{\\partial^{2}}{\\partial J_{\\varepsilon}\\partial \\mathbf{J}_M} \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = \\frac{d}{d J_{\\varepsilon}} J_{\\varepsilon}", "AG derivation": "\\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = J_{\\varepsilon} \\mathbf{J}_M and - J_{\\varepsilon} + \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = J_{\\varepsilon} \\mathbf{J}_M - J_{\\varepsilon} and \\frac{\\partial}{\\partial \\mathbf{J}_M} (- J_{\\varepsilon} + \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)}) = \\frac{\\partial}{\\partial \\mathbf{J}_M} (J_{\\varepsilon} \\mathbf{J}_M - J_{\\varepsilon}) and \\frac{\\partial}{\\partial \\mathbf{J}_M} \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = J_{\\varepsilon} and \\frac{\\partial^{2}}{\\partial J_{\\varepsilon}\\partial \\mathbf{J}_M} \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = \\frac{d}{d J_{\\varepsilon}} J_{\\varepsilon}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Mul(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)))"], [["minus", 1, "Symbol('J_{\\\\varepsilon}', commutative=True)"], "Equality(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True))), Add(Mul(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\mathbf{J}_M', commutative=True)"], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True))), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1))), Derivative(Add(Mul(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True))), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1))), Symbol('J_{\\\\varepsilon}', commutative=True))"], [["differentiate", 4, "Symbol('J_{\\\\varepsilon}', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1)), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))), Derivative(Symbol('J_{\\\\varepsilon}', commutative=True), Tuple(Symbol('J_{\\\\varepsilon}', commutative=True), Integer(1))))"]], "SR prompt": "Given \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = J_{\\varepsilon} \\mathbf{J}_M, then obtain \\frac{\\partial^{2}}{\\partial \\mathbf{J}_M^{2}} \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = \\frac{d}{d \\mathbf{J}_M} J_{\\varepsilon}", "SR derivation": "\\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = J_{\\varepsilon} \\mathbf{J}_M and - J_{\\varepsilon} + \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = J_{\\varepsilon} \\mathbf{J}_M - J_{\\varepsilon} and \\frac{\\partial}{\\partial \\mathbf{J}_M} (- J_{\\varepsilon} + \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)}) = \\frac{\\partial}{\\partial \\mathbf{J}_M} (J_{\\varepsilon} \\mathbf{J}_M - J_{\\varepsilon}) and \\frac{\\partial}{\\partial \\mathbf{J}_M} \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = J_{\\varepsilon} and \\frac{\\partial^{2}}{\\partial \\mathbf{J}_M^{2}} \\mathbf{g}{(J_{\\varepsilon},\\mathbf{J}_M)} = \\frac{d}{d \\mathbf{J}_M} J_{\\varepsilon}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Mul(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)))"], [["minus", 1, "Symbol('J_{\\\\varepsilon}', commutative=True)"], "Equality(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True))), Add(Mul(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\mathbf{J}_M', commutative=True)"], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True)), Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True))), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1))), Derivative(Add(Mul(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Mul(Integer(-1), Symbol('J_{\\\\varepsilon}', commutative=True))), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1))), Symbol('J_{\\\\varepsilon}', commutative=True))"], [["differentiate", 4, "Symbol('\\\\mathbf{J}_M', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{g}')(Symbol('J_{\\\\varepsilon}', commutative=True), Symbol('\\\\mathbf{J}_M', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(2))), Derivative(Symbol('J_{\\\\varepsilon}', commutative=True), Tuple(Symbol('\\\\mathbf{J}_M', commutative=True), Integer(1))))"]], "VR prompt": "Given \\zeta{(\\kappa,\\alpha)} = \\alpha \\kappa, then derive \\frac{\\partial}{\\partial \\kappa} \\zeta{(\\kappa,\\alpha)} = \\alpha, then obtain \\frac{\\partial^{2}}{\\partial \\kappa^{2}} \\zeta{(\\kappa,\\alpha)} = \\frac{d}{d \\kappa} \\alpha", "VR derivation": "\\zeta{(\\kappa,\\alpha)} = \\alpha \\kappa and - \\alpha + \\zeta{(\\kappa,\\alpha)} = \\alpha \\kappa - \\alpha and \\frac{\\partial}{\\partial \\kappa} (- \\alpha + \\zeta{(\\kappa,\\alpha)}) = \\frac{\\partial}{\\partial \\kappa} (\\alpha \\kappa - \\alpha) and \\frac{\\partial}{\\partial \\kappa} \\zeta{(\\kappa,\\alpha)} = \\alpha and \\frac{\\partial^{2}}{\\partial \\kappa^{2}} \\zeta{(\\kappa,\\alpha)} = \\frac{d}{d \\kappa} \\alpha", "VR srepr_derivation": [["premise", "Equality(Function('\\\\zeta')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\alpha', commutative=True)), Mul(Symbol('\\\\alpha', commutative=True), Symbol('\\\\kappa', commutative=True)))"], [["minus", 1, "Symbol('\\\\alpha', commutative=True)"], "Equality(Add(Mul(Integer(-1), Symbol('\\\\alpha', commutative=True)), Function('\\\\zeta')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\alpha', commutative=True))), Add(Mul(Symbol('\\\\alpha', commutative=True), Symbol('\\\\kappa', commutative=True)), Mul(Integer(-1), Symbol('\\\\alpha', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\kappa', commutative=True)"], "Equality(Derivative(Add(Mul(Integer(-1), Symbol('\\\\alpha', commutative=True)), Function('\\\\zeta')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\alpha', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Derivative(Add(Mul(Symbol('\\\\alpha', commutative=True), Symbol('\\\\kappa', commutative=True)), Mul(Integer(-1), Symbol('\\\\alpha', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('\\\\zeta')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Symbol('\\\\alpha', commutative=True))"], [["differentiate", 4, "Symbol('\\\\kappa', commutative=True)"], "Equality(Derivative(Function('\\\\zeta')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(2))), Derivative(Symbol('\\\\alpha', commutative=True), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))))"]], "static_flan-t5-large": "mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) } = J_ { \\ varepsilon } \\ mathbf { J } _M and \\ frac { \\ partial } { \\ partial \\ mathbf { J } _M } \\ mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) } = \\ frac { \\ partial } { \\ partial \\ mathbf { J } _M } J_ { \\ varepsilon } and \\ frac { \\ partial } { \\ partial \\ mathbf { J } _M } \\ mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) } = J_ { \\ varepsilon } and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ mathbf { J } _M ^ { 2 } } \\ mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) } = \\ frac { d } { d \\ mathbf { J } _M } J_ { \\ varepsilon }", "VR_flan-t5-large": "zeta { ( \\ kappa, \\ alpha) } = \\ alpha \\ kappa and \\ frac { \\ partial } { \\ partial \\ kappa } \\ zeta { ( \\ kappa, \\ alpha) } = \\ frac { \\ partial } { \\ partial \\ kappa } \\ alpha \\ kappa and \\ frac { \\ partial } { \\ partial \\ kappa } \\ zeta { ( \\ kappa, \\ alpha) } = \\ alpha and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ kappa ^ { 2 } } \\ zeta { ( \\ kappa, \\ alpha) } = \\ frac { d } { d \\ kappa } \\ alpha", "EE_flan-t5-large": "mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) } = \\ mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) } and \\ frac { d } { d \\ mathbf { J } _M } J_ { \\ varepsilon } = \\ frac { \\ partial } { \\ partial \\ mathbf { J } _M } \\ mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) } and J_ { \\ varepsilon } = \\ frac { \\ partial } { \\ partial \\ mathbf { J } _M } \\ mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) } and \\ frac { d } { d \\ mathbf { J } _M } J_ { \\ varepsilon } = \\ frac { \\ partial ^ { 2 } } { \\ partial \\ mathbf { J } _M ^ { 2 } } \\ mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) }", "AG_flan-t5-large": "mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) } = J_ { \\ varepsilon } \\ mathbf { J } _M and \\ frac { \\ partial } { \\ partial \\ mathbf { J } _M } \\ mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) } = \\ frac { \\ partial } { \\ partial \\ mathbf { J } _M } J_ { \\ varepsilon } and \\ frac { \\ partial } { \\ partial \\ mathbf { J } _M } \\ mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) } = J_ { \\ varepsilon } and \\ frac { \\ partial ^ { 2 } } { \\ partial J_ { \\ varepsilon } \\ partial \\ mathbf { J } _M } \\ mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) } = \\ frac { d } { d J_ { \\ varepsilon } } J_ { \\ varepsilon }", "SR_flan-t5-large": "mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) } = J_ { \\ varepsilon } \\ mathbf { J } _M and \\ frac { \\ partial } { \\ partial \\ mathbf { J } _M } \\ mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) } = \\ frac { d } { d \\ mathbf { J } _M } J_ { \\ varepsilon } and \\ frac { \\ partial ^ { 2 } } { \\ partial \\ mathbf { J } _M ^ { 2 } } \\ mathbf { g } { (J_ { \\ varepsilon }, \\ mathbf { J } _M) } = \\ frac { d ^ { 2 } } { d \\ mathbf { J } _M ^ { 2 } } J_ { \\ varepsilon }", "static_rouge": 0.8470588235294118, "static_bleu": 0.6830610262411904, "static_bleurt": 0.6157392263412476, "static_gleu": 0.7194304857621441, "VR_rouge": -0.004005006257822186, "EE_rouge": 0.02147742818057463, "AG_rouge": -0.001778385772913782, "SR_rouge": 0.16757164404223235, "VR_rouge_abs": -0.0555587977823169, "EE_rouge_abs": 0.055865143494009506, "AG_rouge_abs": 0.0217687074829932, "SR_rouge_abs": 0.19696969696969702, "VR_bleu": -0.03820483987467038, "EE_bleu": -0.016033519877377445, "AG_bleu": -0.003516252188218938, "SR_bleu": 0.2238986269610671, "VR_bleu_abs": -0.05647798792934092, "EE_bleu_abs": 0.06612346994776486, "AG_bleu_abs": 0.017542158592206425, "SR_bleu_abs": 0.269890486670499, "VR_bleurt": 0.12559548020362854, "EE_bleurt": 0.0694459080696106, "AG_bleurt": 0.03802990913391113, "SR_bleurt": 0.28849950432777405, "VR_bleurt_abs": -0.1682569980621338, "EE_bleurt_abs": -0.014854073524475098, "AG_bleurt_abs": 0.11042052507400513, "SR_bleurt_abs": 0.1950511932373047, "VR_gleu": -0.02518489885324049, "EE_gleu": -0.008375209380234505, "AG_gleu": -0.0027917364600781314, "SR_gleu": 0.18006700167504186, "VR_gleu_abs": -0.05001169079570239, "EE_gleu_abs": 0.06545420258023005, "AG_gleu_abs": 0.017369884961947246, "SR_gleu_abs": 0.2528604118993135, "ratio_VR_rouge": 1.2956521739130435, "ratio_VR_bleu": 1.2720324085910637, "ratio_VR_bleurt": 0.7758019084385974, "ratio_VR_gleu": 1.1804047093959777, "ratio_EE_rouge": 0.9384213759213759, "ratio_EE_bleu": 0.9308720978430043, "ratio_EE_bleurt": 1.020521853414627, "ratio_EE_gleu": 0.9316252686957177, "ratio_AG_rouge": 0.9766763848396501, "ratio_AG_bleu": 0.9815677980152563, "ratio_AG_bleurt": 0.8709587203511557, "ratio_AG_gleu": 0.9817525424528672, "ratio_SR_rouge": 0.803030303030303, "ratio_SR_bleu": 0.730109513329501, "ratio_SR_bleurt": 0.7720563676408276, "ratio_SR_gleu": 0.7471395881006865}, {"prompt": "Given \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} = s (\\mathbf{J}_P + \\rho_b), then derive \\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} = \\mathbf{J}_P + \\rho_b, then obtain \\frac{\\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)}}{\\mathbf{J}_P} = \\frac{\\mathbf{J}_P + \\rho_b}{\\mathbf{J}_P}", "derivation": "\\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} = s (\\mathbf{J}_P + \\rho_b) and \\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} = \\frac{\\partial}{\\partial s} s (\\mathbf{J}_P + \\rho_b) and \\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} = \\mathbf{J}_P + \\rho_b and \\frac{\\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)}}{\\mathbf{J}_P} = \\frac{\\mathbf{J}_P + \\rho_b}{\\mathbf{J}_P}", "srepr_derivation": [["premise", "Equality(Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)), Mul(Symbol('s', commutative=True), Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True))))"], [["differentiate", 1, "Symbol('s', commutative=True)"], "Equality(Derivative(Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))), Derivative(Mul(Symbol('s', commutative=True), Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True))), Tuple(Symbol('s', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))), Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True)))"], [["divide", 3, "Symbol('\\\\mathbf{J}_P', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\mathbf{J}_P', commutative=True), Integer(-1)), Derivative(Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1)))), Mul(Pow(Symbol('\\\\mathbf{J}_P', commutative=True), Integer(-1)), Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True))))"]], "EE prompt": "Given s (\\mathbf{J}_P + \\rho_b) = \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)}, then derive \\mathbf{J}_P + \\rho_b = \\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)}, then obtain \\frac{\\mathbf{J}_P + \\rho_b}{\\mathbf{J}_P} = \\frac{\\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)}}{\\mathbf{J}_P}", "EE derivation": "s (\\mathbf{J}_P + \\rho_b) = \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} and \\frac{\\partial}{\\partial s} s (\\mathbf{J}_P + \\rho_b) = \\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} and \\mathbf{J}_P + \\rho_b = \\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} and \\frac{\\mathbf{J}_P + \\rho_b}{\\mathbf{J}_P} = \\frac{\\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)}}{\\mathbf{J}_P}", "EE srepr_derivation": [["premise", "Equality(Mul(Symbol('s', commutative=True), Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True))), Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)))"], [["differentiate", 1, "Symbol('s', commutative=True)"], "Equality(Derivative(Mul(Symbol('s', commutative=True), Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True))), Tuple(Symbol('s', commutative=True), Integer(1))), Derivative(Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True)), Derivative(Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))))"], [["divide", 3, "Symbol('\\\\mathbf{J}_P', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\mathbf{J}_P', commutative=True), Integer(-1)), Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True))), Mul(Pow(Symbol('\\\\mathbf{J}_P', commutative=True), Integer(-1)), Derivative(Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1)))))"]], "AG prompt": "Given \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} = s (\\mathbf{J}_P + \\rho_b), then derive \\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} = \\mathbf{J}_P + \\rho_b, then obtain \\int \\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} ds = \\int (\\mathbf{J}_P + \\rho_b) ds", "AG derivation": "\\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} = s (\\mathbf{J}_P + \\rho_b) and \\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} = \\frac{\\partial}{\\partial s} s (\\mathbf{J}_P + \\rho_b) and \\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} = \\mathbf{J}_P + \\rho_b and \\int \\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} ds = \\int (\\mathbf{J}_P + \\rho_b) ds", "AG srepr_derivation": [["premise", "Equality(Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)), Mul(Symbol('s', commutative=True), Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True))))"], [["differentiate", 1, "Symbol('s', commutative=True)"], "Equality(Derivative(Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))), Derivative(Mul(Symbol('s', commutative=True), Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True))), Tuple(Symbol('s', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))), Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True)))"], [["integrate", 3, "Symbol('s', commutative=True)"], "Equality(Integral(Derivative(Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))), Tuple(Symbol('s', commutative=True))), Integral(Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True)), Tuple(Symbol('s', commutative=True))))"]], "SR prompt": "Given \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} = s (\\mathbf{J}_P + \\rho_b), then obtain \\frac{\\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)}}{\\mathbf{J}_P} = \\frac{\\mathbf{J}_P + \\rho_b}{\\mathbf{J}_P}", "SR derivation": "\\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} = s (\\mathbf{J}_P + \\rho_b) and \\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} = \\frac{\\partial}{\\partial s} s (\\mathbf{J}_P + \\rho_b) and \\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)} = \\mathbf{J}_P + \\rho_b and \\frac{\\frac{\\partial}{\\partial s} \\Psi_{nl}{(\\rho_b,\\mathbf{J}_P,s)}}{\\mathbf{J}_P} = \\frac{\\mathbf{J}_P + \\rho_b}{\\mathbf{J}_P}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)), Mul(Symbol('s', commutative=True), Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True))))"], [["differentiate", 1, "Symbol('s', commutative=True)"], "Equality(Derivative(Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))), Derivative(Mul(Symbol('s', commutative=True), Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True))), Tuple(Symbol('s', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1))), Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True)))"], [["divide", 3, "Symbol('\\\\mathbf{J}_P', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\mathbf{J}_P', commutative=True), Integer(-1)), Derivative(Function('\\\\Psi_{nl}')(Symbol('\\\\rho_b', commutative=True), Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('s', commutative=True)), Tuple(Symbol('s', commutative=True), Integer(1)))), Mul(Pow(Symbol('\\\\mathbf{J}_P', commutative=True), Integer(-1)), Add(Symbol('\\\\mathbf{J}_P', commutative=True), Symbol('\\\\rho_b', commutative=True))))"]], "VR prompt": "Given \\beta{(\\alpha,\\omicron,\\nu)} = \\omicron (\\alpha + \\nu), then derive \\frac{\\partial}{\\partial \\omicron} \\beta{(\\alpha,\\omicron,\\nu)} = \\alpha + \\nu, then obtain \\frac{\\frac{\\partial}{\\partial \\omicron} \\beta{(\\alpha,\\omicron,\\nu)}}{\\nu} = \\frac{\\alpha + \\nu}{\\nu}", "VR derivation": "\\beta{(\\alpha,\\omicron,\\nu)} = \\omicron (\\alpha + \\nu) and \\frac{\\partial}{\\partial \\omicron} \\beta{(\\alpha,\\omicron,\\nu)} = \\frac{\\partial}{\\partial \\omicron} \\omicron (\\alpha + \\nu) and \\frac{\\partial}{\\partial \\omicron} \\beta{(\\alpha,\\omicron,\\nu)} = \\alpha + \\nu and \\frac{\\frac{\\partial}{\\partial \\omicron} \\beta{(\\alpha,\\omicron,\\nu)}}{\\nu} = \\frac{\\alpha + \\nu}{\\nu}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\beta')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\omicron', commutative=True), Symbol('\\\\nu', commutative=True)), Mul(Symbol('\\\\omicron', commutative=True), Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\omicron', commutative=True)"], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\omicron', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1))), Derivative(Mul(Symbol('\\\\omicron', commutative=True), Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True))), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\omicron', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1))), Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True)))"], [["divide", 3, "Symbol('\\\\nu', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\nu', commutative=True), Integer(-1)), Derivative(Function('\\\\beta')(Symbol('\\\\alpha', commutative=True), Symbol('\\\\omicron', commutative=True), Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1)))), Mul(Pow(Symbol('\\\\nu', commutative=True), Integer(-1)), Add(Symbol('\\\\alpha', commutative=True), Symbol('\\\\nu', commutative=True))))"]], "static_flan-t5-large": "Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } = s ( \\ mathbf { J } _P + \\ rho_b) and \\ frac { \\ partial } { \\ partial s } \\ Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } = \\ frac { \\ partial } { \\ partial s } s ( \\ mathbf { J } _P + \\ rho_b) and \\ frac { \\ partial } { \\ partial s } \\ Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } = \\ mathbf { J } _P + \\ rho_b and \\ frac { \\ frac { \\ partial } { \\ partial s } \\ Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } } { \\ mathbf { J } _P } = \\ frac { \\ mathbf { J } _P + \\ rho_b } { \\ mathbf { J } _P }", "VR_flan-t5-large": "beta { ( \\ alpha, \\ omicron, \\ nu) } = \\ omicron ( \\ alpha + \\ nu) and \\ frac { \\ partial } { \\ partial \\ omicron } \\ beta { ( \\ alpha, \\ omicron, \\ nu) } = \\ frac { \\ partial } { \\ partial \\ omicron } \\ omicron ( \\ alpha + \\ nu) and \\ frac { \\ partial } { \\ partial \\ omicron } \\ beta { ( \\ alpha, \\ omicron, \\ nu) } = \\ alpha + \\ nu and \\ frac { \\ frac { \\ partial } { \\ partial \\ omicron } \\ beta { ( \\ alpha, \\ omicron, \\ nu) } } { \\ nu } = \\ frac { \\ frac { \\ partial } { \\ partial \\ omicron } \\ omicron ( \\ alpha + \\ nu) } { \\ nu } and \\ frac { \\ frac { \\ partial } { \\ partial \\ omicron } \\ beta { ( \\ alpha, \\ omicron, \\ nu) } } { \\ nu } = \\ frac { \\ alpha + \\ nu } { \\ nu }", "EE_flan-t5-large": "s ( \\ mathbf { J } _P + \\ rho_b) = \\ Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } and \\ frac { \\ partial } { \\ partial s } s ( \\ mathbf { J } _P + \\ rho_b) = \\ frac { \\ partial } { \\ partial s } \\ Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } and \\ mathbf { J } _P + \\ rho_b = \\ frac { \\ partial } { \\ partial s } \\ Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } and \\ frac { \\ mathbf { J } _P + \\ rho_b } { \\ mathbf { J } _P } = \\ frac { \\ frac { \\ partial } { \\ partial s } \\ Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } } { \\ mathbf { J } _P }", "AG_flan-t5-large": "Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } = s ( \\ mathbf { J } _P + \\ rho_b) and \\ frac { \\ partial } { \\ partial s } \\ Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } = \\ frac { \\ partial } { \\ partial s } s ( \\ mathbf { J } _P + \\ rho_b) and \\ frac { \\ partial } { \\ partial s } \\ Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } = \\ mathbf { J } _P + \\ rho_b and \\ int \\ frac { \\ partial } { \\ partial s } \\ Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } ds = \\ int ( \\ mathbf { J } _P + \\ rho_b) ds", "SR_flan-t5-large": "Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } = s ( \\ mathbf { J } _P + \\ rho_b) and \\ frac { \\ partial } { \\ partial s } \\ Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } = \\ frac { \\ partial } { \\ partial s } s ( \\ mathbf { J } _P + \\ rho_b) and \\ frac { \\ frac { \\ partial } { \\ partial s } \\ Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } } { \\ mathbf { J } _P } = \\ frac { \\ frac { \\ partial } { \\ partial s } s ( \\ mathbf { J } _P + \\ rho_b) } { \\ mathbf { J } _P } and \\ frac { \\ frac { \\ partial } { \\ partial s } \\ Psi_ { nl } { ( \\ rho_b, \\ mathbf { J } _P,s) } } { \\ mathbf { J } _P } = \\ frac { \\ mathbf { J } _P + \\ rho_b } { \\ mathbf { J } _P }", "static_rouge": 1.0, "static_bleu": 0.9955849961498928, "static_bleurt": 0.8259850144386292, "static_gleu": 0.9955654101995566, "VR_rouge": 0.1724137931034483, "EE_rouge": 0.0, "AG_rouge": 0.0, "SR_rouge": 0.08670520231213863, "VR_rouge_abs": 0.02533783783783783, "EE_rouge_abs": 0.0, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.08670520231213863, "VR_bleu": 0.2898472663652517, "EE_bleu": -0.00441500385010718, "AG_bleu": 0.00038115000344074446, "SR_bleu": 0.15735001581567953, "VR_bleu_abs": -0.038415244997496045, "EE_bleu_abs": 0.004438611767575873, "AG_bleu_abs": 0.0005821535358460084, "SR_bleu_abs": 0.1626897149290295, "VR_bleurt": -0.03593045473098755, "EE_bleurt": -0.026168346405029297, "AG_bleurt": 0.054420292377471924, "SR_bleurt": 0.05772358179092407, "VR_bleurt_abs": -0.1962411105632782, "EE_bleurt_abs": 0.0036840438842773438, "AG_bleurt_abs": -0.037355899810791016, "SR_bleurt_abs": 0.10565584897994995, "VR_gleu": 0.28981828376277496, "EE_gleu": -0.0044345898004434225, "AG_gleu": 0.0003846873079903501, "SR_gleu": 0.15719111908424466, "VR_gleu_abs": -0.024807529913727977, "EE_gleu_abs": 0.0044345898004434225, "AG_gleu_abs": 0.0005580274470491364, "SR_gleu_abs": 0.16257088846880907, "ratio_VR_rouge": 0.8648648648648649, "ratio_VR_bleu": 1.140281611607704, "ratio_VR_bleurt": 0.6082161945137075, "ratio_VR_gleu": 1.0776958054936898, "ratio_EE_rouge": 1.0, "ratio_EE_bleu": 0.9953351031805718, "ratio_EE_bleurt": 0.994352962501946, "ratio_EE_gleu": 0.9953434225844005, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9993323767536277, "ratio_AG_bleurt": 1.0609120281836995, "ratio_AG_gleu": 0.9993620522721948, "ratio_SR_rouge": 0.9132947976878614, "ratio_SR_bleu": 0.8373102850709705, "ratio_SR_bleurt": 0.878973417467429, "ratio_SR_gleu": 0.8374291115311909}, {"prompt": "Given \\operatorname{A_{z}}{(F_{N})} = \\sin{(F_{N})} and \\mathbf{v}{(F_{N})} = (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2}, then derive \\mathbf{v}{(F_{N})} = (Q - \\cos{(F_{N})})^{2}, then obtain (\\int \\sin{(F_{N})} dF_{N})^{2} = (Q - \\cos{(F_{N})})^{2}", "derivation": "\\operatorname{A_{z}}{(F_{N})} = \\sin{(F_{N})} and \\int \\operatorname{A_{z}}{(F_{N})} dF_{N} = \\int \\sin{(F_{N})} dF_{N} and \\mathbf{v}{(F_{N})} = (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2} and \\mathbf{v}{(F_{N})} = (\\int \\sin{(F_{N})} dF_{N})^{2} and \\mathbf{v}{(F_{N})} = (Q - \\cos{(F_{N})})^{2} and (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2} = (\\int \\sin{(F_{N})} dF_{N})^{2} and (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2} = (Q - \\cos{(F_{N})})^{2} and (\\int \\sin{(F_{N})} dF_{N})^{2} = (Q - \\cos{(F_{N})})^{2}", "srepr_derivation": [["premise", "Equality(Function('A_z')(Symbol('F_N', commutative=True)), sin(Symbol('F_N', commutative=True)))"], [["integrate", 1, "Symbol('F_N', commutative=True)"], "Equality(Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))))"], ["renaming_premise", "Equality(Function('\\\\mathbf{v}')(Symbol('F_N', commutative=True)), Pow(Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Function('\\\\mathbf{v}')(Symbol('F_N', commutative=True)), Pow(Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)))"], [["evaluate_integrals", 4], "Equality(Function('\\\\mathbf{v}')(Symbol('F_N', commutative=True)), Pow(Add(Symbol('Q', commutative=True), Mul(Integer(-1), cos(Symbol('F_N', commutative=True)))), Integer(2)))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Pow(Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)), Pow(Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)))"], [["substitute_LHS_for_RHS", 5, 3], "Equality(Pow(Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)), Pow(Add(Symbol('Q', commutative=True), Mul(Integer(-1), cos(Symbol('F_N', commutative=True)))), Integer(2)))"], [["substitute_LHS_for_RHS", 7, 6], "Equality(Pow(Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)), Pow(Add(Symbol('Q', commutative=True), Mul(Integer(-1), cos(Symbol('F_N', commutative=True)))), Integer(2)))"]], "EE prompt": "Given \\sin{(F_{N})} = \\operatorname{A_{z}}{(F_{N})} and (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2} = \\mathbf{v}{(F_{N})}, then derive (Q - \\cos{(F_{N})})^{2} = \\mathbf{v}{(F_{N})}, then obtain (Q - \\cos{(F_{N})})^{2} = (\\int \\sin{(F_{N})} dF_{N})^{2}", "EE derivation": "\\sin{(F_{N})} = \\operatorname{A_{z}}{(F_{N})} and \\int \\sin{(F_{N})} dF_{N} = \\int \\operatorname{A_{z}}{(F_{N})} dF_{N} and (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2} = \\mathbf{v}{(F_{N})} and (\\int \\sin{(F_{N})} dF_{N})^{2} = \\mathbf{v}{(F_{N})} and (Q - \\cos{(F_{N})})^{2} = \\mathbf{v}{(F_{N})} and (\\int \\sin{(F_{N})} dF_{N})^{2} = (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2} and (Q - \\cos{(F_{N})})^{2} = (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2} and (Q - \\cos{(F_{N})})^{2} = (\\int \\sin{(F_{N})} dF_{N})^{2}", "EE srepr_derivation": [["premise", "Equality(sin(Symbol('F_N', commutative=True)), Function('A_z')(Symbol('F_N', commutative=True)))"], [["integrate", 1, "Symbol('F_N', commutative=True)"], "Equality(Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))))"], ["renaming_premise", "Equality(Pow(Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)), Function('\\\\mathbf{v}')(Symbol('F_N', commutative=True)))"], [["substitute_RHS_for_LHS", 3, 2], "Equality(Pow(Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)), Function('\\\\mathbf{v}')(Symbol('F_N', commutative=True)))"], [["evaluate_integrals", 4], "Equality(Pow(Add(Symbol('Q', commutative=True), Mul(Integer(-1), cos(Symbol('F_N', commutative=True)))), Integer(2)), Function('\\\\mathbf{v}')(Symbol('F_N', commutative=True)))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Pow(Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)), Pow(Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)))"], [["substitute_RHS_for_LHS", 5, 3], "Equality(Pow(Add(Symbol('Q', commutative=True), Mul(Integer(-1), cos(Symbol('F_N', commutative=True)))), Integer(2)), Pow(Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)))"], [["substitute_RHS_for_LHS", 7, 6], "Equality(Pow(Add(Symbol('Q', commutative=True), Mul(Integer(-1), cos(Symbol('F_N', commutative=True)))), Integer(2)), Pow(Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)))"]], "AG prompt": "Given \\operatorname{A_{z}}{(F_{N})} = \\sin{(F_{N})} and \\mathbf{v}{(F_{N})} = (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2}, then derive \\mathbf{v}{(F_{N})} = (Q - \\cos{(F_{N})})^{2}, then obtain (\\int \\sin{(F_{N})} dF_{N})^{2} = (Q - \\cos{(F_{N})})^{2}", "AG derivation": "\\operatorname{A_{z}}{(F_{N})} = \\sin{(F_{N})} and \\int \\operatorname{A_{z}}{(F_{N})} dF_{N} = \\int \\sin{(F_{N})} dF_{N} and \\mathbf{v}{(F_{N})} = (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2} and \\mathbf{v}{(F_{N})} = (\\int \\sin{(F_{N})} dF_{N})^{2} and \\mathbf{v}{(F_{N})} = (Q - \\cos{(F_{N})})^{2} and (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2} = (\\int \\sin{(F_{N})} dF_{N})^{2} and (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2} = (Q - \\cos{(F_{N})})^{2} and (\\int \\sin{(F_{N})} dF_{N})^{2} = (Q - \\cos{(F_{N})})^{2}", "AG srepr_derivation": [["premise", "Equality(Function('A_z')(Symbol('F_N', commutative=True)), sin(Symbol('F_N', commutative=True)))"], [["integrate", 1, "Symbol('F_N', commutative=True)"], "Equality(Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))))"], ["renaming_premise", "Equality(Function('\\\\mathbf{v}')(Symbol('F_N', commutative=True)), Pow(Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Function('\\\\mathbf{v}')(Symbol('F_N', commutative=True)), Pow(Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)))"], [["evaluate_integrals", 4], "Equality(Function('\\\\mathbf{v}')(Symbol('F_N', commutative=True)), Pow(Add(Symbol('Q', commutative=True), Mul(Integer(-1), cos(Symbol('F_N', commutative=True)))), Integer(2)))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Pow(Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)), Pow(Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)))"], [["substitute_LHS_for_RHS", 5, 3], "Equality(Pow(Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)), Pow(Add(Symbol('Q', commutative=True), Mul(Integer(-1), cos(Symbol('F_N', commutative=True)))), Integer(2)))"], [["substitute_LHS_for_RHS", 7, 1], "Equality(Pow(Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)), Pow(Add(Symbol('Q', commutative=True), Mul(Integer(-1), cos(Symbol('F_N', commutative=True)))), Integer(2)))"]], "SR prompt": "Given \\operatorname{A_{z}}{(F_{N})} = \\sin{(F_{N})} and \\mathbf{v}{(F_{N})} = (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2}, then obtain (\\int \\sin{(F_{N})} dF_{N})^{2} = (Q - \\cos{(F_{N})})^{2}", "SR derivation": "\\operatorname{A_{z}}{(F_{N})} = \\sin{(F_{N})} and \\int \\operatorname{A_{z}}{(F_{N})} dF_{N} = \\int \\sin{(F_{N})} dF_{N} and \\mathbf{v}{(F_{N})} = (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2} and \\mathbf{v}{(F_{N})} = (\\int \\sin{(F_{N})} dF_{N})^{2} and \\mathbf{v}{(F_{N})} = (Q - \\cos{(F_{N})})^{2} and (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2} = (\\int \\sin{(F_{N})} dF_{N})^{2} and (\\int \\operatorname{A_{z}}{(F_{N})} dF_{N})^{2} = (Q - \\cos{(F_{N})})^{2} and (\\int \\sin{(F_{N})} dF_{N})^{2} = (Q - \\cos{(F_{N})})^{2}", "SR srepr_derivation": [["premise", "Equality(Function('A_z')(Symbol('F_N', commutative=True)), sin(Symbol('F_N', commutative=True)))"], [["integrate", 1, "Symbol('F_N', commutative=True)"], "Equality(Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))))"], ["renaming_premise", "Equality(Function('\\\\mathbf{v}')(Symbol('F_N', commutative=True)), Pow(Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Function('\\\\mathbf{v}')(Symbol('F_N', commutative=True)), Pow(Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)))"], [["evaluate_integrals", 4], "Equality(Function('\\\\mathbf{v}')(Symbol('F_N', commutative=True)), Pow(Add(Symbol('Q', commutative=True), Mul(Integer(-1), cos(Symbol('F_N', commutative=True)))), Integer(2)))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Pow(Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)), Pow(Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)))"], [["substitute_LHS_for_RHS", 5, 3], "Equality(Pow(Integral(Function('A_z')(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)), Pow(Add(Symbol('Q', commutative=True), Mul(Integer(-1), cos(Symbol('F_N', commutative=True)))), Integer(2)))"], [["substitute_LHS_for_RHS", 7, 6], "Equality(Pow(Integral(sin(Symbol('F_N', commutative=True)), Tuple(Symbol('F_N', commutative=True))), Integer(2)), Pow(Add(Symbol('Q', commutative=True), Mul(Integer(-1), cos(Symbol('F_N', commutative=True)))), Integer(2)))"]], "VR prompt": "Given \\iota{(\\alpha)} = \\sin{(\\alpha)} and \\upsilon{(\\alpha)} = (\\int \\iota{(\\alpha)} d\\alpha)^{2}, then derive \\upsilon{(\\alpha)} = (\\xi - \\cos{(\\alpha)})^{2}, then obtain (\\int \\sin{(\\alpha)} d\\alpha)^{2} = (\\xi - \\cos{(\\alpha)})^{2}", "VR derivation": "\\iota{(\\alpha)} = \\sin{(\\alpha)} and \\int \\iota{(\\alpha)} d\\alpha = \\int \\sin{(\\alpha)} d\\alpha and \\upsilon{(\\alpha)} = (\\int \\iota{(\\alpha)} d\\alpha)^{2} and \\upsilon{(\\alpha)} = (\\int \\sin{(\\alpha)} d\\alpha)^{2} and \\upsilon{(\\alpha)} = (\\xi - \\cos{(\\alpha)})^{2} and (\\int \\iota{(\\alpha)} d\\alpha)^{2} = (\\int \\sin{(\\alpha)} d\\alpha)^{2} and (\\int \\iota{(\\alpha)} d\\alpha)^{2} = (\\xi - \\cos{(\\alpha)})^{2} and (\\int \\sin{(\\alpha)} d\\alpha)^{2} = (\\xi - \\cos{(\\alpha)})^{2}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\iota')(Symbol('\\\\alpha', commutative=True)), sin(Symbol('\\\\alpha', commutative=True)))"], [["integrate", 1, "Symbol('\\\\alpha', commutative=True)"], "Equality(Integral(Function('\\\\iota')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Integral(sin(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))))"], ["renaming_premise", "Equality(Function('\\\\upsilon')(Symbol('\\\\alpha', commutative=True)), Pow(Integral(Function('\\\\iota')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Integer(2)))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Function('\\\\upsilon')(Symbol('\\\\alpha', commutative=True)), Pow(Integral(sin(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Integer(2)))"], [["evaluate_integrals", 4], "Equality(Function('\\\\upsilon')(Symbol('\\\\alpha', commutative=True)), Pow(Add(Symbol('\\\\xi', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\alpha', commutative=True)))), Integer(2)))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Pow(Integral(Function('\\\\iota')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Integer(2)), Pow(Integral(sin(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Integer(2)))"], [["substitute_LHS_for_RHS", 5, 3], "Equality(Pow(Integral(Function('\\\\iota')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Integer(2)), Pow(Add(Symbol('\\\\xi', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\alpha', commutative=True)))), Integer(2)))"], [["substitute_LHS_for_RHS", 7, 6], "Equality(Pow(Integral(sin(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True))), Integer(2)), Pow(Add(Symbol('\\\\xi', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\alpha', commutative=True)))), Integer(2)))"]], "static_flan-t5-large": "operatorname { A_ { z } } { (F_ { N } ) } = \\ sin { (F_ { N } ) } and \\ int \\ operatorname { A_ { z } } { (F_ { N } ) } dF_ { N } = \\ int \\ sin { (F_ { N } ) } dF_ { N } and \\ mathbf { v } { (F_ { N } ) } = ( \\ int \\ operatorname { A_ { z } } { (F_ { N } ) } dF_ { N } ) ^ { 2 } and \\ mathbf { v } { (F_ { N } ) } = ( \\ int \\ sin { (F_ { N } ) } dF_ { N } ) ^ { 2 } and \\ mathbf { v } { (F_ { N } ) } = (Q - \\ cos { (F_ { N } ) } ) ^ { 2 } and ( \\ int \\ sin { (F_ { N } ) } dF_ { N } ) ^ { 2 } = (Q - \\ cos { (F_ { N } ) } ) ^ { 2 }", "VR_flan-t5-large": "iota { ( \\ alpha) } = \\ sin { ( \\ alpha) } and \\ int \\ iota { ( \\ alpha) } d \\ alpha = \\ int \\ sin { ( \\ alpha) } d \\ alpha and ( \\ int \\ iota { ( \\ alpha) } d \\ alpha) ^ { 2 } = ( \\ int \\ sin { ( \\ alpha) } d \\ alpha) ^ { 2 } and \\ upsilon { ( \\ alpha) } = ( \\ int \\ iota { ( \\ alpha) } d \\ alpha) ^ { 2 } and \\ upsilon { ( \\ alpha) } = ( \\ xi - \\ cos { ( \\ alpha) } ) ^ { 2 } and \\ int \\ sin { ( \\ alpha) } d \\ alpha = ( \\ xi - \\ cos { ( \\ alpha) } ) ^ { 2 }", "EE_flan-t5-large": "sin { (F_ { N } ) } = \\ operatorname { A_ { z } } { (F_ { N } ) } and \\ int \\ operatorname { A_ { z } } { (F_ { N } ) } dF_ { N } = \\ int \\ operatorname { A_ { z } } { (F_ { N } ) } dF_ { N } and ( \\ int \\ operatorname { A_ { z } } { (F_ { N } ) } dF_ { N } ) ^ { 2 } = ( \\ int \\ operatorname { A_ { z } } { (F_ { N } ) } dF_ { N } ) ^ { 2 } and ( \\ int \\ operatorname { A_ { z } } { (F_ { N } ) } dF_ { N } ) ^ { 2 } = \\ mathbf { v } { (F_ { N } ) } and ( \\ int \\ sin { (F_ { N } ) } dF_ { N } ) ^ { 2 } = \\ mathbf { v } { (F_ { N } ) } and (Q - \\ cos { (F_ { N } ) } ) ^ { 2 } = \\ mathbf { v } { (F_ { N } ) } and (Q - \\ cos { (F_ { N } ) } ) ^ { 2 } = ( \\ int \\ sin { (F_ { N } ) } dF_ { N } ) ^ { 2 }", "AG_flan-t5-large": "operatorname { A_ { z } } { (F_ { N } ) } = \\ sin { (F_ { N } ) } and \\ int \\ operatorname { A_ { z } } { (F_ { N } ) } dF_ { N } = \\ int \\ sin { (F_ { N } ) } dF_ { N } and \\ mathbf { v } { (F_ { N } ) } = ( \\ int \\ operatorname { A_ { z } } { (F_ { N } ) } dF_ { N } ) ^ { 2 } and \\ mathbf { v } { (F_ { N } ) } = ( \\ int \\ sin { (F_ { N } ) } dF_ { N } ) ^ { 2 } and \\ mathbf { v } { (F_ { N } ) } = (Q - \\ cos { (F_ { N } ) } ) ^ { 2 } and ( \\ int \\ sin { (F_ { N } ) } dF_ { N } ) ^ { 2 } = (Q - \\ cos { (F_ { N } ) } ) ^ { 2 }", "SR_flan-t5-large": "operatorname { A_ { z } } { (F_ { N } ) } = \\ sin { (F_ { N } ) } and \\ int \\ operatorname { A_ { z } } { (F_ { N } ) } dF_ { N } = \\ int \\ sin { (F_ { N } ) } dF_ { N } and \\ mathbf { v } { (F_ { N } ) } = ( \\ int \\ operatorname { A_ { z } } { (F_ { N } ) } dF_ { N } ) ^ { 2 } and \\ mathbf { v } { (F_ { N } ) } = ( \\ int \\ sin { (F_ { N } ) } dF_ { N } ) ^ { 2 } and \\ mathbf { v } { (F_ { N } ) } = ( \\ int \\ sin { (F_ { N } ) } dF_ { N } ) ^ { 2 } and \\ mathbf { v } ^ { 2 } { (F_ { N } ) } = (Q - \\ cos { (F_ { N } ) } ) ^ { 2 } and ( \\ int \\ sin { (F_ { N } ) } dF_ { N } ) ^ { 2 } = (Q - \\ cos { (F_ { N } ) } ) ^ { 2 }", "static_rouge": 0.8160919540229885, "static_bleu": 0.6335403830801813, "static_bleurt": 0.8020082712173462, "static_gleu": 0.6852646638054364, "VR_rouge": -0.002805683772287071, "EE_rouge": -0.08647214854111407, "AG_rouge": 0.0, "SR_rouge": -0.028827832073268223, "VR_rouge_abs": 0.029159832330964086, "EE_rouge_abs": 0.15956876526296981, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.08387096774193559, "VR_bleu": -0.003268518285307942, "EE_bleu": -0.22614403938507455, "AG_bleu": 0.0, "SR_bleu": -0.1393417089787652, "VR_bleu_abs": 0.02011359867627488, "EE_bleu_abs": 0.23773485415361761, "AG_bleu_abs": 0.0, "SR_bleu_abs": 0.1552054574864714, "VR_bleurt": 0.14494287967681885, "EE_bleurt": 0.08601599931716919, "AG_bleurt": 0.0, "SR_bleurt": -0.018498897552490234, "VR_bleurt_abs": 0.19127001613378525, "EE_bleurt_abs": 0.038432776927948, "AG_bleurt_abs": 0.016617417335510254, "SR_bleurt_abs": 0.03043895959854126, "VR_gleu": 0.002238078938360699, "EE_gleu": -0.1802575107296137, "AG_gleu": 0.0, "SR_gleu": -0.10515021459227458, "VR_gleu_abs": 0.020996293541922395, "EE_gleu_abs": 0.2373611715839743, "AG_gleu_abs": 0.0, "SR_gleu_abs": 0.15520282186948853, "ratio_VR_rouge": 0.815668202764977, "ratio_VR_bleu": 0.9384757418920097, "ratio_VR_bleurt": 2.546723604377103, "ratio_VR_gleu": 0.9422188614732135, "ratio_EE_rouge": 0.819389199757298, "ratio_EE_bleu": 0.7529318956234325, "ratio_EE_bleurt": 0.9494947596098753, "ratio_EE_gleu": 0.7534688574484427, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 1.0, "ratio_AG_bleurt": 0.9811014358201658, "ratio_AG_gleu": 1.0, "ratio_SR_rouge": 0.9161290322580644, "ratio_SR_bleu": 0.8447945425135286, "ratio_SR_bleurt": 0.9653825489288798, "ratio_SR_gleu": 0.8447971781305115}, {"prompt": "Given r{(\\hat{X})} = \\sin{(\\hat{X})}, then derive \\frac{d}{d \\hat{X}} r{(\\hat{X})} = \\cos{(\\hat{X})}, then obtain \\frac{d^{2}}{d \\hat{X}^{2}} r{(\\hat{X})} = - \\sin{(\\hat{X})}", "derivation": "r{(\\hat{X})} = \\sin{(\\hat{X})} and \\frac{d}{d \\hat{X}} r{(\\hat{X})} = \\frac{d}{d \\hat{X}} \\sin{(\\hat{X})} and \\frac{d}{d \\hat{X}} r{(\\hat{X})} = \\cos{(\\hat{X})} and \\frac{d^{2}}{d \\hat{X}^{2}} r{(\\hat{X})} = \\frac{d}{d \\hat{X}} \\cos{(\\hat{X})} and \\frac{d^{2}}{d \\hat{X}^{2}} r{(\\hat{X})} = - \\sin{(\\hat{X})}", "srepr_derivation": [["premise", "Equality(Function('r')(Symbol('\\\\hat{X}', commutative=True)), sin(Symbol('\\\\hat{X}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\hat{X}', commutative=True)"], "Equality(Derivative(Function('r')(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('r')(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))), cos(Symbol('\\\\hat{X}', commutative=True)))"], [["differentiate", 3, "Symbol('\\\\hat{X}', commutative=True)"], "Equality(Derivative(Function('r')(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(2))), Derivative(cos(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 4], "Equality(Derivative(Function('r')(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(2))), Mul(Integer(-1), sin(Symbol('\\\\hat{X}', commutative=True))))"]], "EE prompt": "Given \\sin{(\\hat{X})} = r{(\\hat{X})}, then derive \\cos{(\\hat{X})} = \\frac{d}{d \\hat{X}} r{(\\hat{X})}, then obtain - \\sin{(\\hat{X})} = \\frac{d^{2}}{d \\hat{X}^{2}} r{(\\hat{X})}", "EE derivation": "\\sin{(\\hat{X})} = r{(\\hat{X})} and \\frac{d}{d \\hat{X}} \\sin{(\\hat{X})} = \\frac{d}{d \\hat{X}} r{(\\hat{X})} and \\cos{(\\hat{X})} = \\frac{d}{d \\hat{X}} r{(\\hat{X})} and \\frac{d}{d \\hat{X}} \\cos{(\\hat{X})} = \\frac{d^{2}}{d \\hat{X}^{2}} r{(\\hat{X})} and - \\sin{(\\hat{X})} = \\frac{d^{2}}{d \\hat{X}^{2}} r{(\\hat{X})}", "EE srepr_derivation": [["premise", "Equality(sin(Symbol('\\\\hat{X}', commutative=True)), Function('r')(Symbol('\\\\hat{X}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\hat{X}', commutative=True)"], "Equality(Derivative(sin(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))), Derivative(Function('r')(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(cos(Symbol('\\\\hat{X}', commutative=True)), Derivative(Function('r')(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))))"], [["differentiate", 3, "Symbol('\\\\hat{X}', commutative=True)"], "Equality(Derivative(cos(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))), Derivative(Function('r')(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(2))))"], [["evaluate_derivatives", 4], "Equality(Mul(Integer(-1), sin(Symbol('\\\\hat{X}', commutative=True))), Derivative(Function('r')(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(2))))"]], "AG prompt": "Given r{(\\hat{X})} = \\sin{(\\hat{X})}, then derive \\frac{d}{d \\hat{X}} r{(\\hat{X})} = \\cos{(\\hat{X})}, then obtain \\frac{d^{2}}{d \\hat{X}^{2}} \\sin{(\\hat{X})} = \\frac{d}{d \\hat{X}} \\cos{(\\hat{X})}", "AG derivation": "r{(\\hat{X})} = \\sin{(\\hat{X})} and \\frac{d}{d \\hat{X}} r{(\\hat{X})} = \\frac{d}{d \\hat{X}} \\sin{(\\hat{X})} and \\frac{d}{d \\hat{X}} r{(\\hat{X})} = \\cos{(\\hat{X})} and \\frac{d^{2}}{d \\hat{X}^{2}} r{(\\hat{X})} = \\frac{d}{d \\hat{X}} \\cos{(\\hat{X})} and \\frac{d^{2}}{d \\hat{X}^{2}} \\sin{(\\hat{X})} = \\frac{d}{d \\hat{X}} \\cos{(\\hat{X})}", "AG srepr_derivation": [["premise", "Equality(Function('r')(Symbol('\\\\hat{X}', commutative=True)), sin(Symbol('\\\\hat{X}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\hat{X}', commutative=True)"], "Equality(Derivative(Function('r')(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('r')(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))), cos(Symbol('\\\\hat{X}', commutative=True)))"], [["differentiate", 3, "Symbol('\\\\hat{X}', commutative=True)"], "Equality(Derivative(Function('r')(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(2))), Derivative(cos(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Derivative(sin(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(2))), Derivative(cos(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))))"]], "SR prompt": "Given r{(\\hat{X})} = \\sin{(\\hat{X})}, then obtain \\frac{d^{2}}{d \\hat{X}^{2}} r{(\\hat{X})} = - \\sin{(\\hat{X})}", "SR derivation": "r{(\\hat{X})} = \\sin{(\\hat{X})} and \\frac{d}{d \\hat{X}} r{(\\hat{X})} = \\frac{d}{d \\hat{X}} \\sin{(\\hat{X})} and \\frac{d}{d \\hat{X}} r{(\\hat{X})} = \\cos{(\\hat{X})} and \\frac{d^{2}}{d \\hat{X}^{2}} r{(\\hat{X})} = \\frac{d}{d \\hat{X}} \\cos{(\\hat{X})} and \\frac{d^{2}}{d \\hat{X}^{2}} r{(\\hat{X})} = - \\sin{(\\hat{X})}", "SR srepr_derivation": [["premise", "Equality(Function('r')(Symbol('\\\\hat{X}', commutative=True)), sin(Symbol('\\\\hat{X}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\hat{X}', commutative=True)"], "Equality(Derivative(Function('r')(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('r')(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))), cos(Symbol('\\\\hat{X}', commutative=True)))"], [["differentiate", 3, "Symbol('\\\\hat{X}', commutative=True)"], "Equality(Derivative(Function('r')(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(2))), Derivative(cos(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 4], "Equality(Derivative(Function('r')(Symbol('\\\\hat{X}', commutative=True)), Tuple(Symbol('\\\\hat{X}', commutative=True), Integer(2))), Mul(Integer(-1), sin(Symbol('\\\\hat{X}', commutative=True))))"]], "VR prompt": "Given \\kappa{(\\xi)} = \\sin{(\\xi)}, then derive \\frac{d}{d \\xi} \\kappa{(\\xi)} = \\cos{(\\xi)}, then obtain \\frac{d^{2}}{d \\xi^{2}} \\kappa{(\\xi)} = - \\sin{(\\xi)}", "VR derivation": "\\kappa{(\\xi)} = \\sin{(\\xi)} and \\frac{d}{d \\xi} \\kappa{(\\xi)} = \\frac{d}{d \\xi} \\sin{(\\xi)} and \\frac{d}{d \\xi} \\kappa{(\\xi)} = \\cos{(\\xi)} and \\frac{d^{2}}{d \\xi^{2}} \\kappa{(\\xi)} = \\frac{d}{d \\xi} \\cos{(\\xi)} and \\frac{d^{2}}{d \\xi^{2}} \\kappa{(\\xi)} = - \\sin{(\\xi)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\kappa')(Symbol('\\\\xi', commutative=True)), sin(Symbol('\\\\xi', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\xi', commutative=True)"], "Equality(Derivative(Function('\\\\kappa')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\kappa')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))), cos(Symbol('\\\\xi', commutative=True)))"], [["differentiate", 3, "Symbol('\\\\xi', commutative=True)"], "Equality(Derivative(Function('\\\\kappa')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(2))), Derivative(cos(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))))"], [["evaluate_derivatives", 4], "Equality(Derivative(Function('\\\\kappa')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(2))), Mul(Integer(-1), sin(Symbol('\\\\xi', commutative=True))))"]], "static_flan-t5-large": "r { ( \\ hat { X } ) } = \\ sin { ( \\ hat { X } ) } and \\ frac { d } { d \\ hat { X } } r { ( \\ hat { X } ) } = \\ frac { d } { d \\ hat { X } } \\ sin { ( \\ hat { X } ) } and \\ frac { d } { d \\ hat { X } } r { ( \\ hat { X } ) } = \\ cos { ( \\ hat { X } ) } and \\ frac { d } { d \\ hat { X } } \\ sin { ( \\ hat { X } ) } = \\ cos { ( \\ hat { X } ) } and \\ frac { d ^ { 2 } } { d \\ hat { X } ^ { 2 } } \\ sin { ( \\ hat { X } ) } = \\ frac { d } { d \\ hat { X } } \\ cos { ( \\ hat { X } ) } and \\ frac { d ^ { 2 } } { d \\ hat { X } ^ { 2 } } r { ( \\ hat { X } ) } = - \\ sin { ( \\ hat { X } ) }", "VR_flan-t5-large": "kappa { ( \\ xi) } = \\ sin { ( \\ xi) } and \\ frac { d } { d \\ xi } \\ kappa { ( \\ xi) } = \\ frac { d } { d \\ xi } \\ sin { ( \\ xi) } and \\ frac { d } { d \\ xi } \\ kappa { ( \\ xi) } = \\ cos { ( \\ xi) } and \\ frac { d ^ { 2 } } { d \\ xi ^ { 2 } } \\ kappa { ( \\ xi) } = \\ frac { d } { d \\ xi } \\ cos { ( \\ xi) } and \\ frac { d ^ { 2 } } { d \\ xi ^ { 2 } } \\ kappa { ( \\ xi) } = - \\ sin { ( \\ xi) }", "EE_flan-t5-large": "sin { ( \\ hat { X } ) } = r { ( \\ hat { X } ) } and \\ cos { ( \\ hat { X } ) } = \\ frac { d } { d \\ hat { X } } r { ( \\ hat { X } ) } and \\ cos { ( \\ hat { X } ) } = \\ frac { d } { d \\ hat { X } } \\ sin { ( \\ hat { X } ) } and \\ frac { d } { d \\ hat { X } } r { ( \\ hat { X } ) } = \\ frac { d ^ { 2 } } { d \\ hat { X } ^ { 2 } } r { ( \\ hat { X } ) } and \\ frac { d } { d \\ hat { X } } r { ( \\ hat { X } ) } = \\ frac { d ^ { 2 } } { d \\ hat { X } ^ { 2 } } r { ( \\ hat { X } ) } and - \\ sin { ( \\ hat { X } ) } = \\ frac { d ^ { 2 } } { d \\ hat { X } ^ { 2 } } r { ( \\ hat { X } ) }", "AG_flan-t5-large": "r { ( \\ hat { X } ) } = \\ sin { ( \\ hat { X } ) } and \\ frac { d } { d \\ hat { X } } r { ( \\ hat { X } ) } = \\ frac { d } { d \\ hat { X } } \\ sin { ( \\ hat { X } ) } and \\ frac { d } { d \\ hat { X } } r { ( \\ hat { X } ) } = \\ cos { ( \\ hat { X } ) } and \\ frac { d } { d \\ hat { X } } \\ sin { ( \\ hat { X } ) } = \\ cos { ( \\ hat { X } ) } and \\ frac { d ^ { 2 } } { d \\ hat { X } ^ { 2 } } \\ sin { ( \\ hat { X } ) } = \\ frac { d } { d \\ hat { X } } \\ cos { ( \\ hat { X } ) }", "SR_flan-t5-large": "r { ( \\ hat { X } ) } = \\ sin { ( \\ hat { X } ) } and \\ frac { d } { d \\ hat { X } } r { ( \\ hat { X } ) } = \\ frac { d } { d \\ hat { X } } \\ sin { ( \\ hat { X } ) } and \\ frac { d ^ { 2 } } { d \\ hat { X } ^ { 2 } } r { ( \\ hat { X } ) } = \\ frac { d ^ { 2 } } { d \\ hat { X } ^ { 2 } } \\ sin { ( \\ hat { X } ) } and \\ frac { d ^ { 2 } } { d \\ hat { X } ^ { 2 } } r { ( \\ hat { X } ) } = - \\ sin { ( \\ hat { X } ) }", "static_rouge": 0.8904109589041096, "static_bleu": 0.83498953080707, "static_bleurt": 0.8672787547111511, "static_gleu": 0.835030549898167, "VR_rouge": -0.1095890410958904, "EE_rouge": -0.0014809329877822908, "AG_rouge": -0.029297070292970573, "SR_rouge": 0.051701281484754835, "VR_rouge_abs": 0.02816166883963489, "EE_rouge_abs": 0.1128731343283581, "AG_rouge_abs": 0.01808553157473991, "SR_rouge_abs": 0.22058823529411764, "VR_bleu": -0.15896819155941644, "EE_bleu": 0.012401148897230874, "AG_bleu": -0.055971173901347315, "SR_bleu": 0.033628633080552195, "VR_bleu_abs": 0.09968393362686068, "EE_bleu_abs": 0.07285393746134772, "AG_bleu_abs": 0.11795608056863582, "SR_bleu_abs": 0.34058900740232434, "VR_bleurt": 0.08181458711624146, "EE_bleurt": 0.06054919958114624, "AG_bleurt": 0.10880905389785767, "SR_bleurt": 0.12493199110031128, "VR_bleurt_abs": 0.17607157677412033, "EE_bleurt_abs": -0.006805062294006348, "AG_bleurt_abs": 0.03781616687774658, "SR_bleurt_abs": 0.27593451738357544, "VR_gleu": -0.1588904227462099, "EE_gleu": 0.012385259317004738, "AG_gleu": -0.05952727323108464, "SR_gleu": 0.025391995681299573, "VR_gleu_abs": 0.07548646725394453, "EE_gleu_abs": 0.07189318395827804, "AG_gleu_abs": 0.10166673594081221, "SR_gleu_abs": 0.30549898167006106, "ratio_VR_rouge": 0.9076923076923079, "ratio_VR_bleu": 0.8044504812790988, "ratio_VR_bleurt": -1.364445146594151, "ratio_VR_gleu": 0.8585693728650701, "ratio_EE_rouge": 0.8780241935483872, "ratio_EE_bleu": 0.9252255000644045, "ratio_EE_bleurt": 1.0087769038201402, "ratio_EE_gleu": 0.926240614727601, "ratio_AG_rouge": 0.9803602430555559, "ratio_AG_bleu": 0.8715429618416144, "ratio_AG_bleurt": 0.9540994683945051, "ratio_AG_gleu": 0.8892962208644489, "ratio_SR_rouge": 0.7794117647058824, "ratio_SR_bleu": 0.6594109925976757, "ratio_SR_bleurt": 0.6617419400894591, "ratio_SR_gleu": 0.6945010183299389}, {"prompt": "Given A{(\\dot{z})} = e^{\\sin{(\\dot{z})}}, then derive \\frac{d}{d \\dot{z}} A{(\\dot{z})} = e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})}, then obtain (e^{- A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})}})^{\\dot{z}} = (e^{- A{(\\dot{z})} + e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})}})^{\\dot{z}}", "derivation": "A{(\\dot{z})} = e^{\\sin{(\\dot{z})}} and \\frac{d}{d \\dot{z}} A{(\\dot{z})} = \\frac{d}{d \\dot{z}} e^{\\sin{(\\dot{z})}} and \\frac{d}{d \\dot{z}} A{(\\dot{z})} = e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})} and - A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})} = - A{(\\dot{z})} + e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})} and e^{- A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})}} = e^{- A{(\\dot{z})} + e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})}} and (e^{- A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})}})^{\\dot{z}} = (e^{- A{(\\dot{z})} + e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})}})^{\\dot{z}}", "srepr_derivation": [["premise", "Equality(Function('A')(Symbol('\\\\dot{z}', commutative=True)), exp(sin(Symbol('\\\\dot{z}', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\dot{z}', commutative=True)"], "Equality(Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))), Derivative(exp(sin(Symbol('\\\\dot{z}', commutative=True))), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))), Mul(exp(sin(Symbol('\\\\dot{z}', commutative=True))), cos(Symbol('\\\\dot{z}', commutative=True))))"], [["minus", 3, "Function('A')(Symbol('\\\\dot{z}', commutative=True))"], "Equality(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1)))), Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Mul(exp(sin(Symbol('\\\\dot{z}', commutative=True))), cos(Symbol('\\\\dot{z}', commutative=True)))))"], [["exp", 4], "Equality(exp(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))), exp(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Mul(exp(sin(Symbol('\\\\dot{z}', commutative=True))), cos(Symbol('\\\\dot{z}', commutative=True))))))"], [["power", 5, "Symbol('\\\\dot{z}', commutative=True)"], "Equality(Pow(exp(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))), Symbol('\\\\dot{z}', commutative=True)), Pow(exp(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Mul(exp(sin(Symbol('\\\\dot{z}', commutative=True))), cos(Symbol('\\\\dot{z}', commutative=True))))), Symbol('\\\\dot{z}', commutative=True)))"]], "EE prompt": "Given e^{\\sin{(\\dot{z})}} = A{(\\dot{z})}, then derive e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})} = \\frac{d}{d \\dot{z}} A{(\\dot{z})}, then obtain (e^{- A{(\\dot{z})} + e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})}})^{\\dot{z}} = (e^{- A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})}})^{\\dot{z}}", "EE derivation": "e^{\\sin{(\\dot{z})}} = A{(\\dot{z})} and \\frac{d}{d \\dot{z}} e^{\\sin{(\\dot{z})}} = \\frac{d}{d \\dot{z}} A{(\\dot{z})} and e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})} = \\frac{d}{d \\dot{z}} A{(\\dot{z})} and - A{(\\dot{z})} + e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})} = - A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})} and e^{- A{(\\dot{z})} + e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})}} = e^{- A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})}} and (e^{- A{(\\dot{z})} + e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})}})^{\\dot{z}} = (e^{- A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})}})^{\\dot{z}}", "EE srepr_derivation": [["premise", "Equality(exp(sin(Symbol('\\\\dot{z}', commutative=True))), Function('A')(Symbol('\\\\dot{z}', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\dot{z}', commutative=True)"], "Equality(Derivative(exp(sin(Symbol('\\\\dot{z}', commutative=True))), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))), Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Mul(exp(sin(Symbol('\\\\dot{z}', commutative=True))), cos(Symbol('\\\\dot{z}', commutative=True))), Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))"], [["minus", 3, "Function('A')(Symbol('\\\\dot{z}', commutative=True))"], "Equality(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Mul(exp(sin(Symbol('\\\\dot{z}', commutative=True))), cos(Symbol('\\\\dot{z}', commutative=True)))), Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1)))))"], [["exp", 4], "Equality(exp(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Mul(exp(sin(Symbol('\\\\dot{z}', commutative=True))), cos(Symbol('\\\\dot{z}', commutative=True))))), exp(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))))"], [["power", 5, "Symbol('\\\\dot{z}', commutative=True)"], "Equality(Pow(exp(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Mul(exp(sin(Symbol('\\\\dot{z}', commutative=True))), cos(Symbol('\\\\dot{z}', commutative=True))))), Symbol('\\\\dot{z}', commutative=True)), Pow(exp(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))), Symbol('\\\\dot{z}', commutative=True)))"]], "AG prompt": "Given A{(\\dot{z})} = e^{\\sin{(\\dot{z})}}, then derive \\frac{d}{d \\dot{z}} A{(\\dot{z})} = e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})}, then obtain e^{- A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})}} = e^{A{(\\dot{z})} \\cos{(\\dot{z})} - A{(\\dot{z})}}", "AG derivation": "A{(\\dot{z})} = e^{\\sin{(\\dot{z})}} and \\frac{d}{d \\dot{z}} A{(\\dot{z})} = \\frac{d}{d \\dot{z}} e^{\\sin{(\\dot{z})}} and \\frac{d}{d \\dot{z}} A{(\\dot{z})} = e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})} and - A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})} = - A{(\\dot{z})} + e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})} and e^{- A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})}} = e^{- A{(\\dot{z})} + e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})}} and e^{- A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})}} = e^{A{(\\dot{z})} \\cos{(\\dot{z})} - A{(\\dot{z})}}", "AG srepr_derivation": [["premise", "Equality(Function('A')(Symbol('\\\\dot{z}', commutative=True)), exp(sin(Symbol('\\\\dot{z}', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\dot{z}', commutative=True)"], "Equality(Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))), Derivative(exp(sin(Symbol('\\\\dot{z}', commutative=True))), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))), Mul(exp(sin(Symbol('\\\\dot{z}', commutative=True))), cos(Symbol('\\\\dot{z}', commutative=True))))"], [["minus", 3, "Function('A')(Symbol('\\\\dot{z}', commutative=True))"], "Equality(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1)))), Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Mul(exp(sin(Symbol('\\\\dot{z}', commutative=True))), cos(Symbol('\\\\dot{z}', commutative=True)))))"], [["exp", 4], "Equality(exp(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))), exp(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Mul(exp(sin(Symbol('\\\\dot{z}', commutative=True))), cos(Symbol('\\\\dot{z}', commutative=True))))))"], [["substitute_RHS_for_LHS", 5, 1], "Equality(exp(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))), exp(Add(Mul(Function('A')(Symbol('\\\\dot{z}', commutative=True)), cos(Symbol('\\\\dot{z}', commutative=True))), Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))))))"]], "SR prompt": "Given A{(\\dot{z})} = e^{\\sin{(\\dot{z})}}, then obtain (e^{- A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})}})^{\\dot{z}} = (e^{- A{(\\dot{z})} + e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})}})^{\\dot{z}}", "SR derivation": "A{(\\dot{z})} = e^{\\sin{(\\dot{z})}} and \\frac{d}{d \\dot{z}} A{(\\dot{z})} = \\frac{d}{d \\dot{z}} e^{\\sin{(\\dot{z})}} and \\frac{d}{d \\dot{z}} A{(\\dot{z})} = e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})} and - A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})} = - A{(\\dot{z})} + e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})} and e^{- A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})}} = e^{- A{(\\dot{z})} + e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})}} and (e^{- A{(\\dot{z})} + \\frac{d}{d \\dot{z}} A{(\\dot{z})}})^{\\dot{z}} = (e^{- A{(\\dot{z})} + e^{\\sin{(\\dot{z})}} \\cos{(\\dot{z})}})^{\\dot{z}}", "SR srepr_derivation": [["premise", "Equality(Function('A')(Symbol('\\\\dot{z}', commutative=True)), exp(sin(Symbol('\\\\dot{z}', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\dot{z}', commutative=True)"], "Equality(Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))), Derivative(exp(sin(Symbol('\\\\dot{z}', commutative=True))), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))), Mul(exp(sin(Symbol('\\\\dot{z}', commutative=True))), cos(Symbol('\\\\dot{z}', commutative=True))))"], [["minus", 3, "Function('A')(Symbol('\\\\dot{z}', commutative=True))"], "Equality(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1)))), Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Mul(exp(sin(Symbol('\\\\dot{z}', commutative=True))), cos(Symbol('\\\\dot{z}', commutative=True)))))"], [["exp", 4], "Equality(exp(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))), exp(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Mul(exp(sin(Symbol('\\\\dot{z}', commutative=True))), cos(Symbol('\\\\dot{z}', commutative=True))))))"], [["power", 5, "Symbol('\\\\dot{z}', commutative=True)"], "Equality(Pow(exp(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Derivative(Function('A')(Symbol('\\\\dot{z}', commutative=True)), Tuple(Symbol('\\\\dot{z}', commutative=True), Integer(1))))), Symbol('\\\\dot{z}', commutative=True)), Pow(exp(Add(Mul(Integer(-1), Function('A')(Symbol('\\\\dot{z}', commutative=True))), Mul(exp(sin(Symbol('\\\\dot{z}', commutative=True))), cos(Symbol('\\\\dot{z}', commutative=True))))), Symbol('\\\\dot{z}', commutative=True)))"]], "VR prompt": "Given \\kappa{(\\alpha)} = e^{\\sin{(\\alpha)}}, then derive \\frac{d}{d \\alpha} \\kappa{(\\alpha)} = e^{\\sin{(\\alpha)}} \\cos{(\\alpha)}, then obtain (e^{- \\kappa{(\\alpha)} + \\frac{d}{d \\alpha} \\kappa{(\\alpha)}})^{\\alpha} = (e^{- \\kappa{(\\alpha)} + e^{\\sin{(\\alpha)}} \\cos{(\\alpha)}})^{\\alpha}", "VR derivation": "\\kappa{(\\alpha)} = e^{\\sin{(\\alpha)}} and \\frac{d}{d \\alpha} \\kappa{(\\alpha)} = \\frac{d}{d \\alpha} e^{\\sin{(\\alpha)}} and \\frac{d}{d \\alpha} \\kappa{(\\alpha)} = e^{\\sin{(\\alpha)}} \\cos{(\\alpha)} and - \\kappa{(\\alpha)} + \\frac{d}{d \\alpha} \\kappa{(\\alpha)} = - \\kappa{(\\alpha)} + e^{\\sin{(\\alpha)}} \\cos{(\\alpha)} and e^{- \\kappa{(\\alpha)} + \\frac{d}{d \\alpha} \\kappa{(\\alpha)}} = e^{- \\kappa{(\\alpha)} + e^{\\sin{(\\alpha)}} \\cos{(\\alpha)}} and (e^{- \\kappa{(\\alpha)} + \\frac{d}{d \\alpha} \\kappa{(\\alpha)}})^{\\alpha} = (e^{- \\kappa{(\\alpha)} + e^{\\sin{(\\alpha)}} \\cos{(\\alpha)}})^{\\alpha}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\kappa')(Symbol('\\\\alpha', commutative=True)), exp(sin(Symbol('\\\\alpha', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\alpha', commutative=True)"], "Equality(Derivative(Function('\\\\kappa')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))), Derivative(exp(sin(Symbol('\\\\alpha', commutative=True))), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\kappa')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))), Mul(exp(sin(Symbol('\\\\alpha', commutative=True))), cos(Symbol('\\\\alpha', commutative=True))))"], [["minus", 3, "Function('\\\\kappa')(Symbol('\\\\alpha', commutative=True))"], "Equality(Add(Mul(Integer(-1), Function('\\\\kappa')(Symbol('\\\\alpha', commutative=True))), Derivative(Function('\\\\kappa')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1)))), Add(Mul(Integer(-1), Function('\\\\kappa')(Symbol('\\\\alpha', commutative=True))), Mul(exp(sin(Symbol('\\\\alpha', commutative=True))), cos(Symbol('\\\\alpha', commutative=True)))))"], [["exp", 4], "Equality(exp(Add(Mul(Integer(-1), Function('\\\\kappa')(Symbol('\\\\alpha', commutative=True))), Derivative(Function('\\\\kappa')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))))), exp(Add(Mul(Integer(-1), Function('\\\\kappa')(Symbol('\\\\alpha', commutative=True))), Mul(exp(sin(Symbol('\\\\alpha', commutative=True))), cos(Symbol('\\\\alpha', commutative=True))))))"], [["power", 5, "Symbol('\\\\alpha', commutative=True)"], "Equality(Pow(exp(Add(Mul(Integer(-1), Function('\\\\kappa')(Symbol('\\\\alpha', commutative=True))), Derivative(Function('\\\\kappa')(Symbol('\\\\alpha', commutative=True)), Tuple(Symbol('\\\\alpha', commutative=True), Integer(1))))), Symbol('\\\\alpha', commutative=True)), Pow(exp(Add(Mul(Integer(-1), Function('\\\\kappa')(Symbol('\\\\alpha', commutative=True))), Mul(exp(sin(Symbol('\\\\alpha', commutative=True))), cos(Symbol('\\\\alpha', commutative=True))))), Symbol('\\\\alpha', commutative=True)))"]], "static_flan-t5-large": "{ ( \\ dot { z } ) } = e ^ { \\ sin { ( \\ dot { z } ) } } and \\ frac { d } { d \\ dot { z } } A { ( \\ dot { z } ) } = \\ frac { d } { d \\ dot { z } } e ^ { \\ sin { ( \\ dot { z } ) } } and \\ frac { d } { d \\ dot { z } } A { ( \\ dot { z } ) } = e ^ { \\ sin { ( \\ dot { z } ) } } \\ cos { ( \\ dot { z } ) } and e ^ { - A { ( \\ dot { z } ) } + \\ frac { d } { d \\ dot { z } } A { ( \\ dot { z } ) } } = e ^ { - A { ( \\ dot { z } ) } + e ^ { \\ sin { ( \\ dot { z } ) } } \\ cos { ( \\ dot { z } ) } } and (e ^ { - A { ( \\ dot { z } ) } + \\ frac { d } { d \\ dot { z } } A { ( \\ dot { z } ) } } ) ^ { \\ dot { z } } = (e ^ { - A { ( \\ dot { z } ) } + e ^ { \\ sin { ( \\ dot { z } ) } } \\ cos { ( \\ dot { z } ) } } ) ^ { \\ dot { z } }", "VR_flan-t5-large": "kappa { ( \\ alpha) } = e ^ { \\ sin { ( \\ alpha) } } and \\ frac { d } { d \\ alpha } \\ kappa { ( \\ alpha) } = \\ frac { d } { d \\ alpha } e ^ { \\ sin { ( \\ alpha) } } and \\ frac { d } { d \\ alpha } \\ kappa { ( \\ alpha) } = e ^ { \\ sin { ( \\ alpha) } } \\ cos { ( \\ alpha) } and e ^ { - \\ kappa { ( \\ alpha) } + \\ frac { d } { d \\ alpha } \\ kappa { ( \\ alpha) } } = e ^ { - \\ kappa { ( \\ alpha) } + e ^ { \\ sin { ( \\ alpha) } } \\ cos { ( \\ alpha) } } and (e ^ { - \\ kappa { ( \\ alpha) } + \\ frac { d } { d \\ alpha } \\ kappa { ( \\ alpha) } } ) ^ { \\ alpha } = (e ^ { - \\ kappa { ( \\ alpha) } + e ^ { \\ sin { ( \\ alpha) } } \\ cos { ( \\ alpha) } } ) ^ { \\ alpha }", "EE_flan-t5-large": "sin { ( \\ dot { z } ) } } = A { ( \\ dot { z } ) } and e ^ { \\ sin { ( \\ dot { z } ) } } \\ cos { ( \\ dot { z } ) } = A { ( \\ dot { z } ) } and \\ frac { d } { d \\ dot { z } } e ^ { \\ sin { ( \\ dot { z } ) } } \\ cos { ( \\ dot { z } ) } = \\ frac { d } { d \\ dot { z } } A { ( \\ dot { z } ) } and e ^ { \\ sin { ( \\ dot { z } ) } } \\ cos { ( \\ dot { z } ) } = \\ frac { d } { d \\ dot { z } } A { ( \\ dot { z } ) } and e ^ { - A { ( \\ dot { z } ) } + e ^ { \\ sin { ( \\ dot { z } ) } } \\ cos { ( \\ dot { z } ) } } = e ^ { - A { ( \\ dot { z } ) } + \\ frac { d } { d \\ dot { z } } A { ( \\ dot { z } ) } } and (e ^ { - A { ( \\ dot { z } ) } + e ^ { \\ sin { ( \\ dot { z } ) } } \\ cos { ( \\ dot { z } ) } } ) ^ { \\ dot { z } } = (e ^ { - A { ( \\ dot { z } ) } + \\ frac { d } { d \\ dot { z } } A { ( \\ dot { z } ) } } ) ^ { \\ dot { z } }", "AG_flan-t5-large": "{ ( \\ dot { z } ) } = e ^ { \\ sin { ( \\ dot { z } ) } } and \\ frac { d } { d \\ dot { z } } A { ( \\ dot { z } ) } = \\ frac { d } { d \\ dot { z } } e ^ { \\ sin { ( \\ dot { z } ) } } and \\ frac { d } { d \\ dot { z } } A { ( \\ dot { z } ) } = e ^ { \\ sin { ( \\ dot { z } ) } } \\ cos { ( \\ dot { z } ) } and - A { ( \\ dot { z } ) } + \\ frac { d } { d \\ dot { z } } A { ( \\ dot { z } ) } = A { ( \\ dot { z } ) } \\ cos { ( \\ dot { z } ) } - A { ( \\ dot { z } ) } and e ^ { - A { ( \\ dot { z } ) } + \\ frac { d } { d \\ dot { z } } A { ( \\ dot { z } ) } } = e ^ { A { ( \\ dot { z } ) } \\ cos { ( \\ dot { z } ) } - A { ( \\ dot { z } ) } }", "SR_flan-t5-large": "{ ( \\ dot { z } ) } = e ^ { \\ sin { ( \\ dot { z } ) } } and \\ frac { d } { d \\ dot { z } } A { ( \\ dot { z } ) } = \\ frac { d } { d \\ dot { z } } e ^ { \\ sin { ( \\ dot { z } ) } } and e ^ { - A { ( \\ dot { z } ) } + \\ frac { d } { d \\ dot { z } } A { ( \\ dot { z } ) } } = e ^ { - A { ( \\ dot { z } ) } + \\ frac { d } { d \\ dot { z } } e ^ { \\ sin { ( \\ dot { z } ) } } } and (e ^ { - A { ( \\ dot { z } ) } + \\ frac { d } { d \\ dot { z } } A { ( \\ dot { z } ) } } ) ^ { \\ dot { z } } = (e ^ { - A { ( \\ dot { z } ) } + e ^ { \\ sin { ( \\ dot { z } ) } } \\ cos { ( \\ dot { z } ) } } ) ^ { \\ dot { z } }", "static_rouge": 0.8878048780487805, "static_bleu": 0.7856296024936718, "static_bleurt": 0.7669185400009155, "static_gleu": 0.8048780487804879, "VR_rouge": -0.0069319640564826646, "EE_rouge": -0.04370197126628794, "AG_rouge": 0.02322154471544724, "SR_rouge": 0.08152215553569153, "VR_rouge_abs": -0.016771488469601664, "EE_rouge_abs": 0.07572502685284643, "AG_rouge_abs": 0.07458378434101343, "SR_rouge_abs": 0.09523809523809512, "VR_bleu": 0.0006232681961699793, "EE_bleu": -0.11659932960717523, "AG_bleu": 0.07470484547127998, "SR_bleu": 0.1665346698433584, "VR_bleu_abs": -0.0130327879685056, "EE_bleu_abs": 0.1266195108233763, "AG_bleu_abs": 0.08440487476868341, "SR_bleu_abs": 0.18093323345546242, "VR_bleurt": -0.06541621685028076, "EE_bleurt": 0.040378451347351074, "AG_bleurt": -0.057426393032073975, "SR_bleurt": 0.06343406438827515, "VR_bleurt_abs": 0.00739375501871109, "EE_bleurt_abs": 0.015547871589660645, "AG_bleurt_abs": 0.06464678049087524, "SR_bleurt_abs": 0.1059674620628357, "VR_gleu": 0.0007046940453353523, "EE_gleu": -0.10012836970474959, "AG_gleu": 0.06278726473647134, "SR_gleu": 0.1322207958921695, "VR_gleu_abs": -0.012350721593340275, "EE_gleu_abs": 0.1266200203177641, "AG_gleu_abs": 0.0785778192710157, "SR_gleu_abs": 0.16905901116427435, "ratio_VR_rouge": 1.0754716981132075, "ratio_VR_bleu": 1.0265777250630532, "ratio_VR_bleurt": 0.9138113436702897, "ratio_VR_gleu": 1.0239930476838206, "ratio_EE_rouge": 0.9222283507997794, "ratio_EE_bleu": 0.8711285631979583, "ratio_EE_bleurt": 0.9804090773903404, "ratio_EE_gleu": 0.8711469682200677, "ratio_AG_rouge": 0.9222795144483832, "ratio_AG_bleu": 0.9073075680160914, "ratio_AG_bleurt": 0.9267349658450068, "ratio_AG_gleu": 0.9139070025145974, "ratio_SR_rouge": 0.9047619047619049, "ratio_SR_bleu": 0.8190667665445376, "ratio_SR_bleurt": 0.879905701901931, "ratio_SR_gleu": 0.8309409888357256}, {"prompt": "Given \\dot{z}{(L_{\\varepsilon})} = \\cos{(L_{\\varepsilon})}, then derive \\int \\dot{z}{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 = \\pi + \\sin{(L_{\\varepsilon})} + 1, then obtain (r_{0} + \\sin{(L_{\\varepsilon})} + 1)^{\\pi} = (\\pi + \\sin{(L_{\\varepsilon})} + 1)^{\\pi}", "derivation": "\\dot{z}{(L_{\\varepsilon})} = \\cos{(L_{\\varepsilon})} and \\int \\dot{z}{(L_{\\varepsilon})} dL_{\\varepsilon} = \\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} and \\int \\dot{z}{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 = \\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 and \\int \\dot{z}{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 = \\pi + \\sin{(L_{\\varepsilon})} + 1 and \\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 = \\pi + \\sin{(L_{\\varepsilon})} + 1 and (\\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} + 1)^{\\pi} = (\\pi + \\sin{(L_{\\varepsilon})} + 1)^{\\pi} and (r_{0} + \\sin{(L_{\\varepsilon})} + 1)^{\\pi} = (\\pi + \\sin{(L_{\\varepsilon})} + 1)^{\\pi}", "srepr_derivation": [["premise", "Equality(Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)), cos(Symbol('L_{\\\\varepsilon}', commutative=True)))"], [["integrate", 1, "Symbol('L_{\\\\varepsilon}', commutative=True)"], "Equality(Integral(Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))))"], [["minus", 2, "Integer(-1)"], "Equality(Add(Integral(Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)), Add(Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)))"], [["evaluate_integrals", 3], "Equality(Add(Integral(Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)), Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Add(Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)), Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)))"], [["power", 5, "Symbol('\\\\pi', commutative=True)"], "Equality(Pow(Add(Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)), Symbol('\\\\pi', commutative=True)), Pow(Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)), Symbol('\\\\pi', commutative=True)))"], [["evaluate_integrals", 6], "Equality(Pow(Add(Symbol('r_0', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)), Symbol('\\\\pi', commutative=True)), Pow(Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)), Symbol('\\\\pi', commutative=True)))"]], "EE prompt": "Given \\cos{(L_{\\varepsilon})} = \\dot{z}{(L_{\\varepsilon})}, then derive \\pi + \\sin{(L_{\\varepsilon})} + 1 = \\int \\dot{z}{(L_{\\varepsilon})} dL_{\\varepsilon} + 1, then obtain (\\pi + \\sin{(L_{\\varepsilon})} + 1)^{\\pi} = (r_{0} + \\sin{(L_{\\varepsilon})} + 1)^{\\pi}", "EE derivation": "\\cos{(L_{\\varepsilon})} = \\dot{z}{(L_{\\varepsilon})} and \\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} = \\int \\dot{z}{(L_{\\varepsilon})} dL_{\\varepsilon} and \\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 = \\int \\dot{z}{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 and \\pi + \\sin{(L_{\\varepsilon})} + 1 = \\int \\dot{z}{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 and \\pi + \\sin{(L_{\\varepsilon})} + 1 = \\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 and (\\pi + \\sin{(L_{\\varepsilon})} + 1)^{\\pi} = (\\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} + 1)^{\\pi} and (\\pi + \\sin{(L_{\\varepsilon})} + 1)^{\\pi} = (r_{0} + \\sin{(L_{\\varepsilon})} + 1)^{\\pi}", "EE srepr_derivation": [["premise", "Equality(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)))"], [["integrate", 1, "Symbol('L_{\\\\varepsilon}', commutative=True)"], "Equality(Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integral(Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))))"], [["minus", 2, "Integer(-1)"], "Equality(Add(Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)), Add(Integral(Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)), Add(Integral(Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)), Add(Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)))"], [["power", 5, "Symbol('\\\\pi', commutative=True)"], "Equality(Pow(Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)), Symbol('\\\\pi', commutative=True)), Pow(Add(Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)), Symbol('\\\\pi', commutative=True)))"], [["evaluate_integrals", 6], "Equality(Pow(Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)), Symbol('\\\\pi', commutative=True)), Pow(Add(Symbol('r_0', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)), Symbol('\\\\pi', commutative=True)))"]], "AG prompt": "Given \\dot{z}{(L_{\\varepsilon})} = \\cos{(L_{\\varepsilon})}, then derive \\int \\dot{z}{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 = \\pi + \\sin{(L_{\\varepsilon})} + 1, then obtain (g_{\\varepsilon} + \\sin{(L_{\\varepsilon})} + 1)^{\\pi} = (\\pi + \\sin{(L_{\\varepsilon})} + 1)^{\\pi}", "AG derivation": "\\dot{z}{(L_{\\varepsilon})} = \\cos{(L_{\\varepsilon})} and \\int \\dot{z}{(L_{\\varepsilon})} dL_{\\varepsilon} = \\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} and \\int \\dot{z}{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 = \\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 and \\int \\dot{z}{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 = \\pi + \\sin{(L_{\\varepsilon})} + 1 and \\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 = \\pi + \\sin{(L_{\\varepsilon})} + 1 and (\\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} + 1)^{\\pi} = (\\pi + \\sin{(L_{\\varepsilon})} + 1)^{\\pi} and (g_{\\varepsilon} + \\sin{(L_{\\varepsilon})} + 1)^{\\pi} = (\\pi + \\sin{(L_{\\varepsilon})} + 1)^{\\pi}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)), cos(Symbol('L_{\\\\varepsilon}', commutative=True)))"], [["integrate", 1, "Symbol('L_{\\\\varepsilon}', commutative=True)"], "Equality(Integral(Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))))"], [["minus", 2, "Integer(-1)"], "Equality(Add(Integral(Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)), Add(Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)))"], [["evaluate_integrals", 3], "Equality(Add(Integral(Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)), Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Add(Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)), Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)))"], [["power", 5, "Symbol('\\\\pi', commutative=True)"], "Equality(Pow(Add(Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)), Symbol('\\\\pi', commutative=True)), Pow(Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)), Symbol('\\\\pi', commutative=True)))"], [["evaluate_integrals", 6], "Equality(Pow(Add(Symbol('g_{\\\\varepsilon}', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)), Symbol('\\\\pi', commutative=True)), Pow(Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)), Symbol('\\\\pi', commutative=True)))"]], "SR prompt": "Given \\dot{z}{(L_{\\varepsilon})} = \\cos{(L_{\\varepsilon})}, then obtain (r_{0} + \\sin{(L_{\\varepsilon})} + 1)^{\\pi} = (\\pi + \\sin{(L_{\\varepsilon})} + 1)^{\\pi}", "SR derivation": "\\dot{z}{(L_{\\varepsilon})} = \\cos{(L_{\\varepsilon})} and \\int \\dot{z}{(L_{\\varepsilon})} dL_{\\varepsilon} = \\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} and \\int \\dot{z}{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 = \\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 and \\int \\dot{z}{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 = \\pi + \\sin{(L_{\\varepsilon})} + 1 and \\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} + 1 = \\pi + \\sin{(L_{\\varepsilon})} + 1 and (\\int \\cos{(L_{\\varepsilon})} dL_{\\varepsilon} + 1)^{\\pi} = (\\pi + \\sin{(L_{\\varepsilon})} + 1)^{\\pi} and (r_{0} + \\sin{(L_{\\varepsilon})} + 1)^{\\pi} = (\\pi + \\sin{(L_{\\varepsilon})} + 1)^{\\pi}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)), cos(Symbol('L_{\\\\varepsilon}', commutative=True)))"], [["integrate", 1, "Symbol('L_{\\\\varepsilon}', commutative=True)"], "Equality(Integral(Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))))"], [["minus", 2, "Integer(-1)"], "Equality(Add(Integral(Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)), Add(Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)))"], [["evaluate_integrals", 3], "Equality(Add(Integral(Function('\\\\dot{z}')(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)), Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Add(Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)), Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)))"], [["power", 5, "Symbol('\\\\pi', commutative=True)"], "Equality(Pow(Add(Integral(cos(Symbol('L_{\\\\varepsilon}', commutative=True)), Tuple(Symbol('L_{\\\\varepsilon}', commutative=True))), Integer(1)), Symbol('\\\\pi', commutative=True)), Pow(Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)), Symbol('\\\\pi', commutative=True)))"], [["evaluate_integrals", 6], "Equality(Pow(Add(Symbol('r_0', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)), Symbol('\\\\pi', commutative=True)), Pow(Add(Symbol('\\\\pi', commutative=True), sin(Symbol('L_{\\\\varepsilon}', commutative=True)), Integer(1)), Symbol('\\\\pi', commutative=True)))"]], "VR prompt": "Given \\beta{(\\upsilon)} = \\cos{(\\upsilon)}, then derive \\int \\beta{(\\upsilon)} d\\upsilon + 1 = \\gamma + \\sin{(\\upsilon)} + 1, then obtain (\\tau + \\sin{(\\upsilon)} + 1)^{\\gamma} = (\\gamma + \\sin{(\\upsilon)} + 1)^{\\gamma}", "VR derivation": "\\beta{(\\upsilon)} = \\cos{(\\upsilon)} and \\int \\beta{(\\upsilon)} d\\upsilon = \\int \\cos{(\\upsilon)} d\\upsilon and \\int \\beta{(\\upsilon)} d\\upsilon + 1 = \\int \\cos{(\\upsilon)} d\\upsilon + 1 and \\int \\beta{(\\upsilon)} d\\upsilon + 1 = \\gamma + \\sin{(\\upsilon)} + 1 and \\int \\cos{(\\upsilon)} d\\upsilon + 1 = \\gamma + \\sin{(\\upsilon)} + 1 and (\\int \\cos{(\\upsilon)} d\\upsilon + 1)^{\\gamma} = (\\gamma + \\sin{(\\upsilon)} + 1)^{\\gamma} and (\\tau + \\sin{(\\upsilon)} + 1)^{\\gamma} = (\\gamma + \\sin{(\\upsilon)} + 1)^{\\gamma}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\beta')(Symbol('\\\\upsilon', commutative=True)), cos(Symbol('\\\\upsilon', commutative=True)))"], [["integrate", 1, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Integral(Function('\\\\beta')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Integral(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))))"], [["minus", 2, "Integer(-1)"], "Equality(Add(Integral(Function('\\\\beta')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Integer(1)), Add(Integral(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Integer(1)))"], [["evaluate_integrals", 3], "Equality(Add(Integral(Function('\\\\beta')(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Integer(1)), Add(Symbol('\\\\gamma', commutative=True), sin(Symbol('\\\\upsilon', commutative=True)), Integer(1)))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Add(Integral(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Integer(1)), Add(Symbol('\\\\gamma', commutative=True), sin(Symbol('\\\\upsilon', commutative=True)), Integer(1)))"], [["power", 5, "Symbol('\\\\gamma', commutative=True)"], "Equality(Pow(Add(Integral(cos(Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Integer(1)), Symbol('\\\\gamma', commutative=True)), Pow(Add(Symbol('\\\\gamma', commutative=True), sin(Symbol('\\\\upsilon', commutative=True)), Integer(1)), Symbol('\\\\gamma', commutative=True)))"], [["evaluate_integrals", 6], "Equality(Pow(Add(Symbol('\\\\tau', commutative=True), sin(Symbol('\\\\upsilon', commutative=True)), Integer(1)), Symbol('\\\\gamma', commutative=True)), Pow(Add(Symbol('\\\\gamma', commutative=True), sin(Symbol('\\\\upsilon', commutative=True)), Integer(1)), Symbol('\\\\gamma', commutative=True)))"]], "static_flan-t5-large": "dot { z } { (L_ { \\ varepsilon } ) } = \\ cos { (L_ { \\ varepsilon } ) } and \\ int \\ dot { z } { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } = \\ int \\ cos { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } and \\ int \\ dot { z } { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } + 1 = \\ int \\ cos { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } + 1 and \\ int \\ dot { z } { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } + 1 = \\ pi + \\ sin { (L_ { \\ varepsilon } ) } + 1 and \\ int \\ cos { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } + 1 = \\ pi + \\ sin { (L_ { \\ varepsilon } ) } + 1 and ( \\ int \\ cos { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } + 1) ^ { \\ pi } = ( \\ pi + \\ sin { (L_ { \\ varepsilon } ) } + 1) ^ { \\ pi } and (r_ { 0 } + \\ sin { (L_ { \\ varepsilon } ) } + 1) ^ { \\ pi } = ( \\ pi + \\ sin { (L_ { \\ varepsilon } ) } + 1) ^ { \\ pi }", "VR_flan-t5-large": "beta { ( \\ upsilon) } = \\ cos { ( \\ upsilon) } and \\ int \\ beta { ( \\ upsilon) } d \\ upsilon = \\ int \\ cos { ( \\ upsilon) } d \\ upsilon and \\ int \\ beta { ( \\ upsilon) } d \\ upsilon + 1 = \\ int \\ cos { ( \\ upsilon) } d \\ upsilon + 1 and \\ int \\ cos { ( \\ upsilon) } d \\ upsilon + 1 = \\ gamma + \\ sin { ( \\ upsilon) } + 1 and \\ int \\ cos { ( \\ upsilon) } d \\ upsilon + 1 = \\ gamma + \\ sin { ( \\ upsilon) } + 1 and \\ tau + \\ sin { ( \\ upsilon) } + 1 = \\ gamma + \\ sin { ( \\ upsilon) } + 1 and ( \\ tau + \\ sin { ( \\ upsilon) } + 1) ^ { \\ gamma } = ( \\ gamma + \\ sin { ( \\ upsilon) } + 1) ^ { \\ gamma }", "EE_flan-t5-large": "cos { (L_ { \\ varepsilon } ) } = \\ dot { z } { (L_ { \\ varepsilon } ) } and \\ int \\ cos { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } = \\ int \\ dot { z } { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } and \\ int \\ cos { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } + 1 = \\ int \\ dot { z } { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } + 1 and \\ pi + \\ sin { (L_ { \\ varepsilon } ) } + 1 = \\ int \\ dot { z } { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } + 1 and \\ pi + \\ sin { (L_ { \\ varepsilon } ) } + 1 = \\ int \\ dot { z } { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } + 1 and ( \\ pi + \\ sin { (L_ { \\ varepsilon } ) } + 1) ^ { \\ pi } = ( \\ int \\ dot { z } { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } + 1) ^ { \\ pi } and ( \\ pi + \\ sin { (L_ { \\ varepsilon } ) } + 1) ^ { \\ pi } = (r_ { 0 } + \\ sin { (L_ { \\ varepsilon } ) } + 1) ^ { \\ pi }", "AG_flan-t5-large": "dot { z } { (L_ { \\ varepsilon } ) } = \\ cos { (L_ { \\ varepsilon } ) } and \\ int \\ dot { z } { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } = \\ int \\ cos { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } and \\ int \\ dot { z } { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } + 1 = \\ int \\ cos { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } + 1 and \\ int \\ dot { z } { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } + 1 = \\ pi + \\ sin { (L_ { \\ varepsilon } ) } + 1 and \\ int \\ cos { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } + 1 = \\ pi + \\ sin { (L_ { \\ varepsilon } ) } + 1 and ( \\ int \\ cos { (L_ { \\ varepsilon } ) } dL_ { \\ varepsilon } + 1) ^ { \\ pi } = ( \\ pi + \\ sin { (L_ { \\ varepsilon } ) } + 1) ^ { \\ pi } and (g_ { \\ varepsilon } + \\ sin { (L_ { \\ varepsilon } ) } + 1) ^ { \\ pi } = ( \\ pi + \\ sin { (L_ { \\ varepsilon } ) } + 1) ^ { \\ pi }", "SR_flan-t5-large": "dot { z } { (L_ { \\ varepsilon } ) } = \\ cos { (L_ { \\ varepsilon } ) } and \\ dot { z } { (L_ { \\ varepsilon } ) } + 1 = \\ cos { (L_ { \\ varepsilon } ) } + 1 and \\ frac { d } { d L_ { \\ varepsilon } } ( \\ dot { z } { (L_ { \\ varepsilon } ) } + 1) = \\ frac { d } { d L_ { \\ varepsilon } } ( \\ cos { (L_ { \\ varepsilon } ) } + 1) and \\ int \\ frac { d } { d L_ { \\ varepsilon } } ( \\ dot { z } { (L_ { \\ varepsilon } ) } + 1) dL_ { \\ varepsilon } = \\ int \\ frac { d } { d L_ { \\ varepsilon } } ( \\ cos { (L_ { \\ varepsilon } ) } + 1) dL_ { \\ varepsilon } and ( \\ frac { d } { d L_ { \\ varepsilon } } ( \\ dot { z } { (L_ { \\ varepsilon } ) } + 1) dL_ { \\ varepsilon } ) ^ { \\ pi } = ( \\ frac { d } { d L_ { \\ varepsilon } } ( \\ dot { z } { (L_ { \\ varepsilon } ) } + 1) dL_ { \\ varepsilon } ) ^ { \\ pi } and (r_ { 0 } + \\ sin { (L_ { \\ varepsilon } ) } + 1) ^ { \\ pi } = ( \\ pi + \\ sin { (L_ { \\ varepsilon } ) } + 1) ^ {", "static_rouge": 1.0, "static_bleu": 0.9968203524446912, "static_bleurt": 0.8525755405426025, "static_gleu": 0.9968102073365231, "VR_rouge": 0.08450704225352124, "EE_rouge": 0.05376344086021512, "AG_rouge": 0.0, "SR_rouge": 0.42268041237113396, "VR_rouge_abs": 0.0085074345943911, "EE_rouge_abs": 0.0527115474520804, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.42268041237113396, "VR_bleu": 0.12253377908239715, "EE_bleu": 0.03140873379642417, "AG_bleu": -1.0078105262101289e-05, "SR_bleu": 0.2899994226113247, "VR_bleu_abs": 0.044239404792427384, "EE_bleu_abs": 0.036831788656896625, "AG_bleu_abs": 5.858427330251992e-05, "SR_bleu_abs": 0.2954610280259973, "VR_bleurt": -0.0033208131790161133, "EE_bleurt": 0.0050362348556518555, "AG_bleurt": 0.0, "SR_bleurt": 0.44105425477027893, "VR_bleurt_abs": 0.03271035198122263, "EE_bleurt_abs": 0.083892822265625, "AG_bleurt_abs": 0.056193649768829346, "SR_bleurt_abs": 0.452263742685318, "VR_gleu": 0.11983503803629736, "EE_gleu": 0.03134709901627197, "AG_gleu": -1.0142425003079047e-05, "SR_gleu": 0.28447161336234816, "VR_gleu_abs": 0.036405741626794275, "EE_gleu_abs": 0.03660374713006298, "AG_gleu_abs": 5.83189437678433e-05, "SR_gleu_abs": 0.2898134863701578, "ratio_VR_rouge": 0.9460105112279026, "ratio_VR_bleu": 0.8652652325629906, "ratio_VR_bleurt": -0.0361494218150502, "ratio_VR_gleu": 0.902451282051282, "ratio_EE_rouge": 0.9415727425832362, "ratio_EE_bleu": 0.9624686437589569, "ratio_EE_bleurt": 0.9012254880976225, "ratio_EE_gleu": 0.9627123485774988, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9999403221881179, "ratio_AG_bleurt": 0.9358346774089262, "ratio_AG_gleu": 0.9999405949544454, "ratio_SR_rouge": 0.577319587628866, "ratio_SR_bleu": 0.7045389719740027, "ratio_SR_bleurt": 0.48357778743627694, "ratio_SR_gleu": 0.7101865136298422}, {"prompt": "Given \\operatorname{f^{\\prime}}{(\\varepsilon_0)} = \\sin{(\\varepsilon_0)}, then derive 0 = \\cos{(\\varepsilon_0)} - \\frac{d}{d \\varepsilon_0} \\operatorname{f^{\\prime}}{(\\varepsilon_0)}, then obtain \\int 0 d\\varepsilon_0 = \\int (\\cos{(\\varepsilon_0)} - \\frac{d}{d \\varepsilon_0} \\operatorname{f^{\\prime}}{(\\varepsilon_0)}) d\\varepsilon_0", "derivation": "\\operatorname{f^{\\prime}}{(\\varepsilon_0)} = \\sin{(\\varepsilon_0)} and 0 = - \\operatorname{f^{\\prime}}{(\\varepsilon_0)} + \\sin{(\\varepsilon_0)} and \\frac{d}{d \\varepsilon_0} 0 = \\frac{d}{d \\varepsilon_0} (- \\operatorname{f^{\\prime}}{(\\varepsilon_0)} + \\sin{(\\varepsilon_0)}) and 0 = \\cos{(\\varepsilon_0)} - \\frac{d}{d \\varepsilon_0} \\operatorname{f^{\\prime}}{(\\varepsilon_0)} and \\int 0 d\\varepsilon_0 = \\int (\\cos{(\\varepsilon_0)} - \\frac{d}{d \\varepsilon_0} \\operatorname{f^{\\prime}}{(\\varepsilon_0)}) d\\varepsilon_0", "srepr_derivation": [["premise", "Equality(Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True)), sin(Symbol('\\\\varepsilon_0', commutative=True)))"], [["minus", 1, "Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True))"], "Equality(Integer(0), Add(Mul(Integer(-1), Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True))), sin(Symbol('\\\\varepsilon_0', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\varepsilon_0', commutative=True)"], "Equality(Derivative(Integer(0), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True))), sin(Symbol('\\\\varepsilon_0', commutative=True))), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Integer(0), Add(cos(Symbol('\\\\varepsilon_0', commutative=True)), Mul(Integer(-1), Derivative(Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))))))"], [["integrate", 4, "Symbol('\\\\varepsilon_0', commutative=True)"], "Equality(Integral(Integer(0), Tuple(Symbol('\\\\varepsilon_0', commutative=True))), Integral(Add(cos(Symbol('\\\\varepsilon_0', commutative=True)), Mul(Integer(-1), Derivative(Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))))), Tuple(Symbol('\\\\varepsilon_0', commutative=True))))"]], "EE prompt": "Given \\sin{(\\varepsilon_0)} = \\operatorname{f^{\\prime}}{(\\varepsilon_0)}, then derive \\cos{(\\varepsilon_0)} - \\frac{d}{d \\varepsilon_0} \\operatorname{f^{\\prime}}{(\\varepsilon_0)} = 0, then obtain \\int (\\cos{(\\varepsilon_0)} - \\frac{d}{d \\varepsilon_0} \\operatorname{f^{\\prime}}{(\\varepsilon_0)}) d\\varepsilon_0 = \\int 0 d\\varepsilon_0", "EE derivation": "\\sin{(\\varepsilon_0)} = \\operatorname{f^{\\prime}}{(\\varepsilon_0)} and - \\operatorname{f^{\\prime}}{(\\varepsilon_0)} + \\sin{(\\varepsilon_0)} = 0 and \\frac{d}{d \\varepsilon_0} (- \\operatorname{f^{\\prime}}{(\\varepsilon_0)} + \\sin{(\\varepsilon_0)}) = \\frac{d}{d \\varepsilon_0} 0 and \\cos{(\\varepsilon_0)} - \\frac{d}{d \\varepsilon_0} \\operatorname{f^{\\prime}}{(\\varepsilon_0)} = 0 and \\int (\\cos{(\\varepsilon_0)} - \\frac{d}{d \\varepsilon_0} \\operatorname{f^{\\prime}}{(\\varepsilon_0)}) d\\varepsilon_0 = \\int 0 d\\varepsilon_0", "EE srepr_derivation": [["premise", "Equality(sin(Symbol('\\\\varepsilon_0', commutative=True)), Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True)))"], [["minus", 1, "Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True))"], "Equality(Add(Mul(Integer(-1), Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True))), sin(Symbol('\\\\varepsilon_0', commutative=True))), Integer(0))"], [["differentiate", 2, "Symbol('\\\\varepsilon_0', commutative=True)"], "Equality(Derivative(Add(Mul(Integer(-1), Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True))), sin(Symbol('\\\\varepsilon_0', commutative=True))), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))), Derivative(Integer(0), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Add(cos(Symbol('\\\\varepsilon_0', commutative=True)), Mul(Integer(-1), Derivative(Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))))), Integer(0))"], [["integrate", 4, "Symbol('\\\\varepsilon_0', commutative=True)"], "Equality(Integral(Add(cos(Symbol('\\\\varepsilon_0', commutative=True)), Mul(Integer(-1), Derivative(Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))))), Tuple(Symbol('\\\\varepsilon_0', commutative=True))), Integral(Integer(0), Tuple(Symbol('\\\\varepsilon_0', commutative=True))))"]], "AG prompt": "Given \\operatorname{f^{\\prime}}{(\\varepsilon_0)} = \\sin{(\\varepsilon_0)}, then derive 0 = \\cos{(\\varepsilon_0)} - \\frac{d}{d \\varepsilon_0} \\operatorname{f^{\\prime}}{(\\varepsilon_0)}, then obtain 0 = \\cos{(\\varepsilon_0)} - \\frac{d}{d \\varepsilon_0} \\sin{(\\varepsilon_0)}", "AG derivation": "\\operatorname{f^{\\prime}}{(\\varepsilon_0)} = \\sin{(\\varepsilon_0)} and 0 = - \\operatorname{f^{\\prime}}{(\\varepsilon_0)} + \\sin{(\\varepsilon_0)} and \\frac{d}{d \\varepsilon_0} 0 = \\frac{d}{d \\varepsilon_0} (- \\operatorname{f^{\\prime}}{(\\varepsilon_0)} + \\sin{(\\varepsilon_0)}) and 0 = \\cos{(\\varepsilon_0)} - \\frac{d}{d \\varepsilon_0} \\operatorname{f^{\\prime}}{(\\varepsilon_0)} and 0 = \\cos{(\\varepsilon_0)} - \\frac{d}{d \\varepsilon_0} \\sin{(\\varepsilon_0)}", "AG srepr_derivation": [["premise", "Equality(Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True)), sin(Symbol('\\\\varepsilon_0', commutative=True)))"], [["minus", 1, "Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True))"], "Equality(Integer(0), Add(Mul(Integer(-1), Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True))), sin(Symbol('\\\\varepsilon_0', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\varepsilon_0', commutative=True)"], "Equality(Derivative(Integer(0), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True))), sin(Symbol('\\\\varepsilon_0', commutative=True))), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Integer(0), Add(cos(Symbol('\\\\varepsilon_0', commutative=True)), Mul(Integer(-1), Derivative(Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Integer(0), Add(cos(Symbol('\\\\varepsilon_0', commutative=True)), Mul(Integer(-1), Derivative(sin(Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))))))"]], "SR prompt": "Given \\operatorname{f^{\\prime}}{(\\varepsilon_0)} = \\sin{(\\varepsilon_0)}, then obtain \\int 0 d\\varepsilon_0 = \\int (\\cos{(\\varepsilon_0)} - \\frac{d}{d \\varepsilon_0} \\operatorname{f^{\\prime}}{(\\varepsilon_0)}) d\\varepsilon_0", "SR derivation": "\\operatorname{f^{\\prime}}{(\\varepsilon_0)} = \\sin{(\\varepsilon_0)} and 0 = - \\operatorname{f^{\\prime}}{(\\varepsilon_0)} + \\sin{(\\varepsilon_0)} and \\frac{d}{d \\varepsilon_0} 0 = \\frac{d}{d \\varepsilon_0} (- \\operatorname{f^{\\prime}}{(\\varepsilon_0)} + \\sin{(\\varepsilon_0)}) and 0 = \\cos{(\\varepsilon_0)} - \\frac{d}{d \\varepsilon_0} \\operatorname{f^{\\prime}}{(\\varepsilon_0)} and \\int 0 d\\varepsilon_0 = \\int (\\cos{(\\varepsilon_0)} - \\frac{d}{d \\varepsilon_0} \\operatorname{f^{\\prime}}{(\\varepsilon_0)}) d\\varepsilon_0", "SR srepr_derivation": [["premise", "Equality(Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True)), sin(Symbol('\\\\varepsilon_0', commutative=True)))"], [["minus", 1, "Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True))"], "Equality(Integer(0), Add(Mul(Integer(-1), Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True))), sin(Symbol('\\\\varepsilon_0', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\varepsilon_0', commutative=True)"], "Equality(Derivative(Integer(0), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True))), sin(Symbol('\\\\varepsilon_0', commutative=True))), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Integer(0), Add(cos(Symbol('\\\\varepsilon_0', commutative=True)), Mul(Integer(-1), Derivative(Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))))))"], [["integrate", 4, "Symbol('\\\\varepsilon_0', commutative=True)"], "Equality(Integral(Integer(0), Tuple(Symbol('\\\\varepsilon_0', commutative=True))), Integral(Add(cos(Symbol('\\\\varepsilon_0', commutative=True)), Mul(Integer(-1), Derivative(Function('f^{\\\\prime}')(Symbol('\\\\varepsilon_0', commutative=True)), Tuple(Symbol('\\\\varepsilon_0', commutative=True), Integer(1))))), Tuple(Symbol('\\\\varepsilon_0', commutative=True))))"]], "VR prompt": "Given \\alpha{(\\omicron)} = \\sin{(\\omicron)}, then derive 0 = \\cos{(\\omicron)} - \\frac{d}{d \\omicron} \\alpha{(\\omicron)}, then obtain \\int 0 d\\omicron = \\int (\\cos{(\\omicron)} - \\frac{d}{d \\omicron} \\alpha{(\\omicron)}) d\\omicron", "VR derivation": "\\alpha{(\\omicron)} = \\sin{(\\omicron)} and 0 = - \\alpha{(\\omicron)} + \\sin{(\\omicron)} and \\frac{d}{d \\omicron} 0 = \\frac{d}{d \\omicron} (- \\alpha{(\\omicron)} + \\sin{(\\omicron)}) and 0 = \\cos{(\\omicron)} - \\frac{d}{d \\omicron} \\alpha{(\\omicron)} and \\int 0 d\\omicron = \\int (\\cos{(\\omicron)} - \\frac{d}{d \\omicron} \\alpha{(\\omicron)}) d\\omicron", "VR srepr_derivation": [["premise", "Equality(Function('\\\\alpha')(Symbol('\\\\omicron', commutative=True)), sin(Symbol('\\\\omicron', commutative=True)))"], [["minus", 1, "Function('\\\\alpha')(Symbol('\\\\omicron', commutative=True))"], "Equality(Integer(0), Add(Mul(Integer(-1), Function('\\\\alpha')(Symbol('\\\\omicron', commutative=True))), sin(Symbol('\\\\omicron', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\omicron', commutative=True)"], "Equality(Derivative(Integer(0), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1))), Derivative(Add(Mul(Integer(-1), Function('\\\\alpha')(Symbol('\\\\omicron', commutative=True))), sin(Symbol('\\\\omicron', commutative=True))), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Integer(0), Add(cos(Symbol('\\\\omicron', commutative=True)), Mul(Integer(-1), Derivative(Function('\\\\alpha')(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1))))))"], [["integrate", 4, "Symbol('\\\\omicron', commutative=True)"], "Equality(Integral(Integer(0), Tuple(Symbol('\\\\omicron', commutative=True))), Integral(Add(cos(Symbol('\\\\omicron', commutative=True)), Mul(Integer(-1), Derivative(Function('\\\\alpha')(Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\omicron', commutative=True), Integer(1))))), Tuple(Symbol('\\\\omicron', commutative=True))))"]], "static_flan-t5-large": "operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } = \\ sin { ( \\ varepsilon_0) } and 0 = - \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } + \\ sin { ( \\ varepsilon_0) } and \\ frac { d } { d \\ varepsilon_0 } 0 = \\ frac { d } { d \\ varepsilon_0 } (- \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } + \\ sin { ( \\ varepsilon_0) } ) and 0 = \\ cos { ( \\ varepsilon_0) } - \\ frac { d } { d \\ varepsilon_0 } \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } and \\ int 0 d \\ varepsilon_0 = \\ int ( \\ cos { ( \\ varepsilon_0) } - \\ frac { d } { d \\ varepsilon_0 } \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } ) d \\ varepsilon_0", "VR_flan-t5-large": "alpha { ( \\ omicron) } = \\ sin { ( \\ omicron) } and 0 = - \\ alpha { ( \\ omicron) } + \\ sin { ( \\ omicron) } and \\ frac { d } { d \\ omicron } 0 = \\ frac { d } { d \\ omicron } (- \\ alpha { ( \\ omicron) } + \\ sin { ( \\ omicron) } ) and 0 = \\ cos { ( \\ omicron) } - \\ frac { d } { d \\ omicron } \\ alpha { ( \\ omicron) } and \\ int 0 d \\ omicron = \\ int ( \\ cos { ( \\ omicron) } - \\ frac { d } { d \\ omicron } \\ alpha { ( \\ omicron) } ) d \\ omicron", "EE_flan-t5-large": "sin { ( \\ varepsilon_0) } = \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } and \\ frac { d } { d \\ varepsilon_0 } \\ sin { ( \\ varepsilon_0) } = \\ frac { d } { d \\ varepsilon_0 } \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } and \\ cos { ( \\ varepsilon_0) } + \\ frac { d } { d \\ varepsilon_0 } \\ sin { ( \\ varepsilon_0) } = \\ cos { ( \\ varepsilon_0) } + \\ frac { d } { d \\ varepsilon_0 } \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } and \\ cos { ( \\ varepsilon_0) } - \\ frac { d } { d \\ varepsilon_0 } \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } = 0 and \\ int ( \\ cos { ( \\ varepsilon_0) } - \\ frac { d } { d \\ varepsilon_0 } \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } ) d \\ varepsilon_0 = \\ int 0 d \\ varepsilon_0", "AG_flan-t5-large": "operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } = \\ sin { ( \\ varepsilon_0) } and 0 = - \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } + \\ sin { ( \\ varepsilon_0) } and \\ frac { d } { d \\ varepsilon_0 } 0 = \\ frac { d } { d \\ varepsilon_0 } (- \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } + \\ sin { ( \\ varepsilon_0) } ) and 0 = \\ cos { ( \\ varepsilon_0) } - \\ frac { d } { d \\ varepsilon_0 } \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } and 0 = \\ cos { ( \\ varepsilon_0) } - \\ frac { d } { d \\ varepsilon_0 } \\ sin { ( \\ varepsilon_0) }", "SR_flan-t5-large": "operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } = \\ sin { ( \\ varepsilon_0) } and 0 = - \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } + \\ sin { ( \\ varepsilon_0) } and \\ frac { d } { d \\ varepsilon_0 } 0 = \\ frac { d } { d \\ varepsilon_0 } (- \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } + \\ sin { ( \\ varepsilon_0) } ) and 0 = \\ cos { ( \\ varepsilon_0) } - \\ frac { d } { d \\ varepsilon_0 } \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } and \\ int 0 d \\ varepsilon_0 = \\ int ( \\ cos { ( \\ varepsilon_0) } - \\ frac { d } { d \\ varepsilon_0 } \\ operatorname { f ^ { \\ prime } } { ( \\ varepsilon_0) } ) d \\ varepsilon_0", "static_rouge": 1.0, "static_bleu": 0.9955456643969636, "static_bleurt": 0.8531885147094727, "static_gleu": 0.9955257270693513, "VR_rouge": 0.0, "EE_rouge": 0.12195121951219512, "AG_rouge": 0.0, "SR_rouge": 0.0, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.06861788617886178, "AG_rouge_abs": 0.0, "SR_rouge_abs": 0.0, "VR_bleu": 0.0021030178721261894, "EE_bleu": 0.19510708408748456, "AG_bleu": 0.0005331852042811391, "SR_bleu": 0.0, "VR_bleu_abs": -0.0006663542060089678, "EE_bleu_abs": 0.1554474158839867, "AG_bleu_abs": 0.0006252034407677742, "SR_bleu_abs": 0.0, "VR_bleurt": 0.09307372570037842, "EE_bleurt": 0.21647000312805176, "AG_bleurt": -0.0050681233406066895, "SR_bleurt": 0.0, "VR_bleurt_abs": 0.047080472111701965, "EE_bleurt_abs": 0.09734839200973511, "AG_bleurt_abs": 0.002283036708831787, "SR_bleurt_abs": -0.011188507080078125, "VR_gleu": 0.0021263871353578434, "EE_gleu": 0.19418215701176966, "AG_gleu": 0.0005382583976720756, "SR_gleu": 0.0, "VR_gleu_abs": -0.0009225045873865745, "EE_gleu_abs": 0.155204025986852, "AG_gleu_abs": 0.0005781363899152181, "SR_gleu_abs": 0.0, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 1.0016271010780562, "ratio_VR_bleurt": 1.52215067076871, "ratio_VR_gleu": 1.0020263368577975, "ratio_EE_rouge": 0.9275163174166953, "ratio_EE_bleu": 0.8351656789710366, "ratio_EE_bleurt": 0.865122579575312, "ratio_EE_gleu": 0.8356014227106093, "ratio_AG_rouge": 1.0, "ratio_AG_bleu": 0.9992781704398374, "ratio_AG_bleurt": 0.9971039570759909, "ratio_AG_gleu": 0.9993365161327545, "ratio_SR_rouge": 1.0, "ratio_SR_bleu": 1.0, "ratio_SR_bleurt": 1.0127562893762396, "ratio_SR_gleu": 1.0}, {"prompt": "Given S{(Q,\\mathbf{M})} = \\frac{\\mathbf{M}}{Q}, then derive \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} = - \\frac{\\mathbf{M}}{Q^{2}}, then obtain 0 = \\int \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} d\\mathbf{M} - \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M}", "derivation": "S{(Q,\\mathbf{M})} = \\frac{\\mathbf{M}}{Q} and \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} = \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} and \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} = - \\frac{\\mathbf{M}}{Q^{2}} and \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M} = \\int - \\frac{\\mathbf{M}}{Q^{2}} d\\mathbf{M} and 0 = \\int - \\frac{\\mathbf{M}}{Q^{2}} d\\mathbf{M} - \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M} and \\int \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} d\\mathbf{M} = \\int - \\frac{\\mathbf{M}}{Q^{2}} d\\mathbf{M} and 0 = \\int \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} d\\mathbf{M} - \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M}", "srepr_derivation": [["premise", "Equality(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)))"], [["differentiate", 1, "Symbol('Q', commutative=True)"], "Equality(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Derivative(Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)))"], [["integrate", 3, "Symbol('\\\\mathbf{M}', commutative=True)"], "Equality(Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Integral(Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))"], [["minus", 4, "Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True)))"], "Equality(Integer(0), Add(Integral(Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Mul(Integer(-1), Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Integral(Derivative(Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Integral(Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))"], [["substitute_RHS_for_LHS", 5, 6], "Equality(Integer(0), Add(Integral(Derivative(Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Mul(Integer(-1), Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))))"]], "EE prompt": "Given \\frac{\\mathbf{M}}{Q} = S{(Q,\\mathbf{M})}, then derive - \\frac{\\mathbf{M}}{Q^{2}} = \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})}, then obtain \\int \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} d\\mathbf{M} - \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M} = 0", "EE derivation": "\\frac{\\mathbf{M}}{Q} = S{(Q,\\mathbf{M})} and \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} = \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} and - \\frac{\\mathbf{M}}{Q^{2}} = \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} and \\int - \\frac{\\mathbf{M}}{Q^{2}} d\\mathbf{M} = \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M} and \\int - \\frac{\\mathbf{M}}{Q^{2}} d\\mathbf{M} - \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M} = 0 and \\int - \\frac{\\mathbf{M}}{Q^{2}} d\\mathbf{M} = \\int \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} d\\mathbf{M} and \\int \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} d\\mathbf{M} - \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M} = 0", "EE srepr_derivation": [["premise", "Equality(Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)), Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)))"], [["differentiate", 1, "Symbol('Q', commutative=True)"], "Equality(Derivative(Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)), Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))))"], [["integrate", 3, "Symbol('\\\\mathbf{M}', commutative=True)"], "Equality(Integral(Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))"], [["minus", 4, "Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True)))"], "Equality(Add(Integral(Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Mul(Integer(-1), Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))), Integer(0))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Integral(Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Integral(Derivative(Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))"], [["substitute_LHS_for_RHS", 5, 6], "Equality(Add(Integral(Derivative(Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Mul(Integer(-1), Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))), Integer(0))"]], "AG prompt": "Given S{(Q,\\mathbf{M})} = \\frac{\\mathbf{M}}{Q}, then derive \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} = - \\frac{\\mathbf{M}}{Q^{2}}, then obtain \\int \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} d\\mathbf{M} = \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M}", "AG derivation": "S{(Q,\\mathbf{M})} = \\frac{\\mathbf{M}}{Q} and \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} = \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} and \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} = - \\frac{\\mathbf{M}}{Q^{2}} and \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M} = \\int - \\frac{\\mathbf{M}}{Q^{2}} d\\mathbf{M} and 0 = \\int - \\frac{\\mathbf{M}}{Q^{2}} d\\mathbf{M} - \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M} and \\int \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} d\\mathbf{M} = \\int - \\frac{\\mathbf{M}}{Q^{2}} d\\mathbf{M} and \\int \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} d\\mathbf{M} = \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M}", "AG srepr_derivation": [["premise", "Equality(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)))"], [["differentiate", 1, "Symbol('Q', commutative=True)"], "Equality(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Derivative(Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)))"], [["integrate", 3, "Symbol('\\\\mathbf{M}', commutative=True)"], "Equality(Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Integral(Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))"], [["minus", 4, "Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True)))"], "Equality(Integer(0), Add(Integral(Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Mul(Integer(-1), Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Integral(Derivative(Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Integral(Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))"], [["substitute_RHS_for_LHS", 6, 4], "Equality(Integral(Derivative(Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))"]], "SR prompt": "Given S{(Q,\\mathbf{M})} = \\frac{\\mathbf{M}}{Q}, then obtain 0 = \\int \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} d\\mathbf{M} - \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M}", "SR derivation": "S{(Q,\\mathbf{M})} = \\frac{\\mathbf{M}}{Q} and \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} = \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} and \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} = - \\frac{\\mathbf{M}}{Q^{2}} and \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M} = \\int - \\frac{\\mathbf{M}}{Q^{2}} d\\mathbf{M} and 0 = \\int - \\frac{\\mathbf{M}}{Q^{2}} d\\mathbf{M} - \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M} and \\int \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} d\\mathbf{M} = \\int - \\frac{\\mathbf{M}}{Q^{2}} d\\mathbf{M} and 0 = \\int \\frac{\\partial}{\\partial Q} \\frac{\\mathbf{M}}{Q} d\\mathbf{M} - \\int \\frac{\\partial}{\\partial Q} S{(Q,\\mathbf{M})} d\\mathbf{M}", "SR srepr_derivation": [["premise", "Equality(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)))"], [["differentiate", 1, "Symbol('Q', commutative=True)"], "Equality(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Derivative(Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)))"], [["integrate", 3, "Symbol('\\\\mathbf{M}', commutative=True)"], "Equality(Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Integral(Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))"], [["minus", 4, "Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True)))"], "Equality(Integer(0), Add(Integral(Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Mul(Integer(-1), Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Integral(Derivative(Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Integral(Mul(Integer(-1), Pow(Symbol('Q', commutative=True), Integer(-2)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))"], [["substitute_RHS_for_LHS", 5, 6], "Equality(Integer(0), Add(Integral(Derivative(Mul(Pow(Symbol('Q', commutative=True), Integer(-1)), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))), Mul(Integer(-1), Integral(Derivative(Function('S')(Symbol('Q', commutative=True), Symbol('\\\\mathbf{M}', commutative=True)), Tuple(Symbol('Q', commutative=True), Integer(1))), Tuple(Symbol('\\\\mathbf{M}', commutative=True))))))"]], "VR prompt": "Given \\xi{(\\beta,\\upsilon)} = \\frac{\\upsilon}{\\beta}, then derive \\frac{\\partial}{\\partial \\beta} \\xi{(\\beta,\\upsilon)} = - \\frac{\\upsilon}{\\beta^{2}}, then obtain 0 = \\int \\frac{\\partial}{\\partial \\beta} \\frac{\\upsilon}{\\beta} d\\upsilon - \\int \\frac{\\partial}{\\partial \\beta} \\xi{(\\beta,\\upsilon)} d\\upsilon", "VR derivation": "\\xi{(\\beta,\\upsilon)} = \\frac{\\upsilon}{\\beta} and \\frac{\\partial}{\\partial \\beta} \\xi{(\\beta,\\upsilon)} = \\frac{\\partial}{\\partial \\beta} \\frac{\\upsilon}{\\beta} and \\frac{\\partial}{\\partial \\beta} \\xi{(\\beta,\\upsilon)} = - \\frac{\\upsilon}{\\beta^{2}} and \\int \\frac{\\partial}{\\partial \\beta} \\xi{(\\beta,\\upsilon)} d\\upsilon = \\int - \\frac{\\upsilon}{\\beta^{2}} d\\upsilon and 0 = \\int - \\frac{\\upsilon}{\\beta^{2}} d\\upsilon - \\int \\frac{\\partial}{\\partial \\beta} \\xi{(\\beta,\\upsilon)} d\\upsilon and \\int \\frac{\\partial}{\\partial \\beta} \\frac{\\upsilon}{\\beta} d\\upsilon = \\int - \\frac{\\upsilon}{\\beta^{2}} d\\upsilon and 0 = \\int \\frac{\\partial}{\\partial \\beta} \\frac{\\upsilon}{\\beta} d\\upsilon - \\int \\frac{\\partial}{\\partial \\beta} \\xi{(\\beta,\\upsilon)} d\\upsilon", "VR srepr_derivation": [["premise", "Equality(Function('\\\\xi')(Symbol('\\\\beta', commutative=True), Symbol('\\\\upsilon', commutative=True)), Mul(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Symbol('\\\\upsilon', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\beta', commutative=True)"], "Equality(Derivative(Function('\\\\xi')(Symbol('\\\\beta', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Derivative(Mul(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\xi')(Symbol('\\\\beta', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Mul(Integer(-1), Pow(Symbol('\\\\beta', commutative=True), Integer(-2)), Symbol('\\\\upsilon', commutative=True)))"], [["integrate", 3, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Integral(Derivative(Function('\\\\xi')(Symbol('\\\\beta', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Tuple(Symbol('\\\\upsilon', commutative=True))), Integral(Mul(Integer(-1), Pow(Symbol('\\\\beta', commutative=True), Integer(-2)), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))))"], [["minus", 4, "Integral(Derivative(Function('\\\\xi')(Symbol('\\\\beta', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Tuple(Symbol('\\\\upsilon', commutative=True)))"], "Equality(Integer(0), Add(Integral(Mul(Integer(-1), Pow(Symbol('\\\\beta', commutative=True), Integer(-2)), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))), Mul(Integer(-1), Integral(Derivative(Function('\\\\xi')(Symbol('\\\\beta', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Tuple(Symbol('\\\\upsilon', commutative=True))))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Integral(Derivative(Mul(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Tuple(Symbol('\\\\upsilon', commutative=True))), Integral(Mul(Integer(-1), Pow(Symbol('\\\\beta', commutative=True), Integer(-2)), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\upsilon', commutative=True))))"], [["substitute_RHS_for_LHS", 5, 6], "Equality(Integer(0), Add(Integral(Derivative(Mul(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Tuple(Symbol('\\\\upsilon', commutative=True))), Mul(Integer(-1), Integral(Derivative(Function('\\\\xi')(Symbol('\\\\beta', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Tuple(Symbol('\\\\upsilon', commutative=True))))))"]], "static_flan-t5-large": "{ (Q, \\ mathbf { M } ) } = \\ frac { \\ mathbf { M } } { Q } and \\ frac { \\ partial } { \\ partial Q } S { (Q, \\ mathbf { M } ) } = \\ frac { \\ partial } { \\ partial Q } \\ frac { \\ mathbf { M } } { Q } and \\ frac { \\ partial } { \\ partial Q } S { (Q, \\ mathbf { M } ) } = - \\ frac { \\ mathbf { M } } { Q ^ { 2 } } and \\ frac { \\ partial } { \\ partial Q } S { (Q, \\ mathbf { M } ) } = - \\ frac { \\ mathbf { M } } { Q ^ { 2 } } and \\ int \\ frac { \\ partial } { \\ partial Q } S { (Q, \\ mathbf { M } ) } d \\ mathbf { M } = \\ int - \\ frac { \\ mathbf { M } } { Q ^ { 2 } } d \\ mathbf { M } and \\ int \\ frac { \\ partial } { \\ partial Q } \\ frac { \\ mathbf { M } } { Q } d \\ mathbf { M } = \\ int - \\ frac { \\ mathbf { M } } { Q ^ { 2 } } d \\ mathbf { M } and 0 = \\ int \\ frac { \\ partial } { \\ partial Q } \\ frac { \\ mathbf { M } } { Q } d \\ mathbf { M } - \\ int \\ frac { \\ partial } { \\ partial Q } S { (Q, \\ mathbf { M } ) } d \\ mathbf { M }", "VR_flan-t5-large": "xi { ( \\ beta, \\ upsilon) } = \\ frac { \\ upsilon } { \\ beta } and \\ frac { \\ partial } { \\ partial \\ beta } \\ xi { ( \\ beta, \\ upsilon) } = \\ frac { \\ partial } { \\ partial \\ beta } \\ frac { \\ upsilon } { \\ beta } and \\ frac { \\ partial } { \\ partial \\ beta } \\ xi { ( \\ beta, \\ upsilon) } = - \\ frac { \\ upsilon } { \\ beta ^ { 2 } } and \\ frac { \\ partial } { \\ partial \\ beta } \\ frac { \\ upsilon } { \\ beta } = - \\ frac { \\ upsilon } { \\ beta ^ { 2 } } and \\ int \\ frac { \\ partial } { \\ partial \\ beta } \\ frac { \\ upsilon } { \\ beta } d \\ mathbsilon = \\ int \\ frac { \\ partial } { \\ partial \\ beta } \\ frac { \\ upsilon } { \\ beta } d \\ mathbf { and 0 = \\ int \\ frac { \\ partial } { \\ partial \\ beta } \\ frac { \\ upsilon } { \\ beta } d \\ mathbf { - \\ int \\ frac { \\ partial } { \\ partial \\ beta } \\ xi { ( \\ beta, \\ mathsilon) } d \\ mathbf { 0 and 0 = \\ int \\ frac { \\ partial } { \\ partial \\ beta } \\ frac { \\ upsilon } { \\ beta } d \\ mathsilon - \\ int \\ frac { \\ partial } { \\ partial \\ beta } \\ xi { ( \\ beta, \\ upsilon) } d \\ mathsilon", "EE_flan-t5-large": "frac { \\ mathbf { M } } { Q } = S { (Q, \\ mathbf { M } ) } and \\ frac { \\ mathbf { M } } { Q ^ { 2 } } = \\ frac { \\ mathbf { M } } { Q } S { (Q, \\ mathbf { M } ) } and \\ frac { \\ partial } { \\ partial Q } \\ frac { \\ mathbf { M } } { Q ^ { 2 } } = \\ frac { \\ partial } { \\ partial Q } \\ frac { \\ mathbf { M } } { Q } S { (Q, \\ mathbf { M } ) } and - \\ frac { \\ mathbf { M } } { Q ^ { 2 } } = \\ frac { \\ partial } { \\ partial Q } S { (Q, \\ mathbf { M } ) } and \\ frac { \\ partial } { \\ partial Q } \\ frac { \\ mathbf { M } } { Q } = \\ frac { \\ partial } { \\ partial Q } S { (Q, \\ mathbf { M } ) } and \\ int \\ frac { \\ partial } { \\ partial Q } \\ frac { \\ mathbf { M } } { Q } d \\ mathbf { M } = \\ int \\ frac { \\ partial } { \\ partial Q } S { (Q, \\ mathbf { M } ) } d \\ mathbf { M } and \\ int \\ frac { \\ partial } { \\ partial Q } \\ frac { \\ mathbf { M } } { Q } d \\ mathbf { M } - \\ int \\ frac { \\ partial } { \\ partial Q } S { (Q, \\ mathbf { M } ) } d \\ mathbf { M } = 0", "AG_flan-t5-large": "{ (Q, \\ mathbf { M } ) } = \\ frac { \\ mathbf { M } } { Q } and \\ frac { \\ partial } { \\ partial Q } S { (Q, \\ mathbf { M } ) } = \\ frac { \\ partial } { \\ partial Q } \\ frac { \\ mathbf { M } } { Q } and \\ frac { \\ partial } { \\ partial Q } S { (Q, \\ mathbf { M } ) } = - \\ frac { \\ mathbf { M } } { Q ^ { 2 } } and \\ frac { \\ partial } { \\ partial Q } \\ frac { \\ mathbf { M } } { Q } = - \\ frac { \\ mathbf { M } } { Q ^ { 2 } } and \\ int \\ frac { \\ partial } { \\ partial Q } \\ frac { \\ mathbf { M } } { Q } d \\ mathbf { M } = \\ int - \\ frac { \\ mathbf { M } } { Q ^ { 2 } } d \\ mathbf { M } and \\ int \\ frac { \\ partial } { \\ partial Q } \\ frac { \\ mathbf { M } } { Q } d \\ mathbf { M } = \\ int \\ frac { \\ partial } { \\ partial Q } S { (Q, \\ mathbf { M } ) } d \\ mathbf { M }", "SR_flan-t5-large": "{ (Q, \\ mathbf { M } ) } = \\ frac { \\ mathbf { M } } { Q } and \\ frac { \\ partial } { \\ partial Q } S { (Q, \\ mathbf { M } ) } = \\ frac { \\ partial } { \\ partial Q } \\ frac { \\ mathbf { M } } { Q } and \\ int \\ frac { \\ partial } { \\ partial Q } S { (Q, \\ mathbf { M } ) } d \\ mathbf { M } = \\ int \\ frac { \\ partial } { \\ partial Q } \\ frac { \\ mathbf { M } } { Q } d \\ mathbf { M } and 0 = \\ int \\ frac { \\ partial } { \\ partial Q } \\ frac { \\ mathbf { M } } { Q } d \\ mathbf { M } - \\ int \\ frac { \\ partial } { \\ partial Q } S { (Q, \\ mathbf { M } ) } d \\ mathbf { M }", "static_rouge": 0.9365079365079365, "static_bleu": 0.9333306759354549, "static_bleurt": 0.6062581539154053, "static_gleu": 0.9345991561181435, "VR_rouge": 0.20591432920200037, "EE_rouge": 0.07713293650793651, "AG_rouge": 0.11194653299916468, "SR_rouge": 0.2145567169957413, "VR_rouge_abs": 0.014285714285714401, "EE_rouge_abs": 0.08626574815366461, "AG_rouge_abs": 0.11179341835931356, "SR_rouge_abs": 0.24102564102564106, "VR_bleu": 0.11414742501765873, "EE_bleu": 0.04608333063380454, "AG_bleu": 0.19050787724602947, "SR_bleu": 0.4696625280619052, "VR_bleu_abs": 0.015132767061176722, "EE_bleu_abs": 0.07826956454711731, "AG_bleu_abs": 0.18810196954341385, "SR_bleu_abs": 0.49060257694792464, "VR_bleurt": 0.14520928263664246, "EE_bleurt": 0.009506285190582275, "AG_bleurt": 0.034566402435302734, "SR_bleurt": 0.20087963342666626, "VR_bleurt_abs": 0.039279237389564514, "EE_bleurt_abs": 0.026310861110687256, "AG_bleurt_abs": -0.021841228008270264, "SR_bleurt_abs": 0.32831984758377075, "VR_gleu": 0.11311538486621153, "EE_gleu": 0.04641350210970463, "AG_gleu": 0.16797963702337682, "SR_gleu": 0.37130801687763715, "VR_gleu_abs": 0.012868257879260936, "EE_gleu_abs": 0.0775344201692203, "AG_gleu_abs": 0.1724137570715335, "SR_gleu_abs": 0.4049034175334324, "ratio_VR_rouge": 0.952380952380952, "ratio_VR_bleu": 0.968293879565108, "ratio_VR_bleurt": 1.1827947549256914, "ratio_VR_gleu": 0.9740444500648099, "ratio_EE_rouge": 0.9066048511724788, "ratio_EE_bleu": 0.9185314110270973, "ratio_EE_bleurt": 0.9588828146758535, "ratio_EE_gleu": 0.9193460530500137, "ratio_AG_rouge": 0.8869066581713921, "ratio_AG_bleu": 0.809208429552052, "ratio_AG_bleurt": 1.028737414759629, "ratio_AG_gleu": 0.8251267028846501, "ratio_SR_rouge": 0.7589743589743589, "ratio_SR_bleu": 0.5093974230520754, "ratio_SR_bleurt": 0.5680158812379781, "ratio_SR_gleu": 0.5950965824665676}, {"prompt": "Given \\mathbf{F}{(\\hat{H}_l)} = \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l, then derive \\mathbf{F}{(\\hat{H}_l)} = V - \\cos{(\\hat{H}_l)}, then derive - \\mathbf{F}{(\\hat{H}_l)} = - C + \\cos{(\\hat{H}_l)}, then obtain (- \\mathbf{F}{(\\hat{H}_l)})^{C} = (- V + \\cos{(\\hat{H}_l)})^{C}", "derivation": "\\mathbf{F}{(\\hat{H}_l)} = \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l and \\mathbf{F}{(\\hat{H}_l)} = V - \\cos{(\\hat{H}_l)} and V - \\cos{(\\hat{H}_l)} = \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l and - \\mathbf{F}{(\\hat{H}_l)} = - \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l and - \\mathbf{F}{(\\hat{H}_l)} = - V + \\cos{(\\hat{H}_l)} and - \\mathbf{F}{(\\hat{H}_l)} = - C + \\cos{(\\hat{H}_l)} and - V + \\cos{(\\hat{H}_l)} = - C + \\cos{(\\hat{H}_l)} and (- \\mathbf{F}{(\\hat{H}_l)})^{C} = (- C + \\cos{(\\hat{H}_l)})^{C} and (- \\mathbf{F}{(\\hat{H}_l)})^{C} = (- V + \\cos{(\\hat{H}_l)})^{C}", "srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True)), Integral(sin(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True)), Add(Symbol('V', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(Add(Symbol('V', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\hat{H}_l', commutative=True)))), Integral(sin(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))"], [["times", 1, "Integer(-1)"], "Equality(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Mul(Integer(-1), Integral(sin(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Add(Mul(Integer(-1), Symbol('V', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))))"], [["evaluate_integrals", 4], "Equality(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Add(Mul(Integer(-1), Symbol('C', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))))"], [["substitute_LHS_for_RHS", 6, 5], "Equality(Add(Mul(Integer(-1), Symbol('V', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))), Add(Mul(Integer(-1), Symbol('C', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))))"], [["power", 6, "Symbol('C', commutative=True)"], "Equality(Pow(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Symbol('C', commutative=True)), Pow(Add(Mul(Integer(-1), Symbol('C', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))), Symbol('C', commutative=True)))"], [["substitute_RHS_for_LHS", 8, 7], "Equality(Pow(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Symbol('C', commutative=True)), Pow(Add(Mul(Integer(-1), Symbol('V', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))), Symbol('C', commutative=True)))"]], "EE prompt": "Given \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l = \\mathbf{F}{(\\hat{H}_l)}, then derive V - \\cos{(\\hat{H}_l)} = \\mathbf{F}{(\\hat{H}_l)}, then derive - C + \\cos{(\\hat{H}_l)} = - \\mathbf{F}{(\\hat{H}_l)}, then obtain (- V + \\cos{(\\hat{H}_l)})^{C} = (- \\mathbf{F}{(\\hat{H}_l)})^{C}", "EE derivation": "\\int \\sin{(\\hat{H}_l)} d\\hat{H}_l = \\mathbf{F}{(\\hat{H}_l)} and V - \\cos{(\\hat{H}_l)} = \\mathbf{F}{(\\hat{H}_l)} and \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l = V - \\cos{(\\hat{H}_l)} and - \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l = - \\mathbf{F}{(\\hat{H}_l)} and - V + \\cos{(\\hat{H}_l)} = - \\mathbf{F}{(\\hat{H}_l)} and - C + \\cos{(\\hat{H}_l)} = - \\mathbf{F}{(\\hat{H}_l)} and - C + \\cos{(\\hat{H}_l)} = - V + \\cos{(\\hat{H}_l)} and (- C + \\cos{(\\hat{H}_l)})^{C} = (- \\mathbf{F}{(\\hat{H}_l)})^{C} and (- V + \\cos{(\\hat{H}_l)})^{C} = (- \\mathbf{F}{(\\hat{H}_l)})^{C}", "EE srepr_derivation": [["premise", "Equality(Integral(sin(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True)))"], [["evaluate_integrals", 1], "Equality(Add(Symbol('V', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\hat{H}_l', commutative=True)))), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True)))"], [["substitute_RHS_for_LHS", 1, 2], "Equality(Integral(sin(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))), Add(Symbol('V', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["times", 1, "Integer(-1)"], "Equality(Mul(Integer(-1), Integral(sin(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))), Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 3], "Equality(Add(Mul(Integer(-1), Symbol('V', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))), Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))))"], [["evaluate_integrals", 4], "Equality(Add(Mul(Integer(-1), Symbol('C', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))), Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))))"], [["substitute_RHS_for_LHS", 6, 5], "Equality(Add(Mul(Integer(-1), Symbol('C', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))), Add(Mul(Integer(-1), Symbol('V', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))))"], [["power", 6, "Symbol('C', commutative=True)"], "Equality(Pow(Add(Mul(Integer(-1), Symbol('C', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))), Symbol('C', commutative=True)), Pow(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Symbol('C', commutative=True)))"], [["substitute_LHS_for_RHS", 8, 7], "Equality(Pow(Add(Mul(Integer(-1), Symbol('V', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))), Symbol('C', commutative=True)), Pow(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Symbol('C', commutative=True)))"]], "AG prompt": "Given \\mathbf{F}{(\\hat{H}_l)} = \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l, then derive \\mathbf{F}{(\\hat{H}_l)} = V - \\cos{(\\hat{H}_l)}, then derive - \\mathbf{F}{(\\hat{H}_l)} = - C + \\cos{(\\hat{H}_l)}, then obtain (- \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l)^{C} = (- C + \\cos{(\\hat{H}_l)})^{C}", "AG derivation": "\\mathbf{F}{(\\hat{H}_l)} = \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l and \\mathbf{F}{(\\hat{H}_l)} = V - \\cos{(\\hat{H}_l)} and V - \\cos{(\\hat{H}_l)} = \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l and - \\mathbf{F}{(\\hat{H}_l)} = - \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l and - \\mathbf{F}{(\\hat{H}_l)} = - V + \\cos{(\\hat{H}_l)} and - \\mathbf{F}{(\\hat{H}_l)} = - C + \\cos{(\\hat{H}_l)} and - V + \\cos{(\\hat{H}_l)} = - C + \\cos{(\\hat{H}_l)} and (- \\mathbf{F}{(\\hat{H}_l)})^{C} = (- C + \\cos{(\\hat{H}_l)})^{C} and (- \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l)^{C} = (- C + \\cos{(\\hat{H}_l)})^{C}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True)), Integral(sin(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True)), Add(Symbol('V', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(Add(Symbol('V', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\hat{H}_l', commutative=True)))), Integral(sin(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))"], [["times", 1, "Integer(-1)"], "Equality(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Mul(Integer(-1), Integral(sin(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Add(Mul(Integer(-1), Symbol('V', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))))"], [["evaluate_integrals", 4], "Equality(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Add(Mul(Integer(-1), Symbol('C', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))))"], [["substitute_LHS_for_RHS", 6, 5], "Equality(Add(Mul(Integer(-1), Symbol('V', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))), Add(Mul(Integer(-1), Symbol('C', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))))"], [["power", 6, "Symbol('C', commutative=True)"], "Equality(Pow(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Symbol('C', commutative=True)), Pow(Add(Mul(Integer(-1), Symbol('C', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))), Symbol('C', commutative=True)))"], [["substitute_LHS_for_RHS", 8, 1], "Equality(Pow(Mul(Integer(-1), Integral(sin(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))), Symbol('C', commutative=True)), Pow(Add(Mul(Integer(-1), Symbol('C', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))), Symbol('C', commutative=True)))"]], "SR prompt": "Given \\mathbf{F}{(\\hat{H}_l)} = \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l, then obtain (- \\mathbf{F}{(\\hat{H}_l)})^{C} = (- V + \\cos{(\\hat{H}_l)})^{C}", "SR derivation": "\\mathbf{F}{(\\hat{H}_l)} = \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l and \\mathbf{F}{(\\hat{H}_l)} = V - \\cos{(\\hat{H}_l)} and V - \\cos{(\\hat{H}_l)} = \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l and - \\mathbf{F}{(\\hat{H}_l)} = - \\int \\sin{(\\hat{H}_l)} d\\hat{H}_l and - \\mathbf{F}{(\\hat{H}_l)} = - V + \\cos{(\\hat{H}_l)} and - \\mathbf{F}{(\\hat{H}_l)} = - C + \\cos{(\\hat{H}_l)} and - V + \\cos{(\\hat{H}_l)} = - C + \\cos{(\\hat{H}_l)} and (- \\mathbf{F}{(\\hat{H}_l)})^{C} = (- C + \\cos{(\\hat{H}_l)})^{C} and (- \\mathbf{F}{(\\hat{H}_l)})^{C} = (- V + \\cos{(\\hat{H}_l)})^{C}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True)), Integral(sin(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True)), Add(Symbol('V', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(Add(Symbol('V', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\hat{H}_l', commutative=True)))), Integral(sin(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True))))"], [["times", 1, "Integer(-1)"], "Equality(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Mul(Integer(-1), Integral(sin(Symbol('\\\\hat{H}_l', commutative=True)), Tuple(Symbol('\\\\hat{H}_l', commutative=True)))))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Add(Mul(Integer(-1), Symbol('V', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))))"], [["evaluate_integrals", 4], "Equality(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Add(Mul(Integer(-1), Symbol('C', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))))"], [["substitute_LHS_for_RHS", 6, 5], "Equality(Add(Mul(Integer(-1), Symbol('V', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))), Add(Mul(Integer(-1), Symbol('C', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))))"], [["power", 6, "Symbol('C', commutative=True)"], "Equality(Pow(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Symbol('C', commutative=True)), Pow(Add(Mul(Integer(-1), Symbol('C', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))), Symbol('C', commutative=True)))"], [["substitute_RHS_for_LHS", 8, 7], "Equality(Pow(Mul(Integer(-1), Function('\\\\mathbf{F}')(Symbol('\\\\hat{H}_l', commutative=True))), Symbol('C', commutative=True)), Pow(Add(Mul(Integer(-1), Symbol('V', commutative=True)), cos(Symbol('\\\\hat{H}_l', commutative=True))), Symbol('C', commutative=True)))"]], "VR prompt": "Given \\beta{(\\zeta)} = \\int \\sin{(\\zeta)} d\\zeta, then derive \\beta{(\\zeta)} = \\alpha - \\cos{(\\zeta)}, then derive - \\beta{(\\zeta)} = - \\upsilon + \\cos{(\\zeta)}, then obtain (- \\beta{(\\zeta)})^{\\upsilon} = (- \\alpha + \\cos{(\\zeta)})^{\\upsilon}", "VR derivation": "\\beta{(\\zeta)} = \\int \\sin{(\\zeta)} d\\zeta and \\beta{(\\zeta)} = \\alpha - \\cos{(\\zeta)} and \\alpha - \\cos{(\\zeta)} = \\int \\sin{(\\zeta)} d\\zeta and - \\beta{(\\zeta)} = - \\int \\sin{(\\zeta)} d\\zeta and - \\beta{(\\zeta)} = - \\alpha + \\cos{(\\zeta)} and - \\beta{(\\zeta)} = - \\upsilon + \\cos{(\\zeta)} and - \\alpha + \\cos{(\\zeta)} = - \\upsilon + \\cos{(\\zeta)} and (- \\beta{(\\zeta)})^{\\upsilon} = (- \\upsilon + \\cos{(\\zeta)})^{\\upsilon} and (- \\beta{(\\zeta)})^{\\upsilon} = (- \\alpha + \\cos{(\\zeta)})^{\\upsilon}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\beta')(Symbol('\\\\zeta', commutative=True)), Integral(sin(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\beta')(Symbol('\\\\zeta', commutative=True)), Add(Symbol('\\\\alpha', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\zeta', commutative=True)))))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(Add(Symbol('\\\\alpha', commutative=True), Mul(Integer(-1), cos(Symbol('\\\\zeta', commutative=True)))), Integral(sin(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True))))"], [["times", 1, "Integer(-1)"], "Equality(Mul(Integer(-1), Function('\\\\beta')(Symbol('\\\\zeta', commutative=True))), Mul(Integer(-1), Integral(sin(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True)))))"], [["substitute_RHS_for_LHS", 4, 3], "Equality(Mul(Integer(-1), Function('\\\\beta')(Symbol('\\\\zeta', commutative=True))), Add(Mul(Integer(-1), Symbol('\\\\alpha', commutative=True)), cos(Symbol('\\\\zeta', commutative=True))))"], [["evaluate_integrals", 4], "Equality(Mul(Integer(-1), Function('\\\\beta')(Symbol('\\\\zeta', commutative=True))), Add(Mul(Integer(-1), Symbol('\\\\upsilon', commutative=True)), cos(Symbol('\\\\zeta', commutative=True))))"], [["substitute_LHS_for_RHS", 6, 5], "Equality(Add(Mul(Integer(-1), Symbol('\\\\alpha', commutative=True)), cos(Symbol('\\\\zeta', commutative=True))), Add(Mul(Integer(-1), Symbol('\\\\upsilon', commutative=True)), cos(Symbol('\\\\zeta', commutative=True))))"], [["power", 6, "Symbol('\\\\upsilon', commutative=True)"], "Equality(Pow(Mul(Integer(-1), Function('\\\\beta')(Symbol('\\\\zeta', commutative=True))), Symbol('\\\\upsilon', commutative=True)), Pow(Add(Mul(Integer(-1), Symbol('\\\\upsilon', commutative=True)), cos(Symbol('\\\\zeta', commutative=True))), Symbol('\\\\upsilon', commutative=True)))"], [["substitute_RHS_for_LHS", 8, 7], "Equality(Pow(Mul(Integer(-1), Function('\\\\beta')(Symbol('\\\\zeta', commutative=True))), Symbol('\\\\upsilon', commutative=True)), Pow(Add(Mul(Integer(-1), Symbol('\\\\alpha', commutative=True)), cos(Symbol('\\\\zeta', commutative=True))), Symbol('\\\\upsilon', commutative=True)))"]], "static_flan-t5-large": "mathbf { F } { ( \\ hat { H } _l) } = \\ int \\ sin { ( \\ hat { H } _l) } d \\ hat { H } _l and \\ mathbf { F } { ( \\ hat { H } _l) } = V - \\ cos { ( \\ hat { H } _l) } and - \\ mathbf { F } { ( \\ hat { H } _l) } = - V + \\ cos { ( \\ hat { H } _l) } and - \\ int \\ sin { ( \\ hat { H } _l) } d \\ hat { H } _l = - C + \\ cos { ( \\ hat { H } _l) } and (- \\ int \\ sin { ( \\ hat { H } _l) } d \\ hat { H } _l) ^ { C } = (- C + \\ cos { ( \\ hat { H } _l) } ) ^ { C } and (- \\ mathbf { F } { ( \\ hat { H } _l) } ) ^ { C } = (- V + \\ cos { ( \\ hat { H } _l) } ) ^ { C }", "VR_flan-t5-large": "beta { ( \\ zeta) } = \\ int \\ sin { ( \\ zeta) } d \\ zeta and \\ beta { ( \\ zeta) } = \\ alpha - \\ cos { ( \\ zeta) } and \\ int \\ sin { ( \\ zeta) } d \\ zeta = \\ alpha - \\ cos { ( \\ zeta) } and - \\ beta { ( \\ zeta) } = - \\ int \\ sin { ( \\ zeta) } d \\ zeta and - \\ cos { ( \\ zeta) } = - \\ int \\ sin { ( \\ zeta) } d \\ zeta and - \\ beta { ( \\ zeta) } = - \\ int \\ sin { ( \\ zeta) } d \\ zeta and - \\ beta { ( \\ zeta) } = - \\ int \\ sin { ( \\ zeta) } d \\ zeta and (- \\ beta { ( \\ zeta) } ) ^ { \\ upsilon } = (- \\ int \\ sin { ( \\ zeta) } d \\ zeta) ^ { \\ upsilon } and (- \\ beta { ( \\ zeta) } ) ^ { \\ upsilon } = (- \\ alpha + \\ cos { ( \\ zeta) } ) ^ { \\ upsilon }", "EE_flan-t5-large": "int \\ sin { ( \\ hat { H } _l) } d \\ hat { H } _l = \\ mathbf { F } { ( \\ hat { H } _l) } and \\ int \\ sin { ( \\ hat { H } _l) } d \\ hat { H } _l = \\ mathbf { F } { ( \\ hat { H } _l) } and V - \\ cos { ( \\ hat { H } _l) } = \\ mathbf { F } { ( \\ hat { H } _l) } and V - \\ cos { ( \\ hat { H } _l) } = \\ mathbf { F } { ( \\ hat { H } _l) } and \\ int \\ sin { ( \\ hat { H } _l) } d \\ hat { H } _l = - \\ cos { ( \\ hat { H } _l) } and - V + \\ cos { ( \\ hat { H } _l) } = - \\ mathbf { F } { ( \\ hat { H } _l) } and (- V + \\ cos { ( \\ hat { H } _l) } ) ^ { C } = (- \\ mathbf { F } { ( \\ hat { H } _l) } ) ^ { C }", "AG_flan-t5-large": "mathbf { F } { ( \\ hat { H } _l) } = \\ int \\ sin { ( \\ hat { H } _l) } d \\ hat { H } _l and \\ mathbf { F } { ( \\ hat { H } _l) } = V - \\ cos { ( \\ hat { H } _l) } and - \\ mathbf { F } { ( \\ hat { H } _l) } = - V + \\ cos { ( \\ hat { H } _l) } and - \\ mathbf { F } { ( \\ hat { H } _l) } = - C + \\ cos { ( \\ hat { H } _l) } and (- \\ mathbf { F } { ( \\ hat { H } _l) } ) ^ { C } = (- C + \\ cos { ( \\ hat { H } _l) } ) ^ { C } and (- \\ int \\ sin { ( \\ hat { H } _l) } d \\ hat { H } _l) ^ { C } = (- C + \\ cos { ( \\ hat { H } _l) } ) ^ { C }", "SR_flan-t5-large": "mathbf { F } { ( \\ hat { H } _l) } = \\ int \\ sin { ( \\ hat { H } _l) } d \\ hat { H } _l and - \\ mathbf { F } { ( \\ hat { H } _l) } = - \\ int \\ sin { ( \\ hat { H } _l) } d \\ hat { H } _l and (- \\ mathbf { F } { ( \\ hat { H } _l) } ) ^ { C } = (- \\ int \\ sin { ( \\ hat { H } _l) } d \\ hat { H } _l) ^ { C } and (- \\ mathbf { F } { ( \\ hat { H } _l) } ) ^ { C } = (- V + \\ cos { ( \\ hat { H } _l) } ) ^ { C }", "static_rouge": 0.8082901554404145, "static_bleu": 0.6502810769192681, "static_bleurt": 0.6892740726470947, "static_gleu": 0.6950354609929078, "VR_rouge": 0.0675494146996738, "EE_rouge": -0.04743123759441126, "AG_rouge": 0.020725388601036232, "SR_rouge": 0.14162348877374786, "VR_rouge_abs": -0.01908182736558537, "EE_rouge_abs": 0.09924146649810384, "AG_rouge_abs": 0.028874024526198694, "SR_rouge_abs": 0.18840579710144922, "VR_bleu": -0.19722598933887148, "EE_bleu": -0.05307585476726617, "AG_bleu": 0.03559313451179036, "SR_bleu": 0.2593911442252555, "VR_bleu_abs": -0.0192937893221935, "EE_bleu_abs": 0.13615798996588746, "AG_bleu_abs": 0.02021544456506197, "SR_bleu_abs": 0.3179515347966414, "VR_bleurt": -0.059856295585632324, "EE_bleurt": -0.07190060615539551, "AG_bleurt": 0.11868000030517578, "SR_bleurt": 0.3532284200191498, "VR_bleurt_abs": 0.04397144913673401, "EE_bleurt_abs": 0.18806660175323486, "AG_bleurt_abs": 0.08298557996749878, "SR_bleurt_abs": 0.29399406909942627, "VR_gleu": -0.1544490750895664, "EE_gleu": -0.03900709219858156, "AG_gleu": 0.02396452914311642, "SR_gleu": 0.1851063829787234, "VR_gleu_abs": 0.0006507127873625063, "EE_gleu_abs": 0.13494811075049085, "AG_gleu_abs": 0.01988005921481595, "SR_gleu_abs": 0.28269617706237427, "ratio_VR_rouge": 1.5629139072847684, "ratio_VR_bleu": 1.0615448584840703, "ratio_VR_bleurt": 1.171695346037043, "ratio_VR_gleu": 0.9982114911692376, "ratio_EE_rouge": 0.8878571428571427, "ratio_EE_bleu": 0.8578820135290297, "ratio_EE_bleurt": 0.7749153284276836, "ratio_EE_gleu": 0.8592626951492662, "ratio_AG_rouge": 0.9692545109211773, "ratio_AG_bleu": 0.978840642897976, "ratio_AG_bleurt": 0.9064244815972858, "ratio_AG_gleu": 0.9791939409382058, "ratio_SR_rouge": 0.8115942028985508, "ratio_SR_bleu": 0.6820484652033586, "ratio_SR_bleurt": 0.6684888213822607, "ratio_SR_gleu": 0.7173038229376257}, {"prompt": "Given \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} = \\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)}, then derive \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} = \\cos{(\\mathbf{J}_f)}, then obtain \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} \\sin{(\\mathbf{J}_f)} = \\sin{(\\mathbf{J}_f)} \\cos{(\\mathbf{J}_f)}", "derivation": "\\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} = \\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)} and \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} = \\cos{(\\mathbf{J}_f)} and \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} \\sin{(\\mathbf{J}_f)} = \\sin{(\\mathbf{J}_f)} \\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)} and \\cos{(\\mathbf{J}_f)} = \\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)} and \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} \\sin{(\\mathbf{J}_f)} = \\sin{(\\mathbf{J}_f)} \\cos{(\\mathbf{J}_f)}", "srepr_derivation": [["premise", "Equality(Function('f^{\\\\prime}')(Symbol('\\\\mathbf{J}_f', commutative=True)), Derivative(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_f', commutative=True), Integer(1))))"], [["evaluate_derivatives", 1], "Equality(Function('f^{\\\\prime}')(Symbol('\\\\mathbf{J}_f', commutative=True)), cos(Symbol('\\\\mathbf{J}_f', commutative=True)))"], [["times", 1, "sin(Symbol('\\\\mathbf{J}_f', commutative=True))"], "Equality(Mul(Function('f^{\\\\prime}')(Symbol('\\\\mathbf{J}_f', commutative=True)), sin(Symbol('\\\\mathbf{J}_f', commutative=True))), Mul(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Derivative(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_f', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(cos(Symbol('\\\\mathbf{J}_f', commutative=True)), Derivative(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_f', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 3, 4], "Equality(Mul(Function('f^{\\\\prime}')(Symbol('\\\\mathbf{J}_f', commutative=True)), sin(Symbol('\\\\mathbf{J}_f', commutative=True))), Mul(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), cos(Symbol('\\\\mathbf{J}_f', commutative=True))))"]], "EE prompt": "Given \\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)} = \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)}, then derive \\cos{(\\mathbf{J}_f)} = \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)}, then obtain \\sin{(\\mathbf{J}_f)} \\cos{(\\mathbf{J}_f)} = \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} \\sin{(\\mathbf{J}_f)}", "EE derivation": "\\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)} = \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} and \\cos{(\\mathbf{J}_f)} = \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} and \\sin{(\\mathbf{J}_f)} \\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)} = \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} \\sin{(\\mathbf{J}_f)} and \\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)} = \\cos{(\\mathbf{J}_f)} and \\sin{(\\mathbf{J}_f)} \\cos{(\\mathbf{J}_f)} = \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} \\sin{(\\mathbf{J}_f)}", "EE srepr_derivation": [["premise", "Equality(Derivative(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_f', commutative=True), Integer(1))), Function('f^{\\\\prime}')(Symbol('\\\\mathbf{J}_f', commutative=True)))"], [["evaluate_derivatives", 1], "Equality(cos(Symbol('\\\\mathbf{J}_f', commutative=True)), Function('f^{\\\\prime}')(Symbol('\\\\mathbf{J}_f', commutative=True)))"], [["times", 1, "sin(Symbol('\\\\mathbf{J}_f', commutative=True))"], "Equality(Mul(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Derivative(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_f', commutative=True), Integer(1)))), Mul(Function('f^{\\\\prime}')(Symbol('\\\\mathbf{J}_f', commutative=True)), sin(Symbol('\\\\mathbf{J}_f', commutative=True))))"], [["substitute_RHS_for_LHS", 1, 2], "Equality(Derivative(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_f', commutative=True), Integer(1))), cos(Symbol('\\\\mathbf{J}_f', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 4], "Equality(Mul(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), cos(Symbol('\\\\mathbf{J}_f', commutative=True))), Mul(Function('f^{\\\\prime}')(Symbol('\\\\mathbf{J}_f', commutative=True)), sin(Symbol('\\\\mathbf{J}_f', commutative=True))))"]], "AG prompt": "Given \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} = \\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)}, then derive \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} = \\cos{(\\mathbf{J}_f)}, then obtain \\frac{d}{d \\mathbf{J}_f} \\cos{(\\mathbf{J}_f)} = \\frac{d^{2}}{d \\mathbf{J}_f^{2}} \\sin{(\\mathbf{J}_f)}", "AG derivation": "\\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} = \\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)} and \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} = \\cos{(\\mathbf{J}_f)} and \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} \\sin{(\\mathbf{J}_f)} = \\sin{(\\mathbf{J}_f)} \\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)} and \\cos{(\\mathbf{J}_f)} = \\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)} and \\frac{d}{d \\mathbf{J}_f} \\cos{(\\mathbf{J}_f)} = \\frac{d^{2}}{d \\mathbf{J}_f^{2}} \\sin{(\\mathbf{J}_f)}", "AG srepr_derivation": [["premise", "Equality(Function('f^{\\\\prime}')(Symbol('\\\\mathbf{J}_f', commutative=True)), Derivative(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_f', commutative=True), Integer(1))))"], [["evaluate_derivatives", 1], "Equality(Function('f^{\\\\prime}')(Symbol('\\\\mathbf{J}_f', commutative=True)), cos(Symbol('\\\\mathbf{J}_f', commutative=True)))"], [["times", 1, "sin(Symbol('\\\\mathbf{J}_f', commutative=True))"], "Equality(Mul(Function('f^{\\\\prime}')(Symbol('\\\\mathbf{J}_f', commutative=True)), sin(Symbol('\\\\mathbf{J}_f', commutative=True))), Mul(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Derivative(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_f', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(cos(Symbol('\\\\mathbf{J}_f', commutative=True)), Derivative(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_f', commutative=True), Integer(1))))"], [["differentiate", 4, "Symbol('\\\\mathbf{J}_f', commutative=True)"], "Equality(Derivative(cos(Symbol('\\\\mathbf{J}_f', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_f', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_f', commutative=True), Integer(2))))"]], "SR prompt": "Given \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} = \\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)}, then obtain \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} \\sin{(\\mathbf{J}_f)} = \\sin{(\\mathbf{J}_f)} \\cos{(\\mathbf{J}_f)}", "SR derivation": "\\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} = \\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)} and \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} = \\cos{(\\mathbf{J}_f)} and \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} \\sin{(\\mathbf{J}_f)} = \\sin{(\\mathbf{J}_f)} \\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)} and \\cos{(\\mathbf{J}_f)} = \\frac{d}{d \\mathbf{J}_f} \\sin{(\\mathbf{J}_f)} and \\operatorname{f^{\\prime}}{(\\mathbf{J}_f)} \\sin{(\\mathbf{J}_f)} = \\sin{(\\mathbf{J}_f)} \\cos{(\\mathbf{J}_f)}", "SR srepr_derivation": [["premise", "Equality(Function('f^{\\\\prime}')(Symbol('\\\\mathbf{J}_f', commutative=True)), Derivative(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_f', commutative=True), Integer(1))))"], [["evaluate_derivatives", 1], "Equality(Function('f^{\\\\prime}')(Symbol('\\\\mathbf{J}_f', commutative=True)), cos(Symbol('\\\\mathbf{J}_f', commutative=True)))"], [["times", 1, "sin(Symbol('\\\\mathbf{J}_f', commutative=True))"], "Equality(Mul(Function('f^{\\\\prime}')(Symbol('\\\\mathbf{J}_f', commutative=True)), sin(Symbol('\\\\mathbf{J}_f', commutative=True))), Mul(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Derivative(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_f', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(cos(Symbol('\\\\mathbf{J}_f', commutative=True)), Derivative(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), Tuple(Symbol('\\\\mathbf{J}_f', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 3, 4], "Equality(Mul(Function('f^{\\\\prime}')(Symbol('\\\\mathbf{J}_f', commutative=True)), sin(Symbol('\\\\mathbf{J}_f', commutative=True))), Mul(sin(Symbol('\\\\mathbf{J}_f', commutative=True)), cos(Symbol('\\\\mathbf{J}_f', commutative=True))))"]], "VR prompt": "Given \\upsilon{(\\xi)} = \\frac{d}{d \\xi} \\sin{(\\xi)}, then derive \\upsilon{(\\xi)} = \\cos{(\\xi)}, then obtain \\upsilon{(\\xi)} \\sin{(\\xi)} = \\sin{(\\xi)} \\cos{(\\xi)}", "VR derivation": "\\upsilon{(\\xi)} = \\frac{d}{d \\xi} \\sin{(\\xi)} and \\upsilon{(\\xi)} = \\cos{(\\xi)} and \\upsilon{(\\xi)} \\sin{(\\xi)} = \\sin{(\\xi)} \\frac{d}{d \\xi} \\sin{(\\xi)} and \\cos{(\\xi)} = \\frac{d}{d \\xi} \\sin{(\\xi)} and \\upsilon{(\\xi)} \\sin{(\\xi)} = \\sin{(\\xi)} \\cos{(\\xi)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True)), Derivative(sin(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))))"], [["evaluate_derivatives", 1], "Equality(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True)), cos(Symbol('\\\\xi', commutative=True)))"], [["times", 1, "sin(Symbol('\\\\xi', commutative=True))"], "Equality(Mul(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True)), sin(Symbol('\\\\xi', commutative=True))), Mul(sin(Symbol('\\\\xi', commutative=True)), Derivative(sin(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 1, 2], "Equality(cos(Symbol('\\\\xi', commutative=True)), Derivative(sin(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 3, 4], "Equality(Mul(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True)), sin(Symbol('\\\\xi', commutative=True))), Mul(sin(Symbol('\\\\xi', commutative=True)), cos(Symbol('\\\\xi', commutative=True))))"]], "static_flan-t5-large": "operatorname { f ^ { \\ prime } } { ( \\ mathbf { J } _f) } = \\ frac { d } { d \\ mathbf { J } _f } \\ sin { ( \\ mathbf { J } _f) } and \\ operatorname { f ^ { \\ prime } } { ( \\ mathbf { J } _f) } = \\ cos { ( \\ mathbf { J } _f) } and \\ frac { d } { d \\ mathbf { J } _f } \\ sin { ( \\ mathbf { J } _f) } = \\ cos { ( \\ mathbf { J } _f) } and \\ operatorname { f ^ { \\ prime } } { ( \\ mathbf { J } _f) } \\ sin { ( \\ mathbf { J } _f) } = \\ sin { ( \\ mathbf { J } _f) } \\ cos { ( \\ mathbf { J } _f) }", "VR_flan-t5-large": "xi + \\ upsilon { ( \\ xi) } = \\ xi + \\ frac { d } { d \\ xi } \\ sin { ( \\ xi) } and \\ frac { d } { d \\ xi } ( \\ xi + \\ upsilon { ( \\ xi) } ) = \\ frac { d } { d \\ xi } ( \\ xi + \\ frac { d } { d \\ xi } \\ sin { ( \\ xi) } ) and \\ upsilon { ( \\ xi) } = \\ cos { ( \\ xi) } and \\ cos { ( \\ xi) } = \\ frac { d } { d \\ xi } \\ sin { ( \\ xi) } and \\ frac { d } { d \\ xi } \\ sin { ( \\ xi) } = \\ sin { ( \\ xi) } \\ cos { ( \\ xi) } and \\ usilon { ( \\ xi) } \\ sin { ( \\ xi) } = \\ sin { ( \\ xi) } \\ cos { ( \\ xi) }", "EE_flan-t5-large": "frac { d } { d \\ mathbf { J } _f } \\ sin { ( \\ mathbf { J } _f) } = \\ operatorname { f ^ { \\ prime } } { ( \\ mathbf { J } _f) } and \\ frac { d } { d \\ mathbf { J } _f } \\ sin { ( \\ mathbf { J } _f) } \\ frac { d } { d \\ mathbf { J } _f } \\ sin { ( \\ mathbf { J } _f) } = \\ operatorname { f ^ { \\ prime } } { ( \\ mathbf { J } _f) } \\ frac { d } { d \\ mathbf { J } _f } \\ sin { ( \\ mathbf { J } _f) } and \\ cos { ( \\ mathbf { J } _f) } = \\ operatorname { f ^ { \\ prime } } { ( \\ mathbf { J } _f) } and \\ frac { d } { d \\ mathbf { J } _f } \\ sin { ( \\ mathbf { J } _f) } \\ cos { ( \\ mathbf { J } _f) } = \\ frac { d } { d \\ mathbf { J } _f } \\ sin { ( \\ mathbf { J } _f) } \\ operatorname { f ^ { \\ prime } } { ( \\ mathbf { J } _f) } and \\ sin { ( \\ mathbf { J } _f) } \\ cos { ( \\ mathbf { J } _f) } = \\ operatorname { f ^ { \\ prime } } { ( \\ mathbf { J } _f) } \\ sin { ( \\ mathbf { J } _f) }", "AG_flan-t5-large": "operatorname { f ^ { \\ prime } } { ( \\ mathbf { J } _f) } = \\ frac { d } { d \\ mathbf { J } _f } \\ sin { ( \\ mathbf { J } _f) } and \\ operatorname { f ^ { \\ prime } } { ( \\ mathbf { J } _f) } = \\ cos { ( \\ mathbf { J } _f) } and \\ cos { ( \\ mathbf { J } _f) } = \\ frac { d } { d \\ mathbf { J } _f } \\ sin { ( \\ mathbf { J } _f) } and \\ frac { d } { d \\ mathbf { J } _f } \\ cos { ( \\ mathbf { J } _f) } = \\ frac { d ^ { 2 } } { d \\ mathbf { J } _f ^ { 2 } } \\ sin { ( \\ mathbf { J } _f) }", "SR_flan-t5-large": "operatorname { f ^ { \\ prime } } { ( \\ mathbf { J } _f) } = \\ frac { d } { d \\ mathbf { J } _f } \\ sin { ( \\ mathbf { J } _f) } and \\ operatorname { f ^ { \\ prime } } { ( \\ mathbf { J } _f) } \\ frac { d } { d \\ mathbf { J } _f } \\ sin { ( \\ mathbf { J } _f) } = \\ frac { d } { d \\ mathbf { J } _f } \\ sin { ( \\ mathbf { J } _f) } \\ frac { d } { d \\ mathbf { J } _f } \\ sin { ( \\ mathbf { J } _f) } and \\ operatorname { f ^ { \\ prime } } { ( \\ mathbf { J } _f) } \\ sin { ( \\ mathbf { J } _f) } = \\ sin { ( \\ mathbf { J } _f) } \\ cos { ( \\ mathbf { J } _f) }", "static_rouge": 0.8000000000000002, "static_bleu": 0.6579635435888119, "static_bleurt": 0.5981271266937256, "static_gleu": 0.701688555347092, "VR_rouge": 0.03809523809523818, "EE_rouge": -0.04848484848484835, "AG_rouge": -0.036601307189542354, "SR_rouge": -0.058974358974358765, "VR_rouge_abs": 0.02740778688524592, "EE_rouge_abs": 0.25868752125127503, "AG_rouge_abs": 0.05784204671857618, "SR_rouge_abs": 0.17557251908396954, "VR_bleu": -0.04692452323393914, "EE_bleu": -0.11049225749283242, "AG_bleu": -0.010975823128999362, "SR_bleu": -0.10662197005475338, "VR_bleu_abs": -0.05466118218611393, "EE_bleu_abs": 0.4438952473086195, "AG_bleu_abs": 0.038701908436421406, "SR_bleu_abs": 0.17234258070252084, "VR_bleurt": -0.10249853134155273, "EE_bleurt": -0.19813096523284912, "AG_bleurt": -0.05260419845581055, "SR_bleurt": -0.09058916568756104, "VR_bleurt_abs": -0.37056681513786316, "EE_bleurt_abs": 0.05539262294769287, "AG_bleurt_abs": 0.08361852169036865, "SR_bleurt_abs": 0.0531885027885437, "VR_gleu": -0.0036904177580424635, "EE_gleu": -0.06681652447874253, "AG_gleu": -0.009956546316494008, "SR_gleu": -0.07973733583489684, "VR_gleu_abs": -0.003908310664825665, "EE_gleu_abs": 0.44401571737052636, "AG_gleu_abs": 0.037974410063134734, "SR_gleu_abs": 0.17205542725173206, "ratio_VR_rouge": 0.749414519906323, "ratio_VR_bleu": 1.186455027220203, "ratio_VR_bleurt": 0.41174877934938187, "ratio_VR_gleu": 1.0106282121650616, "ratio_EE_rouge": 0.7180969319697644, "ratio_EE_bleu": 0.5470304572860949, "ratio_EE_bleurt": 0.9283769664496937, "ratio_EE_gleu": 0.547061478739731, "ratio_AG_rouge": 0.935483870967742, "ratio_AG_bleu": 0.9577216503232173, "ratio_AG_bleurt": 0.9009000112176457, "ratio_AG_gleu": 0.9585385351278388, "ratio_SR_rouge": 0.8244274809160305, "ratio_SR_bleu": 0.8276574192974792, "ratio_SR_bleurt": 0.9367309164326689, "ratio_SR_gleu": 0.8279445727482679}, {"prompt": "Given y{(W,q,B)} = W + \\frac{q}{B}, then derive 0 = - \\frac{\\partial}{\\partial q} y{(W,q,B)} + \\frac{1}{B}, then obtain 0 = - \\frac{\\partial}{\\partial q} (W + \\frac{q}{B}) + \\frac{1}{B}", "derivation": "y{(W,q,B)} = W + \\frac{q}{B} and 0 = W - y{(W,q,B)} + \\frac{q}{B} and \\frac{d}{d q} 0 = \\frac{\\partial}{\\partial q} (W - y{(W,q,B)} + \\frac{q}{B}) and 0 = - \\frac{\\partial}{\\partial q} y{(W,q,B)} + \\frac{1}{B} and 0 = - \\frac{\\partial}{\\partial q} (W + \\frac{q}{B}) + \\frac{1}{B}", "srepr_derivation": [["premise", "Equality(Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True)), Add(Symbol('W', commutative=True), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))))"], [["minus", 1, "Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True))"], "Equality(Integer(0), Add(Symbol('W', commutative=True), Mul(Integer(-1), Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True))), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))))"], [["differentiate", 2, "Symbol('q', commutative=True)"], "Equality(Derivative(Integer(0), Tuple(Symbol('q', commutative=True), Integer(1))), Derivative(Add(Symbol('W', commutative=True), Mul(Integer(-1), Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True))), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Integer(0), Add(Mul(Integer(-1), Derivative(Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Pow(Symbol('B', commutative=True), Integer(-1))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Integer(0), Add(Mul(Integer(-1), Derivative(Add(Symbol('W', commutative=True), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))), Tuple(Symbol('q', commutative=True), Integer(1)))), Pow(Symbol('B', commutative=True), Integer(-1))))"]], "EE prompt": "Given W + \\frac{q}{B} = y{(W,q,B)}, then derive - \\frac{\\partial}{\\partial q} y{(W,q,B)} + \\frac{1}{B} = 0, then obtain - \\frac{\\partial}{\\partial q} (W + \\frac{q}{B}) + \\frac{1}{B} = 0", "EE derivation": "W + \\frac{q}{B} = y{(W,q,B)} and W - y{(W,q,B)} + \\frac{q}{B} = 0 and \\frac{\\partial}{\\partial q} (W - y{(W,q,B)} + \\frac{q}{B}) = \\frac{d}{d q} 0 and - \\frac{\\partial}{\\partial q} y{(W,q,B)} + \\frac{1}{B} = 0 and - \\frac{\\partial}{\\partial q} (W + \\frac{q}{B}) + \\frac{1}{B} = 0", "EE srepr_derivation": [["premise", "Equality(Add(Symbol('W', commutative=True), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))), Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True)))"], [["minus", 1, "Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True))"], "Equality(Add(Symbol('W', commutative=True), Mul(Integer(-1), Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True))), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))), Integer(0))"], [["differentiate", 2, "Symbol('q', commutative=True)"], "Equality(Derivative(Add(Symbol('W', commutative=True), Mul(Integer(-1), Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True))), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))), Tuple(Symbol('q', commutative=True), Integer(1))), Derivative(Integer(0), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Add(Mul(Integer(-1), Derivative(Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Pow(Symbol('B', commutative=True), Integer(-1))), Integer(0))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Add(Mul(Integer(-1), Derivative(Add(Symbol('W', commutative=True), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))), Tuple(Symbol('q', commutative=True), Integer(1)))), Pow(Symbol('B', commutative=True), Integer(-1))), Integer(0))"]], "AG prompt": "Given y{(W,q,B)} = W + \\frac{q}{B}, then derive 0 = - \\frac{\\partial}{\\partial q} y{(W,q,B)} + \\frac{1}{B}, then obtain W + \\frac{q}{B} = W - \\frac{\\partial}{\\partial q} y{(W,q,B)} + \\frac{q}{B} + \\frac{1}{B}", "AG derivation": "y{(W,q,B)} = W + \\frac{q}{B} and 0 = W - y{(W,q,B)} + \\frac{q}{B} and \\frac{d}{d q} 0 = \\frac{\\partial}{\\partial q} (W - y{(W,q,B)} + \\frac{q}{B}) and 0 = - \\frac{\\partial}{\\partial q} y{(W,q,B)} + \\frac{1}{B} and W + \\frac{q}{B} = W - \\frac{\\partial}{\\partial q} y{(W,q,B)} + \\frac{q}{B} + \\frac{1}{B}", "AG srepr_derivation": [["premise", "Equality(Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True)), Add(Symbol('W', commutative=True), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))))"], [["minus", 1, "Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True))"], "Equality(Integer(0), Add(Symbol('W', commutative=True), Mul(Integer(-1), Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True))), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))))"], [["differentiate", 2, "Symbol('q', commutative=True)"], "Equality(Derivative(Integer(0), Tuple(Symbol('q', commutative=True), Integer(1))), Derivative(Add(Symbol('W', commutative=True), Mul(Integer(-1), Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True))), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Integer(0), Add(Mul(Integer(-1), Derivative(Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Pow(Symbol('B', commutative=True), Integer(-1))))"], [["add", 4, "Add(Symbol('W', commutative=True), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True)))"], "Equality(Add(Symbol('W', commutative=True), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))), Add(Symbol('W', commutative=True), Mul(Integer(-1), Derivative(Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True)), Pow(Symbol('B', commutative=True), Integer(-1))))"]], "SR prompt": "Given y{(W,q,B)} = W + \\frac{q}{B}, then obtain 0 = - \\frac{\\partial}{\\partial q} (W + \\frac{q}{B}) + \\frac{1}{B}", "SR derivation": "y{(W,q,B)} = W + \\frac{q}{B} and 0 = W - y{(W,q,B)} + \\frac{q}{B} and \\frac{d}{d q} 0 = \\frac{\\partial}{\\partial q} (W - y{(W,q,B)} + \\frac{q}{B}) and 0 = - \\frac{\\partial}{\\partial q} y{(W,q,B)} + \\frac{1}{B} and 0 = - \\frac{\\partial}{\\partial q} (W + \\frac{q}{B}) + \\frac{1}{B}", "SR srepr_derivation": [["premise", "Equality(Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True)), Add(Symbol('W', commutative=True), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))))"], [["minus", 1, "Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True))"], "Equality(Integer(0), Add(Symbol('W', commutative=True), Mul(Integer(-1), Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True))), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))))"], [["differentiate", 2, "Symbol('q', commutative=True)"], "Equality(Derivative(Integer(0), Tuple(Symbol('q', commutative=True), Integer(1))), Derivative(Add(Symbol('W', commutative=True), Mul(Integer(-1), Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True))), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Integer(0), Add(Mul(Integer(-1), Derivative(Function('y')(Symbol('W', commutative=True), Symbol('q', commutative=True), Symbol('B', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Pow(Symbol('B', commutative=True), Integer(-1))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Integer(0), Add(Mul(Integer(-1), Derivative(Add(Symbol('W', commutative=True), Mul(Pow(Symbol('B', commutative=True), Integer(-1)), Symbol('q', commutative=True))), Tuple(Symbol('q', commutative=True), Integer(1)))), Pow(Symbol('B', commutative=True), Integer(-1))))"]], "VR prompt": "Given \\upsilon{(\\kappa,\\tau,\\omicron)} = \\frac{\\kappa}{\\omicron} + \\tau, then derive 0 = - \\frac{\\partial}{\\partial \\kappa} \\upsilon{(\\kappa,\\tau,\\omicron)} + \\frac{1}{\\omicron}, then obtain 0 = - \\frac{\\partial}{\\partial \\kappa} (\\frac{\\kappa}{\\omicron} + \\tau) + \\frac{1}{\\omicron}", "VR derivation": "\\upsilon{(\\kappa,\\tau,\\omicron)} = \\frac{\\kappa}{\\omicron} + \\tau and 0 = \\frac{\\kappa}{\\omicron} + \\tau - \\upsilon{(\\kappa,\\tau,\\omicron)} and \\frac{d}{d \\kappa} 0 = \\frac{\\partial}{\\partial \\kappa} (\\frac{\\kappa}{\\omicron} + \\tau - \\upsilon{(\\kappa,\\tau,\\omicron)}) and 0 = - \\frac{\\partial}{\\partial \\kappa} \\upsilon{(\\kappa,\\tau,\\omicron)} + \\frac{1}{\\omicron} and 0 = - \\frac{\\partial}{\\partial \\kappa} (\\frac{\\kappa}{\\omicron} + \\tau) + \\frac{1}{\\omicron}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\tau', commutative=True), Symbol('\\\\omicron', commutative=True)), Add(Mul(Symbol('\\\\kappa', commutative=True), Pow(Symbol('\\\\omicron', commutative=True), Integer(-1))), Symbol('\\\\tau', commutative=True)))"], [["minus", 1, "Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\tau', commutative=True), Symbol('\\\\omicron', commutative=True))"], "Equality(Integer(0), Add(Mul(Symbol('\\\\kappa', commutative=True), Pow(Symbol('\\\\omicron', commutative=True), Integer(-1))), Symbol('\\\\tau', commutative=True), Mul(Integer(-1), Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\tau', commutative=True), Symbol('\\\\omicron', commutative=True)))))"], [["differentiate", 2, "Symbol('\\\\kappa', commutative=True)"], "Equality(Derivative(Integer(0), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Derivative(Add(Mul(Symbol('\\\\kappa', commutative=True), Pow(Symbol('\\\\omicron', commutative=True), Integer(-1))), Symbol('\\\\tau', commutative=True), Mul(Integer(-1), Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\tau', commutative=True), Symbol('\\\\omicron', commutative=True)))), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Integer(0), Add(Mul(Integer(-1), Derivative(Function('\\\\upsilon')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\tau', commutative=True), Symbol('\\\\omicron', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1)))), Pow(Symbol('\\\\omicron', commutative=True), Integer(-1))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Integer(0), Add(Mul(Integer(-1), Derivative(Add(Mul(Symbol('\\\\kappa', commutative=True), Pow(Symbol('\\\\omicron', commutative=True), Integer(-1))), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1)))), Pow(Symbol('\\\\omicron', commutative=True), Integer(-1))))"]], "static_flan-t5-large": "y { (W,q,B) } = W + \\ frac { q } { B } and 0 = W + \\ frac { q } { B } - y { (W,q,B) } and \\ frac { d } { d q } 0 = \\ frac { \\ partial } { \\ partial q } (W + \\ frac { q } { B } - y { (W,q,B) } ) and 0 = - \\ frac { \\ partial } { \\ partial q } y { (W,q,B) } + \\ frac { 1 } { B } and 0 = - \\ frac { \\ partial } { \\ partial q } (W + \\ frac { q } { B } ) + \\ frac { 1 } { B }", "VR_flan-t5-large": "- \\ frac { \\ kappa } { \\ omicron } + \\ tau and 0 = - \\ frac { \\ kappa } { \\ omicron } + \\ tau - \\ frac { 1 } { \\ omicron } and \\ frac { d } { d \\ kappa } 0 = \\ frac { \\ partial } { \\ partial \\ kappa } (- \\ frac { \\ kappa } { \\ omicron } + \\ tau - \\ frac { 1 } { \\ omicron } ) and \\ frac { d } { d \\ kappa } 0 = \\ frac { \\ partial } { \\ partial \\ kappa } (- \\ frac { \\ kappa } { \\ omicron } + \\ tau - \\ frac { 1 } { \\ omicron } ) and 0 = - \\ frac { \\ partial } { \\ partial \\ kappa } \\ upsilon { ( \\ kappa, \\ tau, \\ omicron) } + \\ frac { 1 } { \\ omicron } and 0 = - \\ frac { \\ partial } { \\ partial \\ kappa } ( \\ frac { \\ kappa } { \\ omicron } + \\ tau) + \\ frac { 1 } { \\ omicron }", "EE_flan-t5-large": "y { (W,q,B) } = W + \\ frac { q } { B } and y { (W,q,B) } - \\ frac { 1 } { B } = 0 and \\ frac { \\ partial } { \\ partial q } (y { (W,q,B) } - \\ frac { 1 } { B } ) = \\ frac { d } { d q } 0 and - \\ frac { \\ partial } { \\ partial q } y { (W,q,B) } + \\ frac { 1 } { B } = 0 and - \\ frac { \\ partial } { \\ partial q } (W + \\ frac { q } { B } ) + \\ frac { 1 } { B } = 0", "AG_flan-t5-large": "y { (W,q,B) } = W + \\ frac { q } { B } and 0 = W - y { (W,q,B) } + \\ frac { q } { B } and \\ frac { d } { d q } 0 = \\ frac { \\ partial } { \\ partial q } (W - y { (W,q,B) } + \\ frac { q } { B } ) and 0 = - \\ frac { \\ partial } { \\ partial q } y { (W,q,B) } + \\ frac { 1 } { B } and 0 = - \\ frac { \\ partial } { \\ partial q } y { (W,q,B) } + \\ frac { 1 } { B } and W + \\ frac { q } { B } = W - \\ frac { \\ partial } { \\ partial q } y { (W,q,B) } + \\ frac { q } { B } + \\ frac { 1 } { B }", "SR_flan-t5-large": "y { (W,q,B) } = W + \\ frac { q } { B } and \\ frac { \\ partial } { \\ partial q } y { (W,q,B) } = \\ frac { \\ partial } { \\ partial q } (W + \\ frac { q } { B } ) and 0 = - \\ frac { \\ partial } { \\ partial q } y { (W,q,B) } + \\ frac { \\ partial } { \\ partial q } (W + \\ frac { q } { B } ) and 0 = - \\ frac { \\ partial } { \\ partial q } (W + \\ frac { q } { B } ) + \\ frac { 1 } { B }", "static_rouge": 0.9344262295081968, "static_bleu": 0.9519327190822319, "static_bleurt": 0.7329088449478149, "static_gleu": 0.9529780564263323, "VR_rouge": 0.1975841242450389, "EE_rouge": 0.06775956284153017, "AG_rouge": 0.02167455165584775, "SR_rouge": 0.15856416054267952, "VR_rouge_abs": 0.023049426845802967, "EE_rouge_abs": 0.11967213114754105, "AG_rouge_abs": 0.09640790479309957, "SR_rouge_abs": 0.206896551724138, "VR_bleu": 0.24684635920536535, "EE_bleu": 0.07356715230481159, "AG_bleu": 0.11345790475516049, "SR_bleu": 0.1547829418286054, "VR_bleu_abs": 0.07088009605528917, "EE_bleu_abs": 0.08193099208194332, "AG_bleu_abs": 0.15786198103091498, "SR_bleu_abs": 0.19479773493369157, "VR_bleurt": -0.03596901893615723, "EE_bleurt": 0.09423172473907471, "AG_bleurt": -0.06390202045440674, "SR_bleurt": 0.18753600120544434, "VR_bleurt_abs": -0.07019688189029694, "EE_bleurt_abs": -0.04644370079040527, "AG_bleurt_abs": 0.010511815547943115, "SR_bleurt_abs": 0.22297120094299316, "VR_gleu": 0.24511288788700647, "EE_gleu": 0.07210031347962376, "AG_gleu": 0.11449824645008522, "SR_gleu": 0.1520376175548589, "VR_gleu_abs": 0.07916557791133172, "EE_gleu_abs": 0.07836990595611293, "AG_gleu_abs": 0.15691426725791147, "SR_gleu_abs": 0.19122257053291536, "ratio_VR_rouge": 0.9172932330827069, "ratio_VR_bleu": 0.822539140143686, "ratio_VR_bleurt": 0.568984701113552, "ratio_VR_gleu": 0.814320735444331, "ratio_EE_rouge": 0.8539999999999999, "ratio_EE_bleu": 0.9086438964033583, "ratio_EE_bleurt": 1.0743947045058102, "ratio_EE_gleu": 0.9128919860627177, "ratio_AG_rouge": 0.892787761049053, "ratio_AG_bleu": 0.8165723503434648, "ratio_AG_bleurt": 0.9864389990638889, "ratio_AG_gleu": 0.8177936304538067, "ratio_SR_rouge": 0.793103448275862, "ratio_SR_bleu": 0.8052022650663084, "ratio_SR_bleurt": 0.7080006794101871, "ratio_SR_gleu": 0.8087774294670846}, {"prompt": "Given \\mathbf{S}{(Z)} = \\int e^{Z} dZ, then derive \\mathbf{S}{(Z)} = \\hat{H}_{\\lambda} + e^{Z}, then derive (\\hat{H}_{\\lambda} + e^{Z}) e^{Z} = (\\phi + e^{Z}) e^{Z}, then obtain e^{((\\phi + e^{Z}) e^{Z})^{\\phi}} = e^{(e^{Z} \\int e^{Z} dZ)^{\\phi}}", "derivation": "\\mathbf{S}{(Z)} = \\int e^{Z} dZ and \\mathbf{S}{(Z)} e^{Z} = e^{Z} \\int e^{Z} dZ and \\mathbf{S}{(Z)} = \\hat{H}_{\\lambda} + e^{Z} and (\\hat{H}_{\\lambda} + e^{Z}) e^{Z} = e^{Z} \\int e^{Z} dZ and (\\hat{H}_{\\lambda} + e^{Z}) e^{Z} = (\\phi + e^{Z}) e^{Z} and (\\phi + e^{Z}) e^{Z} = e^{Z} \\int e^{Z} dZ and ((\\phi + e^{Z}) e^{Z})^{\\phi} = (e^{Z} \\int e^{Z} dZ)^{\\phi} and e^{((\\phi + e^{Z}) e^{Z})^{\\phi}} = e^{(e^{Z} \\int e^{Z} dZ)^{\\phi}}", "srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{S}')(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True))))"], [["times", 1, "exp(Symbol('Z', commutative=True))"], "Equality(Mul(Function('\\\\mathbf{S}')(Symbol('Z', commutative=True)), exp(Symbol('Z', commutative=True))), Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\mathbf{S}')(Symbol('Z', commutative=True)), Add(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), exp(Symbol('Z', commutative=True))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Mul(Add(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))))"], [["evaluate_integrals", 4], "Equality(Mul(Add(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))))"], [["power", 6, "Symbol('\\\\phi', commutative=True)"], "Equality(Pow(Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Symbol('\\\\phi', commutative=True)), Pow(Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))), Symbol('\\\\phi', commutative=True)))"], [["exp", 7], "Equality(exp(Pow(Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Symbol('\\\\phi', commutative=True))), exp(Pow(Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))), Symbol('\\\\phi', commutative=True))))"]], "EE prompt": "Given \\int e^{Z} dZ = \\mathbf{S}{(Z)}, then derive \\hat{H}_{\\lambda} + e^{Z} = \\mathbf{S}{(Z)}, then derive (\\phi + e^{Z}) e^{Z} = (\\hat{H}_{\\lambda} + e^{Z}) e^{Z}, then obtain e^{(e^{Z} \\int e^{Z} dZ)^{\\phi}} = e^{((\\phi + e^{Z}) e^{Z})^{\\phi}}", "EE derivation": "\\int e^{Z} dZ = \\mathbf{S}{(Z)} and e^{Z} \\int e^{Z} dZ = \\mathbf{S}{(Z)} e^{Z} and \\hat{H}_{\\lambda} + e^{Z} = \\mathbf{S}{(Z)} and e^{Z} \\int e^{Z} dZ = (\\hat{H}_{\\lambda} + e^{Z}) e^{Z} and (\\phi + e^{Z}) e^{Z} = (\\hat{H}_{\\lambda} + e^{Z}) e^{Z} and e^{Z} \\int e^{Z} dZ = (\\phi + e^{Z}) e^{Z} and (e^{Z} \\int e^{Z} dZ)^{\\phi} = ((\\phi + e^{Z}) e^{Z})^{\\phi} and e^{(e^{Z} \\int e^{Z} dZ)^{\\phi}} = e^{((\\phi + e^{Z}) e^{Z})^{\\phi}}", "EE srepr_derivation": [["premise", "Equality(Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True))), Function('\\\\mathbf{S}')(Symbol('Z', commutative=True)))"], [["times", 1, "exp(Symbol('Z', commutative=True))"], "Equality(Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))), Mul(Function('\\\\mathbf{S}')(Symbol('Z', commutative=True)), exp(Symbol('Z', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Add(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), exp(Symbol('Z', commutative=True))), Function('\\\\mathbf{S}')(Symbol('Z', commutative=True)))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))), Mul(Add(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))))"], [["evaluate_integrals", 4], "Equality(Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Mul(Add(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))))"], [["substitute_RHS_for_LHS", 4, 5], "Equality(Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))), Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))))"], [["power", 6, "Symbol('\\\\phi', commutative=True)"], "Equality(Pow(Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))), Symbol('\\\\phi', commutative=True)), Pow(Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Symbol('\\\\phi', commutative=True)))"], [["exp", 7], "Equality(exp(Pow(Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))), Symbol('\\\\phi', commutative=True))), exp(Pow(Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Symbol('\\\\phi', commutative=True))))"]], "AG prompt": "Given \\mathbf{S}{(Z)} = \\int e^{Z} dZ, then derive \\mathbf{S}{(Z)} = \\hat{H}_{\\lambda} + e^{Z}, then derive (\\hat{H}_{\\lambda} + e^{Z}) e^{Z} = (\\phi + e^{Z}) e^{Z}, then obtain ((\\phi + e^{Z}) e^{Z})^{\\phi} = (\\mathbf{S}{(Z)} e^{Z})^{\\phi}", "AG derivation": "\\mathbf{S}{(Z)} = \\int e^{Z} dZ and \\mathbf{S}{(Z)} e^{Z} = e^{Z} \\int e^{Z} dZ and \\mathbf{S}{(Z)} = \\hat{H}_{\\lambda} + e^{Z} and (\\hat{H}_{\\lambda} + e^{Z}) e^{Z} = e^{Z} \\int e^{Z} dZ and (\\hat{H}_{\\lambda} + e^{Z}) e^{Z} = (\\phi + e^{Z}) e^{Z} and (\\phi + e^{Z}) e^{Z} = e^{Z} \\int e^{Z} dZ and ((\\phi + e^{Z}) e^{Z})^{\\phi} = (e^{Z} \\int e^{Z} dZ)^{\\phi} and ((\\phi + e^{Z}) e^{Z})^{\\phi} = (\\mathbf{S}{(Z)} e^{Z})^{\\phi}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{S}')(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True))))"], [["times", 1, "exp(Symbol('Z', commutative=True))"], "Equality(Mul(Function('\\\\mathbf{S}')(Symbol('Z', commutative=True)), exp(Symbol('Z', commutative=True))), Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\mathbf{S}')(Symbol('Z', commutative=True)), Add(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), exp(Symbol('Z', commutative=True))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Mul(Add(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))))"], [["evaluate_integrals", 4], "Equality(Mul(Add(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))))"], [["power", 6, "Symbol('\\\\phi', commutative=True)"], "Equality(Pow(Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Symbol('\\\\phi', commutative=True)), Pow(Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))), Symbol('\\\\phi', commutative=True)))"], [["substitute_RHS_for_LHS", 7, 2], "Equality(Pow(Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Symbol('\\\\phi', commutative=True)), Pow(Mul(Function('\\\\mathbf{S}')(Symbol('Z', commutative=True)), exp(Symbol('Z', commutative=True))), Symbol('\\\\phi', commutative=True)))"]], "SR prompt": "Given \\mathbf{S}{(Z)} = \\int e^{Z} dZ, then obtain e^{((\\phi + e^{Z}) e^{Z})^{\\phi}} = e^{(e^{Z} \\int e^{Z} dZ)^{\\phi}}", "SR derivation": "\\mathbf{S}{(Z)} = \\int e^{Z} dZ and \\mathbf{S}{(Z)} e^{Z} = e^{Z} \\int e^{Z} dZ and \\mathbf{S}{(Z)} = \\hat{H}_{\\lambda} + e^{Z} and (\\hat{H}_{\\lambda} + e^{Z}) e^{Z} = e^{Z} \\int e^{Z} dZ and (\\hat{H}_{\\lambda} + e^{Z}) e^{Z} = (\\phi + e^{Z}) e^{Z} and (\\phi + e^{Z}) e^{Z} = e^{Z} \\int e^{Z} dZ and ((\\phi + e^{Z}) e^{Z})^{\\phi} = (e^{Z} \\int e^{Z} dZ)^{\\phi} and e^{((\\phi + e^{Z}) e^{Z})^{\\phi}} = e^{(e^{Z} \\int e^{Z} dZ)^{\\phi}}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{S}')(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True))))"], [["times", 1, "exp(Symbol('Z', commutative=True))"], "Equality(Mul(Function('\\\\mathbf{S}')(Symbol('Z', commutative=True)), exp(Symbol('Z', commutative=True))), Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\mathbf{S}')(Symbol('Z', commutative=True)), Add(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), exp(Symbol('Z', commutative=True))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Mul(Add(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))))"], [["evaluate_integrals", 4], "Equality(Mul(Add(Symbol('\\\\hat{H}_{\\\\lambda}', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))))"], [["power", 6, "Symbol('\\\\phi', commutative=True)"], "Equality(Pow(Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Symbol('\\\\phi', commutative=True)), Pow(Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))), Symbol('\\\\phi', commutative=True)))"], [["exp", 7], "Equality(exp(Pow(Mul(Add(Symbol('\\\\phi', commutative=True), exp(Symbol('Z', commutative=True))), exp(Symbol('Z', commutative=True))), Symbol('\\\\phi', commutative=True))), exp(Pow(Mul(exp(Symbol('Z', commutative=True)), Integral(exp(Symbol('Z', commutative=True)), Tuple(Symbol('Z', commutative=True)))), Symbol('\\\\phi', commutative=True))))"]], "VR prompt": "Given \\omicron{(\\beta)} = \\int e^{\\beta} d\\beta, then derive \\omicron{(\\beta)} = \\tau + e^{\\beta}, then derive (\\tau + e^{\\beta}) e^{\\beta} = (\\zeta + e^{\\beta}) e^{\\beta}, then obtain e^{((\\zeta + e^{\\beta}) e^{\\beta})^{\\zeta}} = e^{(e^{\\beta} \\int e^{\\beta} d\\beta)^{\\zeta}}", "VR derivation": "\\omicron{(\\beta)} = \\int e^{\\beta} d\\beta and \\omicron{(\\beta)} e^{\\beta} = e^{\\beta} \\int e^{\\beta} d\\beta and \\omicron{(\\beta)} = \\tau + e^{\\beta} and (\\tau + e^{\\beta}) e^{\\beta} = e^{\\beta} \\int e^{\\beta} d\\beta and (\\tau + e^{\\beta}) e^{\\beta} = (\\zeta + e^{\\beta}) e^{\\beta} and (\\zeta + e^{\\beta}) e^{\\beta} = e^{\\beta} \\int e^{\\beta} d\\beta and ((\\zeta + e^{\\beta}) e^{\\beta})^{\\zeta} = (e^{\\beta} \\int e^{\\beta} d\\beta)^{\\zeta} and e^{((\\zeta + e^{\\beta}) e^{\\beta})^{\\zeta}} = e^{(e^{\\beta} \\int e^{\\beta} d\\beta)^{\\zeta}}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\omicron')(Symbol('\\\\beta', commutative=True)), Integral(exp(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))))"], [["times", 1, "exp(Symbol('\\\\beta', commutative=True))"], "Equality(Mul(Function('\\\\omicron')(Symbol('\\\\beta', commutative=True)), exp(Symbol('\\\\beta', commutative=True))), Mul(exp(Symbol('\\\\beta', commutative=True)), Integral(exp(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True)))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\omicron')(Symbol('\\\\beta', commutative=True)), Add(Symbol('\\\\tau', commutative=True), exp(Symbol('\\\\beta', commutative=True))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Mul(Add(Symbol('\\\\tau', commutative=True), exp(Symbol('\\\\beta', commutative=True))), exp(Symbol('\\\\beta', commutative=True))), Mul(exp(Symbol('\\\\beta', commutative=True)), Integral(exp(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True)))))"], [["evaluate_integrals", 4], "Equality(Mul(Add(Symbol('\\\\tau', commutative=True), exp(Symbol('\\\\beta', commutative=True))), exp(Symbol('\\\\beta', commutative=True))), Mul(Add(Symbol('\\\\zeta', commutative=True), exp(Symbol('\\\\beta', commutative=True))), exp(Symbol('\\\\beta', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Mul(Add(Symbol('\\\\zeta', commutative=True), exp(Symbol('\\\\beta', commutative=True))), exp(Symbol('\\\\beta', commutative=True))), Mul(exp(Symbol('\\\\beta', commutative=True)), Integral(exp(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True)))))"], [["power", 6, "Symbol('\\\\zeta', commutative=True)"], "Equality(Pow(Mul(Add(Symbol('\\\\zeta', commutative=True), exp(Symbol('\\\\beta', commutative=True))), exp(Symbol('\\\\beta', commutative=True))), Symbol('\\\\zeta', commutative=True)), Pow(Mul(exp(Symbol('\\\\beta', commutative=True)), Integral(exp(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True)))), Symbol('\\\\zeta', commutative=True)))"], [["exp", 7], "Equality(exp(Pow(Mul(Add(Symbol('\\\\zeta', commutative=True), exp(Symbol('\\\\beta', commutative=True))), exp(Symbol('\\\\beta', commutative=True))), Symbol('\\\\zeta', commutative=True))), exp(Pow(Mul(exp(Symbol('\\\\beta', commutative=True)), Integral(exp(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True)))), Symbol('\\\\zeta', commutative=True))))"]], "static_flan-t5-large": "mathbf { S } { (Z) } = \\ int e ^ { Z } dZ and \\ mathbf { S } ^ { Z } { (Z) } = ( \\ int e ^ { Z } dZ) ^ { Z } and \\ mathbf { S } { (Z) } ( \\ hat { H } _ { \\ lambda } + e ^ { Z } ) = ( \\ hat { H } _ { \\ lambda } + e ^ { Z } ) ^ { Z } and ( \\ hat { H } _ { \\ lambda } + e ^ { Z } ) e ^ { Z } = ( \\ int e ^ { Z } dZ) ^ { Z } and ( \\ hat { H } _ { \\ lambda } + e ^ { Z } ) e ^ { Z } = ( \\ phi + e ^ { Z } ) e ^ { Z } and (( \\ phi + e ^ { Z } ) e ^ { Z } ) ^ { \\ phi } = (e ^ { Z } \\ int e ^ { Z } dZ) ^ { \\ phi } and e ^ { (( \\ phi + e ^ { Z } ) e ^ { Z } ) ^ { \\ phi } } = e ^ { (e ^ { Z } \\ int e ^ { Z } dZ) ^ { \\ phi } }", "VR_flan-t5-large": "omicron { ( \\ beta) } = \\ int e ^ { \\ beta } d \\ beta and \\ omicron { ( \\ beta) } e ^ { \\ beta } = e ^ { \\ beta } \\ int e ^ { \\ beta } d \\ beta and e ^ { \\ beta } \\ omicron { ( \\ beta) } } = e ^ { \\ beta } \\ int e ^ { \\ beta } d \\ beta and ( \\ tau + e ^ { \\ beta } ) e ^ { \\ beta } = ( \\ zeta + e ^ { \\ beta } ) e ^ { \\ beta } and ( \\ zeta + e ^ { \\ beta } ) e ^ { \\ beta } = e ^ { \\ beta } \\ int e ^ { \\ beta } d \\ beta and (( \\ zeta + e ^ { \\ beta } ) e ^ { \\ beta } ) ^ { \\ zeta } = (e ^ { \\ beta } \\ int e ^ { \\ beta } d \\ beta) ^ { \\ zeta } and e ^ { (( \\ zeta + e ^ { \\ beta } ) e ^ { \\ beta } ) ^ { \\ zeta } } = e ^ { (e ^ { \\ beta } \\ int e ^ { \\ beta } d \\ beta) ^ { \\ zeta } }", "EE_flan-t5-large": "int e ^ { Z } dZ = \\ mathbf { S } { (Z) } and \\ int e ^ { Z } dZ = \\ int e ^ { Z } dZ and \\ hat { H } _ { \\ lambda } + e ^ { Z } = \\ mathbf { S } { (Z) } and \\ hat { H } _ { \\ lambda } + e ^ { Z } = \\ int e ^ { Z } dZ and \\ hat { H } _ { \\ lambda } + e ^ { Z } = \\ mathbf { S } { (Z) } and \\ int e ^ { Z } dZ = \\ hat { H } _ { \\ lambda } + e ^ { Z } and ( \\ int e ^ { Z } dZ) ^ { Z } = ( \\ hat { H } _ { \\ lambda } + e ^ { Z } ) ^ { Z } and ( \\ phi + e ^ { Z } ) e ^ { Z } = ( \\ hat { H } _ { \\ lambda } + e ^ { Z } ) e ^ { Z } and (e ^ { Z } \\ int e ^ { Z } dZ) ^ { \\ phi } = (( \\ phi + e ^ { Z } ) e ^ { Z } ) ^ { \\ phi } and e ^ { (e ^ { Z } \\ int e ^ { Z } dZ) ^ { \\ phi } } = e ^ { (( \\ phi + e ^ { Z } ) e ^ { Z } ) ^ { \\ phi } }", "AG_flan-t5-large": "mathbf { S } { (Z) } = \\ int e ^ { Z } dZ and \\ mathbf { S } { (Z) } e ^ { Z } = e ^ { Z } \\ int e ^ { Z } dZ and e ^ { Z } \\ mathbf { S } { (Z) } = e ^ { Z } ( \\ int e ^ { Z } dZ) and \\ mathbf { S } { (Z) } = \\ hat { H } _ { \\ lambda } + e ^ { Z } and ( \\ hat { H } _ { \\ lambda } + e ^ { Z } ) e ^ { Z } = ( \\ phi + e ^ { Z } ) e ^ { Z } and (( \\ hat { H } _ { \\ lambda } + e ^ { Z } ) e ^ { Z } ) ^ { \\ phi } = (( \\ phi + e ^ { Z } ) e ^ { Z } ) ^ { \\ phi } and (( \\ phi + e ^ { Z } ) e ^ { Z } ) ^ { \\ phi } = ( \\ mathbf { S } { (Z) } e ^ { Z } ) ^ { \\ phi }", "SR_flan-t5-large": "mathbf { S } { (Z) } = \\ int e ^ { Z } dZ and \\ mathbf { S } { (Z) } e ^ { Z } = e ^ { Z } \\ int e ^ { Z } dZ and ( \\ mathbf { S } { (Z) } e ^ { Z } ) ^ { \\ phi } = (e ^ { Z } \\ int e ^ { Z } dZ) ^ { \\ phi } and (( \\ mathbf { S } { (Z) } e ^ { Z } ) ^ { \\ phi } e ^ { Z } = (e ^ { Z } \\ int e ^ { Z } dZ) ^ { \\ phi } e ^ { Z } and (( \\ phi + e ^ { Z } ) e ^ { Z } ) ^ { \\ phi } = (e ^ { Z } \\ int e ^ { Z } dZ) ^ { \\ phi } and e ^ { (( \\ phi + e ^ { Z } ) e ^ { Z } ) ^ { \\ phi } } = e ^ { (e ^ { Z } \\ int e ^ { Z } dZ) ^ { \\ phi } }", "static_rouge": 0.8415300546448087, "static_bleu": 0.8638706057637342, "static_bleurt": 0.7149797081947327, "static_gleu": 0.8658318425760286, "VR_rouge": -0.09701743138871077, "EE_rouge": 0.02780456444873025, "AG_rouge": -0.013961274834960014, "SR_rouge": 0.023348236462990446, "VR_rouge_abs": 0.0037312291647551565, "EE_rouge_abs": 0.054166666666666696, "AG_rouge_abs": 0.14219180686246558, "SR_rouge_abs": 0.2335329341317366, "VR_bleu": -0.04096190958723034, "EE_bleu": 0.05336844134482166, "AG_bleu": 0.023177669745017337, "SR_bleu": 0.13693129161791795, "VR_bleu_abs": 0.06756071690548848, "EE_bleu_abs": 0.1344070265142211, "AG_bleu_abs": 0.14241095033223128, "SR_bleu_abs": 0.287021226514536, "VR_bleurt": -0.05758601427078247, "EE_bleurt": -0.007038295269012451, "AG_bleurt": 0.015841543674468994, "SR_bleurt": 0.19127827882766724, "VR_bleurt_abs": 0.0815679058432579, "EE_bleurt_abs": 0.12570494413375854, "AG_bleurt_abs": 0.07945764064788818, "SR_bleurt_abs": 0.3597540855407715, "VR_gleu": -0.041672520425716564, "EE_gleu": 0.053825523460704794, "AG_gleu": 0.020310818810032272, "SR_gleu": 0.12790697674418605, "VR_gleu_abs": 0.05899703603025863, "EE_gleu_abs": 0.13460478681464016, "AG_gleu_abs": 0.1359390789899697, "SR_gleu_abs": 0.27605118829981723, "ratio_VR_rouge": 0.9559248554913297, "ratio_VR_bleu": 0.8458746628779691, "ratio_VR_bleurt": -1.744569953340707, "ratio_VR_gleu": 0.8745628881434575, "ratio_EE_rouge": 0.9365853658536585, "ratio_EE_bleu": 0.8549713810595503, "ratio_EE_bleurt": 0.823271244135065, "ratio_EE_gleu": 0.855021048498297, "ratio_AG_rouge": 0.8455502787528391, "ratio_AG_bleu": 0.8465324084911262, "ratio_AG_bleurt": 0.905691413051191, "ratio_AG_gleu": 0.8535839207025182, "ratio_SR_rouge": 0.7664670658682634, "ratio_SR_bleu": 0.712978773485464, "ratio_SR_bleurt": 0.5694940424181256, "ratio_SR_gleu": 0.7239488117001828}, {"prompt": "Given \\operatorname{A_{x}}{(\\varepsilon)} = e^{\\varepsilon}, then derive \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = e^{\\varepsilon}, then obtain \\varepsilon + \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = \\varepsilon + \\frac{d^{2}}{d \\varepsilon^{2}} \\operatorname{A_{x}}{(\\varepsilon)}", "derivation": "\\operatorname{A_{x}}{(\\varepsilon)} = e^{\\varepsilon} and \\varepsilon + \\operatorname{A_{x}}{(\\varepsilon)} = \\varepsilon + e^{\\varepsilon} and \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = \\frac{d}{d \\varepsilon} e^{\\varepsilon} and \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = e^{\\varepsilon} and \\varepsilon + \\operatorname{A_{x}}{(\\varepsilon)} = \\varepsilon + \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} and \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = \\operatorname{A_{x}}{(\\varepsilon)} and \\varepsilon + \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = \\varepsilon + \\frac{d^{2}}{d \\varepsilon^{2}} \\operatorname{A_{x}}{(\\varepsilon)}", "srepr_derivation": [["premise", "Equality(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), exp(Symbol('\\\\varepsilon', commutative=True)))"], [["add", 1, "Symbol('\\\\varepsilon', commutative=True)"], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), Function('A_x')(Symbol('\\\\varepsilon', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), exp(Symbol('\\\\varepsilon', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\varepsilon', commutative=True)"], "Equality(Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))), Derivative(exp(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))), exp(Symbol('\\\\varepsilon', commutative=True)))"], [["substitute_RHS_for_LHS", 2, 4], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), Function('A_x')(Symbol('\\\\varepsilon', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))), Function('A_x')(Symbol('\\\\varepsilon', commutative=True)))"], [["substitute_RHS_for_LHS", 5, 6], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1)))), Add(Symbol('\\\\varepsilon', commutative=True), Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(2)))))"]], "EE prompt": "Given e^{\\varepsilon} = \\operatorname{A_{x}}{(\\varepsilon)}, then derive e^{\\varepsilon} = \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)}, then obtain \\varepsilon + \\frac{d^{2}}{d \\varepsilon^{2}} \\operatorname{A_{x}}{(\\varepsilon)} = \\varepsilon + \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)}", "EE derivation": "e^{\\varepsilon} = \\operatorname{A_{x}}{(\\varepsilon)} and \\varepsilon + e^{\\varepsilon} = \\varepsilon + \\operatorname{A_{x}}{(\\varepsilon)} and \\frac{d}{d \\varepsilon} e^{\\varepsilon} = \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} and e^{\\varepsilon} = \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} and \\varepsilon + \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = \\varepsilon + \\operatorname{A_{x}}{(\\varepsilon)} and \\operatorname{A_{x}}{(\\varepsilon)} = \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} and \\varepsilon + \\frac{d^{2}}{d \\varepsilon^{2}} \\operatorname{A_{x}}{(\\varepsilon)} = \\varepsilon + \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)}", "EE srepr_derivation": [["premise", "Equality(exp(Symbol('\\\\varepsilon', commutative=True)), Function('A_x')(Symbol('\\\\varepsilon', commutative=True)))"], [["add", 1, "Symbol('\\\\varepsilon', commutative=True)"], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), exp(Symbol('\\\\varepsilon', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), Function('A_x')(Symbol('\\\\varepsilon', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\varepsilon', commutative=True)"], "Equality(Derivative(exp(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))), Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(exp(Symbol('\\\\varepsilon', commutative=True)), Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 2, 4], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1)))), Add(Symbol('\\\\varepsilon', commutative=True), Function('A_x')(Symbol('\\\\varepsilon', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))))"], [["substitute_LHS_for_RHS", 5, 6], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(2)))), Add(Symbol('\\\\varepsilon', commutative=True), Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1)))))"]], "AG prompt": "Given \\operatorname{A_{x}}{(\\varepsilon)} = e^{\\varepsilon}, then derive \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = e^{\\varepsilon}, then obtain \\frac{d}{d \\varepsilon} e^{\\varepsilon} = \\operatorname{A_{x}}{(\\varepsilon)}", "AG derivation": "\\operatorname{A_{x}}{(\\varepsilon)} = e^{\\varepsilon} and \\varepsilon + \\operatorname{A_{x}}{(\\varepsilon)} = \\varepsilon + e^{\\varepsilon} and \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = \\frac{d}{d \\varepsilon} e^{\\varepsilon} and \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = e^{\\varepsilon} and \\varepsilon + \\operatorname{A_{x}}{(\\varepsilon)} = \\varepsilon + \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} and \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = \\operatorname{A_{x}}{(\\varepsilon)} and \\frac{d}{d \\varepsilon} e^{\\varepsilon} = \\operatorname{A_{x}}{(\\varepsilon)}", "AG srepr_derivation": [["premise", "Equality(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), exp(Symbol('\\\\varepsilon', commutative=True)))"], [["add", 1, "Symbol('\\\\varepsilon', commutative=True)"], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), Function('A_x')(Symbol('\\\\varepsilon', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), exp(Symbol('\\\\varepsilon', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\varepsilon', commutative=True)"], "Equality(Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))), Derivative(exp(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))), exp(Symbol('\\\\varepsilon', commutative=True)))"], [["substitute_RHS_for_LHS", 2, 4], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), Function('A_x')(Symbol('\\\\varepsilon', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))), Function('A_x')(Symbol('\\\\varepsilon', commutative=True)))"], [["substitute_LHS_for_RHS", 6, 3], "Equality(Derivative(exp(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))), Function('A_x')(Symbol('\\\\varepsilon', commutative=True)))"]], "SR prompt": "Given \\operatorname{A_{x}}{(\\varepsilon)} = e^{\\varepsilon}, then obtain \\varepsilon + \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = \\varepsilon + \\frac{d^{2}}{d \\varepsilon^{2}} \\operatorname{A_{x}}{(\\varepsilon)}", "SR derivation": "\\operatorname{A_{x}}{(\\varepsilon)} = e^{\\varepsilon} and \\varepsilon + \\operatorname{A_{x}}{(\\varepsilon)} = \\varepsilon + e^{\\varepsilon} and \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = \\frac{d}{d \\varepsilon} e^{\\varepsilon} and \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = e^{\\varepsilon} and \\varepsilon + \\operatorname{A_{x}}{(\\varepsilon)} = \\varepsilon + \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} and \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = \\operatorname{A_{x}}{(\\varepsilon)} and \\varepsilon + \\frac{d}{d \\varepsilon} \\operatorname{A_{x}}{(\\varepsilon)} = \\varepsilon + \\frac{d^{2}}{d \\varepsilon^{2}} \\operatorname{A_{x}}{(\\varepsilon)}", "SR srepr_derivation": [["premise", "Equality(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), exp(Symbol('\\\\varepsilon', commutative=True)))"], [["add", 1, "Symbol('\\\\varepsilon', commutative=True)"], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), Function('A_x')(Symbol('\\\\varepsilon', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), exp(Symbol('\\\\varepsilon', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\varepsilon', commutative=True)"], "Equality(Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))), Derivative(exp(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))), exp(Symbol('\\\\varepsilon', commutative=True)))"], [["substitute_RHS_for_LHS", 2, 4], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), Function('A_x')(Symbol('\\\\varepsilon', commutative=True))), Add(Symbol('\\\\varepsilon', commutative=True), Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1))), Function('A_x')(Symbol('\\\\varepsilon', commutative=True)))"], [["substitute_RHS_for_LHS", 5, 6], "Equality(Add(Symbol('\\\\varepsilon', commutative=True), Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(1)))), Add(Symbol('\\\\varepsilon', commutative=True), Derivative(Function('A_x')(Symbol('\\\\varepsilon', commutative=True)), Tuple(Symbol('\\\\varepsilon', commutative=True), Integer(2)))))"]], "VR prompt": "Given \\beta{(\\zeta)} = e^{\\zeta}, then derive \\frac{d}{d \\zeta} \\beta{(\\zeta)} = e^{\\zeta}, then obtain \\zeta + \\frac{d}{d \\zeta} \\beta{(\\zeta)} = \\zeta + \\frac{d^{2}}{d \\zeta^{2}} \\beta{(\\zeta)}", "VR derivation": "\\beta{(\\zeta)} = e^{\\zeta} and \\zeta + \\beta{(\\zeta)} = \\zeta + e^{\\zeta} and \\frac{d}{d \\zeta} \\beta{(\\zeta)} = \\frac{d}{d \\zeta} e^{\\zeta} and \\frac{d}{d \\zeta} \\beta{(\\zeta)} = e^{\\zeta} and \\zeta + \\beta{(\\zeta)} = \\zeta + \\frac{d}{d \\zeta} \\beta{(\\zeta)} and \\frac{d}{d \\zeta} \\beta{(\\zeta)} = \\beta{(\\zeta)} and \\zeta + \\frac{d}{d \\zeta} \\beta{(\\zeta)} = \\zeta + \\frac{d^{2}}{d \\zeta^{2}} \\beta{(\\zeta)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\beta')(Symbol('\\\\zeta', commutative=True)), exp(Symbol('\\\\zeta', commutative=True)))"], [["add", 1, "Symbol('\\\\zeta', commutative=True)"], "Equality(Add(Symbol('\\\\zeta', commutative=True), Function('\\\\beta')(Symbol('\\\\zeta', commutative=True))), Add(Symbol('\\\\zeta', commutative=True), exp(Symbol('\\\\zeta', commutative=True))))"], [["differentiate", 1, "Symbol('\\\\zeta', commutative=True)"], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Derivative(exp(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), exp(Symbol('\\\\zeta', commutative=True)))"], [["substitute_RHS_for_LHS", 2, 4], "Equality(Add(Symbol('\\\\zeta', commutative=True), Function('\\\\beta')(Symbol('\\\\zeta', commutative=True))), Add(Symbol('\\\\zeta', commutative=True), Derivative(Function('\\\\beta')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Derivative(Function('\\\\beta')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Function('\\\\beta')(Symbol('\\\\zeta', commutative=True)))"], [["substitute_RHS_for_LHS", 5, 6], "Equality(Add(Symbol('\\\\zeta', commutative=True), Derivative(Function('\\\\beta')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1)))), Add(Symbol('\\\\zeta', commutative=True), Derivative(Function('\\\\beta')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(2)))))"]], "static_flan-t5-large": "operatorname { A_ { x } } { ( \\ varepsilon) } = e ^ { \\ varepsilon } and \\ frac { d } { d \\ varepsilon } \\ operatorname { A_ { x } } { ( \\ varepsilon) } = \\ frac { d } { d \\ varepsilon } e ^ { \\ varepsilon } and \\ frac { d } { d \\ varepsilon } \\ operatorname { A_ { x } } { ( \\ varepsilon) } = e ^ { \\ varepsilon } and \\ varepsilon + \\ frac { d } { d \\ varepsilon } \\ operatorname { A_ { x } } { ( \\ varepsilon) } = \\ varepsilon + e ^ { \\ varepsilon } and \\ varepsilon + \\ frac { d } { d \\ varepsilon } \\ operatorname { A_ { x } } { ( \\ varepsilon) } = \\ varepsilon + \\ frac { d ^ { 2 } } { d \\ varepsilon ^ { 2 } } \\ operatorname { A_ { x } } { ( \\ varepsilon) }", "VR_flan-t5-large": "beta { ( \\ zeta) } = e ^ { \\ zeta } and \\ frac { d } { d \\ zeta } \\ beta { ( \\ zeta) } = \\ frac { d } { d \\ zeta } e ^ { \\ zeta } and \\ frac { d } { d \\ zeta } \\ beta { ( \\ zeta) } = e ^ { \\ zeta } and \\ frac { d } { d \\ zeta } \\ beta { ( \\ zeta) } = \\ frac { d ^ { 2 } } { d \\ zeta ^ { 2 } } \\ beta { ( \\ zeta) } and \\ zeta + \\ frac { d } { d \\ zeta } \\ beta { ( \\ zeta) } = \\ zeta + \\ frac { d ^ { 2 } } { d \\ zeta ^ { 2 } } \\ beta { ( \\ zeta) }", "EE_flan-t5-large": "varepsilon } = \\ operatorname { A_ { x } } { ( \\ varepsilon) } and e ^ { \\ varepsilon } = \\ frac { d } { d \\ varepsilon } \\ operatorname { A_ { x } } { ( \\ varepsilon) } and \\ frac { d } { d \\ varepsilon } \\ operatorname { A_ { x } } { ( \\ varepsilon) } = \\ frac { d ^ { 2 } } { d \\ varepsilon ^ { 2 } } \\ operatorname { A_ { x } } { ( \\ varepsilon) } and \\ varepsilon + \\ frac { d } { d \\ varepsilon } \\ operatorname { A_ { x } } { ( \\ varepsilon) } = \\ varepsilon + \\ frac { d ^ { 2 } } { d \\ varepsilon ^ { 2 } } \\ operatorname { A_ { x } } { ( \\ varepsilon) } and \\ varepsilon + e ^ { \\ varepsilon } = \\ varepsilon + \\ frac { d } { d \\ varepsilon } \\ operatorname { A_ { x } } { ( \\ varepsilon) } and \\ varepsilon + \\ frac { d ^ { 2 } } { d \\ varepsilon ^ { 2 } } \\ operatorname { A_ { x } } { ( \\ varepsilon) } = \\ varepsilon + \\ frac { d } { d \\ varepsilon } \\ operatorname { A_ { x } } { ( \\ varepsilon) }", "AG_flan-t5-large": "operatorname { A_ { x } } { ( \\ varepsilon) } = e ^ { \\ varepsilon } and \\ frac { d } { d \\ varepsilon } \\ operatorname { A_ { x } } { ( \\ varepsilon) } = \\ frac { d } { d \\ varepsilon } e ^ { \\ varepsilon } and \\ frac { d } { d \\ varepsilon } \\ operatorname { A_ { x } } { ( \\ varepsilon) } = e ^ { \\ varepsilon } and \\ frac { d } { d \\ varepsilon } e ^ { \\ varepsilon } = e ^ { \\ varepsilon } and \\ frac { d } { d \\ varepsilon } e ^ { \\ varepsilon } = \\ operatorname { A_ { x } } { ( \\ varepsilon) }", "SR_flan-t5-large": "operatorname { A_ { x } } { ( \\ varepsilon) } = e ^ { \\ varepsilon } and \\ frac { d } { d \\ varepsilon } \\ operatorname { A_ { x } } { ( \\ varepsilon) } = \\ frac { d } { d \\ varepsilon } e ^ { \\ varepsilon } and \\ frac { d ^ { 2 } } { d \\ varepsilon ^ { 2 } } \\ operatorname { A_ { x } } { ( \\ varepsilon) } = \\ frac { d ^ { 2 } } { d \\ varepsilon ^ { 2 } } e ^ { \\ varepsilon } and \\ varepsilon + \\ frac { d ^ { 2 } } { d \\ varepsilon ^ { 2 } } \\ operatorname { A_ { x } } { ( \\ varepsilon) } = \\ varepsilon + \\ frac { d ^ { 2 } } { d \\ varepsilon ^ { 2 } } e ^ { \\ varepsilon } and \\ varepsilon + \\ frac { d } { d \\ varepsilon } \\ operatorname { A_ { x } } { ( \\ varepsilon) } = \\ varepsilon + \\ frac { d ^ { 2 } } { d \\ varepsilon ^ { 2 } } \\ operatorname { A_ { x } } { ( \\ varepsilon) }", "static_rouge": 0.8441558441558442, "static_bleu": 0.6696566912693815, "static_bleurt": 0.729363203048706, "static_gleu": 0.7122557726465364, "VR_rouge": 0.0028860028860030473, "EE_rouge": -0.03224865022617829, "AG_rouge": 0.09030969030969027, "SR_rouge": 0.1265087853323147, "VR_rouge_abs": -0.018053538078439513, "EE_rouge_abs": 0.18882241354151463, "AG_rouge_abs": 0.12889983579638742, "SR_rouge_abs": 0.1917808219178082, "VR_bleu": -0.08156886060448454, "EE_bleu": -0.2327899159033906, "AG_bleu": 0.15569052887025425, "SR_bleu": -0.06076113916806336, "VR_bleu_abs": -0.05603038236511565, "EE_bleu_abs": 0.3000202109444223, "AG_bleu_abs": 0.18741759010377101, "SR_bleu_abs": 0.24221068693895498, "VR_bleurt": 0.12625038623809814, "EE_bleurt": 0.10531270503997803, "AG_bleurt": 0.21327918767929077, "SR_bleurt": 0.15644288063049316, "VR_bleurt_abs": 0.008484721183776855, "EE_bleurt_abs": 0.08924686908721924, "AG_bleurt_abs": 0.37991994619369507, "SR_bleurt_abs": 0.1758556365966797, "VR_gleu": -0.054883707258901016, "EE_gleu": -0.1909413854351688, "AG_gleu": 0.12372458552379995, "SR_gleu": -0.02486678507992901, "VR_gleu_abs": -0.04505166922835008, "EE_gleu_abs": 0.2995982181020317, "AG_gleu_abs": 0.16641345127412377, "SR_gleu_abs": 0.24158415841584158, "ratio_VR_rouge": 1.0792349726775956, "ratio_VR_bleu": 1.1427882167335963, "ratio_VR_bleurt": 1.0217264109899773, "ratio_VR_gleu": 1.104164639735364, "ratio_EE_rouge": 0.8022918258212376, "ratio_EE_bleu": 0.6881128903492922, "ratio_EE_bleurt": 0.8931734681705145, "ratio_EE_gleu": 0.6887937328571146, "ratio_AG_rouge": 0.8575317604355718, "ratio_AG_bleu": 0.7803397772656508, "ratio_AG_bleurt": 0.580483640439014, "ratio_AG_gleu": 0.8064240225881577, "ratio_SR_rouge": 0.8082191780821918, "ratio_SR_bleu": 0.757789313061045, "ratio_SR_bleurt": 0.8058161536069857, "ratio_SR_gleu": 0.7584158415841584}, {"prompt": "Given C{(\\phi_2)} = \\log{(\\phi_2)}, then derive 2 \\frac{d}{d \\phi_2} C{(\\phi_2)} = \\frac{d}{d \\phi_2} C{(\\phi_2)} + \\frac{1}{\\phi_2}, then obtain 4 (\\frac{d}{d \\phi_2} \\log{(\\phi_2)})^{2} = (\\frac{d}{d \\phi_2} \\log{(\\phi_2)} + \\frac{1}{\\phi_2})^{2}", "derivation": "C{(\\phi_2)} = \\log{(\\phi_2)} and 2 C{(\\phi_2)} = C{(\\phi_2)} + \\log{(\\phi_2)} and \\frac{d}{d \\phi_2} 2 C{(\\phi_2)} = \\frac{d}{d \\phi_2} (C{(\\phi_2)} + \\log{(\\phi_2)}) and 2 \\frac{d}{d \\phi_2} C{(\\phi_2)} = \\frac{d}{d \\phi_2} C{(\\phi_2)} + \\frac{1}{\\phi_2} and 2 \\frac{d}{d \\phi_2} \\log{(\\phi_2)} = \\frac{d}{d \\phi_2} \\log{(\\phi_2)} + \\frac{1}{\\phi_2} and 4 (\\frac{d}{d \\phi_2} \\log{(\\phi_2)})^{2} = (\\frac{d}{d \\phi_2} \\log{(\\phi_2)} + \\frac{1}{\\phi_2})^{2}", "srepr_derivation": [["premise", "Equality(Function('C')(Symbol('\\\\phi_2', commutative=True)), log(Symbol('\\\\phi_2', commutative=True)))"], [["add", 1, "Function('C')(Symbol('\\\\phi_2', commutative=True))"], "Equality(Mul(Integer(2), Function('C')(Symbol('\\\\phi_2', commutative=True))), Add(Function('C')(Symbol('\\\\phi_2', commutative=True)), log(Symbol('\\\\phi_2', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Derivative(Mul(Integer(2), Function('C')(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Derivative(Add(Function('C')(Symbol('\\\\phi_2', commutative=True)), log(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Mul(Integer(2), Derivative(Function('C')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1)))), Add(Derivative(Function('C')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Pow(Symbol('\\\\phi_2', commutative=True), Integer(-1))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Mul(Integer(2), Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1)))), Add(Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Pow(Symbol('\\\\phi_2', commutative=True), Integer(-1))))"], [["power", 5, 2], "Equality(Mul(Integer(4), Pow(Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Integer(2))), Pow(Add(Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Pow(Symbol('\\\\phi_2', commutative=True), Integer(-1))), Integer(2)))"]], "EE prompt": "Given \\log{(\\phi_2)} = C{(\\phi_2)}, then derive \\frac{d}{d \\phi_2} C{(\\phi_2)} + \\frac{1}{\\phi_2} = 2 \\frac{d}{d \\phi_2} C{(\\phi_2)}, then obtain (\\frac{d}{d \\phi_2} \\log{(\\phi_2)} + \\frac{1}{\\phi_2})^{2} = 4 (\\frac{d}{d \\phi_2} \\log{(\\phi_2)})^{2}", "EE derivation": "\\log{(\\phi_2)} = C{(\\phi_2)} and C{(\\phi_2)} + \\log{(\\phi_2)} = 2 C{(\\phi_2)} and \\frac{d}{d \\phi_2} (C{(\\phi_2)} + \\log{(\\phi_2)}) = \\frac{d}{d \\phi_2} 2 C{(\\phi_2)} and \\frac{d}{d \\phi_2} C{(\\phi_2)} + \\frac{1}{\\phi_2} = 2 \\frac{d}{d \\phi_2} C{(\\phi_2)} and \\frac{d}{d \\phi_2} \\log{(\\phi_2)} + \\frac{1}{\\phi_2} = 2 \\frac{d}{d \\phi_2} \\log{(\\phi_2)} and (\\frac{d}{d \\phi_2} \\log{(\\phi_2)} + \\frac{1}{\\phi_2})^{2} = 4 (\\frac{d}{d \\phi_2} \\log{(\\phi_2)})^{2}", "EE srepr_derivation": [["premise", "Equality(log(Symbol('\\\\phi_2', commutative=True)), Function('C')(Symbol('\\\\phi_2', commutative=True)))"], [["add", 1, "Function('C')(Symbol('\\\\phi_2', commutative=True))"], "Equality(Add(Function('C')(Symbol('\\\\phi_2', commutative=True)), log(Symbol('\\\\phi_2', commutative=True))), Mul(Integer(2), Function('C')(Symbol('\\\\phi_2', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Derivative(Add(Function('C')(Symbol('\\\\phi_2', commutative=True)), log(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Derivative(Mul(Integer(2), Function('C')(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Add(Derivative(Function('C')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Pow(Symbol('\\\\phi_2', commutative=True), Integer(-1))), Mul(Integer(2), Derivative(Function('C')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 4, 1], "Equality(Add(Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Pow(Symbol('\\\\phi_2', commutative=True), Integer(-1))), Mul(Integer(2), Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1)))))"], [["power", 5, 2], "Equality(Pow(Add(Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Pow(Symbol('\\\\phi_2', commutative=True), Integer(-1))), Integer(2)), Mul(Integer(4), Pow(Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Integer(2))))"]], "AG prompt": "Given C{(\\phi_2)} = \\log{(\\phi_2)}, then derive 2 \\frac{d}{d \\phi_2} C{(\\phi_2)} = \\frac{d}{d \\phi_2} C{(\\phi_2)} + \\frac{1}{\\phi_2}, then obtain \\phi_2 + 2 \\frac{d}{d \\phi_2} \\log{(\\phi_2)} = \\phi_2 + \\frac{d}{d \\phi_2} \\log{(\\phi_2)} + \\frac{1}{\\phi_2}", "AG derivation": "C{(\\phi_2)} = \\log{(\\phi_2)} and 2 C{(\\phi_2)} = C{(\\phi_2)} + \\log{(\\phi_2)} and \\frac{d}{d \\phi_2} 2 C{(\\phi_2)} = \\frac{d}{d \\phi_2} (C{(\\phi_2)} + \\log{(\\phi_2)}) and 2 \\frac{d}{d \\phi_2} C{(\\phi_2)} = \\frac{d}{d \\phi_2} C{(\\phi_2)} + \\frac{1}{\\phi_2} and 2 \\frac{d}{d \\phi_2} \\log{(\\phi_2)} = \\frac{d}{d \\phi_2} \\log{(\\phi_2)} + \\frac{1}{\\phi_2} and \\phi_2 + 2 \\frac{d}{d \\phi_2} \\log{(\\phi_2)} = \\phi_2 + \\frac{d}{d \\phi_2} \\log{(\\phi_2)} + \\frac{1}{\\phi_2}", "AG srepr_derivation": [["premise", "Equality(Function('C')(Symbol('\\\\phi_2', commutative=True)), log(Symbol('\\\\phi_2', commutative=True)))"], [["add", 1, "Function('C')(Symbol('\\\\phi_2', commutative=True))"], "Equality(Mul(Integer(2), Function('C')(Symbol('\\\\phi_2', commutative=True))), Add(Function('C')(Symbol('\\\\phi_2', commutative=True)), log(Symbol('\\\\phi_2', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Derivative(Mul(Integer(2), Function('C')(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Derivative(Add(Function('C')(Symbol('\\\\phi_2', commutative=True)), log(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Mul(Integer(2), Derivative(Function('C')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1)))), Add(Derivative(Function('C')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Pow(Symbol('\\\\phi_2', commutative=True), Integer(-1))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Mul(Integer(2), Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1)))), Add(Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Pow(Symbol('\\\\phi_2', commutative=True), Integer(-1))))"], [["add", 5, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Add(Symbol('\\\\phi_2', commutative=True), Mul(Integer(2), Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))))), Add(Symbol('\\\\phi_2', commutative=True), Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Pow(Symbol('\\\\phi_2', commutative=True), Integer(-1))))"]], "SR prompt": "Given C{(\\phi_2)} = \\log{(\\phi_2)}, then obtain 4 (\\frac{d}{d \\phi_2} \\log{(\\phi_2)})^{2} = (\\frac{d}{d \\phi_2} \\log{(\\phi_2)} + \\frac{1}{\\phi_2})^{2}", "SR derivation": "C{(\\phi_2)} = \\log{(\\phi_2)} and 2 C{(\\phi_2)} = C{(\\phi_2)} + \\log{(\\phi_2)} and \\frac{d}{d \\phi_2} 2 C{(\\phi_2)} = \\frac{d}{d \\phi_2} (C{(\\phi_2)} + \\log{(\\phi_2)}) and 2 \\frac{d}{d \\phi_2} C{(\\phi_2)} = \\frac{d}{d \\phi_2} C{(\\phi_2)} + \\frac{1}{\\phi_2} and 2 \\frac{d}{d \\phi_2} \\log{(\\phi_2)} = \\frac{d}{d \\phi_2} \\log{(\\phi_2)} + \\frac{1}{\\phi_2} and 4 (\\frac{d}{d \\phi_2} \\log{(\\phi_2)})^{2} = (\\frac{d}{d \\phi_2} \\log{(\\phi_2)} + \\frac{1}{\\phi_2})^{2}", "SR srepr_derivation": [["premise", "Equality(Function('C')(Symbol('\\\\phi_2', commutative=True)), log(Symbol('\\\\phi_2', commutative=True)))"], [["add", 1, "Function('C')(Symbol('\\\\phi_2', commutative=True))"], "Equality(Mul(Integer(2), Function('C')(Symbol('\\\\phi_2', commutative=True))), Add(Function('C')(Symbol('\\\\phi_2', commutative=True)), log(Symbol('\\\\phi_2', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\phi_2', commutative=True)"], "Equality(Derivative(Mul(Integer(2), Function('C')(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Derivative(Add(Function('C')(Symbol('\\\\phi_2', commutative=True)), log(Symbol('\\\\phi_2', commutative=True))), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Mul(Integer(2), Derivative(Function('C')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1)))), Add(Derivative(Function('C')(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Pow(Symbol('\\\\phi_2', commutative=True), Integer(-1))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Mul(Integer(2), Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1)))), Add(Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Pow(Symbol('\\\\phi_2', commutative=True), Integer(-1))))"], [["power", 5, 2], "Equality(Mul(Integer(4), Pow(Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Integer(2))), Pow(Add(Derivative(log(Symbol('\\\\phi_2', commutative=True)), Tuple(Symbol('\\\\phi_2', commutative=True), Integer(1))), Pow(Symbol('\\\\phi_2', commutative=True), Integer(-1))), Integer(2)))"]], "VR prompt": "Given \\alpha{(\\iota)} = \\log{(\\iota)}, then derive 2 \\frac{d}{d \\iota} \\alpha{(\\iota)} = \\frac{d}{d \\iota} \\alpha{(\\iota)} + \\frac{1}{\\iota}, then obtain 4 (\\frac{d}{d \\iota} \\log{(\\iota)})^{2} = (\\frac{d}{d \\iota} \\log{(\\iota)} + \\frac{1}{\\iota})^{2}", "VR derivation": "\\alpha{(\\iota)} = \\log{(\\iota)} and 2 \\alpha{(\\iota)} = \\alpha{(\\iota)} + \\log{(\\iota)} and \\frac{d}{d \\iota} 2 \\alpha{(\\iota)} = \\frac{d}{d \\iota} (\\alpha{(\\iota)} + \\log{(\\iota)}) and 2 \\frac{d}{d \\iota} \\alpha{(\\iota)} = \\frac{d}{d \\iota} \\alpha{(\\iota)} + \\frac{1}{\\iota} and 2 \\frac{d}{d \\iota} \\log{(\\iota)} = \\frac{d}{d \\iota} \\log{(\\iota)} + \\frac{1}{\\iota} and 4 (\\frac{d}{d \\iota} \\log{(\\iota)})^{2} = (\\frac{d}{d \\iota} \\log{(\\iota)} + \\frac{1}{\\iota})^{2}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), log(Symbol('\\\\iota', commutative=True)))"], [["add", 1, "Function('\\\\alpha')(Symbol('\\\\iota', commutative=True))"], "Equality(Mul(Integer(2), Function('\\\\alpha')(Symbol('\\\\iota', commutative=True))), Add(Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), log(Symbol('\\\\iota', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\iota', commutative=True)"], "Equality(Derivative(Mul(Integer(2), Function('\\\\alpha')(Symbol('\\\\iota', commutative=True))), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))), Derivative(Add(Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), log(Symbol('\\\\iota', commutative=True))), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Mul(Integer(2), Derivative(Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1)))), Add(Derivative(Function('\\\\alpha')(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))), Pow(Symbol('\\\\iota', commutative=True), Integer(-1))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Mul(Integer(2), Derivative(log(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1)))), Add(Derivative(log(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))), Pow(Symbol('\\\\iota', commutative=True), Integer(-1))))"], [["power", 5, 2], "Equality(Mul(Integer(4), Pow(Derivative(log(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))), Integer(2))), Pow(Add(Derivative(log(Symbol('\\\\iota', commutative=True)), Tuple(Symbol('\\\\iota', commutative=True), Integer(1))), Pow(Symbol('\\\\iota', commutative=True), Integer(-1))), Integer(2)))"]], "static_flan-t5-large": "{ ( \\ phi_2) } = \\ log { ( \\ phi_2) } and 2 C { ( \\ phi_2) } = C { ( \\ phi_2) } + \\ log { ( \\ phi_2) } and \\ frac { d } { d \\ phi_2 } 2 C { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } (C { ( \\ phi_2) } + \\ log { ( \\ phi_2) } ) and 2 \\ frac { d } { d \\ phi_2 } C { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } C { ( \\ phi_2) } + \\ frac { 1 } { \\ phi_2 } and 2 \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } + \\ frac { 1 } { \\ phi_2 } and 4 ( \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } ) ^ { 2 } = ( \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } + \\ frac { 1 } { \\ phi_2 } ) ^ { 2 }", "VR_flan-t5-large": "alpha { ( \\ iota) } = \\ log { ( \\ iota) } and 2 \\ alpha { ( \\ iota) } = \\ alpha { ( \\ iota) } + \\ log { ( \\ iota) } and \\ frac { d } { d \\ iota } 2 \\ alpha { ( \\ iota) } = \\ frac { d } { d \\ iota } ( \\ alpha { ( \\ iota) } + \\ log { ( \\ iota) } ) and 2 \\ frac { d } { d \\ iota } \\ alpha { ( \\ iota) } = \\ frac { d } { d \\ iota } \\ alpha { ( \\ iota) } + \\ frac { 1 } { \\ iota } and 2 \\ frac { d } { d \\ iota } \\ log { ( \\ iota) } = \\ frac { d } { d \\ iota } \\ log { ( \\ iota) } + \\ frac { 1 } { \\ iota } and 4 ( \\ frac { d } { d \\ iota } \\ log { ( \\ iota) } ) ^ { 2 } = ( \\ frac { d } { d \\ iota } \\ log { ( \\ iota) } + \\ frac { 1 } { \\ iota } ) ^ { 2 }", "EE_flan-t5-large": "log { ( \\ phi_2) } = C { ( \\ phi_2) } and \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } C { ( \\ phi_2) } and \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } + \\ frac { d } { d \\ phi_2 } C { ( \\ phi_2) } = 2 \\ frac { d } { d \\ phi_2 } C { ( \\ phi_2) } and \\ frac { d } { d \\ phi_2 } C { ( \\ phi_2) } + \\ frac { 1 } { \\ phi_2 } = 2 \\ frac { d } { d \\ phi_2 } C { ( \\ phi_2) } and \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } + \\ frac { 1 } { \\ phi_2 } = 2 \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } and ( \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } + \\ frac { 1 } { \\ phi_2 } ) ^ { 2 } = 4 ( \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } ) ^ { 2 }", "AG_flan-t5-large": "{ ( \\ phi_2) } = \\ log { ( \\ phi_2) } and 2 C { ( \\ phi_2) } = C { ( \\ phi_2) } + \\ log { ( \\ phi_2) } and \\ frac { d } { d \\ phi_2 } 2 C { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } (C { ( \\ phi_2) } + \\ log { ( \\ phi_2) } ) and 2 \\ frac { d } { d \\ phi_2 } C { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } C { ( \\ phi_2) } + \\ frac { 1 } { \\ phi_2 } and 2 \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } + \\ frac { 1 } { \\ phi_2 } and \\ phi_2 + 2 \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } = \\ phi_2 + \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } + \\ frac { 1 } { \\ phi_2 }", "SR_flan-t5-large": "{ ( \\ phi_2) } = \\ log { ( \\ phi_2) } and \\ frac { d } { d \\ phi_2 } C { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } and 2 \\ frac { d } { d \\ phi_2 } C { ( \\ phi_2) } = \\ frac { d } { d \\ phi_2 } C { ( \\ phi_2) } + \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } and 4 ( \\ frac { d } { d \\ phi_2 } C { ( \\ phi_2) } ) ^ { 2 } = ( \\ frac { d } { d \\ phi_2 } C { ( \\ phi_2) } + \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } ) ^ { 2 } and 4 ( \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } ) ^ { 2 } = ( \\ frac { d } { d \\ phi_2 } \\ log { ( \\ phi_2) } + \\ frac { 1 } { \\ phi_2 } ) ^ { 2 }", "static_rouge": 0.9952153110047847, "static_bleu": 0.9966273219207928, "static_bleurt": 0.7935550212860107, "static_gleu": 0.9966159052453468, "VR_rouge": -0.004784688995215336, "EE_rouge": 0.07213838792786165, "AG_rouge": -8.985331446420552e-05, "SR_rouge": 0.1128623698283141, "VR_rouge_abs": -0.0016451233842538215, "EE_rouge_abs": 0.032900432900432874, "AG_rouge_abs": 0.0003593890386343057, "SR_rouge_abs": 0.11330049261083752, "VR_bleu": 0.0005720899707716276, "EE_bleu": 0.12553351555414016, "AG_bleu": 2.290439119512211e-05, "SR_bleu": 0.14467902473562755, "VR_bleu_abs": -0.0018300745775378102, "EE_bleu_abs": 0.1088464933413662, "AG_bleu_abs": 0.0001845922654382104, "SR_bleu_abs": 0.14503595977356987, "VR_bleurt": -0.04869961738586426, "EE_bleurt": 0.02026510238647461, "AG_bleurt": 0.0008403658866882324, "SR_bleurt": 0.1919817328453064, "VR_bleurt_abs": 0.02246870845556259, "EE_bleurt_abs": 0.002124309539794922, "AG_bleurt_abs": 0.019890248775482178, "SR_bleurt_abs": 0.22878843545913696, "VR_gleu": 0.0005763012849507865, "EE_gleu": 0.12496236193826016, "AG_gleu": 2.30602709004879e-05, "SR_gleu": 0.14213197969543145, "VR_gleu_abs": -0.001941976276863766, "EE_gleu_abs": 0.10800058622113862, "AG_gleu_abs": 0.00018385574218826584, "SR_gleu_abs": 0.14261460101867574, "ratio_VR_rouge": 1.0054347826086956, "ratio_VR_bleu": 1.0033046499190208, "ratio_VR_bleurt": 0.8085174309389126, "ratio_VR_gleu": 1.00339558573854, "ratio_EE_rouge": 0.964386129334583, "ratio_EE_bleu": 0.8846890236491918, "ratio_EE_bleurt": 0.996838995513662, "ratio_EE_gleu": 0.8857146885287503, "ratio_AG_rouge": 0.9996265172735761, "ratio_AG_bleu": 0.9998048191736025, "ratio_AG_bleurt": 0.9754024105863182, "ratio_AG_gleu": 0.9998056194210496, "ratio_SR_rouge": 0.8866995073891625, "ratio_SR_bleu": 0.8549640402264301, "ratio_SR_bleurt": 0.7323264186546464, "ratio_SR_gleu": 0.8573853989813243}, {"prompt": "Given \\operatorname{r_{0}}{(\\eta,g)} = \\int (\\eta + g) dg, then derive \\operatorname{r_{0}}{(\\eta,g)} = \\eta g + \\sigma_p + \\frac{g^{2}}{2}, then obtain \\eta g + \\sigma_p + \\frac{g^{2}}{2} + \\int (\\eta + g) dg = 2 \\eta g + 2 \\sigma_p + g^{2}", "derivation": "\\operatorname{r_{0}}{(\\eta,g)} = \\int (\\eta + g) dg and \\operatorname{r_{0}}{(\\eta,g)} = \\eta g + \\sigma_p + \\frac{g^{2}}{2} and \\int (\\eta + g) dg = \\eta g + \\sigma_p + \\frac{g^{2}}{2} and \\operatorname{r_{0}}{(\\eta,g)} + \\int (\\eta + g) dg = \\eta g + \\sigma_p + \\frac{g^{2}}{2} + \\operatorname{r_{0}}{(\\eta,g)} and \\eta g + \\sigma_p + \\frac{g^{2}}{2} + \\int (\\eta + g) dg = 2 \\eta g + 2 \\sigma_p + g^{2}", "srepr_derivation": [["premise", "Equality(Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2)))))"], [["substitute_LHS_for_RHS", 2, 1], "Equality(Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2)))))"], [["add", 3, "Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True))"], "Equality(Add(Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True)))), Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2))), Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2))), Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True)))), Add(Mul(Integer(2), Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Mul(Integer(2), Symbol('\\\\sigma_p', commutative=True)), Pow(Symbol('g', commutative=True), Integer(2))))"]], "EE prompt": "Given \\int (\\eta + g) dg = \\operatorname{r_{0}}{(\\eta,g)}, then derive \\eta g + \\sigma_p + \\frac{g^{2}}{2} = \\operatorname{r_{0}}{(\\eta,g)}, then obtain 2 \\eta g + 2 \\sigma_p + g^{2} = \\eta g + \\sigma_p + \\frac{g^{2}}{2} + \\int (\\eta + g) dg", "EE derivation": "\\int (\\eta + g) dg = \\operatorname{r_{0}}{(\\eta,g)} and \\eta g + \\sigma_p + \\frac{g^{2}}{2} = \\operatorname{r_{0}}{(\\eta,g)} and \\eta g + \\sigma_p + \\frac{g^{2}}{2} = \\int (\\eta + g) dg and \\eta g + \\sigma_p + \\frac{g^{2}}{2} + \\operatorname{r_{0}}{(\\eta,g)} = \\operatorname{r_{0}}{(\\eta,g)} + \\int (\\eta + g) dg and 2 \\eta g + 2 \\sigma_p + g^{2} = \\eta g + \\sigma_p + \\frac{g^{2}}{2} + \\int (\\eta + g) dg", "EE srepr_derivation": [["premise", "Equality(Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)))"], [["evaluate_integrals", 1], "Equality(Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2)))), Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)))"], [["substitute_RHS_for_LHS", 2, 1], "Equality(Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2)))), Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))))"], [["add", 3, "Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True))"], "Equality(Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2))), Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True))), Add(Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True)))))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Add(Mul(Integer(2), Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Mul(Integer(2), Symbol('\\\\sigma_p', commutative=True)), Pow(Symbol('g', commutative=True), Integer(2))), Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2))), Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True)))))"]], "AG prompt": "Given \\operatorname{r_{0}}{(\\eta,g)} = \\int (\\eta + g) dg, then derive \\operatorname{r_{0}}{(\\eta,g)} = \\eta g + \\sigma_p + \\frac{g^{2}}{2}, then obtain 2 \\int (\\eta + g) dg = \\eta g + \\sigma_p + \\frac{g^{2}}{2} + \\int (\\eta + g) dg", "AG derivation": "\\operatorname{r_{0}}{(\\eta,g)} = \\int (\\eta + g) dg and \\operatorname{r_{0}}{(\\eta,g)} = \\eta g + \\sigma_p + \\frac{g^{2}}{2} and \\int (\\eta + g) dg = \\eta g + \\sigma_p + \\frac{g^{2}}{2} and \\operatorname{r_{0}}{(\\eta,g)} + \\int (\\eta + g) dg = \\eta g + \\sigma_p + \\frac{g^{2}}{2} + \\operatorname{r_{0}}{(\\eta,g)} and 2 \\int (\\eta + g) dg = \\eta g + \\sigma_p + \\frac{g^{2}}{2} + \\int (\\eta + g) dg", "AG srepr_derivation": [["premise", "Equality(Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2)))))"], [["substitute_LHS_for_RHS", 2, 1], "Equality(Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2)))))"], [["add", 3, "Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True))"], "Equality(Add(Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True)))), Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2))), Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 1], "Equality(Mul(Integer(2), Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True)))), Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2))), Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True)))))"]], "SR prompt": "Given \\operatorname{r_{0}}{(\\eta,g)} = \\int (\\eta + g) dg, then obtain \\eta g + \\sigma_p + \\frac{g^{2}}{2} + \\int (\\eta + g) dg = 2 \\eta g + 2 \\sigma_p + g^{2}", "SR derivation": "\\operatorname{r_{0}}{(\\eta,g)} = \\int (\\eta + g) dg and \\operatorname{r_{0}}{(\\eta,g)} = \\eta g + \\sigma_p + \\frac{g^{2}}{2} and \\int (\\eta + g) dg = \\eta g + \\sigma_p + \\frac{g^{2}}{2} and \\operatorname{r_{0}}{(\\eta,g)} + \\int (\\eta + g) dg = \\eta g + \\sigma_p + \\frac{g^{2}}{2} + \\operatorname{r_{0}}{(\\eta,g)} and \\eta g + \\sigma_p + \\frac{g^{2}}{2} + \\int (\\eta + g) dg = 2 \\eta g + 2 \\sigma_p + g^{2}", "SR srepr_derivation": [["premise", "Equality(Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2)))))"], [["substitute_LHS_for_RHS", 2, 1], "Equality(Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True))), Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2)))))"], [["add", 3, "Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True))"], "Equality(Add(Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True)))), Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2))), Function('r_0')(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Add(Mul(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Symbol('\\\\sigma_p', commutative=True), Mul(Rational(1, 2), Pow(Symbol('g', commutative=True), Integer(2))), Integral(Add(Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Tuple(Symbol('g', commutative=True)))), Add(Mul(Integer(2), Symbol('\\\\eta', commutative=True), Symbol('g', commutative=True)), Mul(Integer(2), Symbol('\\\\sigma_p', commutative=True)), Pow(Symbol('g', commutative=True), Integer(2))))"]], "VR prompt": "Given \\omicron{(\\upsilon,\\kappa)} = \\int (\\kappa + \\upsilon) d\\kappa, then derive \\omicron{(\\upsilon,\\kappa)} = \\frac{\\kappa^{2}}{2} + \\kappa \\upsilon + \\nu, then obtain \\frac{\\kappa^{2}}{2} + \\kappa \\upsilon + \\nu + \\int (\\kappa + \\upsilon) d\\kappa = \\kappa^{2} + 2 \\kappa \\upsilon + 2 \\nu", "VR derivation": "\\omicron{(\\upsilon,\\kappa)} = \\int (\\kappa + \\upsilon) d\\kappa and \\omicron{(\\upsilon,\\kappa)} = \\frac{\\kappa^{2}}{2} + \\kappa \\upsilon + \\nu and \\int (\\kappa + \\upsilon) d\\kappa = \\frac{\\kappa^{2}}{2} + \\kappa \\upsilon + \\nu and \\omicron{(\\upsilon,\\kappa)} + \\int (\\kappa + \\upsilon) d\\kappa = \\frac{\\kappa^{2}}{2} + \\kappa \\upsilon + \\nu + \\omicron{(\\upsilon,\\kappa)} and \\frac{\\kappa^{2}}{2} + \\kappa \\upsilon + \\nu + \\int (\\kappa + \\upsilon) d\\kappa = \\kappa^{2} + 2 \\kappa \\upsilon + 2 \\nu", "VR srepr_derivation": [["premise", "Equality(Function('\\\\omicron')(Symbol('\\\\upsilon', commutative=True), Symbol('\\\\kappa', commutative=True)), Integral(Add(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\omicron')(Symbol('\\\\upsilon', commutative=True), Symbol('\\\\kappa', commutative=True)), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\kappa', commutative=True), Integer(2))), Mul(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Symbol('\\\\nu', commutative=True)))"], [["substitute_LHS_for_RHS", 2, 1], "Equality(Integral(Add(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True))), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\kappa', commutative=True), Integer(2))), Mul(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Symbol('\\\\nu', commutative=True)))"], [["add", 3, "Function('\\\\omicron')(Symbol('\\\\upsilon', commutative=True), Symbol('\\\\kappa', commutative=True))"], "Equality(Add(Function('\\\\omicron')(Symbol('\\\\upsilon', commutative=True), Symbol('\\\\kappa', commutative=True)), Integral(Add(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True)))), Add(Mul(Rational(1, 2), Pow(Symbol('\\\\kappa', commutative=True), Integer(2))), Mul(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Symbol('\\\\nu', commutative=True), Function('\\\\omicron')(Symbol('\\\\upsilon', commutative=True), Symbol('\\\\kappa', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Add(Mul(Rational(1, 2), Pow(Symbol('\\\\kappa', commutative=True), Integer(2))), Mul(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Symbol('\\\\nu', commutative=True), Integral(Add(Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True)))), Add(Pow(Symbol('\\\\kappa', commutative=True), Integer(2)), Mul(Integer(2), Symbol('\\\\kappa', commutative=True), Symbol('\\\\upsilon', commutative=True)), Mul(Integer(2), Symbol('\\\\nu', commutative=True))))"]], "static_flan-t5-large": "operatorname { r_ { 0 } } { ( \\ eta,g) } = \\ int ( \\ eta + g) dg and \\ operatorname { r_ { 0 } } { ( \\ eta,g) } = \\ eta g + \\ sigma_p + \\ frac { g ^ { 2 } } { 2 } and \\ eta g + \\ sigma_p + \\ frac { g ^ { 2 } } { 2 } + \\ int ( \\ eta + g) dg = 2 \\ eta g + 2 \\ sigma_p + g ^ { 2 }", "VR_flan-t5-large": "omicron { ( \\ upsilon, \\ kappa) } = \\ int ( \\ kappa + \\ upsilon) d \\ kappa and \\ omicron { ( \\ upsilon, \\ kappa) } = \\ frac { \\ kappa ^ { 2 } } { 2 } + \\ kappa \\ upsilon + \\ nu and \\ frac { \\ kappa ^ { 2 } } { 2 } + \\ kappa \\ upsilon + \\ nu = \\ frac { \\ kappa ^ { 2 } } { 2 } + 2 \\ kappa \\ upsilon + \\ nu and \\ frac { \\ kappa ^ { 2 } } { 2 } + \\ kappa \\ upsilon + \\ nu + \\ int ( \\ kappa + \\ upsilon) d \\ kappa = \\ kappa ^ { 2 } + 2 \\ kappa \\ upsilon + 2 \\ nu", "EE_flan-t5-large": "int ( \\ eta + g) dg = \\ operatorname { r_ { 0 } } { ( \\ eta,g) } and \\ int ( \\ eta + g) dg = \\ int ( \\ eta + g) dg and \\ operatorname { r_ { 0 } } { ( \\ eta,g) } + \\ int ( \\ eta + g) dg = \\ operatorname { r_ { 0 } } { ( \\ eta,g) } + \\ int ( \\ eta + g) dg and \\ eta g + \\ sigma_p + \\ frac { g ^ { 2 } } { 2 } = \\ eta g + \\ sigma_p + \\ frac { g ^ { 2 } } { 2 } and 2 \\ eta g + 2 \\ sigma_p + g ^ { 2 } = \\ eta g + \\ sigma_p + \\ frac { g ^ { 2 } } { 2 } + \\ int ( \\ eta + g) dg", "AG_flan-t5-large": "operatorname { r_ { 0 } } { ( \\ eta,g) } = \\ int ( \\ eta + g) dg and \\ operatorname { r_ { 0 } } { ( \\ eta,g) } = \\ eta g + \\ sigma_p + \\ frac { g ^ { 2 } } { 2 } and \\ int ( \\ eta + g) dg = \\ eta g + \\ sigma_p + \\ frac { g ^ { 2 } } { 2 } and 2 \\ int ( \\ eta + g) dg = \\ eta g + \\ sigma_p + \\ frac { g ^ { 2 } } { 2 } + \\ int ( \\ eta + g) dg", "SR_flan-t5-large": "operatorname { r_ { 0 } } { ( \\ eta,g) } = \\ int ( \\ eta + g) dg and \\ frac { g ^ { 2 } } { 2 } + \\ operatorname { r_ { 0 } } { ( \\ eta,g) } = \\ frac { g ^ { 2 } } { 2 } + \\ int ( \\ eta + g) dg and \\ eta g + \\ sigma_p + \\ frac { g ^ { 2 } } { 2 } + \\ operatorname { r_ { 0 } } { ( \\ eta,g) } = 2 \\ eta g + 2 \\ sigma_p + g ^ { 2 } and \\ eta g + \\ sigma_p + \\ frac { g ^ { 2 } } { 2 } + \\ int ( \\ eta + g) dg = 2 \\ eta g + 2 \\ sigma_p + g ^ { 2 }", "static_rouge": 0.7049180327868853, "static_bleu": 0.41550490090185205, "static_bleurt": 0.34500306844711304, "static_gleu": 0.5291375291375291, "VR_rouge": -0.11766261237440512, "EE_rouge": -0.11861137897782059, "AG_rouge": -0.11678739356970391, "SR_rouge": -0.06535223748338503, "VR_rouge_abs": 0.02587698055766969, "EE_rouge_abs": 0.17256302066428642, "AG_rouge_abs": 0.14529569892473115, "SR_rouge_abs": 0.2678571428571429, "VR_bleu": -0.2832514866557781, "EE_bleu": -0.39502556801311023, "AG_bleu": -0.19639908659035704, "SR_bleu": -0.3602938772835252, "VR_bleu_abs": 0.07278939863944422, "EE_bleu_abs": 0.38457940448115013, "AG_bleu_abs": 0.16091935434468396, "SR_bleu_abs": 0.39312540118997685, "VR_bleurt": -0.2634128928184509, "EE_bleurt": -0.3308546543121338, "AG_bleurt": -0.18558698892593384, "SR_bleurt": -0.38000673055648804, "VR_bleurt_abs": -0.025095760822296143, "EE_bleurt_abs": -0.10199087858200073, "AG_bleurt_abs": 0.00018656253814697266, "SR_bleurt_abs": 0.03740006685256958, "VR_gleu": -0.19925753259086598, "EE_gleu": -0.2867132867132868, "AG_gleu": -0.13872817829652362, "SR_gleu": -0.2564102564102565, "VR_gleu_abs": 0.07481753219458137, "EE_gleu_abs": 0.38503098968215244, "AG_gleu_abs": 0.16008722460335367, "SR_gleu_abs": 0.3929539295392954, "ratio_VR_rouge": 0.6144329896907217, "ratio_VR_bleu": 0.7852082623911886, "ratio_VR_bleurt": 0.8472858210907495, "ratio_VR_gleu": 0.8012586915698118, "ratio_EE_rouge": 0.8024278459061068, "ratio_EE_bleu": 0.5956817755768471, "ratio_EE_bleurt": 1.1499300347591872, "ratio_EE_gleu": 0.5956467697095633, "ratio_AG_rouge": 0.8414025821596245, "ratio_AG_bleu": 0.8266849643987026, "ratio_AG_bleurt": 0.9997769770803692, "ratio_AG_gleu": 0.8276601772776946, "ratio_SR_rouge": 0.7321428571428571, "ratio_SR_bleu": 0.6068745988100231, "ratio_SR_bleurt": 0.9562187912649557, "ratio_SR_gleu": 0.6070460704607046}, {"prompt": "Given \\operatorname{L_{\\varepsilon}}{(a)} = \\sin{(a)} and V{(a)} = \\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)}, then derive (V^{a}{(a)})^{a} = (\\cos^{a}{(a)})^{a}, then obtain (V^{a}{(a)})^{a} + (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a} = (\\cos^{a}{(a)})^{a} + (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a}", "derivation": "\\operatorname{L_{\\varepsilon}}{(a)} = \\sin{(a)} and V{(a)} = \\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)} and V^{a}{(a)} = (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a} and V^{a}{(a)} = (\\frac{d}{d a} \\sin{(a)})^{a} and (V^{a}{(a)})^{a} = ((\\frac{d}{d a} \\sin{(a)})^{a})^{a} and (V^{a}{(a)})^{a} = (\\cos^{a}{(a)})^{a} and (V^{a}{(a)})^{a} + (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a} = (\\cos^{a}{(a)})^{a} + (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a}", "srepr_derivation": [["premise", "Equality(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), sin(Symbol('a', commutative=True)))"], ["renaming_premise", "Equality(Function('V')(Symbol('a', commutative=True)), Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))))"], [["power", 2, "Symbol('a', commutative=True)"], "Equality(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Derivative(sin(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True)))"], [["power", 4, "Symbol('a', commutative=True)"], "Equality(Pow(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Pow(Derivative(sin(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True)), Symbol('a', commutative=True)))"], [["evaluate_derivatives", 5], "Equality(Pow(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Pow(cos(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)))"], [["add", 6, "Pow(Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True))"], "Equality(Add(Pow(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True))), Add(Pow(Pow(cos(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True))))"]], "EE prompt": "Given \\sin{(a)} = \\operatorname{L_{\\varepsilon}}{(a)} and \\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)} = V{(a)}, then derive (\\cos^{a}{(a)})^{a} = (V^{a}{(a)})^{a}, then obtain (\\cos^{a}{(a)})^{a} + (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a} = (V^{a}{(a)})^{a} + (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a}", "EE derivation": "\\sin{(a)} = \\operatorname{L_{\\varepsilon}}{(a)} and \\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)} = V{(a)} and (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a} = V^{a}{(a)} and (\\frac{d}{d a} \\sin{(a)})^{a} = V^{a}{(a)} and ((\\frac{d}{d a} \\sin{(a)})^{a})^{a} = (V^{a}{(a)})^{a} and (\\cos^{a}{(a)})^{a} = (V^{a}{(a)})^{a} and (\\cos^{a}{(a)})^{a} + (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a} = (V^{a}{(a)})^{a} + (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a}", "EE srepr_derivation": [["premise", "Equality(sin(Symbol('a', commutative=True)), Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)))"], ["renaming_premise", "Equality(Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Function('V')(Symbol('a', commutative=True)))"], [["power", 2, "Symbol('a', commutative=True)"], "Equality(Pow(Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True)), Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)))"], [["substitute_RHS_for_LHS", 3, 1], "Equality(Pow(Derivative(sin(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True)), Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)))"], [["power", 4, "Symbol('a', commutative=True)"], "Equality(Pow(Pow(Derivative(sin(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)))"], [["evaluate_derivatives", 5], "Equality(Pow(Pow(cos(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)))"], [["add", 6, "Pow(Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True))"], "Equality(Add(Pow(Pow(cos(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True))), Add(Pow(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True))))"]], "AG prompt": "Given \\operatorname{L_{\\varepsilon}}{(a)} = \\sin{(a)} and V{(a)} = \\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)}, then derive (V^{a}{(a)})^{a} = (\\cos^{a}{(a)})^{a}, then obtain ((\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a})^{a} = (\\cos^{a}{(a)})^{a}", "AG derivation": "\\operatorname{L_{\\varepsilon}}{(a)} = \\sin{(a)} and V{(a)} = \\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)} and V^{a}{(a)} = (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a} and V^{a}{(a)} = (\\frac{d}{d a} \\sin{(a)})^{a} and (V^{a}{(a)})^{a} = ((\\frac{d}{d a} \\sin{(a)})^{a})^{a} and (V^{a}{(a)})^{a} = (\\cos^{a}{(a)})^{a} and ((\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a})^{a} = (\\cos^{a}{(a)})^{a}", "AG srepr_derivation": [["premise", "Equality(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), sin(Symbol('a', commutative=True)))"], ["renaming_premise", "Equality(Function('V')(Symbol('a', commutative=True)), Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))))"], [["power", 2, "Symbol('a', commutative=True)"], "Equality(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Derivative(sin(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True)))"], [["power", 4, "Symbol('a', commutative=True)"], "Equality(Pow(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Pow(Derivative(sin(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True)), Symbol('a', commutative=True)))"], [["evaluate_derivatives", 5], "Equality(Pow(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Pow(cos(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)))"], [["substitute_LHS_for_RHS", 6, 3], "Equality(Pow(Pow(Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Pow(cos(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)))"]], "SR prompt": "Given \\operatorname{L_{\\varepsilon}}{(a)} = \\sin{(a)} and V{(a)} = \\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)}, then obtain (V^{a}{(a)})^{a} + (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a} = (\\cos^{a}{(a)})^{a} + (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a}", "SR derivation": "\\operatorname{L_{\\varepsilon}}{(a)} = \\sin{(a)} and V{(a)} = \\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)} and V^{a}{(a)} = (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a} and V^{a}{(a)} = (\\frac{d}{d a} \\sin{(a)})^{a} and (V^{a}{(a)})^{a} = ((\\frac{d}{d a} \\sin{(a)})^{a})^{a} and (V^{a}{(a)})^{a} = (\\cos^{a}{(a)})^{a} and (V^{a}{(a)})^{a} + (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a} = (\\cos^{a}{(a)})^{a} + (\\frac{d}{d a} \\operatorname{L_{\\varepsilon}}{(a)})^{a}", "SR srepr_derivation": [["premise", "Equality(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), sin(Symbol('a', commutative=True)))"], ["renaming_premise", "Equality(Function('V')(Symbol('a', commutative=True)), Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))))"], [["power", 2, "Symbol('a', commutative=True)"], "Equality(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Derivative(sin(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True)))"], [["power", 4, "Symbol('a', commutative=True)"], "Equality(Pow(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Pow(Derivative(sin(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True)), Symbol('a', commutative=True)))"], [["evaluate_derivatives", 5], "Equality(Pow(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Pow(cos(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)))"], [["add", 6, "Pow(Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True))"], "Equality(Add(Pow(Pow(Function('V')(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True))), Add(Pow(Pow(cos(Symbol('a', commutative=True)), Symbol('a', commutative=True)), Symbol('a', commutative=True)), Pow(Derivative(Function('L_{\\\\varepsilon}')(Symbol('a', commutative=True)), Tuple(Symbol('a', commutative=True), Integer(1))), Symbol('a', commutative=True))))"]], "VR prompt": "Given \\xi{(\\kappa)} = \\sin{(\\kappa)} and \\iota{(\\kappa)} = \\frac{d}{d \\kappa} \\xi{(\\kappa)}, then derive (\\iota^{\\kappa}{(\\kappa)})^{\\kappa} = (\\cos^{\\kappa}{(\\kappa)})^{\\kappa}, then obtain (\\iota^{\\kappa}{(\\kappa)})^{\\kappa} + (\\frac{d}{d \\kappa} \\xi{(\\kappa)})^{\\kappa} = (\\cos^{\\kappa}{(\\kappa)})^{\\kappa} + (\\frac{d}{d \\kappa} \\xi{(\\kappa)})^{\\kappa}", "VR derivation": "\\xi{(\\kappa)} = \\sin{(\\kappa)} and \\iota{(\\kappa)} = \\frac{d}{d \\kappa} \\xi{(\\kappa)} and \\iota^{\\kappa}{(\\kappa)} = (\\frac{d}{d \\kappa} \\xi{(\\kappa)})^{\\kappa} and \\iota^{\\kappa}{(\\kappa)} = (\\frac{d}{d \\kappa} \\sin{(\\kappa)})^{\\kappa} and (\\iota^{\\kappa}{(\\kappa)})^{\\kappa} = ((\\frac{d}{d \\kappa} \\sin{(\\kappa)})^{\\kappa})^{\\kappa} and (\\iota^{\\kappa}{(\\kappa)})^{\\kappa} = (\\cos^{\\kappa}{(\\kappa)})^{\\kappa} and (\\iota^{\\kappa}{(\\kappa)})^{\\kappa} + (\\frac{d}{d \\kappa} \\xi{(\\kappa)})^{\\kappa} = (\\cos^{\\kappa}{(\\kappa)})^{\\kappa} + (\\frac{d}{d \\kappa} \\xi{(\\kappa)})^{\\kappa}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\xi')(Symbol('\\\\kappa', commutative=True)), sin(Symbol('\\\\kappa', commutative=True)))"], ["renaming_premise", "Equality(Function('\\\\iota')(Symbol('\\\\kappa', commutative=True)), Derivative(Function('\\\\xi')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))))"], [["power", 2, "Symbol('\\\\kappa', commutative=True)"], "Equality(Pow(Function('\\\\iota')(Symbol('\\\\kappa', commutative=True)), Symbol('\\\\kappa', commutative=True)), Pow(Derivative(Function('\\\\xi')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Symbol('\\\\kappa', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 1], "Equality(Pow(Function('\\\\iota')(Symbol('\\\\kappa', commutative=True)), Symbol('\\\\kappa', commutative=True)), Pow(Derivative(sin(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Symbol('\\\\kappa', commutative=True)))"], [["power", 4, "Symbol('\\\\kappa', commutative=True)"], "Equality(Pow(Pow(Function('\\\\iota')(Symbol('\\\\kappa', commutative=True)), Symbol('\\\\kappa', commutative=True)), Symbol('\\\\kappa', commutative=True)), Pow(Pow(Derivative(sin(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Symbol('\\\\kappa', commutative=True)), Symbol('\\\\kappa', commutative=True)))"], [["evaluate_derivatives", 5], "Equality(Pow(Pow(Function('\\\\iota')(Symbol('\\\\kappa', commutative=True)), Symbol('\\\\kappa', commutative=True)), Symbol('\\\\kappa', commutative=True)), Pow(Pow(cos(Symbol('\\\\kappa', commutative=True)), Symbol('\\\\kappa', commutative=True)), Symbol('\\\\kappa', commutative=True)))"], [["add", 6, "Pow(Derivative(Function('\\\\xi')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Symbol('\\\\kappa', commutative=True))"], "Equality(Add(Pow(Pow(Function('\\\\iota')(Symbol('\\\\kappa', commutative=True)), Symbol('\\\\kappa', commutative=True)), Symbol('\\\\kappa', commutative=True)), Pow(Derivative(Function('\\\\xi')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Symbol('\\\\kappa', commutative=True))), Add(Pow(Pow(cos(Symbol('\\\\kappa', commutative=True)), Symbol('\\\\kappa', commutative=True)), Symbol('\\\\kappa', commutative=True)), Pow(Derivative(Function('\\\\xi')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Symbol('\\\\kappa', commutative=True))))"]], "static_flan-t5-large": "operatorname { L_ { \\ varepsilon } } { (a) } = \\ sin { (a) } and V { (a) } = \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } and V ^ { a } { (a) } = ( \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } ) ^ { a } and (V ^ { a } { (a) } ) ^ { a } = ( \\ cos ^ { a } { (a) } ) ^ { a } and (V ^ { a } { (a) } ) ^ { a } = ( \\ cos ^ { a } { (a) } ) ^ { a } and (V ^ { a } { (a) } ) ^ { a } + ( \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } ) ^ { a } = ( \\ cos ^ { a } { (a) } ) ^ { a } + ( \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } ) ^ { a }", "VR_flan-t5-large": "xi { ( \\ kappa) } = \\ sin { ( \\ kappa) } and \\ iota { ( \\ kappa) } = \\ frac { d } { d \\ kappa } \\ xi { ( \\ kappa) } and \\ iota ^ { \\ kappa } { ( \\ kappa) } = ( \\ frac { d } { d \\ kappa } \\ xi { ( \\ kappa) } ) ^ { \\ kappa } and ( \\ iota ^ { \\ kappa } { ( \\ kappa) } ) ^ { \\ kappa } = (( \\ frac { d } { d \\ kappa } \\ xi { ( \\ kappa) } ) ^ { \\ kappa } ) ^ { \\ kappa } and ( \\ iota ^ { \\ kappa } { ( \\ kappa) } ) ^ { \\ kappa } = ( \\ cos ^ { \\ kappa } { ( \\ kappa) } ) ^ { \\ kappa } and ( \\ iota ^ { \\ kappa } { ( \\ kappa) } ) ^ { \\ kappa } + ( \\ frac { d } { d \\ kappa } \\ xi { ( \\ kappa) } ) ^ { \\ kappa } = ( \\ cos ^ { \\ kappa } { ( \\ kappa) } ) ^ { \\ kappa } + ( \\ frac { d } { d \\ kappa } \\ xi { ( \\ kappa) } ) ^ { \\ kappa }", "EE_flan-t5-large": "sin { (a) } = \\ operatorname { L_ { \\ varepsilon } } { (a) } and \\ frac { d } { d a } \\ sin { (a) } = \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } and \\ frac { d } { d a } \\ sin { (a) } = V { (a) } and \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } = V { (a) } and \\ cos ^ { a } { (a) } = (V ^ { a } { (a) } ) ^ { a } and ( \\ cos ^ { a } { (a) } ) ^ { a } = (V ^ { a } { (a) } ) ^ { a } and ( \\ cos ^ { a } { (a) } ) ^ { a } + ( \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } ) ^ { a } = (V ^ { a } { (a) } ) ^ { a } + ( \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } ) ^ { a }", "AG_flan-t5-large": "operatorname { L_ { \\ varepsilon } } { (a) } = \\ sin { (a) } and V { (a) } = \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } and V ^ { a } { (a) } = ( \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } ) ^ { a } and (V ^ { a } { (a) } ) ^ { a } = (( \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } ) ^ { a } ) ^ { a } and (V ^ { a } { (a) } ) ^ { a } = ( \\ cos ^ { a } { (a) } ) ^ { a } and (( \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } ) ^ { a } ) ^ { a } = ( \\ cos ^ { a } { (a) } ) ^ { a }", "SR_flan-t5-large": "operatorname { L_ { \\ varepsilon } } { (a) } = \\ sin { (a) } and V { (a) } = \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } and V ^ { a } { (a) } = ( \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } ) ^ { a } and (V ^ { a } { (a) } ) ^ { a } = (( \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } ) ^ { a } ) ^ { a } and (V ^ { a } { (a) } ) ^ { a } + ( \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } ) ^ { a } = ( \\ cos ^ { a } { (a) } ) ^ { a } + ( \\ frac { d } { d a } \\ operatorname { L_ { \\ varepsilon } } { (a) } ) ^ { a }", "static_rouge": 0.8834355828220859, "static_bleu": 0.8314872655574043, "static_bleurt": 0.7811965942382812, "static_gleu": 0.8422764227642277, "VR_rouge": -0.014523600851383489, "EE_rouge": -0.05298060214901246, "AG_rouge": 0.0006769621324307362, "SR_rouge": 0.045935582822085985, "VR_rouge_abs": 0.030181086519114678, "EE_rouge_abs": 0.06912245768738434, "AG_rouge_abs": -0.0279993212285764, "SR_rouge_abs": 0.13103448275862073, "VR_bleu": -0.02399104968642174, "EE_bleu": -0.036748976032320746, "AG_bleu": -0.03299201736720714, "SR_bleu": 0.0781011880916418, "VR_bleu_abs": 0.04651327968167157, "EE_bleu_abs": 0.09810827038734182, "AG_bleu_abs": -0.044126413497276196, "SR_bleu_abs": 0.13091790429373362, "VR_bleurt": 0.053373098373413086, "EE_bleurt": 0.03836023807525635, "AG_bleurt": -0.020109057426452637, "SR_bleurt": 0.03740459680557251, "VR_bleurt_abs": 0.09254666417837143, "EE_bleurt_abs": 0.1029251217842102, "AG_bleurt_abs": 0.008795619010925293, "SR_bleurt_abs": 0.07200849056243896, "VR_gleu": -0.021359940872135996, "EE_gleu": -0.030081300813008083, "AG_gleu": -0.026838454825226177, "SR_gleu": 0.06910569105691056, "VR_gleu_abs": 0.039979222451458074, "EE_gleu_abs": 0.09750425411230856, "AG_gleu_abs": -0.03873991512381669, "SR_gleu_abs": 0.1290630975143403, "ratio_VR_rouge": 0.7887323943661972, "ratio_VR_bleu": 0.894338069169983, "ratio_VR_bleurt": 3.3104364315787222, "ratio_VR_gleu": 0.9153142821720803, "ratio_EE_rouge": 0.9190539640239841, "ratio_EE_bleu": 0.8961781273149226, "ratio_EE_bleurt": 0.8655633468431972, "ratio_EE_gleu": 0.896967154159674, "ratio_AG_rouge": 1.0305782060785769, "ratio_AG_bleu": 1.0520877674349849, "ratio_AG_bleurt": 0.9890912354346266, "ratio_AG_gleu": 1.0452517527087317, "ratio_SR_rouge": 0.8689655172413793, "ratio_SR_bleu": 0.8690820957062664, "ratio_SR_bleurt": 0.9121947298318948, "ratio_SR_gleu": 0.8709369024856597}, {"prompt": "Given \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} = \\sin{(\\phi)}, then derive - \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} = 0, then obtain \\frac{(- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)})^{\\phi}}{- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\sin{(\\phi)}} = \\frac{0^{\\phi}}{- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\sin{(\\phi)}}", "derivation": "\\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} = \\sin{(\\phi)} and \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} = \\frac{d}{d \\phi} \\sin{(\\phi)} and \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} - \\frac{d}{d \\phi} \\sin{(\\phi)} = 0 and - \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} = 0 and (- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)})^{\\phi} = 0^{\\phi} and \\frac{(- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)})^{\\phi}}{- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\sin{(\\phi)}} = \\frac{0^{\\phi}}{- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\sin{(\\phi)}}", "srepr_derivation": [["renaming_premise", "Equality(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), sin(Symbol('\\\\phi', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\phi', commutative=True)"], "Equality(Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["minus", 2, "Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Mul(Integer(-1), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 3], "Equality(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Integer(0))"], [["power", 4, "Symbol('\\\\phi', commutative=True)"], "Equality(Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Symbol('\\\\phi', commutative=True)), Pow(Integer(0), Symbol('\\\\phi', commutative=True)))"], [["divide", 5, "Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], "Equality(Mul(Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Symbol('\\\\phi', commutative=True)), Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Integer(-1))), Mul(Pow(Integer(0), Symbol('\\\\phi', commutative=True)), Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Integer(-1))))"]], "EE prompt": "Given \\sin{(\\phi)} = \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)}, then derive 0 = - \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)}, then obtain \\frac{0^{\\phi}}{- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\sin{(\\phi)}} = \\frac{(- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)})^{\\phi}}{- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\sin{(\\phi)}}", "EE derivation": "\\sin{(\\phi)} = \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} and \\frac{d}{d \\phi} \\sin{(\\phi)} = \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} and 0 = \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} - \\frac{d}{d \\phi} \\sin{(\\phi)} and 0 = - \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} and 0^{\\phi} = (- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)})^{\\phi} and \\frac{0^{\\phi}}{- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\sin{(\\phi)}} = \\frac{(- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)})^{\\phi}}{- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\sin{(\\phi)}}", "EE srepr_derivation": [["renaming_premise", "Equality(sin(Symbol('\\\\phi', commutative=True)), Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\phi', commutative=True)"], "Equality(Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["minus", 2, "Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))"], "Equality(Integer(0), Add(Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Mul(Integer(-1), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))))"], [["evaluate_derivatives", 3], "Equality(Integer(0), Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))))"], [["power", 4, "Symbol('\\\\phi', commutative=True)"], "Equality(Pow(Integer(0), Symbol('\\\\phi', commutative=True)), Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Symbol('\\\\phi', commutative=True)))"], [["divide", 5, "Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], "Equality(Mul(Pow(Integer(0), Symbol('\\\\phi', commutative=True)), Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Integer(-1))), Mul(Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Symbol('\\\\phi', commutative=True)), Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Integer(-1))))"]], "AG prompt": "Given \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} = \\sin{(\\phi)}, then derive - \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} = 0, then obtain \\cos{((- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)})^{\\phi})} = \\cos{(0^{\\phi})}", "AG derivation": "\\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} = \\sin{(\\phi)} and \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} = \\frac{d}{d \\phi} \\sin{(\\phi)} and \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} - \\frac{d}{d \\phi} \\sin{(\\phi)} = 0 and - \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} = 0 and (- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)})^{\\phi} = 0^{\\phi} and \\cos{((- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)})^{\\phi})} = \\cos{(0^{\\phi})}", "AG srepr_derivation": [["renaming_premise", "Equality(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), sin(Symbol('\\\\phi', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\phi', commutative=True)"], "Equality(Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["minus", 2, "Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Mul(Integer(-1), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 3], "Equality(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Integer(0))"], [["power", 4, "Symbol('\\\\phi', commutative=True)"], "Equality(Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Symbol('\\\\phi', commutative=True)), Pow(Integer(0), Symbol('\\\\phi', commutative=True)))"], [["cos", 5], "Equality(cos(Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Symbol('\\\\phi', commutative=True))), cos(Pow(Integer(0), Symbol('\\\\phi', commutative=True))))"]], "SR prompt": "Given \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} = \\sin{(\\phi)}, then obtain \\frac{(- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)})^{\\phi}}{- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\sin{(\\phi)}} = \\frac{0^{\\phi}}{- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\sin{(\\phi)}}", "SR derivation": "\\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} = \\sin{(\\phi)} and \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} = \\frac{d}{d \\phi} \\sin{(\\phi)} and \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} - \\frac{d}{d \\phi} \\sin{(\\phi)} = 0 and - \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)} = 0 and (- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)})^{\\phi} = 0^{\\phi} and \\frac{(- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\operatorname{g^{\\prime}_{\\varepsilon}}{(\\phi)})^{\\phi}}{- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\sin{(\\phi)}} = \\frac{0^{\\phi}}{- \\cos{(\\phi)} + \\frac{d}{d \\phi} \\sin{(\\phi)}}", "SR srepr_derivation": [["renaming_premise", "Equality(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), sin(Symbol('\\\\phi', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\phi', commutative=True)"], "Equality(Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], [["minus", 2, "Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))), Mul(Integer(-1), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 3], "Equality(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Integer(0))"], [["power", 4, "Symbol('\\\\phi', commutative=True)"], "Equality(Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Symbol('\\\\phi', commutative=True)), Pow(Integer(0), Symbol('\\\\phi', commutative=True)))"], [["divide", 5, "Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1))))"], "Equality(Mul(Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(Function('g^{\\\\prime}_{\\\\varepsilon}')(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Symbol('\\\\phi', commutative=True)), Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Integer(-1))), Mul(Pow(Integer(0), Symbol('\\\\phi', commutative=True)), Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\phi', commutative=True))), Derivative(sin(Symbol('\\\\phi', commutative=True)), Tuple(Symbol('\\\\phi', commutative=True), Integer(1)))), Integer(-1))))"]], "VR prompt": "Given \\nu{(\\zeta)} = \\sin{(\\zeta)}, then derive - \\cos{(\\zeta)} + \\frac{d}{d \\zeta} \\nu{(\\zeta)} = 0, then obtain \\frac{(- \\cos{(\\zeta)} + \\frac{d}{d \\zeta} \\nu{(\\zeta)})^{\\zeta}}{- \\cos{(\\zeta)} + \\frac{d}{d \\zeta} \\sin{(\\zeta)}} = \\frac{0^{\\zeta}}{- \\cos{(\\zeta)} + \\frac{d}{d \\zeta} \\sin{(\\zeta)}}", "VR derivation": "\\nu{(\\zeta)} = \\sin{(\\zeta)} and \\frac{d}{d \\zeta} \\nu{(\\zeta)} = \\frac{d}{d \\zeta} \\sin{(\\zeta)} and \\frac{d}{d \\zeta} \\nu{(\\zeta)} - \\frac{d}{d \\zeta} \\sin{(\\zeta)} = 0 and - \\cos{(\\zeta)} + \\frac{d}{d \\zeta} \\nu{(\\zeta)} = 0 and (- \\cos{(\\zeta)} + \\frac{d}{d \\zeta} \\nu{(\\zeta)})^{\\zeta} = 0^{\\zeta} and \\frac{(- \\cos{(\\zeta)} + \\frac{d}{d \\zeta} \\nu{(\\zeta)})^{\\zeta}}{- \\cos{(\\zeta)} + \\frac{d}{d \\zeta} \\sin{(\\zeta)}} = \\frac{0^{\\zeta}}{- \\cos{(\\zeta)} + \\frac{d}{d \\zeta} \\sin{(\\zeta)}}", "VR srepr_derivation": [["renaming_premise", "Equality(Function('\\\\nu')(Symbol('\\\\zeta', commutative=True)), sin(Symbol('\\\\zeta', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\zeta', commutative=True)"], "Equality(Derivative(Function('\\\\nu')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))))"], [["minus", 2, "Derivative(sin(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Function('\\\\nu')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))), Mul(Integer(-1), Derivative(sin(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))))), Integer(0))"], [["evaluate_derivatives", 3], "Equality(Add(Mul(Integer(-1), cos(Symbol('\\\\zeta', commutative=True))), Derivative(Function('\\\\nu')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1)))), Integer(0))"], [["power", 4, "Symbol('\\\\zeta', commutative=True)"], "Equality(Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\zeta', commutative=True))), Derivative(Function('\\\\nu')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1)))), Symbol('\\\\zeta', commutative=True)), Pow(Integer(0), Symbol('\\\\zeta', commutative=True)))"], [["divide", 5, "Add(Mul(Integer(-1), cos(Symbol('\\\\zeta', commutative=True))), Derivative(sin(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1))))"], "Equality(Mul(Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\zeta', commutative=True))), Derivative(Function('\\\\nu')(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1)))), Symbol('\\\\zeta', commutative=True)), Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\zeta', commutative=True))), Derivative(sin(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1)))), Integer(-1))), Mul(Pow(Integer(0), Symbol('\\\\zeta', commutative=True)), Pow(Add(Mul(Integer(-1), cos(Symbol('\\\\zeta', commutative=True))), Derivative(sin(Symbol('\\\\zeta', commutative=True)), Tuple(Symbol('\\\\zeta', commutative=True), Integer(1)))), Integer(-1))))"]], "static_flan-t5-large": "operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } = \\ sin { ( \\ phi) } and \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } - \\ sin { ( \\ phi) } = 0 and \\ frac { d } { d \\ phi } ( \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } - \\ sin { ( \\ phi) } ) = \\ frac { d } { d \\ phi } 0 and - \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } = 0 and (- \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } ) ^ { \\ phi } = 0 ^ { \\ phi } and \\ frac { (- \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } ) ^ { \\ phi } } { - \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ sin { ( \\ phi) } } = \\ frac { 0 ^ { \\ phi } } { - \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ sin { ( \\ phi) } }", "VR_flan-t5-large": "nu { ( \\ zeta) } = \\ sin { ( \\ zeta) } and \\ frac { d } { d \\ zeta } \\ nu { ( \\ zeta) } = \\ frac { d } { d \\ zeta } \\ sin { ( \\ zeta) } and \\ frac { d } { d \\ zeta } \\ nu { ( \\ zeta) } - \\ frac { d } { d \\ zeta } \\ sin { ( \\ zeta) } = 0 and - \\ cos { ( \\ zeta) } + \\ frac { d } { d \\ zeta } \\ nu { ( \\ zeta) } = 0 and (- \\ cos { ( \\ zeta) } + \\ frac { d } { d \\ zeta } \\ nu { ( \\ zeta) } ) ^ { \\ zeta } = 0 ^ { \\ zeta } and \\ frac { (- \\ cos { ( \\ zeta) } + \\ frac { d } { d \\ zeta } \\ nu { ( \\ zeta) } ) ^ { \\ zeta } } { - \\ cos { ( \\ zeta) } + \\ frac { d } { d \\ zeta } \\ sin { ( \\ zeta) } } = \\ frac { 0 ^ { \\ zeta } } { - \\ cos { ( \\ zeta) } + \\ frac { d } { d \\ zeta } \\ sin { ( \\ zeta) } }", "EE_flan-t5-large": "sin { ( \\ phi) } = \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } and 0 = - \\ sin { ( \\ phi) } + \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } and \\ frac { d } { d \\ phi } 0 = \\ frac { d } { d \\ phi } (- \\ sin { ( \\ phi) } + \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } ) and 0 = - \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } and 0 ^ { \\ phi } = (- \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } ) ^ { \\ phi } and \\ frac { 0 ^ { \\ phi } } { - \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ sin { ( \\ phi) } } = \\ frac { (- \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } ) ^ { \\ phi } } { - \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ sin { ( \\ phi) } }", "AG_flan-t5-large": "operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } = \\ sin { ( \\ phi) } and \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } - \\ sin { ( \\ phi) } = 0 and \\ frac { d } { d \\ phi } ( \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } - \\ sin { ( \\ phi) } ) = \\ frac { d } { d \\ phi } 0 and - \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } = 0 and (- \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } ) ^ { \\ phi } = 0 ^ { \\ phi } and \\ cos { ((- \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } ) ^ { \\ phi } ) } = \\ cos { (0 ^ { \\ phi } ) }", "SR_flan-t5-large": "operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } = \\ sin { ( \\ phi) } and \\ frac { d } { d \\ phi } \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } = \\ frac { d } { d \\ phi } \\ sin { ( \\ phi) } and - \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } = 0 and (- \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } ) ^ { \\ phi } = 0 ^ { \\ phi } and \\ frac { (- \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ operatorname { g ^ { \\ prime } _ { \\ varepsilon } } { ( \\ phi) } ) ^ { \\ phi } } { - \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ sin { ( \\ phi) } } = \\ frac { 0 ^ { \\ phi } } { - \\ cos { ( \\ phi) } + \\ frac { d } { d \\ phi } \\ sin { ( \\ phi) } }", "static_rouge": 0.9326424870466321, "static_bleu": 0.9182040071829045, "static_bleurt": 0.7486971616744995, "static_gleu": 0.9193548387096774, "VR_rouge": -0.06735751295336789, "EE_rouge": -0.010362694300518172, "AG_rouge": 0.01338782866153898, "SR_rouge": 0.02553866191002019, "VR_rouge_abs": 0.04527472527472526, "EE_rouge_abs": 0.03903225806451616, "AG_rouge_abs": 0.009846547314577903, "SR_rouge_abs": 0.06818181818181823, "VR_bleu": -0.07821817910919526, "EE_bleu": 0.0032958265716056534, "AG_bleu": 0.015496453707890878, "SR_bleu": 0.0830402357776121, "VR_bleu_abs": 0.020043406092024874, "EE_bleu_abs": 0.030530634348256425, "AG_bleu_abs": 0.010200838599522255, "SR_bleu_abs": 0.13084336143507946, "VR_bleurt": -0.07933557033538818, "EE_bleurt": -0.008341073989868164, "AG_bleurt": 0.007429003715515137, "SR_bleurt": -0.04462718963623047, "VR_bleurt_abs": -0.04645978659391403, "EE_bleurt_abs": 0.08600866794586182, "AG_bleurt_abs": 0.03434640169143677, "SR_bleurt_abs": 0.09608197212219238, "VR_gleu": -0.07705449701743217, "EE_gleu": 0.003506311360448766, "AG_gleu": 0.015028715581557606, "SR_gleu": 0.0729312762973352, "VR_gleu_abs": 0.021492294377301824, "EE_gleu_abs": 0.029936609176165696, "AG_gleu_abs": 0.008954262001499624, "SR_gleu_abs": 0.1251840942562592, "ratio_VR_rouge": 0.8474074074074075, "ratio_VR_bleu": 0.961031002624442, "ratio_VR_bleurt": 1.441258874124971, "ratio_VR_gleu": 0.960300502873015, "ratio_EE_rouge": 0.957107408720312, "ratio_EE_bleu": 0.9684651837682747, "ratio_EE_bleurt": 0.8866147892208985, "ratio_EE_gleu": 0.9690879039209179, "ratio_AG_rouge": 0.9888162672476399, "ratio_AG_bleu": 0.9873919809610214, "ratio_AG_bleurt": 0.9613019883000092, "ratio_AG_gleu": 0.9890958346591473, "ratio_SR_rouge": 0.9318181818181818, "ratio_SR_bleu": 0.8691566385649205, "ratio_SR_bleurt": 0.8917446632475097, "ratio_SR_gleu": 0.8748159057437408}, {"prompt": "Given \\omega{(\\mu)} = e^{\\mu}, then derive \\mathbf{J} + \\mu = \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu, then obtain \\mathbf{J} + \\mu + \\frac{e^{\\mu}}{\\omega{(\\mu)}} - \\frac{1}{\\omega{(\\mu)}} = \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu + \\frac{e^{\\mu}}{\\omega{(\\mu)}} - \\frac{1}{\\omega{(\\mu)}}", "derivation": "\\omega{(\\mu)} = e^{\\mu} and 1 = \\frac{e^{\\mu}}{\\omega{(\\mu)}} and \\int 1 d\\mu = \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu and \\mathbf{J} + \\mu = \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu and \\mathbf{J} + \\mu - \\frac{1}{\\omega{(\\mu)}} = \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu - \\frac{1}{\\omega{(\\mu)}} and \\mathbf{J} + \\mu + \\frac{e^{\\mu}}{\\omega{(\\mu)}} - \\frac{1}{\\omega{(\\mu)}} = \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu + \\frac{e^{\\mu}}{\\omega{(\\mu)}} - \\frac{1}{\\omega{(\\mu)}}", "srepr_derivation": [["premise", "Equality(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), exp(Symbol('\\\\mu', commutative=True)))"], [["divide", 1, "Function('\\\\omega')(Symbol('\\\\mu', commutative=True))"], "Equality(Integer(1), Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))))"], [["integrate", 2, "Symbol('\\\\mu', commutative=True)"], "Equality(Integral(Integer(1), Tuple(Symbol('\\\\mu', commutative=True))), Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mu', commutative=True)), Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))))"], [["minus", 4, "Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1))"], "Equality(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mu', commutative=True), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)))), Add(Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)))))"], [["add", 5, "Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True)))"], "Equality(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mu', commutative=True), Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)))), Add(Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))), Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)))))"]], "EE prompt": "Given e^{\\mu} = \\omega{(\\mu)}, then derive \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu = \\mathbf{J} + \\mu, then obtain \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu + \\frac{e^{\\mu}}{\\omega{(\\mu)}} - \\frac{1}{\\omega{(\\mu)}} = \\mathbf{J} + \\mu + \\frac{e^{\\mu}}{\\omega{(\\mu)}} - \\frac{1}{\\omega{(\\mu)}}", "EE derivation": "e^{\\mu} = \\omega{(\\mu)} and \\frac{e^{\\mu}}{\\omega{(\\mu)}} = 1 and \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu = \\int 1 d\\mu and \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu = \\mathbf{J} + \\mu and \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu - \\frac{1}{\\omega{(\\mu)}} = \\mathbf{J} + \\mu - \\frac{1}{\\omega{(\\mu)}} and \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu + \\frac{e^{\\mu}}{\\omega{(\\mu)}} - \\frac{1}{\\omega{(\\mu)}} = \\mathbf{J} + \\mu + \\frac{e^{\\mu}}{\\omega{(\\mu)}} - \\frac{1}{\\omega{(\\mu)}}", "EE srepr_derivation": [["premise", "Equality(exp(Symbol('\\\\mu', commutative=True)), Function('\\\\omega')(Symbol('\\\\mu', commutative=True)))"], [["divide", 1, "Function('\\\\omega')(Symbol('\\\\mu', commutative=True))"], "Equality(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Integer(1))"], [["integrate", 2, "Symbol('\\\\mu', commutative=True)"], "Equality(Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))), Integral(Integer(1), Tuple(Symbol('\\\\mu', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))), Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mu', commutative=True)))"], [["minus", 4, "Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1))"], "Equality(Add(Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)))), Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mu', commutative=True), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)))))"], [["add", 5, "Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True)))"], "Equality(Add(Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))), Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)))), Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mu', commutative=True), Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)))))"]], "AG prompt": "Given \\omega{(\\mu)} = e^{\\mu}, then derive \\mathbf{J} + \\mu = \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu, then obtain (\\mathbf{J} + \\mu) (\\mathbf{J} + \\mu - \\frac{1}{\\omega{(\\mu)}}) = (\\mathbf{J} + \\mu) (\\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu - \\frac{1}{\\omega{(\\mu)}})", "AG derivation": "\\omega{(\\mu)} = e^{\\mu} and 1 = \\frac{e^{\\mu}}{\\omega{(\\mu)}} and \\int 1 d\\mu = \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu and \\mathbf{J} + \\mu = \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu and \\mathbf{J} + \\mu - \\frac{1}{\\omega{(\\mu)}} = \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu - \\frac{1}{\\omega{(\\mu)}} and (\\mathbf{J} + \\mu) (\\mathbf{J} + \\mu - \\frac{1}{\\omega{(\\mu)}}) = (\\mathbf{J} + \\mu) (\\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu - \\frac{1}{\\omega{(\\mu)}})", "AG srepr_derivation": [["premise", "Equality(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), exp(Symbol('\\\\mu', commutative=True)))"], [["divide", 1, "Function('\\\\omega')(Symbol('\\\\mu', commutative=True))"], "Equality(Integer(1), Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))))"], [["integrate", 2, "Symbol('\\\\mu', commutative=True)"], "Equality(Integral(Integer(1), Tuple(Symbol('\\\\mu', commutative=True))), Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mu', commutative=True)), Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))))"], [["minus", 4, "Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1))"], "Equality(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mu', commutative=True), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)))), Add(Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)))))"], [["times", 5, "Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mu', commutative=True))"], "Equality(Mul(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mu', commutative=True)), Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mu', commutative=True), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1))))), Mul(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mu', commutative=True)), Add(Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1))))))"]], "SR prompt": "Given \\omega{(\\mu)} = e^{\\mu}, then obtain \\mathbf{J} + \\mu + \\frac{e^{\\mu}}{\\omega{(\\mu)}} - \\frac{1}{\\omega{(\\mu)}} = \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu + \\frac{e^{\\mu}}{\\omega{(\\mu)}} - \\frac{1}{\\omega{(\\mu)}}", "SR derivation": "\\omega{(\\mu)} = e^{\\mu} and 1 = \\frac{e^{\\mu}}{\\omega{(\\mu)}} and \\int 1 d\\mu = \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu and \\mathbf{J} + \\mu = \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu and \\mathbf{J} + \\mu - \\frac{1}{\\omega{(\\mu)}} = \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu - \\frac{1}{\\omega{(\\mu)}} and \\mathbf{J} + \\mu + \\frac{e^{\\mu}}{\\omega{(\\mu)}} - \\frac{1}{\\omega{(\\mu)}} = \\int \\frac{e^{\\mu}}{\\omega{(\\mu)}} d\\mu + \\frac{e^{\\mu}}{\\omega{(\\mu)}} - \\frac{1}{\\omega{(\\mu)}}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), exp(Symbol('\\\\mu', commutative=True)))"], [["divide", 1, "Function('\\\\omega')(Symbol('\\\\mu', commutative=True))"], "Equality(Integer(1), Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))))"], [["integrate", 2, "Symbol('\\\\mu', commutative=True)"], "Equality(Integral(Integer(1), Tuple(Symbol('\\\\mu', commutative=True))), Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mu', commutative=True)), Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))))"], [["minus", 4, "Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1))"], "Equality(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mu', commutative=True), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)))), Add(Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)))))"], [["add", 5, "Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True)))"], "Equality(Add(Symbol('\\\\mathbf{J}', commutative=True), Symbol('\\\\mu', commutative=True), Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)))), Add(Integral(Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Tuple(Symbol('\\\\mu', commutative=True))), Mul(Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)), exp(Symbol('\\\\mu', commutative=True))), Mul(Integer(-1), Pow(Function('\\\\omega')(Symbol('\\\\mu', commutative=True)), Integer(-1)))))"]], "VR prompt": "Given \\omicron{(\\tau)} = e^{\\tau}, then derive \\gamma + \\tau = \\int \\frac{e^{\\tau}}{\\omicron{(\\tau)}} d\\tau, then obtain \\gamma + \\tau + \\frac{e^{\\tau}}{\\omicron{(\\tau)}} - \\frac{1}{\\omicron{(\\tau)}} = \\int \\frac{e^{\\tau}}{\\omicron{(\\tau)}} d\\tau + \\frac{e^{\\tau}}{\\omicron{(\\tau)}} - \\frac{1}{\\omicron{(\\tau)}}", "VR derivation": "\\omicron{(\\tau)} = e^{\\tau} and 1 = \\frac{e^{\\tau}}{\\omicron{(\\tau)}} and \\int 1 d\\tau = \\int \\frac{e^{\\tau}}{\\omicron{(\\tau)}} d\\tau and \\gamma + \\tau = \\int \\frac{e^{\\tau}}{\\omicron{(\\tau)}} d\\tau and \\gamma + \\tau - \\frac{1}{\\omicron{(\\tau)}} = \\int \\frac{e^{\\tau}}{\\omicron{(\\tau)}} d\\tau - \\frac{1}{\\omicron{(\\tau)}} and \\gamma + \\tau + \\frac{e^{\\tau}}{\\omicron{(\\tau)}} - \\frac{1}{\\omicron{(\\tau)}} = \\int \\frac{e^{\\tau}}{\\omicron{(\\tau)}} d\\tau + \\frac{e^{\\tau}}{\\omicron{(\\tau)}} - \\frac{1}{\\omicron{(\\tau)}}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\omicron')(Symbol('\\\\tau', commutative=True)), exp(Symbol('\\\\tau', commutative=True)))"], [["divide", 1, "Function('\\\\omicron')(Symbol('\\\\tau', commutative=True))"], "Equality(Integer(1), Mul(Pow(Function('\\\\omicron')(Symbol('\\\\tau', commutative=True)), Integer(-1)), exp(Symbol('\\\\tau', commutative=True))))"], [["integrate", 2, "Symbol('\\\\tau', commutative=True)"], "Equality(Integral(Integer(1), Tuple(Symbol('\\\\tau', commutative=True))), Integral(Mul(Pow(Function('\\\\omicron')(Symbol('\\\\tau', commutative=True)), Integer(-1)), exp(Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\tau', commutative=True))))"], [["evaluate_integrals", 3], "Equality(Add(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True)), Integral(Mul(Pow(Function('\\\\omicron')(Symbol('\\\\tau', commutative=True)), Integer(-1)), exp(Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\tau', commutative=True))))"], [["minus", 4, "Pow(Function('\\\\omicron')(Symbol('\\\\tau', commutative=True)), Integer(-1))"], "Equality(Add(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True), Mul(Integer(-1), Pow(Function('\\\\omicron')(Symbol('\\\\tau', commutative=True)), Integer(-1)))), Add(Integral(Mul(Pow(Function('\\\\omicron')(Symbol('\\\\tau', commutative=True)), Integer(-1)), exp(Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\tau', commutative=True))), Mul(Integer(-1), Pow(Function('\\\\omicron')(Symbol('\\\\tau', commutative=True)), Integer(-1)))))"], [["add", 5, "Mul(Pow(Function('\\\\omicron')(Symbol('\\\\tau', commutative=True)), Integer(-1)), exp(Symbol('\\\\tau', commutative=True)))"], "Equality(Add(Symbol('\\\\gamma', commutative=True), Symbol('\\\\tau', commutative=True), Mul(Pow(Function('\\\\omicron')(Symbol('\\\\tau', commutative=True)), Integer(-1)), exp(Symbol('\\\\tau', commutative=True))), Mul(Integer(-1), Pow(Function('\\\\omicron')(Symbol('\\\\tau', commutative=True)), Integer(-1)))), Add(Integral(Mul(Pow(Function('\\\\omicron')(Symbol('\\\\tau', commutative=True)), Integer(-1)), exp(Symbol('\\\\tau', commutative=True))), Tuple(Symbol('\\\\tau', commutative=True))), Mul(Pow(Function('\\\\omicron')(Symbol('\\\\tau', commutative=True)), Integer(-1)), exp(Symbol('\\\\tau', commutative=True))), Mul(Integer(-1), Pow(Function('\\\\omicron')(Symbol('\\\\tau', commutative=True)), Integer(-1)))))"]], "static_flan-t5-large": "omega { ( \\ mu) } = e ^ { \\ mu } and 1 = \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } and \\ int 1 d \\ mu = \\ int \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } d \\ mu and \\ mathbf { J } + \\ mu = \\ int \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } d \\ mu and \\ mathbf { J } + \\ mu = \\ int 1 d \\ mu and \\ mathbf { J } + \\ mu + \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } = \\ int \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } d \\ mu + \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } and \\ mathbf { J } + \\ mu + \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } - \\ frac { 1 } { \\ omega { ( \\ mu) } } = \\ int \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } d \\ mu + \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } - \\ frac { 1 } { \\ omega { ( \\ mu) } }", "VR_flan-t5-large": "omicron { ( \\ tau) } = e ^ { \\ tau } and 1 = \\ frac { e ^ { \\ tau } } { \\ omicron { ( \\ tau) } } and \\ int 1 d \\ tau = \\ int \\ frac { e ^ { \\ tau } } { \\ omicron { ( \\ tau) } } d \\ tau and \\ gamma + \\ tau = \\ int \\ frac { e ^ { \\ tau } } { \\ omicron { ( \\ tau) } } d \\ tau and \\ gamma + \\ tau + \\ frac { e ^ { \\ tau } } { \\ omicron { ( \\ tau) } } = \\ int \\ frac { e ^ { \\ tau } } { \\ omicron { ( \\ tau) } } d \\ tau + \\ frac { e ^ { \\ tau } } { \\ omicron { ( \\ tau) } } and \\ gamma + \\ tau + \\ frac { e ^ { \\ tau } } { \\ omicron { ( \\ tau) } } - \\ frac { 1 } { \\ omicron { ( \\ tau) } } = \\ int \\ frac { e ^ { \\ tau } } { \\ omicron { ( \\ tau) } } d \\ tau + \\ frac { e ^ { \\ tau } } { \\ omicron { ( \\ tau) } } - \\ frac { 1 } { \\ omicron { ( \\ tau) } }", "EE_flan-t5-large": "e ^ { \\ mu } = \\ omega { ( \\ mu) } and \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } = 1 and \\ int \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } d \\ mu = \\ int 1 d \\ mu and \\ int \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } d \\ mu = \\ mathbf { J } + \\ mu and \\ int \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } d \\ mu + \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } = \\ mathbf { J } + \\ mu + \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } and \\ int \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } d \\ mu + \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } - \\ frac { 1 } { \\ omega { ( \\ mu) } } = \\ mathbf { J } + \\ mu + \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } - \\ frac { 1 } { \\ omega { ( \\ mu) } }", "AG_flan-t5-large": "omega { ( \\ mu) } = e ^ { \\ mu } and 1 = \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } and \\ int 1 d \\ mu = \\ int \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } d \\ mu and \\ mathbf { J } + \\ mu = \\ int \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } d \\ mu and \\ mathbf { J } + \\ mu = \\ int 1 d \\ mu and \\ mathbf { J } + \\ mu - \\ frac { 1 } { \\ omega { ( \\ mu) } } = \\ int 1 d \\ mu - \\ frac { 1 } { \\ omega { ( \\ mu) } } and ( \\ mathbf { J } + \\ mu) ( \\ mathbf { J } + \\ mu - \\ frac { 1 } { \\ omega { ( \\ mu) } } ) = ( \\ mathbf { J } + \\ mu) ( \\ int 1 d \\ mu - \\ frac { 1 } { \\ omega { ( \\ mu) } } ) and ( \\ mathbf { J } + \\ mu) ( \\ mathbf { J } + \\ mu - \\ frac { 1 } { \\ omega { ( \\ mu) } } ) = ( \\ mathbf { J } + \\ mu) ( \\ int \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } d \\ mu - \\ frac { 1 } { \\ omega { ( \\ mu) } } )", "SR_flan-t5-large": "omega { ( \\ mu) } = e ^ { \\ mu } and 1 = \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } and \\ int 1 d \\ mu = \\ int \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } d \\ mu and \\ int 1 d \\ mu + \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } = \\ int \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } d \\ mu + \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } and \\ mathbf { J } + \\ mu + \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } - \\ frac { 1 } { \\ omega { ( \\ mu) } } = \\ int \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } d \\ mu + \\ frac { e ^ { \\ mu } } { \\ omega { ( \\ mu) } } - \\ frac { 1 } { \\ omega { ( \\ mu) } }", "static_rouge": 0.9, "static_bleu": 0.8835641955901026, "static_bleurt": 0.7106630206108093, "static_gleu": 0.88379705400982, "VR_rouge": -0.03975903614457821, "EE_rouge": -0.041860465116278944, "AG_rouge": 0.09148936170212763, "SR_rouge": 0.0304347826086957, "VR_rouge_abs": 0.01605727093299436, "EE_rouge_abs": 0.03619909502262442, "AG_rouge_abs": 0.14123822020756294, "SR_rouge_abs": 0.1228070175438597, "VR_bleu": -0.045792962262669934, "EE_bleu": -0.04739699365637495, "AG_bleu": 0.1160111420430906, "SR_bleu": 0.032872126482432984, "VR_bleu_abs": 0.03370847416314515, "EE_bleu_abs": 0.04732357341677362, "AG_bleu_abs": 0.10090882229573128, "SR_bleu_abs": 0.19157025777563919, "VR_bleurt": -0.07408684492111206, "EE_bleurt": -0.04726022481918335, "AG_bleurt": 0.060522496700286865, "SR_bleurt": 0.012344121932983398, "VR_bleurt_abs": 0.04181259870529175, "EE_bleurt_abs": 0.043692588806152344, "AG_bleurt_abs": 0.21078157424926758, "SR_bleurt_abs": 0.15766966342926025, "VR_gleu": -0.045792963815491916, "EE_gleu": -0.0473561301554124, "AG_gleu": 0.11602095718682459, "SR_gleu": 0.02818208074778794, "VR_gleu_abs": 0.032880552905584226, "EE_gleu_abs": 0.04649022233502831, "AG_gleu_abs": 0.09899789925597524, "SR_gleu_abs": 0.176759410801964, "ratio_VR_rouge": 0.9329608938547486, "ratio_VR_bleu": 0.9405870499368393, "ratio_VR_bleurt": 0.8023823594100957, "ratio_VR_gleu": 0.9444397886143592, "ratio_EE_rouge": 0.958974358974359, "ratio_EE_bleu": 0.9505581368255636, "ratio_EE_bleurt": 0.942234320744202, "ratio_EE_gleu": 0.9514771818977658, "ratio_AG_rouge": 0.8436963696369637, "ratio_AG_bleu": 0.8808245882484842, "ratio_AG_bleurt": 0.7311200442211758, "ratio_AG_gleu": 0.8834463347689357, "ratio_SR_rouge": 0.8771929824561403, "ratio_SR_bleu": 0.8084297422243608, "ratio_SR_bleurt": 0.8132673029971592, "ratio_SR_gleu": 0.823240589198036}, {"prompt": "Given \\operatorname{v_{t}}{(q)} = \\int \\cos{(q)} dq and \\operatorname{y^{\\prime}}{(q,E)} = - E - \\sin{(q)} + \\frac{E + \\sin{(q)}}{E}, then derive \\operatorname{v_{t}}{(q)} = E + \\sin{(q)}, then obtain \\operatorname{y^{\\prime}}{(q,E)} = - E - \\sin{(q)} + \\frac{\\int \\cos{(q)} dq}{E}", "derivation": "\\operatorname{v_{t}}{(q)} = \\int \\cos{(q)} dq and \\operatorname{v_{t}}{(q)} = E + \\sin{(q)} and \\frac{\\operatorname{v_{t}}{(q)}}{E} = \\frac{\\int \\cos{(q)} dq}{E} and \\frac{E + \\sin{(q)}}{E} = \\frac{\\int \\cos{(q)} dq}{E} and \\operatorname{y^{\\prime}}{(q,E)} = - E - \\sin{(q)} + \\frac{E + \\sin{(q)}}{E} and \\operatorname{y^{\\prime}}{(q,E)} = - E - \\sin{(q)} + \\frac{\\int \\cos{(q)} dq}{E}", "srepr_derivation": [["premise", "Equality(Function('v_t')(Symbol('q', commutative=True)), Integral(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('v_t')(Symbol('q', commutative=True)), Add(Symbol('E', commutative=True), sin(Symbol('q', commutative=True))))"], [["divide", 1, "Symbol('E', commutative=True)"], "Equality(Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Function('v_t')(Symbol('q', commutative=True))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Integral(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Add(Symbol('E', commutative=True), sin(Symbol('q', commutative=True)))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Integral(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))))"], ["renaming_premise", "Equality(Function('y^{\\\\prime}')(Symbol('q', commutative=True), Symbol('E', commutative=True)), Add(Mul(Integer(-1), Symbol('E', commutative=True)), Mul(Integer(-1), sin(Symbol('q', commutative=True))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Add(Symbol('E', commutative=True), sin(Symbol('q', commutative=True))))))"], [["substitute_LHS_for_RHS", 5, 4], "Equality(Function('y^{\\\\prime}')(Symbol('q', commutative=True), Symbol('E', commutative=True)), Add(Mul(Integer(-1), Symbol('E', commutative=True)), Mul(Integer(-1), sin(Symbol('q', commutative=True))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Integral(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))))"]], "EE prompt": "Given \\int \\cos{(q)} dq = \\operatorname{v_{t}}{(q)} and - E - \\sin{(q)} + \\frac{E + \\sin{(q)}}{E} = \\operatorname{y^{\\prime}}{(q,E)}, then derive E + \\sin{(q)} = \\operatorname{v_{t}}{(q)}, then obtain - E - \\sin{(q)} + \\frac{\\int \\cos{(q)} dq}{E} = \\operatorname{y^{\\prime}}{(q,E)}", "EE derivation": "\\int \\cos{(q)} dq = \\operatorname{v_{t}}{(q)} and E + \\sin{(q)} = \\operatorname{v_{t}}{(q)} and \\frac{\\int \\cos{(q)} dq}{E} = \\frac{\\operatorname{v_{t}}{(q)}}{E} and \\frac{\\int \\cos{(q)} dq}{E} = \\frac{E + \\sin{(q)}}{E} and - E - \\sin{(q)} + \\frac{E + \\sin{(q)}}{E} = \\operatorname{y^{\\prime}}{(q,E)} and - E - \\sin{(q)} + \\frac{\\int \\cos{(q)} dq}{E} = \\operatorname{y^{\\prime}}{(q,E)}", "EE srepr_derivation": [["premise", "Equality(Integral(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))), Function('v_t')(Symbol('q', commutative=True)))"], [["evaluate_integrals", 1], "Equality(Add(Symbol('E', commutative=True), sin(Symbol('q', commutative=True))), Function('v_t')(Symbol('q', commutative=True)))"], [["divide", 1, "Symbol('E', commutative=True)"], "Equality(Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Integral(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Function('v_t')(Symbol('q', commutative=True))))"], [["substitute_RHS_for_LHS", 3, 2], "Equality(Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Integral(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Add(Symbol('E', commutative=True), sin(Symbol('q', commutative=True)))))"], ["renaming_premise", "Equality(Add(Mul(Integer(-1), Symbol('E', commutative=True)), Mul(Integer(-1), sin(Symbol('q', commutative=True))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Add(Symbol('E', commutative=True), sin(Symbol('q', commutative=True))))), Function('y^{\\\\prime}')(Symbol('q', commutative=True), Symbol('E', commutative=True)))"], [["substitute_RHS_for_LHS", 5, 4], "Equality(Add(Mul(Integer(-1), Symbol('E', commutative=True)), Mul(Integer(-1), sin(Symbol('q', commutative=True))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Integral(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))), Function('y^{\\\\prime}')(Symbol('q', commutative=True), Symbol('E', commutative=True)))"]], "AG prompt": "Given \\operatorname{v_{t}}{(q)} = \\int \\cos{(q)} dq and \\operatorname{y^{\\prime}}{(q,E)} = - E - \\sin{(q)} + \\frac{E + \\sin{(q)}}{E}, then derive \\operatorname{v_{t}}{(q)} = E + \\sin{(q)}, then obtain \\int \\operatorname{y^{\\prime}}{(q,E)} dE = \\int (- E - \\sin{(q)} + \\frac{E + \\sin{(q)}}{E}) dE", "AG derivation": "\\operatorname{v_{t}}{(q)} = \\int \\cos{(q)} dq and \\operatorname{v_{t}}{(q)} = E + \\sin{(q)} and \\frac{\\operatorname{v_{t}}{(q)}}{E} = \\frac{\\int \\cos{(q)} dq}{E} and \\frac{E + \\sin{(q)}}{E} = \\frac{\\int \\cos{(q)} dq}{E} and \\operatorname{y^{\\prime}}{(q,E)} = - E - \\sin{(q)} + \\frac{E + \\sin{(q)}}{E} and \\int \\operatorname{y^{\\prime}}{(q,E)} dE = \\int (- E - \\sin{(q)} + \\frac{E + \\sin{(q)}}{E}) dE", "AG srepr_derivation": [["premise", "Equality(Function('v_t')(Symbol('q', commutative=True)), Integral(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('v_t')(Symbol('q', commutative=True)), Add(Symbol('E', commutative=True), sin(Symbol('q', commutative=True))))"], [["divide", 1, "Symbol('E', commutative=True)"], "Equality(Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Function('v_t')(Symbol('q', commutative=True))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Integral(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Add(Symbol('E', commutative=True), sin(Symbol('q', commutative=True)))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Integral(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))))"], ["renaming_premise", "Equality(Function('y^{\\\\prime}')(Symbol('q', commutative=True), Symbol('E', commutative=True)), Add(Mul(Integer(-1), Symbol('E', commutative=True)), Mul(Integer(-1), sin(Symbol('q', commutative=True))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Add(Symbol('E', commutative=True), sin(Symbol('q', commutative=True))))))"], [["integrate", 5, "Symbol('E', commutative=True)"], "Equality(Integral(Function('y^{\\\\prime}')(Symbol('q', commutative=True), Symbol('E', commutative=True)), Tuple(Symbol('E', commutative=True))), Integral(Add(Mul(Integer(-1), Symbol('E', commutative=True)), Mul(Integer(-1), sin(Symbol('q', commutative=True))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Add(Symbol('E', commutative=True), sin(Symbol('q', commutative=True))))), Tuple(Symbol('E', commutative=True))))"]], "SR prompt": "Given \\operatorname{v_{t}}{(q)} = \\int \\cos{(q)} dq and \\operatorname{y^{\\prime}}{(q,E)} = - E - \\sin{(q)} + \\frac{E + \\sin{(q)}}{E}, then obtain \\operatorname{y^{\\prime}}{(q,E)} = - E - \\sin{(q)} + \\frac{\\int \\cos{(q)} dq}{E}", "SR derivation": "\\operatorname{v_{t}}{(q)} = \\int \\cos{(q)} dq and \\operatorname{v_{t}}{(q)} = E + \\sin{(q)} and \\frac{\\operatorname{v_{t}}{(q)}}{E} = \\frac{\\int \\cos{(q)} dq}{E} and \\frac{E + \\sin{(q)}}{E} = \\frac{\\int \\cos{(q)} dq}{E} and \\operatorname{y^{\\prime}}{(q,E)} = - E - \\sin{(q)} + \\frac{E + \\sin{(q)}}{E} and \\operatorname{y^{\\prime}}{(q,E)} = - E - \\sin{(q)} + \\frac{\\int \\cos{(q)} dq}{E}", "SR srepr_derivation": [["premise", "Equality(Function('v_t')(Symbol('q', commutative=True)), Integral(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('v_t')(Symbol('q', commutative=True)), Add(Symbol('E', commutative=True), sin(Symbol('q', commutative=True))))"], [["divide", 1, "Symbol('E', commutative=True)"], "Equality(Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Function('v_t')(Symbol('q', commutative=True))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Integral(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Add(Symbol('E', commutative=True), sin(Symbol('q', commutative=True)))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Integral(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))))"], ["renaming_premise", "Equality(Function('y^{\\\\prime}')(Symbol('q', commutative=True), Symbol('E', commutative=True)), Add(Mul(Integer(-1), Symbol('E', commutative=True)), Mul(Integer(-1), sin(Symbol('q', commutative=True))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Add(Symbol('E', commutative=True), sin(Symbol('q', commutative=True))))))"], [["substitute_LHS_for_RHS", 5, 4], "Equality(Function('y^{\\\\prime}')(Symbol('q', commutative=True), Symbol('E', commutative=True)), Add(Mul(Integer(-1), Symbol('E', commutative=True)), Mul(Integer(-1), sin(Symbol('q', commutative=True))), Mul(Pow(Symbol('E', commutative=True), Integer(-1)), Integral(cos(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))))"]], "VR prompt": "Given \\kappa{(\\nu)} = \\int \\cos{(\\nu)} d\\nu and \\upsilon{(\\nu,\\tau)} = - \\tau - \\sin{(\\nu)} + \\frac{\\tau + \\sin{(\\nu)}}{\\tau}, then derive \\kappa{(\\nu)} = \\tau + \\sin{(\\nu)}, then obtain \\upsilon{(\\nu,\\tau)} = - \\tau - \\sin{(\\nu)} + \\frac{\\int \\cos{(\\nu)} d\\nu}{\\tau}", "VR derivation": "\\kappa{(\\nu)} = \\int \\cos{(\\nu)} d\\nu and \\kappa{(\\nu)} = \\tau + \\sin{(\\nu)} and \\frac{\\kappa{(\\nu)}}{\\tau} = \\frac{\\int \\cos{(\\nu)} d\\nu}{\\tau} and \\frac{\\tau + \\sin{(\\nu)}}{\\tau} = \\frac{\\int \\cos{(\\nu)} d\\nu}{\\tau} and \\upsilon{(\\nu,\\tau)} = - \\tau - \\sin{(\\nu)} + \\frac{\\tau + \\sin{(\\nu)}}{\\tau} and \\upsilon{(\\nu,\\tau)} = - \\tau - \\sin{(\\nu)} + \\frac{\\int \\cos{(\\nu)} d\\nu}{\\tau}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\kappa')(Symbol('\\\\nu', commutative=True)), Integral(cos(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True))))"], [["evaluate_integrals", 1], "Equality(Function('\\\\kappa')(Symbol('\\\\nu', commutative=True)), Add(Symbol('\\\\tau', commutative=True), sin(Symbol('\\\\nu', commutative=True))))"], [["divide", 1, "Symbol('\\\\tau', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\tau', commutative=True), Integer(-1)), Function('\\\\kappa')(Symbol('\\\\nu', commutative=True))), Mul(Pow(Symbol('\\\\tau', commutative=True), Integer(-1)), Integral(cos(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True)))))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Mul(Pow(Symbol('\\\\tau', commutative=True), Integer(-1)), Add(Symbol('\\\\tau', commutative=True), sin(Symbol('\\\\nu', commutative=True)))), Mul(Pow(Symbol('\\\\tau', commutative=True), Integer(-1)), Integral(cos(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True)))))"], ["renaming_premise", "Equality(Function('\\\\upsilon')(Symbol('\\\\nu', commutative=True), Symbol('\\\\tau', commutative=True)), Add(Mul(Integer(-1), Symbol('\\\\tau', commutative=True)), Mul(Integer(-1), sin(Symbol('\\\\nu', commutative=True))), Mul(Pow(Symbol('\\\\tau', commutative=True), Integer(-1)), Add(Symbol('\\\\tau', commutative=True), sin(Symbol('\\\\nu', commutative=True))))))"], [["substitute_LHS_for_RHS", 5, 4], "Equality(Function('\\\\upsilon')(Symbol('\\\\nu', commutative=True), Symbol('\\\\tau', commutative=True)), Add(Mul(Integer(-1), Symbol('\\\\tau', commutative=True)), Mul(Integer(-1), sin(Symbol('\\\\nu', commutative=True))), Mul(Pow(Symbol('\\\\tau', commutative=True), Integer(-1)), Integral(cos(Symbol('\\\\nu', commutative=True)), Tuple(Symbol('\\\\nu', commutative=True))))))"]], "static_flan-t5-large": "operatorname { v_ { t } } { (q) } = \\ int \\ cos { (q) } dq and \\ operatorname { v_ { t } } { (q) } = E + \\ sin { (q) } and \\ int \\ cos { (q) } dq = E + \\ sin { (q) } and \\ frac { \\ int \\ cos { (q) } dq } { E } = \\ frac { E + \\ sin { (q) } } { E } and - E - \\ sin { (q) } + \\ frac { \\ int \\ cos { (q) } dq } { E } = - E - \\ sin { (q) } + \\ frac { E + \\ sin { (q) } } { E } and \\ operatorname { y ^ { \\ prime } } { (q,E) } = - E - \\ sin { (q) } + \\ frac { E + \\ sin { (q) } } { E } and \\ operatorname { y ^ { \\ prime } } { (q,E) } = - E - \\ sin { (q) } + \\ frac { \\ int \\ cos { (q) } dq } { E }", "VR_flan-t5-large": "kappa { ( \\ nu) } = \\ int \\ cos { ( \\ nu) } d \\ nu and \\ kappa { ( \\ nu) } = \\ tau + \\ sin { ( \\ nu) } and \\ int \\ cos { ( \\ nu) } d \\ nu = \\ tau + \\ sin { ( \\ nu) } and \\ frac { \\ int \\ cos { ( \\ nu) } d \\ nu } { \\ tau } = \\ frac { \\ tau + \\ sin { ( \\ nu) } } { \\ tau } and - \\ tau - \\ sin { ( \\ nu) } + \\ frac { \\ int \\ cos { ( \\ nu) } d \\ nu } { \\ tau } = - \\ tau - \\ sin { ( \\ nu) } + \\ frac { \\ tau + \\ sin { ( \\ nu) } } { \\ tau } and \\ kappa { ( \\ nu) } = \\ int \\ cos { ( \\ nu) } d \\ mu and \\ frac { \\ int \\ cos { ( \\ nu) } d \\ mu } { \\ tau } = - \\ tau - \\ sin { ( \\ nu) } + \\ frac { \\ int \\ cos { ( \\ nu) } d \\ nu } { \\ tau } and \\ upsilon { ( \\ nu, \\ tau) } = - \\ tau - \\ sin { ( \\ nu) } + \\ frac { \\ tau + \\ sin { ( \\ nu) } } { \\ tau } and \\ upsilon { ( \\ nu, \\ tau) } = - \\ tau - \\ sin { ( \\ nu) } + \\ frac { \\ int \\ cos { ( \\ nu) } d \\ nu } { \\ tau }", "EE_flan-t5-large": "int \\ cos { (q) } dq = \\ operatorname { v_ { t } } { (q) } and E + \\ sin { (q) } = \\ operatorname { v_ { t } } { (q) } and \\ int \\ cos { (q) } dq = E + \\ sin { (q) } and \\ frac { E + \\ sin { (q) } } { E } = \\ frac { \\ operatorname { v_ { t } } { (q) } } { E } and \\ frac { \\ int \\ cos { (q) } dq } { E } = \\ frac { \\ operatorname { v_ { t } } { (q) } } { E } and - E - \\ sin { (q) } + \\ frac { E + \\ sin { (q) } } { E } = \\ operatorname { y ^ { \\ prime } } { (q,E) } and - E - \\ sin { (q) } + \\ frac { \\ int \\ cos { (q) } dq } { E } = \\ operatorname { y ^ { \\ prime } } { (q,E) }", "AG_flan-t5-large": "operatorname { v_ { t } } { (q) } = \\ int \\ cos { (q) } dq and \\ operatorname { v_ { t } } { (q) } = E + \\ sin { (q) } and \\ operatorname { y ^ { \\ prime } } { (q,E) } = - E - \\ sin { (q) } + \\ frac { E + \\ sin { (q) } } { E } and \\ operatorname { y ^ { \\ prime } } { (q,E) } = - E - \\ sin { (q) } + \\ frac { E + \\ sin { (q) } } { E } and \\ int \\ operatorname { y ^ { \\ prime } } { (q,E) } dE = \\ int (- E - \\ sin { (q) } + \\ frac { E + \\ sin { (q) } } { E } ) dE", "SR_flan-t5-large": "operatorname { v_ { t } } { (q) } = \\ int \\ cos { (q) } dq and \\ frac { \\ operatorname { v_ { t } } { (q) } } { E } = \\ frac { \\ int \\ cos { (q) } dq } { E } and - E - \\ sin { (q) } + \\ frac { \\ operatorname { v_ { t } } { (q) } } { E } = - E - \\ sin { (q) } + \\ frac { \\ int \\ cos { (q) } dq } { E } and \\ operatorname { y ^ { \\ prime } } { (q,E) } = - E - \\ sin { (q) } + \\ frac { E + \\ sin { (q) } } { E } and \\ operatorname { y ^ { \\ prime } } { (q,E) } = - E - \\ sin { (q) } + \\ frac { \\ int \\ cos { (q) } dq } { E }", "static_rouge": 0.8344370860927153, "static_bleu": 0.8043243210570141, "static_bleurt": 0.7600057125091553, "static_gleu": 0.8047337278106509, "VR_rouge": 0.10824660990223911, "EE_rouge": -0.09706976322235317, "AG_rouge": 0.03744460488970769, "SR_rouge": -0.08527094310436512, "VR_rouge_abs": 0.02941176470588236, "EE_rouge_abs": 0.12934098988241738, "AG_rouge_abs": 0.15215989684074793, "SR_rouge_abs": 0.16000000000000003, "VR_bleu": 0.1968138714152019, "EE_bleu": -0.08330959352817358, "AG_bleu": 0.029754872274359356, "SR_bleu": -0.12933245670249527, "VR_bleu_abs": 0.08031658393912317, "EE_bleu_abs": 0.13077036574351641, "AG_bleu_abs": 0.261606784757886, "SR_bleu_abs": 0.19476462633494762, "VR_bleurt": 0.0394439697265625, "EE_bleurt": -0.05934786796569824, "AG_bleurt": 0.1365429162979126, "SR_bleurt": -0.002018570899963379, "VR_bleurt_abs": -0.04027509689331055, "EE_bleurt_abs": 0.04462975263595581, "AG_bleurt_abs": 0.3391229808330536, "SR_bleurt_abs": 0.06674909591674805, "VR_gleu": 0.1971297105940082, "EE_gleu": -0.08300015992323684, "AG_gleu": 0.02173596494711616, "SR_gleu": -0.12974903081003875, "VR_gleu_abs": 0.0831806388978168, "EE_gleu_abs": 0.1284852708729063, "AG_gleu_abs": 0.23583919092437422, "SR_gleu_abs": 0.18540433925049304, "ratio_VR_rouge": 0.7843137254901961, "ratio_VR_bleu": 0.807595875529132, "ratio_VR_bleurt": 0.8235451225446017, "ratio_VR_gleu": 0.813864513474136, "ratio_EE_rouge": 0.8536962573461181, "ratio_EE_bleu": 0.8608587004405442, "ratio_EE_bleurt": 0.9377194182699565, "ratio_EE_gleu": 0.8634745465325928, "ratio_AG_rouge": 0.8269794721407624, "ratio_AG_bleu": 0.7173955502222369, "ratio_AG_bleurt": 0.5201065483429727, "ratio_AG_gleu": 0.7453620329874511, "ratio_SR_rouge": 0.84, "ratio_SR_bleu": 0.8052353736650524, "ratio_SR_bleurt": 0.9155371531568278, "ratio_SR_gleu": 0.814595660749507}, {"prompt": "Given \\mathbf{J}{(q)} = \\log{(q)}, then derive \\frac{d}{d q} \\mathbf{J}{(q)} = \\frac{1}{q}, then obtain \\frac{\\iint \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq dq}{\\log{(q)}} = \\frac{\\iint \\frac{\\mathbf{v}}{q} dq dq}{\\log{(q)}}", "derivation": "\\mathbf{J}{(q)} = \\log{(q)} and \\frac{d}{d q} \\mathbf{J}{(q)} = \\frac{d}{d q} \\log{(q)} and \\frac{d}{d q} \\mathbf{J}{(q)} = \\frac{1}{q} and \\mathbf{v} \\frac{d}{d q} \\mathbf{J}{(q)} = \\frac{\\mathbf{v}}{q} and \\mathbf{v} \\frac{d}{d q} \\log{(q)} = \\frac{\\mathbf{v}}{q} and \\int \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq = \\int \\frac{\\mathbf{v}}{q} dq and \\iint \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq dq = \\iint \\frac{\\mathbf{v}}{q} dq dq and \\frac{\\iint \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq dq}{\\log{(q)}} = \\frac{\\iint \\frac{\\mathbf{v}}{q} dq dq}{\\log{(q)}}", "srepr_derivation": [["get_premise", "Equality(Function('\\\\mathbf{J}')(Symbol('q', commutative=True)), log(Symbol('q', commutative=True)))"], [["differentiate", 1, "Symbol('q', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{J}')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\mathbf{J}')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Pow(Symbol('q', commutative=True), Integer(-1)))"], [["times", 3, "Symbol('\\\\mathbf{v}', commutative=True)"], "Equality(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(Function('\\\\mathbf{J}')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))))"], [["integrate", 5, "Symbol('q', commutative=True)"], "Equality(Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Tuple(Symbol('q', commutative=True))), Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))), Tuple(Symbol('q', commutative=True))))"], [["integrate", 6, "Symbol('q', commutative=True)"], "Equality(Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))), Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))"], [["divide", 7, "log(Symbol('q', commutative=True))"], "Equality(Mul(Pow(log(Symbol('q', commutative=True)), Integer(-1)), Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))), Mul(Pow(log(Symbol('q', commutative=True)), Integer(-1)), Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))))"]], "EE prompt": "Given \\log{(q)} = \\mathbf{J}{(q)}, then derive \\frac{1}{q} = \\frac{d}{d q} \\mathbf{J}{(q)}, then obtain \\frac{\\iint \\frac{\\mathbf{v}}{q} dq dq}{\\log{(q)}} = \\frac{\\iint \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq dq}{\\log{(q)}}", "EE derivation": "\\log{(q)} = \\mathbf{J}{(q)} and \\frac{d}{d q} \\log{(q)} = \\frac{d}{d q} \\mathbf{J}{(q)} and \\frac{1}{q} = \\frac{d}{d q} \\mathbf{J}{(q)} and \\frac{\\mathbf{v}}{q} = \\mathbf{v} \\frac{d}{d q} \\mathbf{J}{(q)} and \\frac{\\mathbf{v}}{q} = \\mathbf{v} \\frac{d}{d q} \\log{(q)} and \\int \\frac{\\mathbf{v}}{q} dq = \\int \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq and \\iint \\frac{\\mathbf{v}}{q} dq dq = \\iint \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq dq and \\frac{\\iint \\frac{\\mathbf{v}}{q} dq dq}{\\log{(q)}} = \\frac{\\iint \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq dq}{\\log{(q)}}", "EE srepr_derivation": [["get_premise", "Equality(log(Symbol('q', commutative=True)), Function('\\\\mathbf{J}')(Symbol('q', commutative=True)))"], [["differentiate", 1, "Symbol('q', commutative=True)"], "Equality(Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Derivative(Function('\\\\mathbf{J}')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Pow(Symbol('q', commutative=True), Integer(-1)), Derivative(Function('\\\\mathbf{J}')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["times", 3, "Symbol('\\\\mathbf{v}', commutative=True)"], "Equality(Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))), Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(Function('\\\\mathbf{J}')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 4, 2], "Equality(Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))), Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))))"], [["integrate", 5, "Symbol('q', commutative=True)"], "Equality(Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))), Tuple(Symbol('q', commutative=True))), Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Tuple(Symbol('q', commutative=True))))"], [["integrate", 6, "Symbol('q', commutative=True)"], "Equality(Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))), Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))"], [["divide", 7, "log(Symbol('q', commutative=True))"], "Equality(Mul(Pow(log(Symbol('q', commutative=True)), Integer(-1)), Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))), Mul(Pow(log(Symbol('q', commutative=True)), Integer(-1)), Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))))"]], "AG prompt": "Given \\mathbf{J}{(q)} = \\log{(q)}, then derive \\frac{d}{d q} \\mathbf{J}{(q)} = \\frac{1}{q}, then obtain (\\iint \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq dq)^{q} = (\\iint \\frac{\\mathbf{v}}{q} dq dq)^{q}", "AG derivation": "\\mathbf{J}{(q)} = \\log{(q)} and \\frac{d}{d q} \\mathbf{J}{(q)} = \\frac{d}{d q} \\log{(q)} and \\frac{d}{d q} \\mathbf{J}{(q)} = \\frac{1}{q} and \\mathbf{v} \\frac{d}{d q} \\mathbf{J}{(q)} = \\frac{\\mathbf{v}}{q} and \\mathbf{v} \\frac{d}{d q} \\log{(q)} = \\frac{\\mathbf{v}}{q} and \\int \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq = \\int \\frac{\\mathbf{v}}{q} dq and \\iint \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq dq = \\iint \\frac{\\mathbf{v}}{q} dq dq and (\\iint \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq dq)^{q} = (\\iint \\frac{\\mathbf{v}}{q} dq dq)^{q}", "AG srepr_derivation": [["get_premise", "Equality(Function('\\\\mathbf{J}')(Symbol('q', commutative=True)), log(Symbol('q', commutative=True)))"], [["differentiate", 1, "Symbol('q', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{J}')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\mathbf{J}')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Pow(Symbol('q', commutative=True), Integer(-1)))"], [["times", 3, "Symbol('\\\\mathbf{v}', commutative=True)"], "Equality(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(Function('\\\\mathbf{J}')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))))"], [["integrate", 5, "Symbol('q', commutative=True)"], "Equality(Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Tuple(Symbol('q', commutative=True))), Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))), Tuple(Symbol('q', commutative=True))))"], [["integrate", 6, "Symbol('q', commutative=True)"], "Equality(Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))), Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))"], [["power", 7, "Symbol('q', commutative=True)"], "Equality(Pow(Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))), Symbol('q', commutative=True)), Pow(Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))), Symbol('q', commutative=True)))"]], "SR prompt": "Given \\mathbf{J}{(q)} = \\log{(q)}, then obtain \\frac{\\iint \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq dq}{\\log{(q)}} = \\frac{\\iint \\frac{\\mathbf{v}}{q} dq dq}{\\log{(q)}}", "SR derivation": "\\mathbf{J}{(q)} = \\log{(q)} and \\frac{d}{d q} \\mathbf{J}{(q)} = \\frac{d}{d q} \\log{(q)} and \\frac{d}{d q} \\mathbf{J}{(q)} = \\frac{1}{q} and \\mathbf{v} \\frac{d}{d q} \\mathbf{J}{(q)} = \\frac{\\mathbf{v}}{q} and \\mathbf{v} \\frac{d}{d q} \\log{(q)} = \\frac{\\mathbf{v}}{q} and \\int \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq = \\int \\frac{\\mathbf{v}}{q} dq and \\iint \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq dq = \\iint \\frac{\\mathbf{v}}{q} dq dq and \\frac{\\iint \\mathbf{v} \\frac{d}{d q} \\log{(q)} dq dq}{\\log{(q)}} = \\frac{\\iint \\frac{\\mathbf{v}}{q} dq dq}{\\log{(q)}}", "SR srepr_derivation": [["get_premise", "Equality(Function('\\\\mathbf{J}')(Symbol('q', commutative=True)), log(Symbol('q', commutative=True)))"], [["differentiate", 1, "Symbol('q', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{J}')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\mathbf{J}')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1))), Pow(Symbol('q', commutative=True), Integer(-1)))"], [["times", 3, "Symbol('\\\\mathbf{v}', commutative=True)"], "Equality(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(Function('\\\\mathbf{J}')(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))))"], [["integrate", 5, "Symbol('q', commutative=True)"], "Equality(Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Tuple(Symbol('q', commutative=True))), Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))), Tuple(Symbol('q', commutative=True))))"], [["integrate", 6, "Symbol('q', commutative=True)"], "Equality(Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))), Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True))))"], [["divide", 7, "log(Symbol('q', commutative=True))"], "Equality(Mul(Pow(log(Symbol('q', commutative=True)), Integer(-1)), Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Derivative(log(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True), Integer(1)))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))), Mul(Pow(log(Symbol('q', commutative=True)), Integer(-1)), Integral(Mul(Symbol('\\\\mathbf{v}', commutative=True), Pow(Symbol('q', commutative=True), Integer(-1))), Tuple(Symbol('q', commutative=True)), Tuple(Symbol('q', commutative=True)))))"]], "VR prompt": "Given \\zeta{(\\beta)} = \\log{(\\beta)}, then derive \\frac{d}{d \\beta} \\zeta{(\\beta)} = \\frac{1}{\\beta}, then obtain \\frac{\\iint \\tau \\frac{d}{d \\beta} \\log{(\\beta)} d\\beta d\\beta}{\\log{(\\beta)}} = \\frac{\\iint \\frac{\\tau}{\\beta} d\\beta d\\beta}{\\log{(\\beta)}}", "VR derivation": "\\zeta{(\\beta)} = \\log{(\\beta)} and \\frac{d}{d \\beta} \\zeta{(\\beta)} = \\frac{d}{d \\beta} \\log{(\\beta)} and \\frac{d}{d \\beta} \\zeta{(\\beta)} = \\frac{1}{\\beta} and \\tau \\frac{d}{d \\beta} \\zeta{(\\beta)} = \\frac{\\tau}{\\beta} and \\tau \\frac{d}{d \\beta} \\log{(\\beta)} = \\frac{\\tau}{\\beta} and \\int \\tau \\frac{d}{d \\beta} \\log{(\\beta)} d\\beta = \\int \\frac{\\tau}{\\beta} d\\beta and \\iint \\tau \\frac{d}{d \\beta} \\log{(\\beta)} d\\beta d\\beta = \\iint \\frac{\\tau}{\\beta} d\\beta d\\beta and \\frac{\\iint \\tau \\frac{d}{d \\beta} \\log{(\\beta)} d\\beta d\\beta}{\\log{(\\beta)}} = \\frac{\\iint \\frac{\\tau}{\\beta} d\\beta d\\beta}{\\log{(\\beta)}}", "VR srepr_derivation": [["get_premise", "Equality(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), log(Symbol('\\\\beta', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\beta', commutative=True)"], "Equality(Derivative(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Derivative(log(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Pow(Symbol('\\\\beta', commutative=True), Integer(-1)))"], [["times", 3, "Symbol('\\\\tau', commutative=True)"], "Equality(Mul(Symbol('\\\\tau', commutative=True), Derivative(Function('\\\\zeta')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))), Mul(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Symbol('\\\\tau', commutative=True)))"], [["substitute_LHS_for_RHS", 4, 2], "Equality(Mul(Symbol('\\\\tau', commutative=True), Derivative(log(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))), Mul(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Symbol('\\\\tau', commutative=True)))"], [["integrate", 5, "Symbol('\\\\beta', commutative=True)"], "Equality(Integral(Mul(Symbol('\\\\tau', commutative=True), Derivative(log(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))), Tuple(Symbol('\\\\beta', commutative=True))), Integral(Mul(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))))"], [["integrate", 6, "Symbol('\\\\beta', commutative=True)"], "Equality(Integral(Mul(Symbol('\\\\tau', commutative=True), Derivative(log(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))), Tuple(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))), Integral(Mul(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True))))"], [["divide", 7, "log(Symbol('\\\\beta', commutative=True))"], "Equality(Mul(Pow(log(Symbol('\\\\beta', commutative=True)), Integer(-1)), Integral(Mul(Symbol('\\\\tau', commutative=True), Derivative(log(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))), Tuple(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True)))), Mul(Pow(log(Symbol('\\\\beta', commutative=True)), Integer(-1)), Integral(Mul(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True)))))"]], "static_flan-t5-large": "mathbf { J } { (q) } = \\ log { (q) } and \\ frac { d } { d q } \\ mathbf { J } { (q) } = \\ frac { d } { d q } \\ log { (q) } and \\ frac { d } { d q } \\ mathbf { J } { (q) } = \\ frac { 1 } { q } and \\ mathbf { v } \\ frac { d } { d q } \\ mathbf { J } { (q) } = \\ frac { \\ mathbf { v } } { q } and \\ int \\ mathbf { v } \\ frac { d } { d q } \\ mathbf { J } { (q) } dq = \\ int \\ frac { \\ mathbf { v } } { q } dq and \\ int \\ mathbf { v } \\ frac { d } { d q } \\ log { (q) } dq = \\ int \\ frac { \\ mathbf { v } } { q } dq and \\ iint \\ mathbf { v } \\ frac { d } { d q } \\ log { (q) } dq dq = \\ iint \\ frac { \\ mathbf { v } } { q } dq dq and \\ frac { \\ iint \\ mathbf { v } \\ frac { d } { d q } \\ log { (q) } dq dq } { \\ log { (q) } } = \\ frac { \\ iint \\ frac { \\ mathbf { v } } { q } dq dq } { \\ log { (q) } }", "VR_flan-t5-large": "zeta { ( \\ beta) } = \\ log { ( \\ beta) } and \\ frac { d } { d \\ beta } \\ zeta { ( \\ beta) } = \\ frac { d } { d \\ beta } \\ log { ( \\ beta) } and \\ frac { d } { d \\ beta } \\ zeta { ( \\ beta) } = \\ frac { 1 } { \\ beta } and \\ frac { \\ frac { d } { d \\ beta } \\ zeta { ( \\ beta) } } { \\ log { ( \\ beta) } } = \\ frac { 1 } { \\ beta } and \\ int \\ frac { \\ frac { d } { d \\ beta } \\ zeta { ( \\ beta) } } { \\ log { ( \\ beta) } } d \\ beta = \\ int \\ frac { \\ frac { 1 } { \\ beta } d \\ beta and \\ int \\ tau \\ frac { d } { d \\ beta } \\ zeta { ( \\ beta) } d \\ beta = \\ int \\ frac { \\ frac { \\ frac { \\ frac { \\ frac { d } { d \\ beta } \\ zeta { ( \\ beta) } } { \\ log { ( \\ beta) } } d \\ beta and \\ int \\ tau \\ frac { d } { d \\ beta } \\ log { ( \\ beta) } d \\ beta = \\ int \\ frac { \\ tau } { \\ beta } d \\ beta and \\ iint \\ tau \\ frac { d } { d \\ beta } \\ log { ( \\ beta) } d \\ beta d \\ beta = \\ iint \\ frac { \\ tau } { \\ beta } d \\ beta d \\ beta and \\ frac { \\ iint \\ tau \\ frac { d } { d \\ beta } \\ log { ( \\ beta) } d \\ beta d \\ beta } { \\ log { ( \\ beta) } } = \\ frac { \\ iint \\ frac { \\ tau } { \\ beta } d \\ beta d \\ beta } { \\", "EE_flan-t5-large": "log { (q) } = \\ mathbf { J } { (q) } and \\ frac { 1 } { q } = \\ frac { d } { d q } \\ mathbf { J } { (q) } and \\ frac { 1 } { q } = \\ frac { d } { d q } \\ log { (q) } and \\ frac { \\ mathbf { v } } { q } = \\ mathbf { v } \\ frac { d } { d q } \\ log { (q) } and \\ int \\ frac { \\ mathbf { v } } { q } dq = \\ int \\ mathbf { v } \\ frac { d } { d q } \\ log { (q) } dq and \\ iint \\ frac { \\ mathbf { v } } { q } dq dq = \\ iint \\ mathbf { v } \\ frac { d } { d q } \\ log { (q) } dq dq and \\ frac { \\ iint \\ frac { \\ mathbf { v } } { q } dq dq } { \\ log { (q) } } = \\ frac { \\ iint \\ mathbf { v } \\ frac { d } { d q } \\ log { (q) } dq dq } { \\ log { (q) } }", "AG_flan-t5-large": "mathbf { J } { (q) } = \\ log { (q) } and \\ frac { d } { d q } \\ mathbf { J } { (q) } = \\ frac { d } { d q } \\ log { (q) } and \\ frac { d } { d q } \\ mathbf { J } { (q) } = \\ frac { 1 } { q } and \\ mathbf { v } \\ frac { d } { d q } \\ mathbf { J } { (q) } = \\ frac { \\ mathbf { v } } { q } and \\ int \\ mathbf { v } \\ frac { d } { d q } \\ mathbf { J } { (q) } dq = \\ int \\ frac { \\ mathbf { v } } { q } dq and \\ iint \\ mathbf { v } \\ frac { d } { d q } \\ mathbf { J } { (q) } dq dq = \\ iint \\ frac { \\ mathbf { v } } { q } dq dq and \\ iint \\ mathbf { v } \\ frac { d } { d q } \\ log { (q) } dq dq = \\ iint \\ frac { \\ mathbf { v } } { q } dq dq and ( \\ iint \\ mathbf { v } \\ frac { d } { d q } \\ log { (q) } dq dq) ^ { q } = ( \\ iint \\ frac { \\ mathbf { v } } { q } dq dq) ^ { q }", "SR_flan-t5-large": "mathbf { J } { (q) } = \\ log { (q) } and \\ mathbf { v } \\ frac { d } { d q } \\ mathbf { J } { (q) } = \\ frac { \\ mathbf { v } } { q } and \\ int \\ mathbf { v } \\ frac { d } { d q } \\ mathbf { J } { (q) } dq = \\ int \\ frac { \\ mathbf { v } } { q } dq and \\ iint \\ mathbf { v } \\ frac { d } { d q } \\ mathbf { J } { (q) } dq dq = \\ iint \\ frac { \\ mathbf { v } } { q } dq dq and \\ frac { \\ iint \\ mathbf { v } \\ frac { d } { d q } \\ mathbf { J } { (q) } dq dq } { \\ log { (q) } } = \\ frac { \\ iint \\ frac { \\ mathbf { v } } { q } dq dq } { \\ log { (q) } } and \\ frac { \\ iint \\ mathbf { v } \\ frac { d } { d q } \\ log { (q) } dq dq } { \\ log { (q) } } = \\ frac { \\ iint \\ frac { \\ mathbf { v } } { q } dq dq } { \\ log { (q) } }", "static_rouge": 0.9372384937238495, "static_bleu": 0.9540406422915, "static_bleurt": 0.7408651113510132, "static_gleu": 0.9541864139020537, "VR_rouge": 0.1326407925744243, "EE_rouge": 0.039090345575701235, "AG_rouge": 0.03125558774094339, "SR_rouge": 0.09795277943813518, "VR_rouge_abs": 0.019967793880837387, "EE_rouge_abs": 0.09753645047762693, "AG_rouge_abs": 0.05893719806763287, "SR_rouge_abs": 0.1353711790393013, "VR_bleu": 0.22655772667781515, "EE_bleu": 0.13699043912067443, "AG_bleu": 0.02581991260053762, "SR_bleu": 0.10970002395631251, "VR_bleu_abs": 0.09757748378434078, "EE_bleu_abs": 0.20487752868729792, "AG_bleu_abs": 0.02310645719172988, "SR_bleu_abs": 0.1598754786484864, "VR_bleurt": 0.16598904132843018, "EE_bleurt": 0.20102351903915405, "AG_bleurt": 0.12730765342712402, "SR_bleurt": 0.3172551691532135, "VR_bleurt_abs": 0.011388257145881653, "EE_bleurt_abs": 0.2237405776977539, "AG_bleurt_abs": 0.14783930778503418, "SR_bleurt_abs": 0.31915563344955444, "VR_gleu": 0.22636138352538304, "EE_gleu": 0.12436469591177823, "AG_gleu": 0.02573112934920818, "SR_gleu": 0.10653649493933082, "VR_gleu_abs": 0.09445054678007286, "EE_gleu_abs": 0.18885654225588322, "AG_gleu_abs": 0.02306425884816965, "SR_gleu_abs": 0.15481832543443919, "ratio_VR_rouge": 0.914951989026063, "ratio_VR_bleu": 0.7936848055269143, "ratio_VR_bleurt": 1.057161408149401, "ratio_VR_gleu": 0.8086496215962867, "ratio_EE_rouge": 0.898109243697479, "ratio_EE_bleu": 0.7890007660074342, "ratio_EE_bleurt": 0.6924070324120539, "ratio_EE_gleu": 0.8056305478367307, "ratio_AG_rouge": 0.9378185524974516, "ratio_AG_bleu": 0.9746466418588314, "ratio_AG_bleurt": 0.8168562172609699, "ratio_AG_gleu": 0.9747235387045814, "ratio_SR_rouge": 0.8646288209606987, "ratio_SR_bleu": 0.8401245213515136, "ratio_SR_bleurt": 0.6046290335895379, "ratio_SR_gleu": 0.8451816745655608}, {"prompt": "Given \\mathbf{M}{(C_{2},\\hat{p})} = \\int (- C_{2} + \\hat{p}) dC_{2}, then derive \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}}, then derive (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + \\mathbf{D})^{C_{2}}, then obtain \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + \\mathbf{D})^{C_{2}}", "derivation": "\\mathbf{M}{(C_{2},\\hat{p})} = \\int (- C_{2} + \\hat{p}) dC_{2} and \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})} = (\\int (- C_{2} + \\hat{p}) dC_{2})^{C_{2}} and \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}} and (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}} = (\\int (- C_{2} + \\hat{p}) dC_{2})^{C_{2}} and (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + \\mathbf{D})^{C_{2}} and \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + \\mathbf{D})^{C_{2}}", "srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{M}')(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Integral(Add(Mul(Integer(-1), Symbol('C_2', commutative=True)), Symbol('\\\\hat{p}', commutative=True)), Tuple(Symbol('C_2', commutative=True))))"], [["power", 1, "Symbol('C_2', commutative=True)"], "Equality(Pow(Function('\\\\mathbf{M}')(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Integral(Add(Mul(Integer(-1), Symbol('C_2', commutative=True)), Symbol('\\\\hat{p}', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Symbol('C_2', commutative=True)))"], [["evaluate_integrals", 2], "Equality(Pow(Function('\\\\mathbf{M}')(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('a^{\\\\dagger}', commutative=True)), Symbol('C_2', commutative=True)))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('a^{\\\\dagger}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Integral(Add(Mul(Integer(-1), Symbol('C_2', commutative=True)), Symbol('\\\\hat{p}', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Symbol('C_2', commutative=True)))"], [["evaluate_integrals", 4], "Equality(Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('a^{\\\\dagger}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('\\\\mathbf{D}', commutative=True)), Symbol('C_2', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 5], "Equality(Pow(Function('\\\\mathbf{M}')(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('\\\\mathbf{D}', commutative=True)), Symbol('C_2', commutative=True)))"]], "EE prompt": "Given \\int (- C_{2} + \\hat{p}) dC_{2} = \\mathbf{M}{(C_{2},\\hat{p})}, then derive (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}} = \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})}, then derive (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + \\mathbf{D})^{C_{2}} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}}, then obtain (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + \\mathbf{D})^{C_{2}} = \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})}", "EE derivation": "\\int (- C_{2} + \\hat{p}) dC_{2} = \\mathbf{M}{(C_{2},\\hat{p})} and (\\int (- C_{2} + \\hat{p}) dC_{2})^{C_{2}} = \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})} and (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}} = \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})} and (\\int (- C_{2} + \\hat{p}) dC_{2})^{C_{2}} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}} and (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + \\mathbf{D})^{C_{2}} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}} and (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + \\mathbf{D})^{C_{2}} = \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})}", "EE srepr_derivation": [["premise", "Equality(Integral(Add(Mul(Integer(-1), Symbol('C_2', commutative=True)), Symbol('\\\\hat{p}', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Function('\\\\mathbf{M}')(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)))"], [["power", 1, "Symbol('C_2', commutative=True)"], "Equality(Pow(Integral(Add(Mul(Integer(-1), Symbol('C_2', commutative=True)), Symbol('\\\\hat{p}', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Symbol('C_2', commutative=True)), Pow(Function('\\\\mathbf{M}')(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('C_2', commutative=True)))"], [["evaluate_integrals", 2], "Equality(Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('a^{\\\\dagger}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Function('\\\\mathbf{M}')(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('C_2', commutative=True)))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Pow(Integral(Add(Mul(Integer(-1), Symbol('C_2', commutative=True)), Symbol('\\\\hat{p}', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Symbol('C_2', commutative=True)), Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('a^{\\\\dagger}', commutative=True)), Symbol('C_2', commutative=True)))"], [["evaluate_integrals", 4], "Equality(Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('\\\\mathbf{D}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('a^{\\\\dagger}', commutative=True)), Symbol('C_2', commutative=True)))"], [["substitute_RHS_for_LHS", 3, 5], "Equality(Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('\\\\mathbf{D}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Function('\\\\mathbf{M}')(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('C_2', commutative=True)))"]], "AG prompt": "Given \\mathbf{M}{(C_{2},\\hat{p})} = \\int (- C_{2} + \\hat{p}) dC_{2}, then derive \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}}, then derive (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + \\mathbf{D})^{C_{2}}, then obtain (\\int (- C_{2} + \\hat{p}) dC_{2})^{C_{2}} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + \\mathbf{D})^{C_{2}}", "AG derivation": "\\mathbf{M}{(C_{2},\\hat{p})} = \\int (- C_{2} + \\hat{p}) dC_{2} and \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})} = (\\int (- C_{2} + \\hat{p}) dC_{2})^{C_{2}} and \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}} and (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}} = (\\int (- C_{2} + \\hat{p}) dC_{2})^{C_{2}} and (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + \\mathbf{D})^{C_{2}} and (\\int (- C_{2} + \\hat{p}) dC_{2})^{C_{2}} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + \\mathbf{D})^{C_{2}}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{M}')(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Integral(Add(Mul(Integer(-1), Symbol('C_2', commutative=True)), Symbol('\\\\hat{p}', commutative=True)), Tuple(Symbol('C_2', commutative=True))))"], [["power", 1, "Symbol('C_2', commutative=True)"], "Equality(Pow(Function('\\\\mathbf{M}')(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Integral(Add(Mul(Integer(-1), Symbol('C_2', commutative=True)), Symbol('\\\\hat{p}', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Symbol('C_2', commutative=True)))"], [["evaluate_integrals", 2], "Equality(Pow(Function('\\\\mathbf{M}')(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('a^{\\\\dagger}', commutative=True)), Symbol('C_2', commutative=True)))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('a^{\\\\dagger}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Integral(Add(Mul(Integer(-1), Symbol('C_2', commutative=True)), Symbol('\\\\hat{p}', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Symbol('C_2', commutative=True)))"], [["evaluate_integrals", 4], "Equality(Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('a^{\\\\dagger}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('\\\\mathbf{D}', commutative=True)), Symbol('C_2', commutative=True)))"], [["substitute_LHS_for_RHS", 5, 4], "Equality(Pow(Integral(Add(Mul(Integer(-1), Symbol('C_2', commutative=True)), Symbol('\\\\hat{p}', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Symbol('C_2', commutative=True)), Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('\\\\mathbf{D}', commutative=True)), Symbol('C_2', commutative=True)))"]], "SR prompt": "Given \\mathbf{M}{(C_{2},\\hat{p})} = \\int (- C_{2} + \\hat{p}) dC_{2}, then obtain \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + \\mathbf{D})^{C_{2}}", "SR derivation": "\\mathbf{M}{(C_{2},\\hat{p})} = \\int (- C_{2} + \\hat{p}) dC_{2} and \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})} = (\\int (- C_{2} + \\hat{p}) dC_{2})^{C_{2}} and \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}} and (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}} = (\\int (- C_{2} + \\hat{p}) dC_{2})^{C_{2}} and (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + a^{\\dagger})^{C_{2}} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + \\mathbf{D})^{C_{2}} and \\mathbf{M}^{C_{2}}{(C_{2},\\hat{p})} = (- \\frac{C_{2}^{2}}{2} + C_{2} \\hat{p} + \\mathbf{D})^{C_{2}}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{M}')(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Integral(Add(Mul(Integer(-1), Symbol('C_2', commutative=True)), Symbol('\\\\hat{p}', commutative=True)), Tuple(Symbol('C_2', commutative=True))))"], [["power", 1, "Symbol('C_2', commutative=True)"], "Equality(Pow(Function('\\\\mathbf{M}')(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Integral(Add(Mul(Integer(-1), Symbol('C_2', commutative=True)), Symbol('\\\\hat{p}', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Symbol('C_2', commutative=True)))"], [["evaluate_integrals", 2], "Equality(Pow(Function('\\\\mathbf{M}')(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('a^{\\\\dagger}', commutative=True)), Symbol('C_2', commutative=True)))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('a^{\\\\dagger}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Integral(Add(Mul(Integer(-1), Symbol('C_2', commutative=True)), Symbol('\\\\hat{p}', commutative=True)), Tuple(Symbol('C_2', commutative=True))), Symbol('C_2', commutative=True)))"], [["evaluate_integrals", 4], "Equality(Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('a^{\\\\dagger}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('\\\\mathbf{D}', commutative=True)), Symbol('C_2', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 5], "Equality(Pow(Function('\\\\mathbf{M}')(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('C_2', commutative=True)), Pow(Add(Mul(Integer(-1), Rational(1, 2), Pow(Symbol('C_2', commutative=True), Integer(2))), Mul(Symbol('C_2', commutative=True), Symbol('\\\\hat{p}', commutative=True)), Symbol('\\\\mathbf{D}', commutative=True)), Symbol('C_2', commutative=True)))"]], "VR prompt": "Given \\xi{(\\kappa,\\nu)} = \\int (\\kappa - \\nu) d\\nu, then derive \\xi^{\\nu}{(\\kappa,\\nu)} = (\\kappa \\nu - \\frac{\\nu^{2}}{2} + \\omicron)^{\\nu}, then derive (\\kappa \\nu - \\frac{\\nu^{2}}{2} + \\omicron)^{\\nu} = (\\gamma + \\kappa \\nu - \\frac{\\nu^{2}}{2})^{\\nu}, then obtain \\xi^{\\nu}{(\\kappa,\\nu)} = (\\gamma + \\kappa \\nu - \\frac{\\nu^{2}}{2})^{\\nu}", "VR derivation": "\\xi{(\\kappa,\\nu)} = \\int (\\kappa - \\nu) d\\nu and \\xi^{\\nu}{(\\kappa,\\nu)} = (\\int (\\kappa - \\nu) d\\nu)^{\\nu} and \\xi^{\\nu}{(\\kappa,\\nu)} = (\\kappa \\nu - \\frac{\\nu^{2}}{2} + \\omicron)^{\\nu} and (\\kappa \\nu - \\frac{\\nu^{2}}{2} + \\omicron)^{\\nu} = (\\int (\\kappa - \\nu) d\\nu)^{\\nu} and (\\kappa \\nu - \\frac{\\nu^{2}}{2} + \\omicron)^{\\nu} = (\\gamma + \\kappa \\nu - \\frac{\\nu^{2}}{2})^{\\nu} and \\xi^{\\nu}{(\\kappa,\\nu)} = (\\gamma + \\kappa \\nu - \\frac{\\nu^{2}}{2})^{\\nu}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\xi')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\nu', commutative=True)), Integral(Add(Symbol('\\\\kappa', commutative=True), Mul(Integer(-1), Symbol('\\\\nu', commutative=True))), Tuple(Symbol('\\\\nu', commutative=True))))"], [["power", 1, "Symbol('\\\\nu', commutative=True)"], "Equality(Pow(Function('\\\\xi')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\nu', commutative=True)), Symbol('\\\\nu', commutative=True)), Pow(Integral(Add(Symbol('\\\\kappa', commutative=True), Mul(Integer(-1), Symbol('\\\\nu', commutative=True))), Tuple(Symbol('\\\\nu', commutative=True))), Symbol('\\\\nu', commutative=True)))"], [["evaluate_integrals", 2], "Equality(Pow(Function('\\\\xi')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\nu', commutative=True)), Symbol('\\\\nu', commutative=True)), Pow(Add(Mul(Symbol('\\\\kappa', commutative=True), Symbol('\\\\nu', commutative=True)), Mul(Integer(-1), Rational(1, 2), Pow(Symbol('\\\\nu', commutative=True), Integer(2))), Symbol('\\\\omicron', commutative=True)), Symbol('\\\\nu', commutative=True)))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Pow(Add(Mul(Symbol('\\\\kappa', commutative=True), Symbol('\\\\nu', commutative=True)), Mul(Integer(-1), Rational(1, 2), Pow(Symbol('\\\\nu', commutative=True), Integer(2))), Symbol('\\\\omicron', commutative=True)), Symbol('\\\\nu', commutative=True)), Pow(Integral(Add(Symbol('\\\\kappa', commutative=True), Mul(Integer(-1), Symbol('\\\\nu', commutative=True))), Tuple(Symbol('\\\\nu', commutative=True))), Symbol('\\\\nu', commutative=True)))"], [["evaluate_integrals", 4], "Equality(Pow(Add(Mul(Symbol('\\\\kappa', commutative=True), Symbol('\\\\nu', commutative=True)), Mul(Integer(-1), Rational(1, 2), Pow(Symbol('\\\\nu', commutative=True), Integer(2))), Symbol('\\\\omicron', commutative=True)), Symbol('\\\\nu', commutative=True)), Pow(Add(Symbol('\\\\gamma', commutative=True), Mul(Symbol('\\\\kappa', commutative=True), Symbol('\\\\nu', commutative=True)), Mul(Integer(-1), Rational(1, 2), Pow(Symbol('\\\\nu', commutative=True), Integer(2)))), Symbol('\\\\nu', commutative=True)))"], [["substitute_LHS_for_RHS", 3, 5], "Equality(Pow(Function('\\\\xi')(Symbol('\\\\kappa', commutative=True), Symbol('\\\\nu', commutative=True)), Symbol('\\\\nu', commutative=True)), Pow(Add(Symbol('\\\\gamma', commutative=True), Mul(Symbol('\\\\kappa', commutative=True), Symbol('\\\\nu', commutative=True)), Mul(Integer(-1), Rational(1, 2), Pow(Symbol('\\\\nu', commutative=True), Integer(2)))), Symbol('\\\\nu', commutative=True)))"]], "static_flan-t5-large": "mathbf { M } { (C_ { 2 }, \\ hat { p } ) } = \\ int (- C_ { 2 } + \\ hat { p } ) dC_ { 2 } and \\ mathbf { M } ^ { C_ { 2 } } { (C_ { 2 }, \\ hat { p } ) } = ( \\ int (- C_ { 2 } + \\ hat { p } ) dC_ { 2 } ) ^ { C_ { 2 } } and \\ mathbf { M } ^ { C_ { 2 } } { (C_ { 2 }, \\ hat { p } ) } = (- \\ frac { C_ { 2 } ^ { 2 } } { 2 } + C_ { 2 } \\ hat { p } + a ^ { \\ dagger } ) ^ { C_ { 2 } } and ( \\ int (- C_ { 2 } + \\ hat { p } ) dC_ { 2 } ) ^ { C_ { 2 } } = (- \\ frac { C_ { 2 } ^ { 2 } } { 2 } + C_ { 2 } \\ hat { p } + \\ mathbf { D } ) ^ { C_ { 2 } } and (- \\ frac { C_ { 2 } ^ { 2 } } { 2 } + C_ { 2 } \\ hat { p } + a ^ { \\ dagger } ) ^ { C_ { 2 } } = (- \\ frac { C_ { 2 } ^ { 2 } } { 2 } + C_ { 2 } \\ hat { p } + \\ mathbf { D } ) ^ { C_ { 2 } } and \\ mathbf { M } ^ { C_ { 2 } } { (C_ { 2 }, \\ hat { p } ) } = (- \\ frac { C_ { 2 } ^ { 2 } } { 2 } + C_ { 2 } \\ hat { p } + \\ mathbf { D } ) ^ { C_ { 2 } }", "VR_flan-t5-large": "xi { ( \\ kappa, \\ nu) } = \\ int ( \\ kappa - \\ nu) d \\ nu and \\ xi ^ { \\ nu } { ( \\ kappa, \\ nu) } = ( \\ int ( \\ kappa - \\ nu) d \\ nu) ^ { \\ nu } and \\ xi ^ { \\ nu } { ( \\ kappa, \\ nu) } = ( \\ kappa \\ nu - \\ frac { \\ nu ^ { 2 } } { 2 } + \\ omicron) ^ { \\ nu } and ( \\ kappa \\ nu - \\ frac { \\ nu ^ { 2 } } { 2 } + \\ omicron) ^ { \\ nu } = ( \\ int ( \\ kappa - \\ nu) d \\ nu) ^ { \\ nu } and ( \\ kappa \\ nu - \\ frac { \\ nu ^ { 2 } } { 2 } + \\ omicron) ^ { \\ nu } = ( \\ gamma + \\ kappa \\ nu - \\ frac { \\ nu ^ { 2 } } { 2 } ) ^ { \\ nu } and \\ xi ^ { \\ nu } { ( \\ kappa, \\ nu) } = ( \\ gamma + \\ kappa \\ nu - \\ frac { \\ nu ^ { 2 } } { 2 } ) ^ { \\ nu }", "EE_flan-t5-large": "int (- C_ { 2 } + \\ hat { p } ) dC_ { 2 } = \\ mathbf { M } { (C_ { 2 }, \\ hat { p } ) } and \\ int (- C_ { 2 } + \\ hat { p } ) dC_ { 2 } = \\ int \\ mathbf { M } { (C_ { 2 }, \\ hat { p } ) } dC_ { 2 } and ( \\ int (- C_ { 2 } + \\ hat { p } ) dC_ { 2 } ) ^ { C_ { 2 } } = ( \\ int \\ mathbf { M } { (C_ { 2 }, \\ hat { p } ) } dC_ { 2 } ) ^ { C_ { 2 } } and (- \\ frac { C_ { 2 } ^ { 2 } } { 2 } + C_ { 2 } \\ hat { p } + \\ mathbf { D } ) ^ { C_ { 2 } } = \\ mathbf { M } ^ { C_ { 2 } } { (C_ { 2 }, \\ hat { p } ) } and (- \\ frac { C_ { 2 } ^ { 2 } } { 2 } + C_ { 2 } \\ hat { p } + \\ mathbf { D } ) ^ { C_ { 2 } } = (- \\ frac { C_ { 2 } ^ { 2 } } { 2 } + C_ { 2 } \\ hat { p } + a ^ { \\ dagger } ) ^ { C_ { 2 } } and (- \\ frac { C_ { 2 } ^ { 2 } } { 2 } + C_ { 2 } \\ hat { p } + \\ mathbf { D } ) ^ { C_ { 2 } } = \\ mathbf { M } ^ { C_ { 2 } } { (C_ { 2 }, \\ hat { p } ) }", "AG_flan-t5-large": "mathbf { M } { (C_ { 2 }, \\ hat { p } ) } = \\ int (- C_ { 2 } + \\ hat { p } ) dC_ { 2 } and \\ mathbf { M } ^ { C_ { 2 } } { (C_ { 2 }, \\ hat { p } ) } = ( \\ int (- C_ { 2 } + \\ hat { p } ) dC_ { 2 } ) ^ { C_ { 2 } } and \\ mathbf { M } ^ { C_ { 2 } } { (C_ { 2 }, \\ hat { p } ) } = (- \\ frac { C_ { 2 } ^ { 2 } } { 2 } + C_ { 2 } \\ hat { p } + a ^ { \\ dagger } ) ^ { C_ { 2 } } and ( \\ int (- C_ { 2 } + \\ hat { p } ) dC_ { 2 } ) ^ { C_ { 2 } } = (- \\ frac { C_ { 2 } ^ { 2 } } { 2 } + C_ { 2 } \\ hat { p } + \\ mathbf { D } ) ^ { C_ { 2 } } and (- \\ frac { C_ { 2 } ^ { 2 } } { 2 } + C_ { 2 } \\ hat { p } + a ^ { \\ dagger } ) ^ { C_ { 2 } } = (- \\ frac { C_ { 2 } ^ { 2 } } { 2 } + C_ { 2 } \\ hat { p } + \\ mathbf { D } ) ^ { C_ { 2 } }", "SR_flan-t5-large": "mathbf { M } { (C_ { 2 }, \\ hat { p } ) } = \\ int (- C_ { 2 } + \\ hat { p } ) dC_ { 2 } and \\ mathbf { M } ^ { C_ { 2 } } { (C_ { 2 }, \\ hat { p } ) } = ( \\ int (- C_ { 2 } + \\ hat { p } ) dC_ { 2 } ) ^ { C_ { 2 } } and \\ mathbf { M } ^ { C_ { 2 } } { (C_ { 2 }, \\ hat { p } ) } = (- \\ frac { C_ { 2 } ^ { 2 } } { 2 } + C_ { 2 } \\ hat { p } + \\ mathbf { D } ) ^ { C_ { 2 } }", "static_rouge": 0.9596774193548389, "static_bleu": 0.980880027806752, "static_bleurt": 0.7751479148864746, "static_gleu": 0.9809296781883194, "VR_rouge": -0.040322580645161143, "EE_rouge": 0.08620803159973678, "AG_rouge": 0.06099900525792257, "SR_rouge": 0.3687683284457479, "VR_rouge_abs": 0.0, "EE_rouge_abs": 0.0704739960500328, "AG_rouge_abs": 0.061200554430109855, "SR_rouge_abs": 0.40909090909090906, "VR_bleu": -0.015266412424014053, "EE_bleu": 0.09941337789722615, "AG_bleu": 0.1855399677176467, "SR_bleu": 0.7323136746930556, "VR_bleu_abs": 0.0011913362824867157, "EE_bleu_abs": 0.09033451020587335, "AG_bleu_abs": 0.15446282791260457, "SR_bleu_abs": 0.7485929193087432, "VR_bleurt": -0.006347179412841797, "EE_bleurt": 0.2467355728149414, "AG_bleurt": 0.0, "SR_bleurt": 0.5005098283290863, "VR_bleurt_abs": 0.03128094971179962, "EE_bleurt_abs": 0.15136736631393433, "AG_bleurt_abs": 0.002214372158050537, "SR_bleurt_abs": 0.4519508183002472, "VR_gleu": -0.015201849858102245, "EE_gleu": 0.09773539928486297, "AG_gleu": 0.16791192670902955, "SR_gleu": 0.564958283671037, "VR_gleu_abs": 0.0011419354378252033, "EE_gleu_abs": 0.08877691577512437, "AG_gleu_abs": 0.1387839705204975, "SR_gleu_abs": 0.5820359281437126, "ratio_VR_rouge": 1.0, "ratio_VR_bleu": 0.9942821520761258, "ratio_VR_bleurt": 1.1816274972895118, "ratio_VR_gleu": 0.9956351533834381, "ratio_EE_rouge": 0.9226657034495215, "ratio_EE_bleu": 0.9066199435830932, "ratio_EE_bleurt": 0.8032511189482835, "ratio_EE_gleu": 0.9082711424441757, "ratio_AG_rouge": 0.9365044247787611, "ratio_AG_bleu": 0.839337777151606, "ratio_AG_bleurt": 0.9974748954267815, "ratio_AG_gleu": 0.8556646706586826, "ratio_SR_rouge": 0.5909090909090909, "ratio_SR_bleu": 0.25140708069125683, "ratio_SR_bleurt": 0.4846290520720321, "ratio_SR_gleu": 0.4179640718562874}, {"prompt": "Given \\mathbf{p}{(E_{x})} = \\sin{(e^{E_{x}})} and \\dot{y}{(U)} = \\sin{(U)}, then derive \\frac{d}{d U} \\dot{y}{(U)} = \\cos{(U)}, then obtain \\cos{(U)} + \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})} = \\cos{(U)} + \\frac{d}{d E_{x}} \\sin{(e^{E_{x}})}", "derivation": "\\mathbf{p}{(E_{x})} = \\sin{(e^{E_{x}})} and \\dot{y}{(U)} = \\sin{(U)} and \\frac{d}{d U} \\dot{y}{(U)} = \\frac{d}{d U} \\sin{(U)} and \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})} = \\frac{d}{d E_{x}} \\sin{(e^{E_{x}})} and \\frac{d}{d U} \\dot{y}{(U)} = \\cos{(U)} and \\frac{d}{d U} \\sin{(U)} = \\cos{(U)} and \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})} + \\frac{d}{d U} \\sin{(U)} = \\frac{d}{d U} \\sin{(U)} + \\frac{d}{d E_{x}} \\sin{(e^{E_{x}})} and \\cos{(U)} + \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})} = \\cos{(U)} + \\frac{d}{d E_{x}} \\sin{(e^{E_{x}})}", "srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)), sin(exp(Symbol('E_x', commutative=True))))"], ["get_premise", "Equality(Function('\\\\dot{y}')(Symbol('U', commutative=True)), sin(Symbol('U', commutative=True)))"], [["differentiate", 2, "Symbol('U', commutative=True)"], "Equality(Derivative(Function('\\\\dot{y}')(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))), Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('E_x', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)), Tuple(Symbol('E_x', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('E_x', commutative=True))), Tuple(Symbol('E_x', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('\\\\dot{y}')(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))), cos(Symbol('U', commutative=True)))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))), cos(Symbol('U', commutative=True)))"], [["add", 4, "Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)), Tuple(Symbol('E_x', commutative=True), Integer(1))), Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1)))), Add(Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('E_x', commutative=True))), Tuple(Symbol('E_x', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 7, 6], "Equality(Add(cos(Symbol('U', commutative=True)), Derivative(Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)), Tuple(Symbol('E_x', commutative=True), Integer(1)))), Add(cos(Symbol('U', commutative=True)), Derivative(sin(exp(Symbol('E_x', commutative=True))), Tuple(Symbol('E_x', commutative=True), Integer(1)))))"]], "EE prompt": "Given \\sin{(e^{E_{x}})} = \\mathbf{p}{(E_{x})} and \\sin{(U)} = \\dot{y}{(U)}, then derive \\cos{(U)} = \\frac{d}{d U} \\dot{y}{(U)}, then obtain \\cos{(U)} + \\frac{d}{d E_{x}} \\sin{(e^{E_{x}})} = \\cos{(U)} + \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})}", "EE derivation": "\\sin{(e^{E_{x}})} = \\mathbf{p}{(E_{x})} and \\sin{(U)} = \\dot{y}{(U)} and \\frac{d}{d U} \\sin{(U)} = \\frac{d}{d U} \\dot{y}{(U)} and \\frac{d}{d E_{x}} \\sin{(e^{E_{x}})} = \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})} and \\cos{(U)} = \\frac{d}{d U} \\dot{y}{(U)} and \\cos{(U)} = \\frac{d}{d U} \\sin{(U)} and \\frac{d}{d U} \\sin{(U)} + \\frac{d}{d E_{x}} \\sin{(e^{E_{x}})} = \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})} + \\frac{d}{d U} \\sin{(U)} and \\cos{(U)} + \\frac{d}{d E_{x}} \\sin{(e^{E_{x}})} = \\cos{(U)} + \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})}", "EE srepr_derivation": [["premise", "Equality(sin(exp(Symbol('E_x', commutative=True))), Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)))"], ["get_premise", "Equality(sin(Symbol('U', commutative=True)), Function('\\\\dot{y}')(Symbol('U', commutative=True)))"], [["differentiate", 2, "Symbol('U', commutative=True)"], "Equality(Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))), Derivative(Function('\\\\dot{y}')(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('E_x', commutative=True)"], "Equality(Derivative(sin(exp(Symbol('E_x', commutative=True))), Tuple(Symbol('E_x', commutative=True), Integer(1))), Derivative(Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)), Tuple(Symbol('E_x', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(cos(Symbol('U', commutative=True)), Derivative(Function('\\\\dot{y}')(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 5, 2], "Equality(cos(Symbol('U', commutative=True)), Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))))"], [["add", 4, "Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1)))"], "Equality(Add(Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('E_x', commutative=True))), Tuple(Symbol('E_x', commutative=True), Integer(1)))), Add(Derivative(Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)), Tuple(Symbol('E_x', commutative=True), Integer(1))), Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 7, 6], "Equality(Add(cos(Symbol('U', commutative=True)), Derivative(sin(exp(Symbol('E_x', commutative=True))), Tuple(Symbol('E_x', commutative=True), Integer(1)))), Add(cos(Symbol('U', commutative=True)), Derivative(Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)), Tuple(Symbol('E_x', commutative=True), Integer(1)))))"]], "AG prompt": "Given \\mathbf{p}{(E_{x})} = \\sin{(e^{E_{x}})} and \\dot{y}{(U)} = \\sin{(U)}, then derive \\frac{d}{d U} \\dot{y}{(U)} = \\cos{(U)}, then obtain \\cos{(U)} + \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})} = e^{E_{x}} \\cos{(e^{E_{x}})} + \\cos{(U)}", "AG derivation": "\\mathbf{p}{(E_{x})} = \\sin{(e^{E_{x}})} and \\dot{y}{(U)} = \\sin{(U)} and \\frac{d}{d U} \\dot{y}{(U)} = \\frac{d}{d U} \\sin{(U)} and \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})} = \\frac{d}{d E_{x}} \\sin{(e^{E_{x}})} and \\frac{d}{d U} \\dot{y}{(U)} = \\cos{(U)} and \\frac{d}{d U} \\sin{(U)} = \\cos{(U)} and \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})} + \\frac{d}{d U} \\sin{(U)} = \\frac{d}{d U} \\sin{(U)} + \\frac{d}{d E_{x}} \\sin{(e^{E_{x}})} and \\cos{(U)} + \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})} = e^{E_{x}} \\cos{(e^{E_{x}})} + \\cos{(U)}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)), sin(exp(Symbol('E_x', commutative=True))))"], ["get_premise", "Equality(Function('\\\\dot{y}')(Symbol('U', commutative=True)), sin(Symbol('U', commutative=True)))"], [["differentiate", 2, "Symbol('U', commutative=True)"], "Equality(Derivative(Function('\\\\dot{y}')(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))), Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('E_x', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)), Tuple(Symbol('E_x', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('E_x', commutative=True))), Tuple(Symbol('E_x', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('\\\\dot{y}')(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))), cos(Symbol('U', commutative=True)))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))), cos(Symbol('U', commutative=True)))"], [["add", 4, "Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)), Tuple(Symbol('E_x', commutative=True), Integer(1))), Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1)))), Add(Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('E_x', commutative=True))), Tuple(Symbol('E_x', commutative=True), Integer(1)))))"], [["evaluate_derivatives", 7], "Equality(Add(cos(Symbol('U', commutative=True)), Derivative(Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)), Tuple(Symbol('E_x', commutative=True), Integer(1)))), Add(Mul(exp(Symbol('E_x', commutative=True)), cos(exp(Symbol('E_x', commutative=True)))), cos(Symbol('U', commutative=True))))"]], "SR prompt": "Given \\mathbf{p}{(E_{x})} = \\sin{(e^{E_{x}})} and \\dot{y}{(U)} = \\sin{(U)}, then obtain \\cos{(U)} + \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})} = \\cos{(U)} + \\frac{d}{d E_{x}} \\sin{(e^{E_{x}})}", "SR derivation": "\\mathbf{p}{(E_{x})} = \\sin{(e^{E_{x}})} and \\dot{y}{(U)} = \\sin{(U)} and \\frac{d}{d U} \\dot{y}{(U)} = \\frac{d}{d U} \\sin{(U)} and \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})} = \\frac{d}{d E_{x}} \\sin{(e^{E_{x}})} and \\frac{d}{d U} \\dot{y}{(U)} = \\cos{(U)} and \\frac{d}{d U} \\sin{(U)} = \\cos{(U)} and \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})} + \\frac{d}{d U} \\sin{(U)} = \\frac{d}{d U} \\sin{(U)} + \\frac{d}{d E_{x}} \\sin{(e^{E_{x}})} and \\cos{(U)} + \\frac{d}{d E_{x}} \\mathbf{p}{(E_{x})} = \\cos{(U)} + \\frac{d}{d E_{x}} \\sin{(e^{E_{x}})}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)), sin(exp(Symbol('E_x', commutative=True))))"], ["get_premise", "Equality(Function('\\\\dot{y}')(Symbol('U', commutative=True)), sin(Symbol('U', commutative=True)))"], [["differentiate", 2, "Symbol('U', commutative=True)"], "Equality(Derivative(Function('\\\\dot{y}')(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))), Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('E_x', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)), Tuple(Symbol('E_x', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('E_x', commutative=True))), Tuple(Symbol('E_x', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('\\\\dot{y}')(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))), cos(Symbol('U', commutative=True)))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))), cos(Symbol('U', commutative=True)))"], [["add", 4, "Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)), Tuple(Symbol('E_x', commutative=True), Integer(1))), Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1)))), Add(Derivative(sin(Symbol('U', commutative=True)), Tuple(Symbol('U', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('E_x', commutative=True))), Tuple(Symbol('E_x', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 7, 6], "Equality(Add(cos(Symbol('U', commutative=True)), Derivative(Function('\\\\mathbf{p}')(Symbol('E_x', commutative=True)), Tuple(Symbol('E_x', commutative=True), Integer(1)))), Add(cos(Symbol('U', commutative=True)), Derivative(sin(exp(Symbol('E_x', commutative=True))), Tuple(Symbol('E_x', commutative=True), Integer(1)))))"]], "VR prompt": "Given \\upsilon{(\\beta)} = \\sin{(e^{\\beta})} and \\gamma{(\\xi)} = \\sin{(\\xi)}, then derive \\frac{d}{d \\xi} \\gamma{(\\xi)} = \\cos{(\\xi)}, then obtain \\cos{(\\xi)} + \\frac{d}{d \\beta} \\upsilon{(\\beta)} = \\cos{(\\xi)} + \\frac{d}{d \\beta} \\sin{(e^{\\beta})}", "VR derivation": "\\upsilon{(\\beta)} = \\sin{(e^{\\beta})} and \\gamma{(\\xi)} = \\sin{(\\xi)} and \\frac{d}{d \\xi} \\gamma{(\\xi)} = \\frac{d}{d \\xi} \\sin{(\\xi)} and \\frac{d}{d \\beta} \\upsilon{(\\beta)} = \\frac{d}{d \\beta} \\sin{(e^{\\beta})} and \\frac{d}{d \\xi} \\gamma{(\\xi)} = \\cos{(\\xi)} and \\frac{d}{d \\xi} \\sin{(\\xi)} = \\cos{(\\xi)} and \\frac{d}{d \\beta} \\upsilon{(\\beta)} + \\frac{d}{d \\xi} \\sin{(\\xi)} = \\frac{d}{d \\xi} \\sin{(\\xi)} + \\frac{d}{d \\beta} \\sin{(e^{\\beta})} and \\cos{(\\xi)} + \\frac{d}{d \\beta} \\upsilon{(\\beta)} = \\cos{(\\xi)} + \\frac{d}{d \\beta} \\sin{(e^{\\beta})}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\upsilon')(Symbol('\\\\beta', commutative=True)), sin(exp(Symbol('\\\\beta', commutative=True))))"], ["get_premise", "Equality(Function('\\\\gamma')(Symbol('\\\\xi', commutative=True)), sin(Symbol('\\\\xi', commutative=True)))"], [["differentiate", 2, "Symbol('\\\\xi', commutative=True)"], "Equality(Derivative(Function('\\\\gamma')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))))"], [["differentiate", 1, "Symbol('\\\\beta', commutative=True)"], "Equality(Derivative(Function('\\\\upsilon')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))))"], [["evaluate_derivatives", 3], "Equality(Derivative(Function('\\\\gamma')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))), cos(Symbol('\\\\xi', commutative=True)))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Derivative(sin(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))), cos(Symbol('\\\\xi', commutative=True)))"], [["add", 4, "Derivative(sin(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1)))"], "Equality(Add(Derivative(Function('\\\\upsilon')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Derivative(sin(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1)))), Add(Derivative(sin(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))), Derivative(sin(exp(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 7, 6], "Equality(Add(cos(Symbol('\\\\xi', commutative=True)), Derivative(Function('\\\\upsilon')(Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))), Add(cos(Symbol('\\\\xi', commutative=True)), Derivative(sin(exp(Symbol('\\\\beta', commutative=True))), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))))"]], "static_flan-t5-large": "mathbf { p } { (E_ { x } ) } = \\ sin { (e ^ { E_ { x } } ) } and \\ dot { y } { (U) } = \\ sin { (U) } and \\ frac { d } { d U } \\ dot { y } { (U) } = \\ frac { d } { d U } \\ sin { (e ^ { E_ { x } } ) } and \\ frac { d } { d U } \\ dot { y } { (U) } = \\ cos { (U) } and \\ cos { (U) } + \\ frac { d } { d E_ { x } } \\ dot { y } { (U) } = \\ cos { (U) } + \\ frac { d } { d E_ { x } } \\ sin { (e ^ { E_ { x } } ) } and \\ cos { (U) } + \\ frac { d } { d E_ { x } } \\ mathbf { p } { (E_ { x } ) } = \\ cos { (U) } + \\ frac { d } { d E_ { x } } \\ sin { (e ^ { E_ { x } } ) }", "VR_flan-t5-large": "gamma { ( \\ xi) } = \\ sin { ( \\ xi) } and \\ frac { d } { d \\ xi } \\ gamma { ( \\ xi) } = \\ frac { d } { d \\ xi } \\ sin { ( \\ xi) } and \\ frac { d } { d \\ xi } \\ gamma { ( \\ xi) } = \\ cos { ( \\ xi) } and \\ cos { ( \\ xi) } + \\ frac { d } { d \\ beta } \\ gamma { ( \\ xi) } = \\ cos { ( \\ xi) } + \\ frac { d } { d \\ beta } \\ sin { (e ^ { \\ beta } ) } and \\ cos { ( \\ xi) } + \\ frac { d } { d \\ beta } \\ upsilon { ( \\ beta) } = \\ cos { ( \\ xi) } + \\ frac { d } { d \\ beta } \\ sin { (e ^ { \\ beta } ) }", "EE_flan-t5-large": "sin { (e ^ { E_ { x } } ) } = \\ mathbf { p } { (E_ { x } ) } and \\ sin { (U) } = \\ dot { y } { (U) } and \\ frac { d } { d U } \\ sin { (U) } = \\ frac { d } { d U } \\ dot { y } { (U) } and \\ cos { (U) } = \\ frac { d } { d U } \\ dot { y } { (U) } and \\ cos { (U) } + \\ frac { d } { d E_ { x } } \\ sin { (U) } = \\ cos { (U) } + \\ frac { d } { d E_ { x } } \\ mathbf { p } { (E_ { x } ) }", "AG_flan-t5-large": "mathbf { p } { (E_ { x } ) } = \\ sin { (e ^ { E_ { x } } ) } and \\ dot { y } { (U) } = \\ sin { (U) } and \\ frac { d } { d U } \\ dot { y } { (U) } = \\ frac { d } { d U } \\ sin { (e ^ { E_ { x } } ) } and \\ frac { d } { d U } \\ dot { y } { (U) } = \\ cos { (U) } and \\ cos { (U) } + \\ frac { d } { d E_ { x } } \\ mathbf { p } { (E_ { x } ) } = e ^ { E_ { x } } \\ cos { (e ^ { E_ { x } } ) } + \\ cos { (U) }", "SR_flan-t5-large": "mathbf { p } { (E_ { x } ) } = \\ sin { (e ^ { E_ { x } } ) } and \\ dot { y } { (U) } = \\ sin { (U) } and \\ frac { d } { d E_ { x } } \\ mathbf { p } { (E_ { x } ) } = \\ frac { d } { d E_ { x } } \\ sin { (e ^ { E_ { x } } ) } and \\ dot { y } { (U) } + \\ frac { d } { d E_ { x } } \\ mathbf { p } { (E_ { x } ) } = \\ dot { y } { (U) } + \\ frac { d } { d E_ { x } } \\ sin { (e ^ { E_ { x } } ) } and \\ cos { (U) } + \\ frac { d } { d E_ { x } } \\ mathbf { p } { (E_ { x } ) } = \\ cos { (U) } + \\ frac { d } { d E_ { x } } \\ sin { (e ^ { E_ { x } } ) }", "static_rouge": 0.7783251231527093, "static_bleu": 0.672282184796394, "static_bleurt": 0.6009577512741089, "static_gleu": 0.7092050209205021, "VR_rouge": 0.061343991077237536, "EE_rouge": 0.13425732654253975, "AG_rouge": 0.10035902145779407, "SR_rouge": -0.005594474837240404, "VR_rouge_abs": 0.03750198633402185, "EE_rouge_abs": 0.2003787430465146, "AG_rouge_abs": 0.16596045197740106, "SR_rouge_abs": 0.20731707317073156, "VR_bleu": 0.1136367510851991, "EE_bleu": 0.312577502130813, "AG_bleu": 0.25487130144507975, "SR_bleu": 0.007783981342152302, "VR_bleu_abs": 0.08058682273107565, "EE_bleu_abs": 0.3795691165022933, "AG_bleu_abs": 0.298972197926457, "SR_bleu_abs": 0.15621540476119644, "VR_bleurt": 0.07844769954681396, "EE_bleurt": 0.2231745719909668, "AG_bleurt": 0.26564404368400574, "SR_bleurt": -0.035568058490753174, "VR_bleurt_abs": 0.1251508081331849, "EE_bleurt_abs": 0.3999498188495636, "AG_bleurt_abs": 0.2546536922454834, "SR_bleurt_abs": 0.08738768100738525, "VR_gleu": 0.08400565887903477, "EE_gleu": 0.21687587168758715, "AG_gleu": 0.17747018312078422, "SR_gleu": 0.0020920502092049986, "VR_gleu_abs": 0.06959900370942235, "EE_gleu_abs": 0.32621716254523436, "AG_gleu_abs": 0.25976756775495946, "SR_gleu_abs": 0.15487571701720837, "ratio_VR_rouge": 0.8803245436105479, "ratio_VR_bleu": 0.841165394230126, "ratio_VR_bleurt": -0.12332626634085274, "ratio_VR_gleu": 0.8671038997079739, "ratio_EE_rouge": 0.7851795457429258, "ratio_EE_bleu": 0.6141546188369423, "ratio_EE_bleurt": 0.49166291035068965, "ratio_EE_gleu": 0.6684653358682735, "ratio_AG_rouge": 0.8266961651917405, "ratio_AG_bleu": 0.6908636598774563, "ratio_AG_bleurt": 0.6944784319670707, "ratio_AG_gleu": 0.7314299263441876, "ratio_SR_rouge": 0.7926829268292684, "ratio_SR_bleu": 0.8437845952388036, "ratio_SR_bleurt": 0.8951563549198399, "ratio_SR_gleu": 0.8451242829827916}, {"prompt": "Given \\operatorname{v_{y}}{(L)} = e^{L}, then derive \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)} = e^{L}, then obtain 2 \\operatorname{v_{y}}{(L)} = \\operatorname{v_{y}}{(L)} + \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)}", "derivation": "\\operatorname{v_{y}}{(L)} = e^{L} and \\frac{d}{d L} \\operatorname{v_{y}}{(L)} = \\frac{d}{d L} e^{L} and 2 \\operatorname{v_{y}}{(L)} = \\operatorname{v_{y}}{(L)} + e^{L} and \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)} = \\frac{d^{2}}{d L^{2}} e^{L} and \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)} = e^{L} and 2 \\operatorname{v_{y}}{(L)} = \\operatorname{v_{y}}{(L)} + \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)}", "srepr_derivation": [["premise", "Equality(Function('v_y')(Symbol('L', commutative=True)), exp(Symbol('L', commutative=True)))"], [["differentiate", 1, "Symbol('L', commutative=True)"], "Equality(Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(1))), Derivative(exp(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(1))))"], [["add", 1, "Function('v_y')(Symbol('L', commutative=True))"], "Equality(Mul(Integer(2), Function('v_y')(Symbol('L', commutative=True))), Add(Function('v_y')(Symbol('L', commutative=True)), exp(Symbol('L', commutative=True))))"], [["differentiate", 2, "Symbol('L', commutative=True)"], "Equality(Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2))), Derivative(exp(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2))))"], [["evaluate_derivatives", 4], "Equality(Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2))), exp(Symbol('L', commutative=True)))"], [["substitute_RHS_for_LHS", 3, 5], "Equality(Mul(Integer(2), Function('v_y')(Symbol('L', commutative=True))), Add(Function('v_y')(Symbol('L', commutative=True)), Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2)))))"]], "EE prompt": "Given e^{L} = \\operatorname{v_{y}}{(L)}, then derive e^{L} = \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)}, then obtain \\operatorname{v_{y}}{(L)} + \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)} = 2 \\operatorname{v_{y}}{(L)}", "EE derivation": "e^{L} = \\operatorname{v_{y}}{(L)} and \\frac{d}{d L} e^{L} = \\frac{d}{d L} \\operatorname{v_{y}}{(L)} and \\operatorname{v_{y}}{(L)} + e^{L} = 2 \\operatorname{v_{y}}{(L)} and \\frac{d^{2}}{d L^{2}} e^{L} = \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)} and e^{L} = \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)} and \\operatorname{v_{y}}{(L)} + \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)} = 2 \\operatorname{v_{y}}{(L)}", "EE srepr_derivation": [["premise", "Equality(exp(Symbol('L', commutative=True)), Function('v_y')(Symbol('L', commutative=True)))"], [["differentiate", 1, "Symbol('L', commutative=True)"], "Equality(Derivative(exp(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(1))), Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(1))))"], [["add", 1, "Function('v_y')(Symbol('L', commutative=True))"], "Equality(Add(Function('v_y')(Symbol('L', commutative=True)), exp(Symbol('L', commutative=True))), Mul(Integer(2), Function('v_y')(Symbol('L', commutative=True))))"], [["differentiate", 2, "Symbol('L', commutative=True)"], "Equality(Derivative(exp(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2))), Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2))))"], [["evaluate_derivatives", 4], "Equality(exp(Symbol('L', commutative=True)), Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2))))"], [["substitute_LHS_for_RHS", 3, 5], "Equality(Add(Function('v_y')(Symbol('L', commutative=True)), Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2)))), Mul(Integer(2), Function('v_y')(Symbol('L', commutative=True))))"]], "AG prompt": "Given \\operatorname{v_{y}}{(L)} = e^{L}, then derive \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)} = e^{L}, then obtain - L + \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)} = - L + e^{L}", "AG derivation": "\\operatorname{v_{y}}{(L)} = e^{L} and \\frac{d}{d L} \\operatorname{v_{y}}{(L)} = \\frac{d}{d L} e^{L} and 2 \\operatorname{v_{y}}{(L)} = \\operatorname{v_{y}}{(L)} + e^{L} and \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)} = \\frac{d^{2}}{d L^{2}} e^{L} and \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)} = e^{L} and - L + \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)} = - L + e^{L}", "AG srepr_derivation": [["premise", "Equality(Function('v_y')(Symbol('L', commutative=True)), exp(Symbol('L', commutative=True)))"], [["differentiate", 1, "Symbol('L', commutative=True)"], "Equality(Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(1))), Derivative(exp(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(1))))"], [["add", 1, "Function('v_y')(Symbol('L', commutative=True))"], "Equality(Mul(Integer(2), Function('v_y')(Symbol('L', commutative=True))), Add(Function('v_y')(Symbol('L', commutative=True)), exp(Symbol('L', commutative=True))))"], [["differentiate", 2, "Symbol('L', commutative=True)"], "Equality(Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2))), Derivative(exp(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2))))"], [["evaluate_derivatives", 4], "Equality(Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2))), exp(Symbol('L', commutative=True)))"], [["minus", 5, "Symbol('L', commutative=True)"], "Equality(Add(Mul(Integer(-1), Symbol('L', commutative=True)), Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2)))), Add(Mul(Integer(-1), Symbol('L', commutative=True)), exp(Symbol('L', commutative=True))))"]], "SR prompt": "Given \\operatorname{v_{y}}{(L)} = e^{L}, then obtain 2 \\operatorname{v_{y}}{(L)} = \\operatorname{v_{y}}{(L)} + \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)}", "SR derivation": "\\operatorname{v_{y}}{(L)} = e^{L} and \\frac{d}{d L} \\operatorname{v_{y}}{(L)} = \\frac{d}{d L} e^{L} and 2 \\operatorname{v_{y}}{(L)} = \\operatorname{v_{y}}{(L)} + e^{L} and \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)} = \\frac{d^{2}}{d L^{2}} e^{L} and \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)} = e^{L} and 2 \\operatorname{v_{y}}{(L)} = \\operatorname{v_{y}}{(L)} + \\frac{d^{2}}{d L^{2}} \\operatorname{v_{y}}{(L)}", "SR srepr_derivation": [["premise", "Equality(Function('v_y')(Symbol('L', commutative=True)), exp(Symbol('L', commutative=True)))"], [["differentiate", 1, "Symbol('L', commutative=True)"], "Equality(Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(1))), Derivative(exp(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(1))))"], [["add", 1, "Function('v_y')(Symbol('L', commutative=True))"], "Equality(Mul(Integer(2), Function('v_y')(Symbol('L', commutative=True))), Add(Function('v_y')(Symbol('L', commutative=True)), exp(Symbol('L', commutative=True))))"], [["differentiate", 2, "Symbol('L', commutative=True)"], "Equality(Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2))), Derivative(exp(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2))))"], [["evaluate_derivatives", 4], "Equality(Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2))), exp(Symbol('L', commutative=True)))"], [["substitute_RHS_for_LHS", 3, 5], "Equality(Mul(Integer(2), Function('v_y')(Symbol('L', commutative=True))), Add(Function('v_y')(Symbol('L', commutative=True)), Derivative(Function('v_y')(Symbol('L', commutative=True)), Tuple(Symbol('L', commutative=True), Integer(2)))))"]], "VR prompt": "Given \\omicron{(\\xi)} = e^{\\xi}, then derive \\frac{d^{2}}{d \\xi^{2}} \\omicron{(\\xi)} = e^{\\xi}, then obtain 2 \\omicron{(\\xi)} = \\omicron{(\\xi)} + \\frac{d^{2}}{d \\xi^{2}} \\omicron{(\\xi)}", "VR derivation": "\\omicron{(\\xi)} = e^{\\xi} and \\frac{d}{d \\xi} \\omicron{(\\xi)} = \\frac{d}{d \\xi} e^{\\xi} and 2 \\omicron{(\\xi)} = \\omicron{(\\xi)} + e^{\\xi} and \\frac{d^{2}}{d \\xi^{2}} \\omicron{(\\xi)} = \\frac{d^{2}}{d \\xi^{2}} e^{\\xi} and \\frac{d^{2}}{d \\xi^{2}} \\omicron{(\\xi)} = e^{\\xi} and 2 \\omicron{(\\xi)} = \\omicron{(\\xi)} + \\frac{d^{2}}{d \\xi^{2}} \\omicron{(\\xi)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), exp(Symbol('\\\\xi', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\xi', commutative=True)"], "Equality(Derivative(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))), Derivative(exp(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(1))))"], [["add", 1, "Function('\\\\omicron')(Symbol('\\\\xi', commutative=True))"], "Equality(Mul(Integer(2), Function('\\\\omicron')(Symbol('\\\\xi', commutative=True))), Add(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), exp(Symbol('\\\\xi', commutative=True))))"], [["differentiate", 2, "Symbol('\\\\xi', commutative=True)"], "Equality(Derivative(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(2))), Derivative(exp(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(2))))"], [["evaluate_derivatives", 4], "Equality(Derivative(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(2))), exp(Symbol('\\\\xi', commutative=True)))"], [["substitute_RHS_for_LHS", 3, 5], "Equality(Mul(Integer(2), Function('\\\\omicron')(Symbol('\\\\xi', commutative=True))), Add(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), Derivative(Function('\\\\omicron')(Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\xi', commutative=True), Integer(2)))))"]], "static_flan-t5-large": "operatorname { v_ { y } } { (L) } = e ^ { L } and 2 \\ operatorname { v_ { y } } { (L) } = \\ operatorname { v_ { y } } { (L) } + e ^ { L } and \\ frac { d } { d L } 2 \\ operatorname { v_ { y } } { (L) } = \\ frac { d } { d L } ( \\ operatorname { v_ { y } } { (L) } + e ^ { L } ) and \\ frac { d ^ { 2 } } { d L ^ { 2 } } \\ operatorname { v_ { y } } { (L) } = e ^ { L } and \\ frac { d ^ { 2 } } { d L ^ { 2 } } \\ operatorname { v_ { y } } { (L) } = \\ operatorname { v_ { y } } { (L) } and 2 \\ operatorname { v_ { y } } { (L) } = \\ operatorname { v_ { y } } { (L) } + \\ frac { d ^ { 2 } } { d L ^ { 2 } } \\ operatorname { v_ { y } } { (L) }", "VR_flan-t5-large": "omicron { ( \\ xi) } = e ^ { \\ xi } and 2 \\ omicron { ( \\ xi) } = \\ omicron { ( \\ xi) } + e ^ { \\ xi } and \\ frac { d } { d \\ xi } 2 \\ omicron { ( \\ xi) } = \\ frac { d } { d \\ xi } ( \\ omicron { ( \\ xi) } + e ^ { \\ xi } ) and \\ frac { d ^ { 2 } } { d \\ xi ^ { 2 } } \\ omicron { ( \\ xi) } = e ^ { \\ xi } and \\ frac { d ^ { 2 } } { d \\ xi ^ { 2 } } \\ omicron { ( \\ xi) } = \\ frac { d ^ { 2 } } { d \\ xi ^ { 2 } } \\ omicron { ( \\ xi) } and 2 \\ omicron { ( \\ xi) } = \\ omicron { ( \\ xi) } + \\ frac { d ^ { 2 } } { d \\ xi ^ { 2 } } \\ omicron { ( \\ xi) }", "EE_flan-t5-large": "operatorname { v_ { y } } { (L) } = \\ operatorname { v_ { y } } { (L) } and e ^ { L } = \\ frac { d } { d L } \\ operatorname { v_ { y } } { (L) } and \\ frac { d ^ { 2 } } { d L ^ { 2 } } \\ operatorname { v_ { y } } { (L) } = \\ frac { d ^ { 2 } } { d L ^ { 2 } } \\ operatorname { v_ { y } } { (L) } and e ^ { L } = \\ frac { d ^ { 2 } } { d L ^ { 2 } } \\ operatorname { v_ { y } } { (L) } and \\ operatorname { v_ { y } } { (L) } + \\ frac { d ^ { 2 } } { d L ^ { 2 } } \\ operatorname { v_ { y } } { (L) } = 2 \\ operatorname { v_ { y } } { (L) }", "AG_flan-t5-large": "operatorname { v_ { y } } { (L) } = e ^ { L } and \\ frac { d } { d L } \\ operatorname { v_ { y } } { (L) } = \\ frac { d } { d L } e ^ { L } and \\ frac { d ^ { 2 } } { d L ^ { 2 } } \\ operatorname { v_ { y } } { (L) } = \\ frac { d ^ { 2 } } { d L ^ { 2 } } e ^ { L } and \\ frac { d ^ { 2 } } { d L ^ { 2 } } \\ operatorname { v_ { y } } { (L) } = e ^ { L } and - L + \\ frac { d ^ { 2 } } { d L ^ { 2 } } \\ operatorname { v_ { y } } { (L) } = - L + e ^ { L }", "SR_flan-t5-large": "operatorname { v_ { y } } { (L) } = e ^ { L } and \\ frac { d } { d L } \\ operatorname { v_ { y } } { (L) } = \\ frac { d } { d L } e ^ { L } and \\ frac { d ^ { 2 } } { d L ^ { 2 } } \\ operatorname { v_ { y } } { (L) } = \\ frac { d ^ { 2 } } { d L ^ { 2 } } e ^ { L } and 2 \\ operatorname { v_ { y } } { (L) } = \\ operatorname { v_ { y } } { (L) } + \\ frac { d ^ { 2 } } { d L ^ { 2 } } \\ operatorname { v_ { y } } { (L) }", "static_rouge": 0.9112426035502958, "static_bleu": 0.8797053506049446, "static_bleurt": 0.7278311252593994, "static_gleu": 0.8805394990366089, "VR_rouge": -0.036905544597852225, "EE_rouge": 0.0009861932938856066, "AG_rouge": -0.0065656156277862365, "SR_rouge": 0.08606777837547075, "VR_rouge_abs": 0.059567099567099546, "EE_rouge_abs": 0.11328480436760702, "AG_rouge_abs": 0.157087504036164, "SR_rouge_abs": 0.20833333333333337, "VR_bleu": -0.018934436211853867, "EE_bleu": 0.019701553224394264, "AG_bleu": 0.05676519416352599, "SR_bleu": 0.23037792511992516, "VR_bleu_abs": 0.04201333545397906, "EE_bleu_abs": 0.1779558447254297, "AG_bleu_abs": 0.26904061007772684, "SR_bleu_abs": 0.3991958785905906, "VR_bleurt": -0.08697891235351562, "EE_bleurt": 0.06932574510574341, "AG_bleurt": 0.06324511766433716, "SR_bleurt": 0.21513217687606812, "VR_bleurt_abs": 0.06234323978424072, "EE_bleurt_abs": 0.030855834484100342, "AG_bleurt_abs": 0.1838008165359497, "SR_bleurt_abs": 0.27131760120391846, "VR_gleu": -0.018553471484933026, "EE_gleu": 0.014272033966748587, "AG_gleu": 0.04468636728714881, "SR_gleu": 0.1839327126094632, "VR_gleu_abs": 0.039527880654875225, "EE_gleu_abs": 0.16758390732984907, "AG_gleu_abs": 0.24158042296909077, "SR_gleu_abs": 0.34489402697495186, "ratio_VR_rouge": 0.7969303423848879, "ratio_VR_bleu": 0.9068064809354913, "ratio_VR_bleurt": 1.3801541648338698, "ratio_VR_gleu": 0.9164410624131119, "ratio_EE_rouge": 0.8780009799118078, "ratio_EE_bleu": 0.8109634030001139, "ratio_EE_bleurt": 0.9585581776181257, "ratio_EE_gleu": 0.8223078569899378, "ratio_AG_rouge": 0.8292982456140351, "ratio_AG_bleu": 0.6941927015365537, "ratio_AG_bleurt": 0.75669504322129, "ratio_AG_gleu": 0.726172416498836, "ratio_SR_rouge": 0.7916666666666666, "ratio_SR_bleu": 0.6008041214094094, "ratio_SR_bleurt": 0.6648791410335638, "ratio_SR_gleu": 0.6551059730250481}, {"prompt": "Given \\psi{(\\mathbf{s},h)} = \\frac{h}{\\mathbf{s}}, then derive \\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)} = \\frac{1}{\\mathbf{s}}, then obtain \\frac{\\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)}}{\\mathbf{s}} = \\mathbf{s}^{- \\frac{\\mathbf{s} \\psi{(\\mathbf{s},h)}}{h} - 1}", "derivation": "\\psi{(\\mathbf{s},h)} = \\frac{h}{\\mathbf{s}} and \\frac{\\mathbf{s} \\psi{(\\mathbf{s},h)}}{h} = 1 and \\frac{\\mathbf{s} \\psi{(\\mathbf{s},h)}}{h} + 1 = 2 and \\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)} = \\frac{\\partial}{\\partial h} \\frac{h}{\\mathbf{s}} and \\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)} = \\frac{1}{\\mathbf{s}} and \\frac{\\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)}}{\\mathbf{s}} = \\frac{1}{\\mathbf{s}^{2}} and \\frac{\\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)}}{\\mathbf{s}} = \\mathbf{s}^{- \\frac{\\mathbf{s} \\psi{(\\mathbf{s},h)}}{h} - 1}", "srepr_derivation": [["premise", "Equality(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Symbol('h', commutative=True)))"], [["divide", 1, "Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Symbol('h', commutative=True))"], "Equality(Mul(Symbol('\\\\mathbf{s}', commutative=True), Pow(Symbol('h', commutative=True), Integer(-1)), Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True))), Integer(1))"], [["add", 2, 1], "Equality(Add(Mul(Symbol('\\\\mathbf{s}', commutative=True), Pow(Symbol('h', commutative=True), Integer(-1)), Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True))), Integer(1)), Integer(2))"], [["differentiate", 1, "Symbol('h', commutative=True)"], "Equality(Derivative(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1))), Derivative(Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1))))"], [["evaluate_derivatives", 4], "Equality(Derivative(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1))), Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)))"], [["divide", 5, "Symbol('\\\\mathbf{s}', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Derivative(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1)))), Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-2)))"], [["substitute_RHS_for_LHS", 6, 3], "Equality(Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Derivative(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1)))), Pow(Symbol('\\\\mathbf{s}', commutative=True), Add(Mul(Integer(-1), Symbol('\\\\mathbf{s}', commutative=True), Pow(Symbol('h', commutative=True), Integer(-1)), Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True))), Integer(-1))))"]], "EE prompt": "Given \\frac{h}{\\mathbf{s}} = \\psi{(\\mathbf{s},h)}, then derive \\frac{1}{\\mathbf{s}} = \\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)}, then obtain \\mathbf{s}^{- \\frac{\\mathbf{s} \\psi{(\\mathbf{s},h)}}{h} - 1} = \\frac{\\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)}}{\\mathbf{s}}", "EE derivation": "\\frac{h}{\\mathbf{s}} = \\psi{(\\mathbf{s},h)} and 1 = \\frac{\\mathbf{s} \\psi{(\\mathbf{s},h)}}{h} and 2 = \\frac{\\mathbf{s} \\psi{(\\mathbf{s},h)}}{h} + 1 and \\frac{\\partial}{\\partial h} \\frac{h}{\\mathbf{s}} = \\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)} and \\frac{1}{\\mathbf{s}} = \\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)} and \\frac{1}{\\mathbf{s}^{2}} = \\frac{\\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)}}{\\mathbf{s}} and \\mathbf{s}^{- \\frac{\\mathbf{s} \\psi{(\\mathbf{s},h)}}{h} - 1} = \\frac{\\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)}}{\\mathbf{s}}", "EE srepr_derivation": [["premise", "Equality(Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Symbol('h', commutative=True)), Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)))"], [["divide", 1, "Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Symbol('h', commutative=True))"], "Equality(Integer(1), Mul(Symbol('\\\\mathbf{s}', commutative=True), Pow(Symbol('h', commutative=True), Integer(-1)), Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True))))"], [["add", 2, 1], "Equality(Integer(2), Add(Mul(Symbol('\\\\mathbf{s}', commutative=True), Pow(Symbol('h', commutative=True), Integer(-1)), Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True))), Integer(1)))"], [["differentiate", 1, "Symbol('h', commutative=True)"], "Equality(Derivative(Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1))), Derivative(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1))))"], [["evaluate_derivatives", 4], "Equality(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Derivative(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1))))"], [["divide", 5, "Symbol('\\\\mathbf{s}', commutative=True)"], "Equality(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-2)), Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Derivative(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 6, 3], "Equality(Pow(Symbol('\\\\mathbf{s}', commutative=True), Add(Mul(Integer(-1), Symbol('\\\\mathbf{s}', commutative=True), Pow(Symbol('h', commutative=True), Integer(-1)), Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True))), Integer(-1))), Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Derivative(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1)))))"]], "AG prompt": "Given \\psi{(\\mathbf{s},h)} = \\frac{h}{\\mathbf{s}}, then derive \\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)} = \\frac{1}{\\mathbf{s}}, then obtain \\frac{\\frac{\\partial}{\\partial h} \\frac{h}{\\mathbf{s}}}{\\mathbf{s}} = \\frac{1}{\\mathbf{s}^{2}}", "AG derivation": "\\psi{(\\mathbf{s},h)} = \\frac{h}{\\mathbf{s}} and \\frac{\\mathbf{s} \\psi{(\\mathbf{s},h)}}{h} = 1 and \\frac{\\mathbf{s} \\psi{(\\mathbf{s},h)}}{h} + 1 = 2 and \\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)} = \\frac{\\partial}{\\partial h} \\frac{h}{\\mathbf{s}} and \\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)} = \\frac{1}{\\mathbf{s}} and \\frac{\\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)}}{\\mathbf{s}} = \\frac{1}{\\mathbf{s}^{2}} and \\frac{\\frac{\\partial}{\\partial h} \\frac{h}{\\mathbf{s}}}{\\mathbf{s}} = \\frac{1}{\\mathbf{s}^{2}}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Symbol('h', commutative=True)))"], [["divide", 1, "Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Symbol('h', commutative=True))"], "Equality(Mul(Symbol('\\\\mathbf{s}', commutative=True), Pow(Symbol('h', commutative=True), Integer(-1)), Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True))), Integer(1))"], [["add", 2, 1], "Equality(Add(Mul(Symbol('\\\\mathbf{s}', commutative=True), Pow(Symbol('h', commutative=True), Integer(-1)), Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True))), Integer(1)), Integer(2))"], [["differentiate", 1, "Symbol('h', commutative=True)"], "Equality(Derivative(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1))), Derivative(Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1))))"], [["evaluate_derivatives", 4], "Equality(Derivative(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1))), Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)))"], [["divide", 5, "Symbol('\\\\mathbf{s}', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Derivative(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1)))), Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-2)))"], [["substitute_LHS_for_RHS", 6, 4], "Equality(Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Derivative(Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1)))), Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-2)))"]], "SR prompt": "Given \\psi{(\\mathbf{s},h)} = \\frac{h}{\\mathbf{s}}, then obtain \\frac{\\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)}}{\\mathbf{s}} = \\mathbf{s}^{- \\frac{\\mathbf{s} \\psi{(\\mathbf{s},h)}}{h} - 1}", "SR derivation": "\\psi{(\\mathbf{s},h)} = \\frac{h}{\\mathbf{s}} and \\frac{\\mathbf{s} \\psi{(\\mathbf{s},h)}}{h} = 1 and \\frac{\\mathbf{s} \\psi{(\\mathbf{s},h)}}{h} + 1 = 2 and \\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)} = \\frac{\\partial}{\\partial h} \\frac{h}{\\mathbf{s}} and \\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)} = \\frac{1}{\\mathbf{s}} and \\frac{\\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)}}{\\mathbf{s}} = \\frac{1}{\\mathbf{s}^{2}} and \\frac{\\frac{\\partial}{\\partial h} \\psi{(\\mathbf{s},h)}}{\\mathbf{s}} = \\mathbf{s}^{- \\frac{\\mathbf{s} \\psi{(\\mathbf{s},h)}}{h} - 1}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Symbol('h', commutative=True)))"], [["divide", 1, "Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Symbol('h', commutative=True))"], "Equality(Mul(Symbol('\\\\mathbf{s}', commutative=True), Pow(Symbol('h', commutative=True), Integer(-1)), Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True))), Integer(1))"], [["add", 2, 1], "Equality(Add(Mul(Symbol('\\\\mathbf{s}', commutative=True), Pow(Symbol('h', commutative=True), Integer(-1)), Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True))), Integer(1)), Integer(2))"], [["differentiate", 1, "Symbol('h', commutative=True)"], "Equality(Derivative(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1))), Derivative(Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1))))"], [["evaluate_derivatives", 4], "Equality(Derivative(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1))), Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)))"], [["divide", 5, "Symbol('\\\\mathbf{s}', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Derivative(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1)))), Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-2)))"], [["substitute_RHS_for_LHS", 6, 3], "Equality(Mul(Pow(Symbol('\\\\mathbf{s}', commutative=True), Integer(-1)), Derivative(Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True)), Tuple(Symbol('h', commutative=True), Integer(1)))), Pow(Symbol('\\\\mathbf{s}', commutative=True), Add(Mul(Integer(-1), Symbol('\\\\mathbf{s}', commutative=True), Pow(Symbol('h', commutative=True), Integer(-1)), Function('\\\\psi')(Symbol('\\\\mathbf{s}', commutative=True), Symbol('h', commutative=True))), Integer(-1))))"]], "VR prompt": "Given \\tau{(\\iota,\\beta)} = \\frac{\\beta}{\\iota}, then derive \\frac{\\partial}{\\partial \\beta} \\tau{(\\iota,\\beta)} = \\frac{1}{\\iota}, then obtain \\frac{\\frac{\\partial}{\\partial \\beta} \\tau{(\\iota,\\beta)}}{\\iota} = \\iota^{-1 - \\frac{\\iota \\tau{(\\iota,\\beta)}}{\\beta}}", "VR derivation": "\\tau{(\\iota,\\beta)} = \\frac{\\beta}{\\iota} and \\frac{\\iota \\tau{(\\iota,\\beta)}}{\\beta} = 1 and 1 + \\frac{\\iota \\tau{(\\iota,\\beta)}}{\\beta} = 2 and \\frac{\\partial}{\\partial \\beta} \\tau{(\\iota,\\beta)} = \\frac{\\partial}{\\partial \\beta} \\frac{\\beta}{\\iota} and \\frac{\\partial}{\\partial \\beta} \\tau{(\\iota,\\beta)} = \\frac{1}{\\iota} and \\frac{\\frac{\\partial}{\\partial \\beta} \\tau{(\\iota,\\beta)}}{\\iota} = \\frac{1}{\\iota^{2}} and \\frac{\\frac{\\partial}{\\partial \\beta} \\tau{(\\iota,\\beta)}}{\\iota} = \\iota^{-1 - \\frac{\\iota \\tau{(\\iota,\\beta)}}{\\beta}}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\tau')(Symbol('\\\\iota', commutative=True), Symbol('\\\\beta', commutative=True)), Mul(Symbol('\\\\beta', commutative=True), Pow(Symbol('\\\\iota', commutative=True), Integer(-1))))"], [["divide", 1, "Mul(Symbol('\\\\beta', commutative=True), Pow(Symbol('\\\\iota', commutative=True), Integer(-1)))"], "Equality(Mul(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Symbol('\\\\iota', commutative=True), Function('\\\\tau')(Symbol('\\\\iota', commutative=True), Symbol('\\\\beta', commutative=True))), Integer(1))"], [["add", 2, 1], "Equality(Add(Integer(1), Mul(Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Symbol('\\\\iota', commutative=True), Function('\\\\tau')(Symbol('\\\\iota', commutative=True), Symbol('\\\\beta', commutative=True)))), Integer(2))"], [["differentiate", 1, "Symbol('\\\\beta', commutative=True)"], "Equality(Derivative(Function('\\\\tau')(Symbol('\\\\iota', commutative=True), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Derivative(Mul(Symbol('\\\\beta', commutative=True), Pow(Symbol('\\\\iota', commutative=True), Integer(-1))), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))))"], [["evaluate_derivatives", 4], "Equality(Derivative(Function('\\\\tau')(Symbol('\\\\iota', commutative=True), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1))), Pow(Symbol('\\\\iota', commutative=True), Integer(-1)))"], [["divide", 5, "Symbol('\\\\iota', commutative=True)"], "Equality(Mul(Pow(Symbol('\\\\iota', commutative=True), Integer(-1)), Derivative(Function('\\\\tau')(Symbol('\\\\iota', commutative=True), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))), Pow(Symbol('\\\\iota', commutative=True), Integer(-2)))"], [["substitute_RHS_for_LHS", 6, 3], "Equality(Mul(Pow(Symbol('\\\\iota', commutative=True), Integer(-1)), Derivative(Function('\\\\tau')(Symbol('\\\\iota', commutative=True), Symbol('\\\\beta', commutative=True)), Tuple(Symbol('\\\\beta', commutative=True), Integer(1)))), Pow(Symbol('\\\\iota', commutative=True), Add(Integer(-1), Mul(Integer(-1), Pow(Symbol('\\\\beta', commutative=True), Integer(-1)), Symbol('\\\\iota', commutative=True), Function('\\\\tau')(Symbol('\\\\iota', commutative=True), Symbol('\\\\beta', commutative=True))))))"]], "static_flan-t5-large": "psi { ( \\ mathbf { s },h) } = \\ frac { h } { \\ mathbf { s } } and \\ frac { \\ partial } { \\ partial h } \\ psi { ( \\ mathbf { s },h) } = \\ frac { \\ partial } { \\ partial h } \\ frac { h } { \\ mathbf { s } } and \\ frac { \\ partial } { \\ partial h } \\ psi { ( \\ mathbf { s },h) } = \\ frac { 1 } { \\ mathbf { s } } and \\ frac { \\ partial } { \\ partial h } \\ frac { h } { \\ mathbf { s } } = \\ frac { 1 } { \\ mathbf { s } } and \\ frac { \\ frac { \\ partial } { \\ partial h } \\ psi { ( \\ mathbf { s },h) } } { \\ mathbf { s } } = \\ mathbf { s } ^ { - \\ frac { \\ mathbf { s } \\ psi { ( \\ mathbf { s },h) } } { h } - 1 }", "VR_flan-t5-large": "tau { ( \\ iota, \\ beta) } = \\ frac { \\ beta } { \\ iota } and \\ frac { \\ partial } { \\ partial \\ beta } \\ tau { ( \\ iota, \\ beta) } = \\ frac { \\ partial } { \\ partial \\ beta } \\ frac { \\ beta } { \\ iota } and \\ frac { \\ partial } { \\ partial \\ beta } \\ tau { ( \\ iota, \\ beta) } = \\ frac { 1 } { \\ iota } and \\ frac { \\ partial } { \\ partial \\ beta } \\ frac { \\ beta } { \\ iota } = \\ frac { 1 } { \\ iota } and \\ frac { \\ frac { \\ partial } { \\ partial \\ beta } \\ tau { ( \\ iota, \\ beta) } } { \\ iota } = \\ iota ^ { -1 - \\ frac { \\ iota \\ frac { \\ beta } { \\ iota } } { \\ beta } } and \\ frac { \\ frac { \\ partial } { \\ partial \\ beta } \\ tau { ( \\ iota, \\ beta) } } { \\ iota } = \\ iota ^ { -1 - \\ frac { \\ iota \\ tau { ( \\ iota, \\ beta) } } { \\ beta } }", "EE_flan-t5-large": "frac { h } { \\ mathbf { s } } = \\ psi { ( \\ mathbf { s },h) } and \\ frac { \\ mathbf { s } } { h } = 1 and \\ frac { \\ mathbf { s } } { h } = \\ frac { \\ psi { ( \\ mathbf { s },h) } } { \\ mathbf { s } } and 1 = \\ frac { \\ partial } { \\ partial h } \\ frac { \\ psi { ( \\ mathbf { s },h) } } { \\ mathbf { s } } and \\ frac { 1 } { \\ mathbf { s } } = \\ frac { \\ partial } { \\ partial h } \\ psi { ( \\ mathbf { s },h) } and \\ mathbf { s } ^ { - \\ frac { \\ mathbf { s } \\ psi { ( \\ mathbf { s },h) } } { h } = \\ frac { \\ frac { \\ partial } { \\ partial h } \\ psi { ( \\ mathbf { s },h) } } { \\ mathbf { s } }", "AG_flan-t5-large": "psi { ( \\ mathbf { s },h) } = \\ frac { h } { \\ mathbf { s } } and \\ frac { \\ partial } { \\ partial h } \\ psi { ( \\ mathbf { s },h) } = \\ frac { \\ partial } { \\ partial h } \\ frac { h } { \\ mathbf { s } } and \\ frac { \\ partial } { \\ partial h } \\ psi { ( \\ mathbf { s },h) } = \\ frac { 1 } { \\ mathbf { s } } and \\ frac { \\ partial } { \\ partial h } \\ frac { h } { \\ mathbf { s } } = \\ frac { 1 } { \\ mathbf { s } } and \\ frac { \\ frac { \\ partial } { \\ partial h } \\ frac { h } { \\ mathbf { s } } } { \\ mathbf { s } } = \\ frac { 1 } { \\ mathbf { s } ^ { 2 } }", "SR_flan-t5-large": "psi { ( \\ mathbf { s },h) } = \\ frac { h } { \\ mathbf { s } } and \\ frac { \\ psi { ( \\ mathbf { s },h) } } { \\ mathbf { s } } = \\ frac { h } { \\ mathbf { s } ^ { 2 } } and \\ frac { \\ partial } { \\ partial h } \\ frac { \\ psi { ( \\ mathbf { s },h) } } { \\ mathbf { s } } = \\ frac { \\ partial } { \\ partial h } \\ frac { h } { \\ mathbf { s } ^ { 2 } } and \\ frac { \\ frac { \\ partial } { \\ partial h } \\ psi { ( \\ mathbf { s },h) } } { \\ mathbf { s } } = \\ mathbf { s } ^ { - \\ frac { \\ mathbf { s } \\ psi { ( \\ mathbf { s },h) } } { h } - 1 }", "static_rouge": 0.8187134502923976, "static_bleu": 0.7034710732640461, "static_bleurt": 0.5924339294433594, "static_gleu": 0.7360406091370558, "VR_rouge": -0.004071359834184607, "EE_rouge": 0.023391812865497075, "AG_rouge": 0.01368200375151718, "SR_rouge": 0.1150097465886939, "VR_rouge_abs": 0.02202544832204778, "EE_rouge_abs": 0.10022365110427733, "AG_rouge_abs": 0.03007518796992481, "SR_rouge_abs": 0.1970802919708028, "VR_bleu": -0.16933927219842815, "EE_bleu": 0.007324479546319429, "AG_bleu": 0.025412351507572373, "SR_bleu": 0.09749166169915335, "VR_bleu_abs": 0.014445951529928724, "EE_bleu_abs": 0.10856736148699175, "AG_bleu_abs": 0.039715524351680465, "SR_bleu_abs": 0.14749965098939855, "VR_bleurt": -0.028784871101379395, "EE_bleurt": 0.03419697284698486, "AG_bleurt": -0.02536797523498535, "SR_bleurt": 0.09294191002845764, "VR_bleurt_abs": 0.007810473442077637, "EE_bleurt_abs": 0.10795778036117554, "AG_bleurt_abs": 0.19926637411117554, "SR_bleurt_abs": 0.1921713948249817, "VR_gleu": -0.1382340523716482, "EE_gleu": 0.009306260575296044, "AG_gleu": 0.02019361460153668, "SR_gleu": 0.08037225042301188, "VR_gleu_abs": 0.015928182727819706, "EE_gleu_abs": 0.10544497043670042, "AG_gleu_abs": 0.037696973882615614, "SR_gleu_abs": 0.14399092970521543, "ratio_VR_rouge": 0.9108970499698976, "ratio_VR_bleu": 0.9663886338294019, "ratio_VR_bleurt": 1.0508864934082753, "ratio_VR_gleu": 0.9650702931645957, "ratio_EE_rouge": 0.8844480257856567, "ratio_EE_bleu": 0.8863355390212113, "ratio_EE_bleurt": 0.8618517633467851, "ratio_EE_gleu": 0.8897026946405487, "ratio_AG_rouge": 0.9671592775041051, "ratio_AG_bleu": 0.9552057081914189, "ratio_AG_bleurt": 0.7549953859205499, "ratio_AG_gleu": 0.9576043547771155, "ratio_SR_rouge": 0.8029197080291972, "ratio_SR_bleu": 0.8525003490106015, "ratio_SR_bleurt": 0.7637188982023851, "ratio_SR_gleu": 0.8560090702947846}, {"prompt": "Given \\mathbf{J}_f{(F_{g})} = e^{e^{F_{g}}}, then derive \\int \\mathbf{J}_f{(F_{g})} dF_{g} = h + \\operatorname{Ei}{(e^{F_{g}})}, then obtain 2 \\int \\mathbf{J}_f{(F_{g})} dF_{g} = z^{*} + \\operatorname{Ei}{(e^{F_{g}})} + \\int \\mathbf{J}_f{(F_{g})} dF_{g}", "derivation": "\\mathbf{J}_f{(F_{g})} = e^{e^{F_{g}}} and \\int \\mathbf{J}_f{(F_{g})} dF_{g} = \\int e^{e^{F_{g}}} dF_{g} and \\int \\mathbf{J}_f{(F_{g})} dF_{g} = h + \\operatorname{Ei}{(e^{F_{g}})} and 2 \\int \\mathbf{J}_f{(F_{g})} dF_{g} = h + \\operatorname{Ei}{(e^{F_{g}})} + \\int \\mathbf{J}_f{(F_{g})} dF_{g} and h + \\operatorname{Ei}{(e^{F_{g}})} = \\int e^{e^{F_{g}}} dF_{g} and 2 \\int \\mathbf{J}_f{(F_{g})} dF_{g} = \\int \\mathbf{J}_f{(F_{g})} dF_{g} + \\int e^{e^{F_{g}}} dF_{g} and 2 \\int \\mathbf{J}_f{(F_{g})} dF_{g} = z^{*} + \\operatorname{Ei}{(e^{F_{g}})} + \\int \\mathbf{J}_f{(F_{g})} dF_{g}", "srepr_derivation": [["get_premise", "Equality(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), exp(exp(Symbol('F_g', commutative=True))))"], [["integrate", 1, "Symbol('F_g', commutative=True)"], "Equality(Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True))), Integral(exp(exp(Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True))), Add(Symbol('h', commutative=True), Ei(exp(Symbol('F_g', commutative=True)))))"], [["add", 3, "Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))"], "Equality(Mul(Integer(2), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))), Add(Symbol('h', commutative=True), Ei(exp(Symbol('F_g', commutative=True))), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Add(Symbol('h', commutative=True), Ei(exp(Symbol('F_g', commutative=True)))), Integral(exp(exp(Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Mul(Integer(2), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))), Add(Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True))), Integral(exp(exp(Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True)))))"], [["evaluate_integrals", 6], "Equality(Mul(Integer(2), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))), Add(Symbol('z^*', commutative=True), Ei(exp(Symbol('F_g', commutative=True))), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))))"]], "EE prompt": "Given e^{e^{F_{g}}} = \\mathbf{J}_f{(F_{g})}, then derive h + \\operatorname{Ei}{(e^{F_{g}})} = \\int \\mathbf{J}_f{(F_{g})} dF_{g}, then obtain z^{*} + \\operatorname{Ei}{(e^{F_{g}})} + \\int \\mathbf{J}_f{(F_{g})} dF_{g} = 2 \\int \\mathbf{J}_f{(F_{g})} dF_{g}", "EE derivation": "e^{e^{F_{g}}} = \\mathbf{J}_f{(F_{g})} and \\int e^{e^{F_{g}}} dF_{g} = \\int \\mathbf{J}_f{(F_{g})} dF_{g} and h + \\operatorname{Ei}{(e^{F_{g}})} = \\int \\mathbf{J}_f{(F_{g})} dF_{g} and h + \\operatorname{Ei}{(e^{F_{g}})} + \\int \\mathbf{J}_f{(F_{g})} dF_{g} = 2 \\int \\mathbf{J}_f{(F_{g})} dF_{g} and \\int e^{e^{F_{g}}} dF_{g} = h + \\operatorname{Ei}{(e^{F_{g}})} and \\int \\mathbf{J}_f{(F_{g})} dF_{g} + \\int e^{e^{F_{g}}} dF_{g} = 2 \\int \\mathbf{J}_f{(F_{g})} dF_{g} and z^{*} + \\operatorname{Ei}{(e^{F_{g}})} + \\int \\mathbf{J}_f{(F_{g})} dF_{g} = 2 \\int \\mathbf{J}_f{(F_{g})} dF_{g}", "EE srepr_derivation": [["get_premise", "Equality(exp(exp(Symbol('F_g', commutative=True))), Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)))"], [["integrate", 1, "Symbol('F_g', commutative=True)"], "Equality(Integral(exp(exp(Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True))), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Add(Symbol('h', commutative=True), Ei(exp(Symbol('F_g', commutative=True)))), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True))))"], [["add", 3, "Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))"], "Equality(Add(Symbol('h', commutative=True), Ei(exp(Symbol('F_g', commutative=True))), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))), Mul(Integer(2), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))))"], [["substitute_RHS_for_LHS", 2, 3], "Equality(Integral(exp(exp(Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True))), Add(Symbol('h', commutative=True), Ei(exp(Symbol('F_g', commutative=True)))))"], [["substitute_RHS_for_LHS", 4, 5], "Equality(Add(Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True))), Integral(exp(exp(Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True)))), Mul(Integer(2), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))))"], [["evaluate_integrals", 6], "Equality(Add(Symbol('z^*', commutative=True), Ei(exp(Symbol('F_g', commutative=True))), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))), Mul(Integer(2), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))))"]], "AG prompt": "Given \\mathbf{J}_f{(F_{g})} = e^{e^{F_{g}}}, then derive \\int \\mathbf{J}_f{(F_{g})} dF_{g} = h + \\operatorname{Ei}{(e^{F_{g}})}, then obtain 2 h + 2 \\operatorname{Ei}{(e^{F_{g}})} = h + \\operatorname{Ei}{(e^{F_{g}})} + \\int e^{e^{F_{g}}} dF_{g}", "AG derivation": "\\mathbf{J}_f{(F_{g})} = e^{e^{F_{g}}} and \\int \\mathbf{J}_f{(F_{g})} dF_{g} = \\int e^{e^{F_{g}}} dF_{g} and \\int \\mathbf{J}_f{(F_{g})} dF_{g} = h + \\operatorname{Ei}{(e^{F_{g}})} and 2 \\int \\mathbf{J}_f{(F_{g})} dF_{g} = h + \\operatorname{Ei}{(e^{F_{g}})} + \\int \\mathbf{J}_f{(F_{g})} dF_{g} and h + \\operatorname{Ei}{(e^{F_{g}})} = \\int e^{e^{F_{g}}} dF_{g} and 2 \\int \\mathbf{J}_f{(F_{g})} dF_{g} = \\int \\mathbf{J}_f{(F_{g})} dF_{g} + \\int e^{e^{F_{g}}} dF_{g} and 2 h + 2 \\operatorname{Ei}{(e^{F_{g}})} = h + \\operatorname{Ei}{(e^{F_{g}})} + \\int e^{e^{F_{g}}} dF_{g}", "AG srepr_derivation": [["get_premise", "Equality(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), exp(exp(Symbol('F_g', commutative=True))))"], [["integrate", 1, "Symbol('F_g', commutative=True)"], "Equality(Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True))), Integral(exp(exp(Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True))), Add(Symbol('h', commutative=True), Ei(exp(Symbol('F_g', commutative=True)))))"], [["add", 3, "Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))"], "Equality(Mul(Integer(2), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))), Add(Symbol('h', commutative=True), Ei(exp(Symbol('F_g', commutative=True))), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Add(Symbol('h', commutative=True), Ei(exp(Symbol('F_g', commutative=True)))), Integral(exp(exp(Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Mul(Integer(2), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))), Add(Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True))), Integral(exp(exp(Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True)))))"], [["substitute_LHS_for_RHS", 6, 3], "Equality(Add(Mul(Integer(2), Symbol('h', commutative=True)), Mul(Integer(2), Ei(exp(Symbol('F_g', commutative=True))))), Add(Symbol('h', commutative=True), Ei(exp(Symbol('F_g', commutative=True))), Integral(exp(exp(Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True)))))"]], "SR prompt": "Given \\mathbf{J}_f{(F_{g})} = e^{e^{F_{g}}}, then obtain 2 \\int \\mathbf{J}_f{(F_{g})} dF_{g} = z^{*} + \\operatorname{Ei}{(e^{F_{g}})} + \\int \\mathbf{J}_f{(F_{g})} dF_{g}", "SR derivation": "\\mathbf{J}_f{(F_{g})} = e^{e^{F_{g}}} and \\int \\mathbf{J}_f{(F_{g})} dF_{g} = \\int e^{e^{F_{g}}} dF_{g} and \\int \\mathbf{J}_f{(F_{g})} dF_{g} = h + \\operatorname{Ei}{(e^{F_{g}})} and 2 \\int \\mathbf{J}_f{(F_{g})} dF_{g} = h + \\operatorname{Ei}{(e^{F_{g}})} + \\int \\mathbf{J}_f{(F_{g})} dF_{g} and h + \\operatorname{Ei}{(e^{F_{g}})} = \\int e^{e^{F_{g}}} dF_{g} and 2 \\int \\mathbf{J}_f{(F_{g})} dF_{g} = \\int \\mathbf{J}_f{(F_{g})} dF_{g} + \\int e^{e^{F_{g}}} dF_{g} and 2 \\int \\mathbf{J}_f{(F_{g})} dF_{g} = z^{*} + \\operatorname{Ei}{(e^{F_{g}})} + \\int \\mathbf{J}_f{(F_{g})} dF_{g}", "SR srepr_derivation": [["get_premise", "Equality(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), exp(exp(Symbol('F_g', commutative=True))))"], [["integrate", 1, "Symbol('F_g', commutative=True)"], "Equality(Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True))), Integral(exp(exp(Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True))), Add(Symbol('h', commutative=True), Ei(exp(Symbol('F_g', commutative=True)))))"], [["add", 3, "Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))"], "Equality(Mul(Integer(2), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))), Add(Symbol('h', commutative=True), Ei(exp(Symbol('F_g', commutative=True))), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Add(Symbol('h', commutative=True), Ei(exp(Symbol('F_g', commutative=True)))), Integral(exp(exp(Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Mul(Integer(2), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))), Add(Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True))), Integral(exp(exp(Symbol('F_g', commutative=True))), Tuple(Symbol('F_g', commutative=True)))))"], [["evaluate_integrals", 6], "Equality(Mul(Integer(2), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))), Add(Symbol('z^*', commutative=True), Ei(exp(Symbol('F_g', commutative=True))), Integral(Function('\\\\mathbf{J}_f')(Symbol('F_g', commutative=True)), Tuple(Symbol('F_g', commutative=True)))))"]], "VR prompt": "Given \\alpha{(\\kappa)} = e^{e^{\\kappa}}, then derive \\int \\alpha{(\\kappa)} d\\kappa = \\nu + \\operatorname{Ei}{(e^{\\kappa})}, then obtain 2 \\int \\alpha{(\\kappa)} d\\kappa = \\iota + \\operatorname{Ei}{(e^{\\kappa})} + \\int \\alpha{(\\kappa)} d\\kappa", "VR derivation": "\\alpha{(\\kappa)} = e^{e^{\\kappa}} and \\int \\alpha{(\\kappa)} d\\kappa = \\int e^{e^{\\kappa}} d\\kappa and \\int \\alpha{(\\kappa)} d\\kappa = \\nu + \\operatorname{Ei}{(e^{\\kappa})} and 2 \\int \\alpha{(\\kappa)} d\\kappa = \\nu + \\operatorname{Ei}{(e^{\\kappa})} + \\int \\alpha{(\\kappa)} d\\kappa and \\nu + \\operatorname{Ei}{(e^{\\kappa})} = \\int e^{e^{\\kappa}} d\\kappa and 2 \\int \\alpha{(\\kappa)} d\\kappa = \\int \\alpha{(\\kappa)} d\\kappa + \\int e^{e^{\\kappa}} d\\kappa and 2 \\int \\alpha{(\\kappa)} d\\kappa = \\iota + \\operatorname{Ei}{(e^{\\kappa})} + \\int \\alpha{(\\kappa)} d\\kappa", "VR srepr_derivation": [["get_premise", "Equality(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), exp(exp(Symbol('\\\\kappa', commutative=True))))"], [["integrate", 1, "Symbol('\\\\kappa', commutative=True)"], "Equality(Integral(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True))), Integral(exp(exp(Symbol('\\\\kappa', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True))))"], [["evaluate_integrals", 2], "Equality(Integral(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True))), Add(Symbol('\\\\nu', commutative=True), Ei(exp(Symbol('\\\\kappa', commutative=True)))))"], [["add", 3, "Integral(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True)))"], "Equality(Mul(Integer(2), Integral(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True)))), Add(Symbol('\\\\nu', commutative=True), Ei(exp(Symbol('\\\\kappa', commutative=True))), Integral(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True)))))"], [["substitute_LHS_for_RHS", 2, 3], "Equality(Add(Symbol('\\\\nu', commutative=True), Ei(exp(Symbol('\\\\kappa', commutative=True)))), Integral(exp(exp(Symbol('\\\\kappa', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True))))"], [["substitute_LHS_for_RHS", 4, 5], "Equality(Mul(Integer(2), Integral(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True)))), Add(Integral(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True))), Integral(exp(exp(Symbol('\\\\kappa', commutative=True))), Tuple(Symbol('\\\\kappa', commutative=True)))))"], [["evaluate_integrals", 6], "Equality(Mul(Integer(2), Integral(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True)))), Add(Symbol('\\\\iota', commutative=True), Ei(exp(Symbol('\\\\kappa', commutative=True))), Integral(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True)))))"]], "static_flan-t5-large": "mathbf { J } _f { (F_ { g } ) } = e ^ { e ^ { F_ { g } } } and \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g } = \\ int e ^ { e ^ { F_ { g } } } dF_ { g } and \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g } = h + \\ operatorname { Ei } { (e ^ { F_ { g } } ) } and h + \\ operatorname { Ei } { (e ^ { F_ { g } } ) } = \\ int e ^ { e ^ { F_ { g } } } dF_ { g } and 2 \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g } = \\ int e ^ { e ^ { F_ { g } } } dF_ { g } + \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g } and 2 \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g } = z ^ { * } + \\ operatorname { Ei } { (e ^ { F_ { g } } ) } + \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g }", "VR_flan-t5-large": "alpha { ( \\ kappa) } = e ^ { e ^ { \\ kappa } } and \\ int \\ alpha { ( \\ kappa) } d \\ kappa = \\ int e ^ { e ^ { \\ kappa } } d \\ kappa and \\ int \\ alpha { ( \\ kappa) } d \\ kappa = \\ nu + \\ operatorname { Ei } { (e ^ { \\ kappa } ) } and \\ int e ^ { e ^ { \\ kappa } } d \\ kappa = \\ nu + \\ operatorname { Ei } { (e ^ { \\ kappa } ) } and 2 \\ int \\ alpha { ( \\ kappa) } d \\ kappa = \\ int e ^ { e ^ { \\ kappa } } d \\ kappa + \\ int \\ alpha { ( \\ kappa) } d \\ kappa and 2 \\ int \\ alpha { ( \\ kappa) } d \\ kappa = \\ iota + \\ operatorname { Ei } { (e ^ { \\ kappa } ) } + \\ int \\ alpha { ( \\ kappa) } d \\ kappa", "EE_flan-t5-large": "e ^ { F_ { g } } } = \\ mathbf { J } _f { (F_ { g } ) } and \\ int e ^ { e ^ { F_ { g } } } dF_ { g } = \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g } and h + \\ operatorname { Ei } { (e ^ { F_ { g } } ) } = \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g } and h + \\ operatorname { Ei } { (e ^ { F_ { g } } ) } = \\ int e ^ { e ^ { F_ { g } } } dF_ { g } and z ^ { * } + \\ operatorname { Ei } { (e ^ { F_ { g } } ) } = \\ int e ^ { e ^ { F_ { g } } } dF_ { g } and z ^ { * } + \\ operatorname { Ei } { (e ^ { F_ { g } } ) } + \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g } = 2 \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g }", "AG_flan-t5-large": "mathbf { J } _f { (F_ { g } ) } = e ^ { e ^ { F_ { g } } } and \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g } = \\ int e ^ { e ^ { F_ { g } } } dF_ { g } and \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g } = h + \\ operatorname { Ei } { (e ^ { F_ { g } } ) } and h + \\ operatorname { Ei } { (e ^ { F_ { g } } ) } + \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g } = h + \\ operatorname { Ei } { (e ^ { F_ { g } } ) } + \\ int e ^ { e ^ { F_ { g } } } dF_ { g } and 2 h + 2 \\ operatorname { Ei } { (e ^ { F_ { g } } ) } = h + \\ operatorname { Ei } { (e ^ { F_ { g } } ) } + \\ int e ^ { e ^ { F_ { g } } } dF_ { g }", "SR_flan-t5-large": "mathbf { J } _f { (F_ { g } ) } = e ^ { e ^ { F_ { g } } } and \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g } = \\ int e ^ { e ^ { F_ { g } } } dF_ { g } and 2 \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g } = \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g } + \\ int e ^ { e ^ { F_ { g } } } dF_ { g } and 2 \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g } = z ^ { * } + \\ operatorname { Ei } { (e ^ { F_ { g } } ) } + \\ int \\ mathbf { J } _f { (F_ { g } ) } dF_ { g }", "static_rouge": 0.8947368421052632, "static_bleu": 0.7910073486526668, "static_bleurt": 0.7173314094543457, "static_gleu": 0.8090787716955942, "VR_rouge": 0.00988835725677839, "EE_rouge": 0.0799220272904484, "AG_rouge": 0.05905609093155417, "SR_rouge": 0.1610685003967205, "VR_rouge_abs": -0.003927524088814416, "EE_rouge_abs": 0.10069444444444442, "AG_rouge_abs": 0.10818848167539263, "SR_rouge_abs": 0.16571428571428581, "VR_bleu": 0.0076814096102547635, "EE_bleu": 0.1077784308294385, "AG_bleu": 0.09192653545112506, "SR_bleu": 0.3065716833406506, "VR_bleu_abs": 0.002742476999709531, "EE_bleu_abs": 0.14008099856371337, "AG_bleu_abs": 0.1305772400485523, "SR_bleu_abs": 0.3306304865979086, "VR_bleurt": 0.10194206237792969, "EE_bleurt": 0.0893700122833252, "AG_bleurt": -0.03214609622955322, "SR_bleurt": 0.13693255186080933, "VR_bleurt_abs": 0.10858756303787231, "EE_bleurt_abs": 0.2570304274559021, "AG_bleurt_abs": 0.2284233570098877, "SR_bleurt_abs": 0.27429497241973877, "VR_gleu": 0.007909181052319303, "EE_gleu": 0.09212283044058744, "AG_gleu": 0.07446864857657909, "SR_gleu": 0.23097463284379172, "VR_gleu_abs": 0.0016892374896347317, "EE_gleu_abs": 0.1358406485968111, "AG_gleu_abs": 0.12467254527178462, "SR_gleu_abs": 0.28830313014827014, "ratio_VR_rouge": 1.0185276679841897, "ratio_VR_bleu": 0.9904293235029495, "ratio_VR_bleurt": 1.670688176239089, "ratio_VR_gleu": 0.9947825200835612, "ratio_EE_rouge": 0.8933823529411765, "ratio_EE_bleu": 0.8553163081488417, "ratio_EE_bleurt": 0.6703320940173783, "ratio_EE_gleu": 0.8597592752598049, "ratio_AG_rouge": 0.8803224760227958, "ratio_AG_bleu": 0.8559646535164267, "ratio_AG_bleurt": 0.7400853091908811, "ratio_AG_gleu": 0.8625758110249203, "ratio_SR_rouge": 0.8342857142857142, "ratio_SR_bleu": 0.6693695134020914, "ratio_SR_bleurt": 0.6878896541920355, "ratio_SR_gleu": 0.7116968698517299}, {"prompt": "Given \\Psi{(\\delta)} = \\log{(\\delta)}, then derive \\frac{d}{d \\delta} \\Psi{(\\delta)} = \\frac{1}{\\delta}, then obtain (\\frac{d}{d \\delta} \\Psi{(\\delta)})^{- \\delta} \\frac{d}{d \\delta} \\log{(\\delta)} = \\frac{(\\frac{d}{d \\delta} \\Psi{(\\delta)})^{- \\delta}}{\\delta}", "derivation": "\\Psi{(\\delta)} = \\log{(\\delta)} and \\frac{d}{d \\delta} \\Psi{(\\delta)} = \\frac{d}{d \\delta} \\log{(\\delta)} and \\frac{d}{d \\delta} \\Psi{(\\delta)} = \\frac{1}{\\delta} and \\frac{d}{d \\delta} \\log{(\\delta)} = \\frac{1}{\\delta} and (\\frac{d}{d \\delta} \\Psi{(\\delta)})^{- \\delta} \\frac{d}{d \\delta} \\log{(\\delta)} = \\frac{(\\frac{d}{d \\delta} \\Psi{(\\delta)})^{- \\delta}}{\\delta}", "srepr_derivation": [["premise", "Equality(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), log(Symbol('\\\\delta', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\delta', commutative=True)"], "Equality(Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Derivative(log(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Pow(Symbol('\\\\delta', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(log(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Pow(Symbol('\\\\delta', commutative=True), Integer(-1)))"], [["divide", 4, "Pow(Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Symbol('\\\\delta', commutative=True))"], "Equality(Mul(Pow(Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Mul(Integer(-1), Symbol('\\\\delta', commutative=True))), Derivative(log(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1)))), Mul(Pow(Symbol('\\\\delta', commutative=True), Integer(-1)), Pow(Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Mul(Integer(-1), Symbol('\\\\delta', commutative=True)))))"]], "EE prompt": "Given \\log{(\\delta)} = \\Psi{(\\delta)}, then derive \\frac{1}{\\delta} = \\frac{d}{d \\delta} \\Psi{(\\delta)}, then obtain \\frac{(\\frac{d}{d \\delta} \\Psi{(\\delta)})^{- \\delta}}{\\delta} = (\\frac{d}{d \\delta} \\Psi{(\\delta)})^{- \\delta} \\frac{d}{d \\delta} \\log{(\\delta)}", "EE derivation": "\\log{(\\delta)} = \\Psi{(\\delta)} and \\frac{d}{d \\delta} \\log{(\\delta)} = \\frac{d}{d \\delta} \\Psi{(\\delta)} and \\frac{1}{\\delta} = \\frac{d}{d \\delta} \\Psi{(\\delta)} and \\frac{1}{\\delta} = \\frac{d}{d \\delta} \\log{(\\delta)} and \\frac{(\\frac{d}{d \\delta} \\Psi{(\\delta)})^{- \\delta}}{\\delta} = (\\frac{d}{d \\delta} \\Psi{(\\delta)})^{- \\delta} \\frac{d}{d \\delta} \\log{(\\delta)}", "EE srepr_derivation": [["premise", "Equality(log(Symbol('\\\\delta', commutative=True)), Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\delta', commutative=True)"], "Equality(Derivative(log(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Pow(Symbol('\\\\delta', commutative=True), Integer(-1)), Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))))"], [["substitute_RHS_for_LHS", 3, 2], "Equality(Pow(Symbol('\\\\delta', commutative=True), Integer(-1)), Derivative(log(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))))"], [["divide", 4, "Pow(Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Symbol('\\\\delta', commutative=True))"], "Equality(Mul(Pow(Symbol('\\\\delta', commutative=True), Integer(-1)), Pow(Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Mul(Integer(-1), Symbol('\\\\delta', commutative=True)))), Mul(Pow(Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Mul(Integer(-1), Symbol('\\\\delta', commutative=True))), Derivative(log(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1)))))"]], "AG prompt": "Given \\Psi{(\\delta)} = \\log{(\\delta)}, then derive \\frac{d}{d \\delta} \\Psi{(\\delta)} = \\frac{1}{\\delta}, then obtain \\log{(\\delta)} \\frac{d}{d \\delta} \\log{(\\delta)} = \\frac{\\log{(\\delta)}}{\\delta}", "AG derivation": "\\Psi{(\\delta)} = \\log{(\\delta)} and \\frac{d}{d \\delta} \\Psi{(\\delta)} = \\frac{d}{d \\delta} \\log{(\\delta)} and \\frac{d}{d \\delta} \\Psi{(\\delta)} = \\frac{1}{\\delta} and \\frac{d}{d \\delta} \\log{(\\delta)} = \\frac{1}{\\delta} and \\log{(\\delta)} \\frac{d}{d \\delta} \\log{(\\delta)} = \\frac{\\log{(\\delta)}}{\\delta}", "AG srepr_derivation": [["premise", "Equality(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), log(Symbol('\\\\delta', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\delta', commutative=True)"], "Equality(Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Derivative(log(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Pow(Symbol('\\\\delta', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(log(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Pow(Symbol('\\\\delta', commutative=True), Integer(-1)))"], [["times", 4, "log(Symbol('\\\\delta', commutative=True))"], "Equality(Mul(log(Symbol('\\\\delta', commutative=True)), Derivative(log(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1)))), Mul(Pow(Symbol('\\\\delta', commutative=True), Integer(-1)), log(Symbol('\\\\delta', commutative=True))))"]], "SR prompt": "Given \\Psi{(\\delta)} = \\log{(\\delta)}, then obtain (\\frac{d}{d \\delta} \\Psi{(\\delta)})^{- \\delta} \\frac{d}{d \\delta} \\log{(\\delta)} = \\frac{(\\frac{d}{d \\delta} \\Psi{(\\delta)})^{- \\delta}}{\\delta}", "SR derivation": "\\Psi{(\\delta)} = \\log{(\\delta)} and \\frac{d}{d \\delta} \\Psi{(\\delta)} = \\frac{d}{d \\delta} \\log{(\\delta)} and \\frac{d}{d \\delta} \\Psi{(\\delta)} = \\frac{1}{\\delta} and \\frac{d}{d \\delta} \\log{(\\delta)} = \\frac{1}{\\delta} and (\\frac{d}{d \\delta} \\Psi{(\\delta)})^{- \\delta} \\frac{d}{d \\delta} \\log{(\\delta)} = \\frac{(\\frac{d}{d \\delta} \\Psi{(\\delta)})^{- \\delta}}{\\delta}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), log(Symbol('\\\\delta', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\delta', commutative=True)"], "Equality(Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Derivative(log(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Pow(Symbol('\\\\delta', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(log(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Pow(Symbol('\\\\delta', commutative=True), Integer(-1)))"], [["divide", 4, "Pow(Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Symbol('\\\\delta', commutative=True))"], "Equality(Mul(Pow(Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Mul(Integer(-1), Symbol('\\\\delta', commutative=True))), Derivative(log(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1)))), Mul(Pow(Symbol('\\\\delta', commutative=True), Integer(-1)), Pow(Derivative(Function('\\\\Psi')(Symbol('\\\\delta', commutative=True)), Tuple(Symbol('\\\\delta', commutative=True), Integer(1))), Mul(Integer(-1), Symbol('\\\\delta', commutative=True)))))"]], "VR prompt": "Given \\alpha{(\\kappa)} = \\log{(\\kappa)}, then derive \\frac{d}{d \\kappa} \\alpha{(\\kappa)} = \\frac{1}{\\kappa}, then obtain (\\frac{d}{d \\kappa} \\alpha{(\\kappa)})^{- \\kappa} \\frac{d}{d \\kappa} \\log{(\\kappa)} = \\frac{(\\frac{d}{d \\kappa} \\alpha{(\\kappa)})^{- \\kappa}}{\\kappa}", "VR derivation": "\\alpha{(\\kappa)} = \\log{(\\kappa)} and \\frac{d}{d \\kappa} \\alpha{(\\kappa)} = \\frac{d}{d \\kappa} \\log{(\\kappa)} and \\frac{d}{d \\kappa} \\alpha{(\\kappa)} = \\frac{1}{\\kappa} and \\frac{d}{d \\kappa} \\log{(\\kappa)} = \\frac{1}{\\kappa} and (\\frac{d}{d \\kappa} \\alpha{(\\kappa)})^{- \\kappa} \\frac{d}{d \\kappa} \\log{(\\kappa)} = \\frac{(\\frac{d}{d \\kappa} \\alpha{(\\kappa)})^{- \\kappa}}{\\kappa}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), log(Symbol('\\\\kappa', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\kappa', commutative=True)"], "Equality(Derivative(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Derivative(log(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Pow(Symbol('\\\\kappa', commutative=True), Integer(-1)))"], [["substitute_LHS_for_RHS", 3, 2], "Equality(Derivative(log(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Pow(Symbol('\\\\kappa', commutative=True), Integer(-1)))"], [["divide", 4, "Pow(Derivative(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Symbol('\\\\kappa', commutative=True))"], "Equality(Mul(Pow(Derivative(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Mul(Integer(-1), Symbol('\\\\kappa', commutative=True))), Derivative(log(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1)))), Mul(Pow(Symbol('\\\\kappa', commutative=True), Integer(-1)), Pow(Derivative(Function('\\\\alpha')(Symbol('\\\\kappa', commutative=True)), Tuple(Symbol('\\\\kappa', commutative=True), Integer(1))), Mul(Integer(-1), Symbol('\\\\kappa', commutative=True)))))"]], "static_flan-t5-large": "Psi { ( \\ delta) } = \\ log { ( \\ delta) } and \\ frac { d } { d \\ delta } \\ Psi { ( \\ delta) } = \\ frac { d } { d \\ delta } \\ log { ( \\ delta) } and \\ frac { d } { d \\ delta } \\ Psi { ( \\ delta) } = \\ frac { 1 } { \\ delta } and ( \\ frac { d } { d \\ delta } \\ Psi { ( \\ delta) } ) ^ { - \\ delta } \\ frac { d } { d \\ delta } \\ log { ( \\ delta) } = \\ frac { ( \\ frac { d } { d \\ delta } \\ Psi { ( \\ delta) } ) ^ { - \\ delta } } { \\ delta }", "VR_flan-t5-large": "alpha { ( \\ kappa) } = \\ log { ( \\ kappa) } and \\ frac { d } { d \\ kappa } \\ alpha { ( \\ kappa) } = \\ frac { d } { d \\ kappa } \\ log { ( \\ kappa) } and \\ frac { d } { d \\ kappa } \\ alpha { ( \\ kappa) } = \\ frac { 1 } { \\ kappa } and \\ frac { d } { d \\ kappa } \\ log { ( \\ kappa) } = \\ frac { 1 } { \\ kappa } and ( \\ frac { d } { d \\ kappa } \\ log { ( \\ kappa) } ) ^ { - \\ kappa } \\ frac { d } { d \\ kappa } \\ log { ( \\ kappa) } = \\ frac { ( \\ frac { d } { d \\ kappa } \\ log { ( \\ kappa) } ) ^ { - \\ kappa } } { \\ kappa } and ( \\ frac { d } { d \\ kappa } \\ alpha { ( \\ kappa) } ) ^ { - \\ kappa } \\ frac { d } { d \\ kappa } \\ log { ( \\ kappa) } = \\ frac { ( \\ frac { d } { d \\ kappa } \\ alpha { ( \\ kappa) } ) ^ { - \\ kappa } } { \\ kappa }", "EE_flan-t5-large": "log { ( \\ delta) } = \\ Psi { ( \\ delta) } and \\ frac { 1 } { \\ delta } = \\ frac { d } { d \\ delta } \\ Psi { ( \\ delta) } and \\ frac { 1 } { \\ delta } = \\ frac { d } { d \\ delta } \\ log { ( \\ delta) } and \\ frac { 1 } { \\ delta } = \\ frac { d } { d \\ delta } \\ Psi { ( \\ delta) } and \\ frac { d } { d \\ delta } \\ log { ( \\ delta) } = \\ frac { d } { d \\ delta } \\ log { ( \\ delta) } and ( \\ frac { d } { d \\ delta } \\ log { ( \\ delta) } ) ^ { - \\ delta } = ( \\ frac { d } { d \\ delta } \\ log { ( \\ delta) } ) ^ { - \\ delta } \\ frac { d } { d \\ delta } \\ log { ( \\ delta) } and \\ frac { ( \\ frac { d } { d \\ delta } \\ Psi { ( \\ delta) } ) ^ { - \\ delta } } { \\ delta } = ( \\ frac { d } { d \\ delta } \\ Psi { ( \\ delta) } ) ^ { - \\ delta } \\ frac { d } { d \\ delta } \\ log { ( \\ delta) }", "AG_flan-t5-large": "Psi { ( \\ delta) } = \\ log { ( \\ delta) } and \\ frac { d } { d \\ delta } \\ Psi { ( \\ delta) } = \\ frac { d } { d \\ delta } \\ log { ( \\ delta) } and \\ frac { d } { d \\ delta } \\ Psi { ( \\ delta) } = \\ frac { 1 } { \\ delta } and \\ log { ( \\ delta) } \\ frac { d } { d \\ delta } \\ Psi { ( \\ delta) } = \\ frac { \\ log { ( \\ delta) } } { \\ delta } and \\ log { ( \\ delta) } \\ frac { d } { d \\ delta } \\ log { ( \\ delta) } = \\ frac { \\ log { ( \\ delta) } } { \\ delta }", "SR_flan-t5-large": "Psi { ( \\ delta) } = \\ log { ( \\ delta) } and \\ frac { d } { d \\ delta } \\ Psi { ( \\ delta) } = \\ frac { d } { d \\ delta } \\ log { ( \\ delta) } and ( \\ frac { d } { d \\ delta } \\ Psi { ( \\ delta) } ) ^ { - \\ delta } = ( \\ frac { d } { d \\ delta } \\ log { ( \\ delta) } ) ^ { - \\ delta } and ( \\ frac { d } { d \\ delta } \\ Psi { ( \\ delta) } ) ^ { - \\ delta } \\ frac { d } { d \\ delta } \\ log { ( \\ delta) } = \\ frac { ( \\ frac { d } { d \\ delta } \\ Psi { ( \\ delta) } ) ^ { - \\ delta } } { \\ delta }", "static_rouge": 0.9074074074074074, "static_bleu": 0.8318949736235522, "static_bleurt": 0.7504884004592896, "static_gleu": 0.8433420365535248, "VR_rouge": 0.07052797478329398, "EE_rouge": 0.11546109868257515, "AG_rouge": 0.016318298496516337, "SR_rouge": -0.012946574893477503, "VR_rouge_abs": 0.09639021865700609, "EE_rouge_abs": 0.2780148762346055, "AG_rouge_abs": 0.021452145214521434, "SR_rouge_abs": 0.08737864077669899, "VR_bleu": 0.12673450034572042, "EE_bleu": 0.17495451127272665, "AG_bleu": -0.06164112788299525, "SR_bleu": -0.05764630532505444, "VR_bleu_abs": 0.2716407925912361, "EE_bleu_abs": 0.419127613468821, "AG_bleu_abs": -0.0554902026689873, "SR_bleu_abs": 0.17347459866480663, "VR_bleurt": -0.07116734981536865, "EE_bleurt": -0.06775438785552979, "AG_bleurt": -0.07545280456542969, "SR_bleurt": -0.00525665283203125, "VR_bleurt_abs": -0.04970812797546387, "EE_bleurt_abs": -0.010569512844085693, "AG_bleurt_abs": -0.0463905930519104, "SR_bleurt_abs": 0.03689777851104736, "VR_gleu": 0.13816643581415322, "EE_gleu": 0.18639520979537727, "AG_gleu": -0.05046327318098842, "SR_gleu": -0.04699738903394257, "VR_gleu_abs": 0.27714125760727404, "EE_gleu_abs": 0.41970719560748626, "AG_gleu_abs": -0.04244937883654121, "SR_gleu_abs": 0.17292225201072386, "ratio_VR_rouge": 0.7291893856779352, "ratio_VR_bleu": 0.5874383880552454, "ratio_VR_bleurt": 1.1145949652301257, "ratio_VR_gleu": 0.5885848772729226, "ratio_EE_rouge": 0.7171917638303151, "ratio_EE_bleu": 0.5646154960889463, "ratio_EE_bleurt": 1.0137567203138445, "ratio_EE_gleu": 0.5643689541526633, "ratio_AG_rouge": 0.9742574257425742, "ratio_AG_bleu": 1.0736273513800003, "ratio_AG_bleurt": 1.0654378476862534, "ratio_AG_gleu": 1.0551122443877807, "ratio_SR_rouge": 0.912621359223301, "ratio_SR_bleu": 0.8265254013351934, "ratio_SR_bleurt": 0.9548928665321657, "ratio_SR_gleu": 0.8270777479892761}, {"prompt": "Given \\mathbf{S}{(G,\\Omega)} = G + \\Omega and \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} = (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)}, then derive \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} = 1, then obtain \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} = (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)}", "derivation": "\\mathbf{S}{(G,\\Omega)} = G + \\Omega and \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} = \\frac{\\partial}{\\partial \\Omega} (G + \\Omega) and \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} = 1 and (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} = G + \\Omega and \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} = (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} and \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} = (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} (G + \\Omega) and \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} = (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)}", "srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\Omega', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))), Derivative(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))), Integer(1))"], [["divide", 3, "Pow(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Integer(-1))"], "Equality(Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))), Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)))"], ["renaming_premise", "Equality(Function('f_{\\\\mathbf{p}}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Function('f_{\\\\mathbf{p}}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 6, 4], "Equality(Function('f_{\\\\mathbf{p}}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))))"]], "EE prompt": "Given G + \\Omega = \\mathbf{S}{(G,\\Omega)} and (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} = \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)}, then derive 1 = \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)}, then obtain (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} = \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)}", "EE derivation": "G + \\Omega = \\mathbf{S}{(G,\\Omega)} and \\frac{\\partial}{\\partial \\Omega} (G + \\Omega) = \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} and 1 = \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} and G + \\Omega = (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} and (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} = \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} and (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} (G + \\Omega) = \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} and (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} = \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)}", "EE srepr_derivation": [["premise", "Equality(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\Omega', commutative=True)"], "Equality(Derivative(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Integer(1), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))))"], [["divide", 3, "Pow(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Integer(-1))"], "Equality(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))))"], ["renaming_premise", "Equality(Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))), Function('f_{\\\\mathbf{p}}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)))"], [["substitute_RHS_for_LHS", 5, 2], "Equality(Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))), Function('f_{\\\\mathbf{p}}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)))"], [["substitute_LHS_for_RHS", 6, 4], "Equality(Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))), Function('f_{\\\\mathbf{p}}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)))"]], "AG prompt": "Given \\mathbf{S}{(G,\\Omega)} = G + \\Omega and \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} = (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)}, then derive \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} = 1, then obtain - \\Omega + \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} = - \\Omega + (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} (G + \\Omega)", "AG derivation": "\\mathbf{S}{(G,\\Omega)} = G + \\Omega and \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} = \\frac{\\partial}{\\partial \\Omega} (G + \\Omega) and \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} = 1 and (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} = G + \\Omega and \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} = (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} and \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} = (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} (G + \\Omega) and - \\Omega + \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} = - \\Omega + (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} (G + \\Omega)", "AG srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\Omega', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))), Derivative(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))), Integer(1))"], [["divide", 3, "Pow(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Integer(-1))"], "Equality(Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))), Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)))"], ["renaming_premise", "Equality(Function('f_{\\\\mathbf{p}}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Function('f_{\\\\mathbf{p}}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))))"], [["minus", 6, "Symbol('\\\\Omega', commutative=True)"], "Equality(Add(Mul(Integer(-1), Symbol('\\\\Omega', commutative=True)), Function('f_{\\\\mathbf{p}}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True))), Add(Mul(Integer(-1), Symbol('\\\\Omega', commutative=True)), Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))))))"]], "SR prompt": "Given \\mathbf{S}{(G,\\Omega)} = G + \\Omega and \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} = (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)}, then obtain \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} = (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)}", "SR derivation": "\\mathbf{S}{(G,\\Omega)} = G + \\Omega and \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} = \\frac{\\partial}{\\partial \\Omega} (G + \\Omega) and \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} = 1 and (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} = G + \\Omega and \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} = (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} and \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} = (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} (G + \\Omega) and \\operatorname{f_{\\mathbf{p}}}{(G,\\Omega)} = (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} (G + \\Omega) \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)} \\frac{\\partial}{\\partial \\Omega} \\mathbf{S}{(G,\\Omega)}", "SR srepr_derivation": [["premise", "Equality(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\Omega', commutative=True)"], "Equality(Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))), Derivative(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))), Integer(1))"], [["divide", 3, "Pow(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Integer(-1))"], "Equality(Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))), Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)))"], ["renaming_premise", "Equality(Function('f_{\\\\mathbf{p}}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Function('f_{\\\\mathbf{p}}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 6, 4], "Equality(Function('f_{\\\\mathbf{p}}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Mul(Add(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1))), Derivative(Function('\\\\mathbf{S}')(Symbol('G', commutative=True), Symbol('\\\\Omega', commutative=True)), Tuple(Symbol('\\\\Omega', commutative=True), Integer(1)))))"]], "VR prompt": "Given \\upsilon{(\\xi,\\tau)} = \\tau + \\xi and \\zeta{(\\xi,\\tau)} = (\\tau + \\xi) \\frac{\\partial}{\\partial \\tau} \\upsilon{(\\xi,\\tau)}, then derive \\frac{\\partial}{\\partial \\tau} \\upsilon{(\\xi,\\tau)} = 1, then obtain \\zeta{(\\xi,\\tau)} = (\\tau + \\xi) \\frac{\\partial}{\\partial \\tau} (\\tau + \\xi) \\frac{\\partial}{\\partial \\tau} \\upsilon{(\\xi,\\tau)} \\frac{\\partial}{\\partial \\tau} \\upsilon{(\\xi,\\tau)}", "VR derivation": "\\upsilon{(\\xi,\\tau)} = \\tau + \\xi and \\frac{\\partial}{\\partial \\tau} \\upsilon{(\\xi,\\tau)} = \\frac{\\partial}{\\partial \\tau} (\\tau + \\xi) and \\frac{\\partial}{\\partial \\tau} \\upsilon{(\\xi,\\tau)} = 1 and (\\tau + \\xi) \\frac{\\partial}{\\partial \\tau} \\upsilon{(\\xi,\\tau)} = \\tau + \\xi and \\zeta{(\\xi,\\tau)} = (\\tau + \\xi) \\frac{\\partial}{\\partial \\tau} \\upsilon{(\\xi,\\tau)} and \\zeta{(\\xi,\\tau)} = (\\tau + \\xi) \\frac{\\partial}{\\partial \\tau} (\\tau + \\xi) and \\zeta{(\\xi,\\tau)} = (\\tau + \\xi) \\frac{\\partial}{\\partial \\tau} (\\tau + \\xi) \\frac{\\partial}{\\partial \\tau} \\upsilon{(\\xi,\\tau)} \\frac{\\partial}{\\partial \\tau} \\upsilon{(\\xi,\\tau)}", "VR srepr_derivation": [["premise", "Equality(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True), Symbol('\\\\tau', commutative=True)), Add(Symbol('\\\\tau', commutative=True), Symbol('\\\\xi', commutative=True)))"], [["differentiate", 1, "Symbol('\\\\tau', commutative=True)"], "Equality(Derivative(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Derivative(Add(Symbol('\\\\tau', commutative=True), Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))))"], [["evaluate_derivatives", 2], "Equality(Derivative(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Integer(1))"], [["divide", 3, "Pow(Add(Symbol('\\\\tau', commutative=True), Symbol('\\\\xi', commutative=True)), Integer(-1))"], "Equality(Mul(Add(Symbol('\\\\tau', commutative=True), Symbol('\\\\xi', commutative=True)), Derivative(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1)))), Add(Symbol('\\\\tau', commutative=True), Symbol('\\\\xi', commutative=True)))"], ["renaming_premise", "Equality(Function('\\\\zeta')(Symbol('\\\\xi', commutative=True), Symbol('\\\\tau', commutative=True)), Mul(Add(Symbol('\\\\tau', commutative=True), Symbol('\\\\xi', commutative=True)), Derivative(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1)))))"], [["substitute_LHS_for_RHS", 5, 2], "Equality(Function('\\\\zeta')(Symbol('\\\\xi', commutative=True), Symbol('\\\\tau', commutative=True)), Mul(Add(Symbol('\\\\tau', commutative=True), Symbol('\\\\xi', commutative=True)), Derivative(Add(Symbol('\\\\tau', commutative=True), Symbol('\\\\xi', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1)))))"], [["substitute_RHS_for_LHS", 6, 4], "Equality(Function('\\\\zeta')(Symbol('\\\\xi', commutative=True), Symbol('\\\\tau', commutative=True)), Mul(Add(Symbol('\\\\tau', commutative=True), Symbol('\\\\xi', commutative=True)), Derivative(Mul(Add(Symbol('\\\\tau', commutative=True), Symbol('\\\\xi', commutative=True)), Derivative(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1)))), Tuple(Symbol('\\\\tau', commutative=True), Integer(1))), Derivative(Function('\\\\upsilon')(Symbol('\\\\xi', commutative=True), Symbol('\\\\tau', commutative=True)), Tuple(Symbol('\\\\tau', commutative=True), Integer(1)))))"]], "static_flan-t5-large": "mathbf { S } { (G, \\ Omega) } = G + \\ Omega and \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } = \\ frac { \\ partial } { \\ partial \\ Omega } (G + \\ Omega) and \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } = 1 and \\ frac { \\ partial } { \\ partial \\ Omega } (G + \\ Omega) = 1 and \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } = \\ frac { \\ partial } { \\ partial \\ Omega } (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } and \\ operatorname { f_ { \\ mathbf { p } } } { (G, \\ Omega) } = (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } and \\ operatorname { f_ { \\ mathbf { p } } } { (G, \\ Omega) } = (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } (G + \\ Omega) and \\ operatorname { f_ { \\ mathbf { p } } } { (G, \\ Omega) } = (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) }", "VR_flan-t5-large": "( \\ xi, \\ tau) } = \\ tau + \\ xi and \\ frac { \\ partial } { \\ partial \\ tau } \\ usilon { ( \\ xi, \\ tau) } = \\ frac { \\ partial } { \\ partial \\ tau } ( \\ tau + \\ xi) and \\ frac { \\ partial } { \\ partial \\ tau } \\ usilon { ( \\ xi, \\ tau) } = 1 and \\ frac { \\ partial } { \\ partial \\ tau } ( \\ tau + \\ xi) = 1 and \\ frac { \\ partial } { \\ partial \\ tau } ( \\ tau + \\ xi) \\ frac { \\ partial } { \\ partial \\ tau } \\ usilon { ( \\ xi, \\ tau) } = \\ frac { \\ partial } { \\ partial \\ tau } ( \\ tau + \\ xi) \\ frac { \\ partial } { \\ partial \\ tau } \\ usilon { ( \\ xi, \\ tau) } and \\ zeta { ( \\ xi, \\ tau) } = ( \\ tau + \\ xi) \\ frac { \\ partial } { \\ partial \\ tau } \\ usilon { ( \\ xi, \\ tau) } and \\ zeta { ( \\ xi, \\ tau) } = ( \\ tau + \\ xi) \\ frac { \\ partial } { \\ partial \\ tau } ( \\ tau + \\ xi) \\ frac { \\ partial } { \\ partial \\ tau } \\ usilon { ( \\ xi, \\ tau) } and \\ zeta { ( \\ xi, \\ tau) } = ( \\ tau + \\ xi) \\ frac { \\ partial } { \\ partial \\ tau } ( \\ tau + \\ xi) \\ frac { \\ partial } { \\ partial \\ tau } \\ upsilon { ( \\ xi, \\ tau) } \\ frac { \\ partial } { \\ partial \\ tau } \\ upsilon { ( \\ xi, \\ tau) }", "EE_flan-t5-large": "mathbf { S } { (G, \\ Omega) } = \\ mathbf { S } { (G, \\ Omega) } and \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } = \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } and (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } = (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } and (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } = (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } and (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } = \\ operatorname { f_ { \\ mathbf { p } } } { (G, \\ Omega) } and (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } = \\ operatorname { f_ { \\ mathbf { p } } } { (G, \\ Omega) }", "AG_flan-t5-large": "mathbf { S } { (G, \\ Omega) } = G + \\ Omega and \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } = \\ frac { \\ partial } { \\ partial \\ Omega } (G + \\ Omega) and \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } = 1 and \\ frac { \\ partial } { \\ partial \\ Omega } (G + \\ Omega) = 1 and \\ operatorname { f_ { \\ mathbf { p } } } { (G, \\ Omega) } = (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } and \\ operatorname { f_ { \\ mathbf { p } } } { (G, \\ Omega) } = (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } (G + \\ Omega) and - \\ Omega + \\ operatorname { f_ { \\ mathbf { p } } } { (G, \\ Omega) } = - \\ Omega + (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } (G + \\ Omega)", "SR_flan-t5-large": "mathbf { S } { (G, \\ Omega) } = G + \\ Omega and \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } = \\ frac { \\ partial } { \\ partial \\ Omega } (G + \\ Omega) and (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } = (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } (G + \\ Omega) and \\ operatorname { f_ { \\ mathbf { p } } } { (G, \\ Omega) } = (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } and \\ operatorname { f_ { \\ mathbf { p } } } { (G, \\ Omega) } = (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } and \\ operatorname { f_ { \\ mathbf { p } } } { (G, \\ Omega) } = (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } (G + \\ Omega) \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) } \\ frac { \\ partial } { \\ partial \\ Omega } \\ mathbf { S } { (G, \\ Omega) }", "static_rouge": 0.8823529411764706, "static_bleu": 0.7949564743606632, "static_bleurt": 0.7084075212478638, "static_gleu": 0.7950310559006211, "VR_rouge": 0.13594145792288204, "EE_rouge": 0.0005347593582887278, "AG_rouge": -0.056194544857049, "SR_rouge": -0.07135076252723316, "VR_rouge_abs": -0.040694365395560594, "EE_rouge_abs": 0.07639208467556369, "AG_rouge_abs": 0.13186661131866617, "SR_rouge_abs": 0.09917355371900827, "VR_bleu": 0.07927907319187366, "EE_bleu": -0.038933423480600804, "AG_bleu": -0.12111964902159822, "SR_bleu": -0.13148160813988108, "VR_bleu_abs": -0.04431258692102241, "EE_bleu_abs": 0.12053614162207404, "AG_bleu_abs": 0.2557558261245848, "SR_bleu_abs": 0.18616099543035625, "VR_bleurt": -0.05449789762496948, "EE_bleurt": 0.27693137526512146, "AG_bleurt": -0.0860750675201416, "SR_bleurt": -0.05366623401641846, "VR_bleurt_abs": -0.1324359029531479, "EE_bleurt_abs": 0.05446124076843262, "AG_bleurt_abs": 0.07924789190292358, "SR_bleurt_abs": 0.12659388780593872, "VR_gleu": 0.07886811240522029, "EE_gleu": -0.03970874719361239, "AG_gleu": -0.12266805914362677, "SR_gleu": -0.13154750503917334, "VR_gleu_abs": -0.03843083960991106, "EE_gleu_abs": 0.11466278747045144, "AG_gleu_abs": 0.20464833618849831, "SR_gleu_abs": 0.17453416149068324, "ratio_VR_rouge": 1.189907038512616, "ratio_VR_bleu": 1.1114419250951697, "ratio_VR_bleurt": 0.1303630174121664, "ratio_VR_gleu": 1.0893964692001157, "ratio_EE_rouge": 0.9156504065040652, "ratio_EE_bleu": 0.8704083942383555, "ratio_EE_bleurt": 0.9206971438550068, "ratio_EE_gleu": 0.8768963621698544, "ratio_AG_rouge": 0.8533169154994612, "ratio_AG_bleu": 0.693114903654582, "ratio_AG_bleurt": 0.9021010919864298, "ratio_AG_gleu": 0.7567458421495689, "ratio_SR_rouge": 0.9008264462809917, "ratio_SR_bleu": 0.8138390045696438, "ratio_SR_bleurt": 0.849613066932071, "ratio_SR_gleu": 0.8254658385093168}]